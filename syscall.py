# Syscall functions for the Windows Malware Emulator

default_ret_code = 0x0

def __set_app_type(self, args):
    at = int(args[0], 16)
    if at == 0:
        app_type = 'at=UNKNWON_APP'
    elif at == 1:
        app_type = 'at=CONSOLE_APP'
    elif at == 2:
        app_type = 'at=GUI_APP'
    else:
        app_type = 'at=INVALID_VALUE'
    ret_args = [app_type]
    return default_ret_code, ret_args

def GetStartupInfoA(self, args):
    lpStartupInfo = int(args[0], 16)
    ret_code = None
    return ret_code, 'lpStartupInfo=' + hex(lpStartupInfo)

def GetModuleHandleA(self, args):
    lpModuleName = int(args[0], 16)
    return default_ret_code, 'lpModuleName=' + hex(lpModuleName)

def GetSystemTimeAsFileTime(self, args):
    timestruct = int(args[0], 16)
    ret_code = None
    return ret_code, 'lpSystemTimeAsFileTime=' + hex(timestruct)

def GetCurrentThreadId(self, args):
    tid = self.thread_ID
    return tid, ''

def GetCurrentProcessId(self, args):
    pid = self.process_ID
    return pid, ''

def IsProcessorFeaturePresent(self, args):
    feature = int(args[0], 16)
    if feature == 25:
        feature_type = 'PF_ARM_64BITS_LOADSTORE_ATOMIC'
    elif feature == 24:
        feature_type = 'PF_ARM_DIVIDE_INSTRUCTION_AVAILABLE'
    elif feature == 26:
        feature_type = 'PF_ARM_EXTERNAL_CACHE_AVAILABLE'
    elif feature == 27:
        feature_type = 'PF_ARM_FMAC_INSTRUCTION_AVAILABLE'
    elif feature == 18:
        feature_type = 'PF_ARM_VFP_32_REGISTERS_AVAILABLE'
    elif feature == 7:
        feature_type = 'PF_3DNOW_INSTRUCTION_AVAILABLE'
    elif feature == 16:
        feature_type = 'PF_CHANNELS_ENABLED'
    elif feature == 2:
        feature_type = 'PF_COMPARE_EXCHANGE_DOUBLE'
    elif feature == 14:
        feature_type = 'PF_COMPARE_EXCHANGE128'
    else:
        feature_type = 'UNKNOWN'
    return 0x1, 'ProcessorFeature=' + feature_type
