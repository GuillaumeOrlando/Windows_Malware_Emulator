AbortDoc;The AbortDoc function stops the current print job and erases everything drawn since the last call to the StartDoc function.;HDC hdc
AbortPath;The AbortPath function closes and discards any paths in the specified device context.;HDC hdc
AbortSystemShutdownA;Stops a system shutdown that has been initiated.;LPSTR lpMachineName
AbortSystemShutdownW;Stops a system shutdown that has been initiated.;LPWSTR lpMachineName
AcceptEx;Accepts a new connection, returns the local and remote address, and receives the first block of data sent by the client application. Note  This function is a Microsoft-specific extension to the Windows Sockets specification. .;SOCKET sListenSocket, SOCKET sAcceptSocket, PVOID lpOutputBuffer, DWORD dwReceiveDataLength, DWORD dwLocalAddressLength, DWORD dwRemoteAddressLength, LPDWORD lpdwBytesReceived, LPOVERLAPPED lpOverlapped
acceptFilePKCS7;Accepts and processes a file that contains a PKCS;BSTR wszPKCS7FileName
acceptFilePKCS7WStr;Accepts and processes a PKCS;LPCWSTR wszPKCS7FileName
acceptFileResponse;Accepts delivery of the credentials issued in response to an earlier call to createFileRequest, and it places the credentials in the appropriate store.;BSTR strResponseFileName
acceptFileResponseWStr;Accepts delivery of the credentials issued in response to an earlier call to createFileRequestWStr, and it places the credentials in the appropriate store.;LPCWSTR pwszResponseFileName
acceptPKCS7;Accepts and processes a PKCS;BSTR PKCS7
acceptPKCS7Blob;Accepts and processes a PKCS;PCRYPT_DATA_BLOB pBlobPKCS7
acceptResponse;Accepts delivery of the credentials issued in response to an earlier call to createRequest and places the credentials in the appropriate store.;BSTR strResponse
acceptResponseBlob;Accepts delivery of the credentials issued in response to an earlier call to createRequestWStr and places the credentials in the appropriate store.;PCRYPT_DATA_BLOB pblobResponse
AcceptSecurityContext;Lets the server component of a transport application establish a security context between the server and a remote client.;PCredHandle phCredential, PCtxtHandle phContext, PSecBufferDesc pInput, unsigned long fContextReq, unsigned long TargetDataRep, PCtxtHandle phNewContext, PSecBufferDesc pOutput, unsigned long *pfContextAttr, PTimeStamp ptsExpiry
accept;The accept function permits an incoming connection attempt on a socket.;SOCKET s, sockaddr *addr, int *addrlen
AccessCheck2;Returns a value that specifies whether the principal represented by the current client context is allowed to perform the specified operation.;BSTR bstrObjectName, BSTR bstrScopeName, long lOperation, unsigned long *plResult
AccessCheckAndAuditAlarmA;Determines whether a security descriptor grants a specified set of access rights to the client being impersonated by the calling thread.;LPCSTR SubsystemName, LPVOID HandleId, LPSTR ObjectTypeName, LPSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, DWORD DesiredAccess, PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, LPDWORD GrantedAccess, LPBOOL AccessStatus, LPBOOL pfGenerateOnClose
AccessCheckByTypeAndAuditAlarmA;Determines whether a security descriptor grants a specified set of access rights to the client being impersonated by the calling thread.;LPCSTR SubsystemName, LPVOID HandleId, LPCSTR ObjectTypeName, LPCSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, LPDWORD GrantedAccess, LPBOOL AccessStatus, LPBOOL pfGenerateOnClose
AccessCheckByType;Determines whether a security descriptor grants a specified set of access rights to the client identified by an access token.;PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, DWORD DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, LPDWORD PrivilegeSetLength, LPDWORD GrantedAccess, LPBOOL AccessStatus
AccessCheckByTypeResultListAndAuditAlarmA;Determines whether a security descriptor grants a specified set of access rights to the client being impersonated by the calling thread.;LPCSTR SubsystemName, LPVOID HandleId, LPCSTR ObjectTypeName, LPCSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, LPDWORD GrantedAccess, LPDWORD AccessStatusList, LPBOOL pfGenerateOnClose
AccessCheckByTypeResultListAndAuditAlarmByHandleA;Determines whether a security descriptor grants a specified set of access rights to the client that the calling thread is impersonating.;LPCSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken, LPCSTR ObjectTypeName, LPCSTR ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, DWORD DesiredAccess, AUDIT_EVENT_TYPE AuditType, DWORD Flags, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOL ObjectCreation, LPDWORD GrantedAccess, LPDWORD AccessStatusList, LPBOOL pfGenerateOnClose
AccessCheckByTypeResultList;Determines whether a security descriptor grants a specified set of access rights to the client identified by an access token.;PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, DWORD DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, LPDWORD PrivilegeSetLength, LPDWORD GrantedAccessList, LPDWORD AccessStatusList
AccessCheck;Determines whether a security descriptor grants a specified set of access rights to the client identified by an access token.;PSECURITY_DESCRIPTOR pSecurityDescriptor, HANDLE ClientToken, DWORD DesiredAccess, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, LPDWORD PrivilegeSetLength, LPDWORD GrantedAccess, LPBOOL AccessStatus
AccessCheck;Determines whether the current client context is allowed to perform the specified operations.;BSTR bstrObjectName, VARIANT varScopeNames, VARIANT varOperations, VARIANT varParameterNames, VARIANT varParameterValues, VARIANT varInterfaceNames, VARIANT varInterfaceFlags, VARIANT varInterfaces, VARIANT *pvarResults
AccessNtmsLibraryDoor;The AccessNtmsLibraryDoor function unlocks the door of the specified library. If the library is busy, RSM queues the request and returns successfully.;HANDLE hSession, LPNTMS_GUID lpLibraryId, DWORD dwAction
AcquireCredentialsHandleA;The AcquireCredentialsHandle (CredSSP) function acquires a handle to preexisting credentials of a security principal.;LPSTR pszPrincipal, LPSTR pszPackage, unsigned long fCredentialUse, void *pvLogonId, void *pAuthData, SEC_GET_KEY_FN pGetKeyFn, void *pvGetKeyArgument, PCredHandle phCredential, PTimeStamp ptsExpiry
AcquireCredentialsHandleW;The AcquireCredentialsHandle (CredSSP) function acquires a handle to preexisting credentials of a security principal.;PSECURITY_STRING pPrincipal, PSECURITY_STRING pPackage, unsigned long fCredentialUse, void *pvLogonId, void *pAuthData, SEC_GET_KEY_FN pGetKeyFn, void *pvGetKeyArgument, PCredHandle phCredential, PTimeStamp ptsExpiry
AcquireSRWLockExclusive;Acquires a slim reader/writer (SRW) lock in exclusive mode.;PSRWLOCK SRWLock
AcquireSRWLockShared;Acquires a slim reader/writer (SRW) lock in shared mode.;PSRWLOCK SRWLock
ActivateActCtx;The ActivateActCtx function activates the specified activation context.;HANDLE hActCtx, ULONG_PTR *lpCookie
ActivateAudioInterfaceAsync;Enables Windows Store apps to access preexisting Component Object Model (COM) interfaces in the WASAPI family.;LPCWSTR deviceInterfacePath, REFIID riid, PROPVARIANT *activationParams, IActivateAudioInterfaceCompletionHandler *completionHandler, IActivateAudioInterfaceAsyncOperation **activationOperation
Activate;Creates the dialog box window for the property page.;HWND hWndParent, LPCRECT pRect, BOOL bModal
ActivateKeyboardLayout;Sets the input locale identifier (formerly called the keyboard layout handle) for the calling thread or the current process. The input locale identifier specifies a locale as well as the physical layout of the keyboard.;HKL hkl, UINT Flags
ActivateMe;Asks a document site to activate the document making the call as a document object rather than an in-place-active object and, optionally, specifies which view of the object document to activate.;IOleDocumentView *pViewToActivate
AddAccessAllowedAce;Adds an access-allowed access control entry (ACE) to an access control list (ACL). The access is granted to a specified security identifier (SID).;PACL pAcl, DWORD dwAceRevision, DWORD AccessMask, PSID pSid
AddAccessAllowedAceEx;Adds an access-allowed access control entry (ACE) to the end of a discretionary access control list (DACL).;PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, PSID pSid
AddAccessAllowedObjectAce;Adds an access-allowed access control entry (ACE) to the end of a discretionary access control list (DACL).;PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, GUID *ObjectTypeGuid, GUID *InheritedObjectTypeGuid, PSID pSid
AddAccessDeniedAce;Adds an access-denied access control entry (ACE) to an access control list (ACL). The access is denied to a specified security identifier (SID).;PACL pAcl, DWORD dwAceRevision, DWORD AccessMask, PSID pSid
AddAccessDeniedAceEx;Adds an access-denied access control entry (ACE) to the end of a discretionary access control list (DACL).;PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, PSID pSid
AddAccessDeniedObjectAce;Adds an access-denied access control entry (ACE) to the end of a discretionary access control list (DACL). The new ACE can deny access to an object, or to a property set or property on an object.;PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, GUID *ObjectTypeGuid, GUID *InheritedObjectTypeGuid, PSID pSid
AddAce;Adds one or more access control entries (ACEs) to a specified access control list (ACL).;PACL pAcl, DWORD dwAceRevision, DWORD dwStartingAceIndex, LPVOID pAceList, DWORD nAceListLength
Add;Adds an ICertificationAuthority object to the collection.;ICertificationAuthority *pVal
Add;Adds an ICertSrvSetupKeyInformation object to the collection.;ICertSrvSetupKeyInformation *pIKeyInformation
Add;Adds an ICryptAttribute object to the collection.;ICryptAttribute *pVal
Add;Adds an ICspAlgorithm object to the collection.;ICspAlgorithm *pVal
Add;Adds an ICspInformation object to the collection.;ICspInformation *pVal
Add;Adds an ICspStatus object to the collection.;ICspStatus *pVal
Add;Adds an IObjectId object to the collection.;IObjectId *pVal
Add;Adds an ISignerCertificate object to the collection.;ISignerCertificate *pVal
Add;Adds an ISmimeCapability object to the collection.;ISmimeCapability *pVal
Add;Adds an IX509Attribute object to the collection.;IX509Attribute *pVal
Add;Adds an IX509CertificateTemplate object to the collection.;IX509CertificateTemplate *pVal
Add;Adds an IX509Extension object to the collection.;IX509Extension *pVal
Add;Adds an IX509NameValuePair object to the collection.;IX509NameValuePair *pVal
Add;Adds an IX509PolicyServerUrl object to the collection.;IX509PolicyServerUrl *pVal
Add;Adds an object to the collection.;IAlternativeName *pVal
Add;Adds an object to the collection.;ICertificatePolicy *pVal
Add;Adds an object to the collection.;IPolicyQualifier *pVal
Add;Adds a property to the collection.;ICertProperty *pVal
Add;Adds a simple undo unit to the collection.;IOleUndoUnit *pUU
Add;Adds a simple undo unit to the collection. While a parent undo unit is open, the undo manager adds undo units to it by calling IOleParentUndoUnit::Add.;IOleUndoUnit *pUU
AddApplicationGroups;Adds the specified array of existing IAzApplicationGroup objects to the client context object.;VARIANT varApplicationGroups
AddAppMember;Adds the specified IAzApplicationGroup object to the list of application groups that belong to this application group.;BSTR bstrProp, VARIANT varReserved
AddAppMember;Adds the specified IAzApplicationGroup object to the list of application groups that belong to this role.;BSTR bstrProp, VARIANT varReserved
AddAppNonMember;Adds the specified IAzApplicationGroup object to the list of application groups that are refused membership in this application group.;BSTR bstrProp, VARIANT varReserved
AddAtomA;Adds a character string to the local atom table and returns a unique value (an atom) identifying the string.;LPCSTR lpString
AddAtomW;Adds a character string to the local atom table and returns a unique value (an atom) identifying the string.;LPCWSTR lpString
addAttributeToRequest;Adds an attribute to the certificate request. This method was first defined in the ICEnroll4 interface.;LONG Flags, BSTR strName, BSTR strValue
addAttributeToRequestWStr;Adds an attribute to the certificate request.;LONG Flags, LPCWSTR pwszName, PCRYPT_DATA_BLOB pblobValue
AddAuditAccessAce;Adds a system-audit access control entry (ACE) to a system access control list (ACL). The access of a specified security identifier (SID) is audited.;PACL pAcl, DWORD dwAceRevision, DWORD dwAccessMask, PSID pSid, BOOL bAuditSuccess, BOOL bAuditFailure
AddAuditAccessAceEx;Adds a system-audit access control entry (ACE) to the end of a system access control list (SACL).;PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD dwAccessMask, PSID pSid, BOOL bAuditSuccess, BOOL bAuditFailure
AddAuditAccessObjectAce;Adds a system-audit access control entry (ACE) to the end of a system access control list (SACL).;PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, GUID *ObjectTypeGuid, GUID *InheritedObjectTypeGuid, PSID pSid, BOOL bAuditSuccess, BOOL bAuditFailure
AddAuthenticatedAttributesToPKCS7Request;The AddAuthenticatedAttributesToPKCS7Request method adds authenticated attributes to a PKCS;PCRYPT_ATTRIBUTES pAttributes
AddAvailableCsps;Adds the providers installed on the computer to the collection.;
AddAvailableSmimeCapabilities;Adds ISmimeCapability objects to the collection by identifying the encryption algorithms supported by the default RSA cryptographic provider.;VARIANT_BOOL MachineContext
addBlobPropertyToCertificate;Adds a BLOB property to a certificate.;LONG lPropertyId, LONG lReserved, BSTR bstrProperty
addBlobPropertyToCertificateWStr;The IEnroll4::addBlobPropertyToCertificateWStr method adds a BLOB property to a certificate.;LONG lPropertyId, LONG lReserved, PCRYPT_DATA_BLOB pBlobProperty
AddCertificate;Add an endorsement key certificate to the key storage provider (KSP) that supports endorsement keys.;EncodingType Encoding, BSTR strCertificate
addCertTypeToRequest;Adds a certificate template to a request (used to support the enterprise certification authority (CA)). This method was first defined by the ICEnroll2 interface.;BSTR CertType
addCertTypeToRequestEx;Adds a certificate template (or &quot;certificate type&quot;) to a request.;LONG lType, BSTR bstrOIDOrName, LONG lMajorVersion, BOOL fMinorVersion, LONG lMinorVersion
AddCertTypeToRequestWStr;Adds a certificate template to a request (used to support the enterprise certification authority (CA)).;LPWSTR szw
AddCertTypeToRequestWStrEx;Adds a certificate template (also known as certificate type) to a request.;LONG lType, LPCWSTR pwszOIDOrName, LONG lMajorVersion, BOOL fMinorVersion, LONG lMinorVersion
AddClipboardFormatListener;Places the given window in the system-maintained clipboard format listener list.;HWND hwnd
AddConditionalAce;Adds a conditional access control entry (ACE) to the specified access control list (ACL).;PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, UCHAR AceType, DWORD AccessMask, PSID pSid, PWCHAR ConditionStr, DWORD *ReturnLength
AddConnection;Increments the count of an object's strong external connections.;DWORD extconn, DWORD reserved
AddConnectNotify;Called before and after each add connection operation (WNetAddConnection, WNetAddConnection2, and WNetAddConnection3) is attempted by the Multiple Provider Router (MPR).;LPNOTIFYINFO lpNotifyInfo, LPNOTIFYADD lpAddInfo
AddDelegatedPolicyUser;Adds the specified security identifier (SID) in text form to the list of principals that act as delegated policy users.;BSTR bstrDelegatedPolicyUser, VARIANT varReserved
AddDelegatedPolicyUserName;Adds the specified account name to the list of principals that act as delegated policy users.;BSTR bstrDelegatedPolicyUser, VARIANT varReserved
AddDllDirectory;Adds a directory to the process DLL search path.;PCWSTR NewDirectory
AddEnrollmentServer;Saves certificate enrollment server (CES) access credentials in the credential cache.;BSTR strEnrollmentServerURI, X509EnrollmentAuthFlags authFlags, BSTR strCredential, BSTR strPassword
AddExtensionsToRequest;The AddExtensionsToRequest method adds extensions to the certificate request. This method was first defined in the IEnroll interface.;PCERT_EXTENSIONS pCertExtensions
addExtensionToRequest;The ICEnroll4::addExtensionToRequest method adds an extension to the request.;LONG Flags, BSTR strName, BSTR strValue
addExtensionToRequestWStr;Adds an extension to the request.;LONG Flags, LPCWSTR pwszName, PCRYPT_DATA_BLOB pblobValue
AddFontMemResourceEx;The AddFontMemResourceEx function adds the font resource from a memory image to the system.;PVOID pFileView, DWORD cjSize, PVOID pvResrved, DWORD *pNumFonts
AddFontResourceA;The AddFontResource function adds the font resource from the specified file to the system font table. The font can subsequently be used for text output by any application.;LPCSTR Arg1
AddFontResourceExA;The AddFontResourceEx function adds the font resource from the specified file to the system. Fonts added with the AddFontResourceEx function can be marked as private and not enumerable.;LPCSTR name, DWORD fl, PVOID res
AddFontResourceExW;The AddFontResourceEx function adds the font resource from the specified file to the system. Fonts added with the AddFontResourceEx function can be marked as private and not enumerable.;LPCWSTR name, DWORD fl, PVOID res
AddFontResourceW;The AddFontResource function adds the font resource from the specified file to the system font table. The font can subsequently be used for text output by any application.;LPCWSTR Arg1
AddFromCsp;Adds objects to the collection by identifying the encryption algorithms supported by a specific cryptographic provider.;ICspInformation *pValue
AddIntegrityLabelToBoundaryDescriptor;Adds a new required security identifier (SID) to the specified boundary descriptor.;HANDLE *BoundaryDescriptor, PSID IntegrityLabel
AddInterface;Adds the specified interface to the list of IDispatch interfaces that can be called by business rule (BizRule) scripts.;BSTR bstrInterfaceName, LONG lInterfaceFlag, VARIANT varInterface
AddInterfaces;Adds the specified interfaces to the list of IDispatch interfaces that can be called by business rule (BizRule) scripts.;VARIANT varInterfaceNames, VARIANT varInterfaceFlags, VARIANT varInterfaces
AddIPAddress;The AddIPAddress function adds the specified IPv4 address to the specified adapter.;IPAddr Address, IPMask IpMask, DWORD IfIndex, PULONG NTEContext, PULONG NTEInstance
AddMandatoryAce;Adds a SYSTEM_MANDATORY_LABEL_ACE access control entry (ACE) to the specified system access control list (SACL).;PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD MandatoryPolicy, PSID pLabelSid
AddMember;Adds the specified security identifier (SID) in text form to the list of accounts that belong to the application group.;BSTR bstrProp, VARIANT varReserved
AddMember;Adds the specified security identifier (SID) in text form to the list of Windows accounts that belong to the role.;BSTR bstrProp, VARIANT varReserved
AddMemberName;Adds the specified account name to the list of accounts that belong to the application group.;BSTR bstrProp, VARIANT varReserved
AddMemberName;Adds the specified account name to the list of accounts that belong to the role.;BSTR bstrProp, VARIANT varReserved
addNameValuePairToRequest;Adds an unauthenticated name-value string pair to the request. This method was first defined in the ICEnroll4 interface.;LONG Flags, BSTR strName, BSTR strValue
addNameValuePairToRequestWStr;Adds an unauthenticated name-value string pair to the request.;LONG Flags, LPCWSTR pwszName, LPCWSTR pwszValue
addNameValuePairToSignature;Adds the authenticated name-value pair of an attribute to the request. It is up to the certification authority (CA) to interpret the meaning of the name-value pair.;BSTR Name, BSTR Value
AddNameValuePairToSignatureWStr;Adds the authenticated name-value pair of an attribute to the request. The certification authority (CA) interprets the meaning of the name-value pair.;LPWSTR Name, LPWSTR Value
AddNonMember;Adds the specified security identifier (SID) in text form to the list of accounts that are refused membership in the application group.;BSTR bstrProp, VARIANT varReserved
AddNonMemberName;Adds the specified account name to the list of accounts that are refused membership in the application group.;BSTR bstrProp, VARIANT varReserved
AddNtmsMediaType;The AddNtmsMediaType function adds the specified media type to the specified library if there is not currently a relation in the library object. The function then creates the system media pools if they do not exist.;HANDLE hSession, LPNTMS_GUID lpMediaTypeId, LPNTMS_GUID lpLibId
AddOperation;Adds the IAzOperation object with the specified name to the role.;BSTR bstrProp, VARIANT varReserved
AddOperation;Adds the IAzOperation object with the specified name to the task.;BSTR bstrOp, VARIANT varReserved
AddParameter;Adds a parameter to the list of parameters available to business rule (BizRule) scripts.;BSTR bstrParameterName, VARIANT varParameterValue
AddParameters;Adds parameters to the list of parameters available to business rule (BizRule) scripts.;VARIANT varParameterNames, VARIANT varParameterValues
AddPolicyAdministrator;Adds the specified security identifier (SID) in text form to the list of principals that act as policy administrators.;BSTR bstrAdmin, VARIANT varReserved
AddPolicyAdministratorName;Adds the specified account name to the list of principals that act as policy administrators.;BSTR bstrAdmin, VARIANT varReserved
AddPolicyAdministratorName;The AddPolicyAdministratorName method of IAzScope adds the specified account name to the list of principals that act as policy administrators.;BSTR bstrAdmin, VARIANT varReserved
AddPolicyAdministrator;The AddPolicyAdministrator method of IAzScope adds the specified security identifier in text form to the list of principals that act as policy administrators.;BSTR bstrAdmin, VARIANT varReserved
AddPolicyReader;Adds the specified security identifier (SID) in text form to the list of principals that act as policy readers.;BSTR bstrReader, VARIANT varReserved
AddPolicyReaderName;Adds the specified account name to the list of principals that act as policy readers.;BSTR bstrReader, VARIANT varReserved
AddPolicyReaderName;The AddPolicyReaderName method of IAzScope adds the specified account name to the list of principals that act as policy readers.;BSTR bstrReader, VARIANT varReserved
AddPolicyReader;The AddPolicyReader method of IAzScope adds the specified security identifier in text form to the list of principals that act as policy readers.;BSTR bstrReader, VARIANT varReserved
AddPolicyServer;Registers a certificate enrollment policy (CEP) server and saves CEP access credentials in the credential cache.;BSTR strEnrollmentPolicyServerURI, BSTR strEnrollmentPolicyID, PolicyServerUrlFlags EnrollmentPolicyServerFlags, X509EnrollmentAuthFlags authFlags, BSTR strCredential, BSTR strPassword
AddPropertyItem;Adds the specified entity to the specified list.;LONG lPropId, VARIANT varProp, VARIANT varReserved
AddPropertyItem;Adds the specified principal to the specified list of principals.;LONG lPropId, VARIANT varProp, VARIANT varReserved
AddRange;Adds a range of ICryptAttribute objects to the collection. The attributes are contained in another ICryptAttributes collection.;ICryptAttributes *pValue
AddRange;Adds a range of IObjectId objects to the collection.;IObjectIds *pValue
AddRange;Adds a range of IX509Extension objects to the collection.;IX509Extensions *pValue
AddRefActCtx;The AddRefActCtx function increments the reference count of the specified activation context.;HANDLE hActCtx
AddRefHfont;Notifies the font object that the previously realized font identified with hFont should remain valid until ReleaseHfont is called or the font object itself is released completely.;HFONT hFont
AddRef;Increments the reference count for an interface pointer to a COM object. You should call this method whenever you make a copy of an interface pointer.;
AddRefOnProcess;Increments the reference count of the process.;
AddResourceAttributeAce;Adds a SYSTEM_RESOURCE_ATTRIBUTE_ACEaccess control entry (ACE) to the end of a system access control list (SACL).;PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, PSID pSid, PCLAIM_SECURITY_ATTRIBUTES_INFORMATION pAttributeInfo, PDWORD pReturnLength
AddRoleDefinition;Adds the specified IAzRoleDefinition object to this IAzRoleAssignment object.;BSTR bstrRoleDefinition
AddRoleDefinition;Adds the specified IAzRoleDefinition object to this IAzRoleDefinition object.;BSTR bstrRoleDefinition
AddRoles;Adds the specified array of existing IAzRole objects to the client context.;VARIANT varRoles, BSTR bstrScopeName
AddScopedPolicyIDAce;Adds a SYSTEM_SCOPED_POLICY_ID_ACEaccess control entry (ACE) to the end of a system access control list (SACL).;PACL pAcl, DWORD dwAceRevision, DWORD AceFlags, DWORD AccessMask, PSID pSid
AddSecureMemoryCacheCallback;Registers a callback function to be called when a secured memory range is freed or its protections are changed.;PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack
AddSecurityPackageA;Adds a security support provider to the list of providers supported by Microsoft Negotiate.;LPSTR pszPackageName, PSECURITY_PACKAGE_OPTIONS pOptions
AddSecurityPackageW;Adds a security support provider to the list of providers supported by Microsoft Negotiate.;LPWSTR pszPackageName, PSECURITY_PACKAGE_OPTIONS pOptions
AddSIDToBoundaryDescriptor;Adds a security identifier (SID) to the specified boundary descriptor.;HANDLE *BoundaryDescriptor, PSID RequiredSid
AddStringSids;Adds an array of string representations of security identifiers (SIDs) to the client context.;VARIANT varStringSids
AddStroke;Adds an ink stroke to the RecognizerContext.;HRECOCONTEXT hrc, const PACKET_DESCRIPTION *pPacketDesc, ULONG cbPacket, const BYTE *pPacket, const XFORM *pXForm
AddSynchronize;Adds a synchronization object to the container.;ISynchronize *pSync
AddTask;Adds the IAzTask object with the specified name to the role.;BSTR bstrProp, VARIANT varReserved
AddTask;Adds the IAzTask object with the specified name to the task.;BSTR bstrTask, VARIANT varReserved
AddToCache;Caches the specified identity in the registry.;LPCWSTR lpszUniqueID, REFGUID ProviderGUID
AddVectoredContinueHandler;Registers a vectored continue handler.;ULONG First, PVECTORED_EXCEPTION_HANDLER Handler
AddVectoredExceptionHandler;Registers a vectored exception handler.;ULONG First, PVECTORED_EXCEPTION_HANDLER Handler
AddWordsToWordList;Adds one or more words to the word list.;HRECOWORDLIST hwl, WCHAR *pwcWords
AdjustTokenGroups;Enables or disables groups already present in the specified access token. Access to TOKEN_ADJUST_GROUPS is required to enable or disable groups in an access token.;HANDLE TokenHandle, BOOL ResetToDefault, PTOKEN_GROUPS NewState, DWORD BufferLength, PTOKEN_GROUPS PreviousState, PDWORD ReturnLength
AdjustTokenPrivileges;Enables or disables privileges in the specified access token. Enabling or disabling privileges in an access token requires TOKEN_ADJUST_PRIVILEGES access.;HANDLE TokenHandle, BOOL DisableAllPrivileges, PTOKEN_PRIVILEGES NewState, DWORD BufferLength, PTOKEN_PRIVILEGES PreviousState, PDWORD ReturnLength
AdjustWindowRect;Calculates the required size of the window rectangle, based on the desired client-rectangle size. The window rectangle can then be passed to the CreateWindow function to create a window whose client area is the desired size.;LPRECT lpRect, DWORD dwStyle, BOOL bMenu
AdjustWindowRectEx;Calculates the required size of the window rectangle, based on the desired size of the client rectangle. The window rectangle can then be passed to the CreateWindowEx function to create a window whose client area is the desired size.;LPRECT lpRect, DWORD dwStyle, BOOL bMenu, DWORD dwExStyle
AdjustWindowRectExForDpi;Calculates the required size of the window rectangle, based on the desired size of the client rectangle and the provided DPI.;LPRECT lpRect, DWORD dwStyle, BOOL bMenu, DWORD dwExStyle, UINT dpi
ADsBuildEnumerator;The ADsBuildEnumerator function creates an enumerator object for the specified ADSI container object.;IADsContainer *pADsContainer, IEnumVARIANT **ppEnumVariant
ADsBuildVarArrayInt;The ADsBuildVarArrayInt function builds a variant array of integers from an array of DWORD values.;LPDWORD lpdwObjectTypes, DWORD dwObjectTypes, VARIANT *pVar
ADsBuildVarArrayStr;The ADsBuildVarArrayStr function builds a variant array from an array of Unicode strings.;LPWSTR *lppPathNames, DWORD dwPathNames, VARIANT *pVar
ADsEncodeBinaryData;The ADsEncodeBinaryData function converts a binary large object (BLOB) to the Unicode format suitable to be embedded in a search filter.;PBYTE pbSrcData, DWORD dwSrcLen, LPWSTR *ppszDestData
ADsEnumerateNext;The ADsEnumerateNext function enumerates through a specified number of elements from the current cursor position of the enumerator.;IEnumVARIANT *pEnumVariant, ULONG cElements, VARIANT *pvar, ULONG *pcElementsFetched
ADsFreeEnumerator;Frees an enumerator object created with the ADsBuildEnumerator function.;IEnumVARIANT *pEnumVariant
ADsGetLastError;The ADsGetLastError function retrieves the calling thread's last-error code value.;LPDWORD lpError, LPWSTR lpErrorBuf, DWORD dwErrorBufLen, LPWSTR lpNameBuf, DWORD dwNameBufLen
ADsGetObject;Binds to an object given its path and a specified interface identifier.;LPCWSTR lpszPathName, REFIID riid, VOID **ppObject
ADsOpenObject;Binds to an ADSI object using explicit user name and password credentials.;LPCWSTR lpszPathName, LPCWSTR lpszUserName, LPCWSTR lpszPassword, DWORD dwReserved, REFIID riid, void **ppObject
ADsPropCheckIfWritable;The ADsPropCheckIfWritable function determines if an attribute can be written.;const PWSTR pwzAttr, const PADS_ATTR_INFO pWritableAttrs
ADsPropCreateNotifyObj;The ADsPropCreateNotifyObj function is used to create, or obtain, a notification object for use by an Active Directory Domain Services property sheet extension.;LPDATAOBJECT pAppThdDataObj, PWSTR pwzADsObjName, HWND *phNotifyObj
ADsPropGetInitInfo;Used to obtain directory object data that an Active Directory Domain Services property sheet extension applies to.;HWND hNotifyObj, PADSPROPINITPARAMS pInitParams
ADsPropSendErrorMessage;The ADsPropSendErrorMessage function adds an error message to a list of error messages displayed by calling the ADsPropShowErrorDialog function.;HWND hNotifyObj, PADSPROPERROR pError
ADsPropSetHwnd;Used to notify the notification object of the property page window handle.;HWND hNotifyObj, HWND hPage
ADsPropSetHwndWithTitle;Used to notify the notification object of the property page window handle.;HWND hNotifyObj, HWND hPage, PTSTR ptzTitle
ADsPropShowErrorDialog;The ADsPropShowErrorDialog function displays a dialog box that contains the error messages accumulated through calls to the ADsPropSendErrorMessage function or the WM_ADSPROP_NOTIFY_ERROR.;HWND hNotifyObj, HWND hPage
ADsSetLastError;The ADsSetLastError sets the last-error code value for the calling thread.;DWORD dwErr, LPCWSTR pszError, LPCWSTR pszProvider
Advise;Allows a calling application to specify the list of identity events for which the application is to be notified.;IIdentityAdvise *pIdentityAdvise, DWORD dwIdentityUpdateEvents, DWORD *pdwCookie
AdviseInkChange;Stops the recognizer from processing ink because a stroke has been added or deleted.;HRECOCONTEXT hrc, BOOL bNewStroke
ALERT_OTHER_INFO;The ALERT_OTHER_INFO macro returns a pointer to the alert-specific data in an alert message. The data follows a STD_ALERT structure, and can be an ADMIN_OTHER_INFO, a PRINT_OTHER_INFO, or a USER_OTHER_INFO structure.;x
ALERT_VAR_DATA;The ALERT_VAR_DATA macro returns a pointer to the variable-length portion of an alert message. Variable-length data can follow an ADMIN_OTHER_INFO, a PRINT_OTHER_INFO, or a USER_OTHER_INFO structure.;p
AllocADsMem;Allocates a block of memory of the specified size.;DWORD cb
AllocADsStr;Allocates memory for and copies a specified string.;LPCWSTR pStr
AllocateAndGetTcpExTableFromStack;Retrieves the TCP connection table and allocates memory from the local heap to store the table.;PVOID *ppTcpTable, BOOL bOrder, HANDLE hHeap, DWORD dwFlags, DWORD dwFamily
AllocateAndGetUdpExTableFromStack;Retrieves the UDP connection table and allocates memory from the local heap to store the table.;PVOID *ppUdpTable, BOOL bOrder, HANDLE hHeap, DWORD dwFlags, DWORD dwFamily
AllocateAndInitializeSid;Allocates and initializes a security identifier (SID) with up to eight subauthorities.;PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority, BYTE nSubAuthorityCount, DWORD nSubAuthority0, DWORD nSubAuthority1, DWORD nSubAuthority2, DWORD nSubAuthority3, DWORD nSubAuthority4, DWORD nSubAuthority5, DWORD nSubAuthority6, DWORD nSubAuthority7, PSID *pSid
AllocateLocallyUniqueId;Allocates a locally unique identifier (LUID).;PLUID Luid
AllocateNtmsMedia;The AllocateNtmsMedia function allocates a piece of available media.;HANDLE hSession, LPNTMS_GUID lpMediaPool, LPNTMS_GUID lpPartition, LPNTMS_GUID lpMediaId, DWORD dwOptions, DWORD dwTimeout, LPNTMS_ALLOCATION_INFORMATION lpAllocateInformation
AllocateUserPhysicalPages;Allocates physical memory pages to be mapped and unmapped within any Address Windowing Extensions (AWE) region of a specified process.;HANDLE hProcess, PULONG_PTR NumberOfPages, PULONG_PTR PageArray
AllocateUserPhysicalPagesNuma;Allocates physical memory pages to be mapped and unmapped within any Address Windowing Extensions (AWE) region of a specified process and specifies the NUMA node for the physical memory.;HANDLE hProcess, PULONG_PTR NumberOfPages, PULONG_PTR PageArray, DWORD nndPreferred
AllowSetForegroundWindow;Enables the specified process to set the foreground window using the SetForegroundWindow function. The calling process must already be able to set the foreground window. For more information, see Remarks later in this topic.;DWORD dwProcessId
AlphaBlend;The AlphaBlend function displays bitmaps that have transparent or semitransparent pixels.;HDC hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, HDC hdcSrc, int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, BLENDFUNCTION ftn
AmsiCloseSession;Close a session that was opened by AmsiOpenSession.;HAMSICONTEXT amsiContext, HAMSISESSION amsiSession
AmsiInitialize;Initialize the AMSI API.;LPCWSTR appName, HAMSICONTEXT *amsiContext
AmsiOpenSession;Opens a session within which multiple scan requests can be correlated.;HAMSICONTEXT amsiContext, HAMSISESSION *amsiSession
AmsiResultIsMalware;Determines if the result of a scan indicates that the content should be blocked.;r
AmsiScanBuffer;Scans a buffer-full of content for malware.;HAMSICONTEXT amsiContext, PVOID buffer, ULONG length, LPCWSTR contentName, HAMSISESSION amsiSession, AMSI_RESULT *result
AmsiScanString;Scans a string for malware.;HAMSICONTEXT amsiContext, LPCWSTR string, LPCWSTR contentName, HAMSISESSION amsiSession, AMSI_RESULT *result
AmsiUninitialize;Remove the instance of the AMSI API that was originally opened by AmsiInitialize.;HAMSICONTEXT amsiContext
AngleArc;The AngleArc function draws a line segment and an arc.;HDC hdc, int x, int y, DWORD r, FLOAT StartAngle, FLOAT SweepAngle
AnimatePalette;The AnimatePalette function replaces entries in the specified logical palette.;HPALETTE hPal, UINT iStartIndex, UINT cEntries, const PALETTEENTRY *ppe
AnimateWindow;Enables you to produce special effects when showing or hiding windows. There are four types of animation:_roll, slide, collapse or expand, and alpha-blended fade.;HWND hWnd, DWORD dwTime, DWORD dwFlags
AnyPopup;Indicates whether an owned, visible, top-level pop-up, or overlapped window exists on the screen. The function searches the entire screen, not just the calling application's client area.;
AppendMenuA;Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. You can use this function to specify the content, appearance, and behavior of the menu item.;HMENU hMenu, UINT uFlags, UINT_PTR uIDNewItem, LPCSTR lpNewItem
AppendMenuW;Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. You can use this function to specify the content, appearance, and behavior of the menu item.;HMENU hMenu, UINT uFlags, UINT_PTR uIDNewItem, LPCWSTR lpNewItem
AppendText;Appends a string to the status information contained in the Text property.;BSTR strText
ApphelpCheckShellObject;Enables applications to detect bad extension objects and either block them from running or fix them.;REFCLSID ObjectCLSID, BOOL bShimIfNecessary, ULONGLONG *pullFlags
ApplicationRecoveryFinished;Indicates that the calling application has completed its data recovery.;BOOL bSuccess
ApplicationRecoveryInProgress;Indicates that the calling application is continuing to recover data.;PBOOL pbCancelled
ApplyControlToken;Provides a way to apply a control token to a security context.;PCtxtHandle phContext, PSecBufferDesc pInput
AppPolicyGetClrCompat;Retrieves a value indicating the application type of a process so that you can determine whether to enable private reflection and/or make managed objects agile.;HANDLE processToken, AppPolicyClrCompat *policy
AppPolicyGetCreateFileAccess;Retrieves a value indicating whether a process has full or restricted access to the IO devices (file, file stream, directory, physical disk, volume, console buffer, tape drive, communications resource, mailslot, and pipe).;HANDLE processToken, AppPolicyCreateFileAccess *policy
AppPolicyGetLifecycleManagement;Retrieves a value indicating whether a process can be suspended/resumed by the Process Lifecycle Manager (PLM).;HANDLE processToken, AppPolicyLifecycleManagement *policy
AppPolicyGetMediaFoundationCodecLoading;Retrieves a value indicating whether a process’s policy allows it to load non-Windows (third-party) plugins. You can use the value to decide whether or not to allow non-Windows (third-party) plugins.;HANDLE processToken, AppPolicyMediaFoundationCodecLoading *policy
AppPolicyGetProcessTerminationMethod;Retrieves the method used to end a process.;HANDLE processToken, AppPolicyProcessTerminationMethod *policy
AppPolicyGetShowDeveloperDiagnostic;Retrieves the method used for a process to surface developer information, such as asserts, to the user.;HANDLE processToken, AppPolicyShowDeveloperDiagnostic *policy
AppPolicyGetThreadInitializationType;Retrieves the kind of initialization that should be automatically performed for a process when beginthread[ex] creates a thread.;HANDLE processToken, AppPolicyThreadInitializationType *policy
AppPolicyGetWindowingModel;Retrieves a value indicating whether a process uses a CoreWindow-based, or a HWND-based, windowing model. You can use the value to decide how to register for window state change notifications (size changed, visibility changed, etc.).;HANDLE processToken, AppPolicyWindowingModel *policy
Arc;The Arc function draws an elliptical arc.;HDC hdc, int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4
ArcTo;The ArcTo function draws an elliptical arc.;HDC hdc, int left, int top, int right, int bottom, int xr1, int yr1, int xr2, int yr2
AreAllAccessesGranted;Checks whether a set of requested access rights has been granted. The access rights are represented as bit flags in an access mask.;DWORD GrantedAccess, DWORD DesiredAccess
AreAnyAccessesGranted;Tests whether any of a set of requested access rights has been granted. The access rights are represented as bit flags in an access mask.;DWORD GrantedAccess, DWORD DesiredAccess
AreDpiAwarenessContextsEqual;Determines whether two DPI_AWARENESS_CONTEXT values are identical.;DPI_AWARENESS_CONTEXT dpiContextA, DPI_AWARENESS_CONTEXT dpiContextB
AreFileApisANSI;Determines whether the file I/O functions are using the ANSI or OEM character set code page.;
ArrangeIconicWindows;Arranges all the minimized (iconic) child windows of the specified parent window.;HWND hWnd
AssocCreateForClasses;Retrieves an object that implements an IQueryAssociations interface.;const ASSOCIATIONELEMENT *rgClasses, ULONG cClasses, REFIID riid, void **ppv
AssocCreate;Returns a pointer to an IQueryAssociations object.;CLSID clsid, REFIID riid, void **ppv
AssocGetPerceivedType;Retrieves a file's perceived type based on its extension.;PCWSTR pszExt, PERCEIVED *ptype, PERCEIVEDFLAG *pflag, PWSTR *ppszType
AssociateIdentity;Associates an identity with a local user account.;HWND hwndParent, IPropertyStore **ppPropertyStore
AssocIsDangerous;Determines whether a file type is considered a potential security risk.;PCWSTR pszAssoc
AssocQueryKeyA;Searches for and retrieves a key related to a file or protocol association from the registry.;ASSOCF flags, ASSOCKEY key, LPCSTR pszAssoc, LPCSTR pszExtra, HKEY *phkeyOut
AssocQueryKeyW;Searches for and retrieves a key related to a file or protocol association from the registry.;ASSOCF flags, ASSOCKEY key, LPCWSTR pszAssoc, LPCWSTR pszExtra, HKEY *phkeyOut
AssocQueryStringA;Searches for and retrieves a file or protocol association-related string from the registry.;ASSOCF flags, ASSOCSTR str, LPCSTR pszAssoc, LPCSTR pszExtra, LPSTR pszOut, DWORD *pcchOut
AssocQueryStringByKeyA;Searches for and retrieves a file association-related string from the registry starting from a specified key.;ASSOCF flags, ASSOCSTR str, HKEY hkAssoc, LPCSTR pszExtra, LPSTR pszOut, DWORD *pcchOut
AssocQueryStringByKeyW;Searches for and retrieves a file association-related string from the registry starting from a specified key.;ASSOCF flags, ASSOCSTR str, HKEY hkAssoc, LPCWSTR pszExtra, LPWSTR pszOut, DWORD *pcchOut
AssocQueryStringW;Searches for and retrieves a file or protocol association-related string from the registry.;ASSOCF flags, ASSOCSTR str, LPCWSTR pszAssoc, LPCWSTR pszExtra, LPWSTR pszOut, DWORD *pcchOut
AttachThreadInput;Attaches or detaches the input processing mechanism of one thread to that of another thread.;DWORD idAttach, DWORD idAttachTo, BOOL fAttach
AuditComputeEffectivePolicyBySid;Computes the effective audit policy for one or more subcategories for the specified security principal. The function computes effective audit policy by combining system audit policy with per-user policy.;const PSID pSid, const GUID *pSubCategoryGuids, ULONG dwPolicyCount, PAUDIT_POLICY_INFORMATION *ppAuditPolicy
AuditComputeEffectivePolicyByToken;Computes the effective audit policy for one or more subcategories for the security principal associated with the specified token. The function computes effective audit policy by combining system audit policy with per-user policy.;HANDLE hTokenHandle, const GUID *pSubCategoryGuids, ULONG dwPolicyCount, PAUDIT_POLICY_INFORMATION *ppAuditPolicy
AuditEnumerateCategories;Enumerates the available audit-policy categories.;GUID **ppAuditCategoriesArray, PULONG pdwCountReturned
AuditEnumeratePerUserPolicy;Enumerates users for whom per-user auditing policy is specified.;PPOLICY_AUDIT_SID_ARRAY *ppAuditSidArray
AuditEnumerateSubCategories;Enumerates the available audit-policy subcategories.;const GUID *pAuditCategoryGuid, BOOLEAN bRetrieveAllSubCategories, GUID **ppAuditSubCategoriesArray, PULONG pdwCountReturned
AuditFree;Frees the memory allocated by audit functions for the specified buffer.;PVOID Buffer
AuditLookupCategoryGuidFromCategoryId;Retrieves a GUID structure that represents the specified audit-policy category.;POLICY_AUDIT_EVENT_TYPE AuditCategoryId, GUID *pAuditCategoryGuid
AuditLookupCategoryIdFromCategoryGuid;Retrieves an element of the POLICY_AUDIT_EVENT_TYPE enumeration that represents the specified audit-policy category.;const GUID *pAuditCategoryGuid, PPOLICY_AUDIT_EVENT_TYPE pAuditCategoryId
AuditLookupCategoryNameA;Retrieves the display name of the specified audit-policy category.;const GUID *pAuditCategoryGuid, PSTR *ppszCategoryName
AuditLookupCategoryNameW;Retrieves the display name of the specified audit-policy category.;const GUID *pAuditCategoryGuid, PWSTR *ppszCategoryName
AuditLookupSubCategoryNameA;Retrieves the display name of the specified audit-policy subcategory.;const GUID *pAuditSubCategoryGuid, PSTR *ppszSubCategoryName
AuditLookupSubCategoryNameW;Retrieves the display name of the specified audit-policy subcategory.;const GUID *pAuditSubCategoryGuid, PWSTR *ppszSubCategoryName
AuditQueryGlobalSaclA;Retrieves a global system access control list (SACL) that delegates access to the audit messages.;PCSTR ObjectTypeName, PACL *Acl
AuditQueryGlobalSaclW;Retrieves a global system access control list (SACL) that delegates access to the audit messages.;PCWSTR ObjectTypeName, PACL *Acl
AuditQueryPerUserPolicy;Retrieves per-user audit policy in one or more audit-policy subcategories for the specified principal.;const PSID pSid, const GUID *pSubCategoryGuids, ULONG dwPolicyCount, PAUDIT_POLICY_INFORMATION *ppAuditPolicy
AuditQuerySecurity;Retrieves security descriptor that delegates access to audit policy.;SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR *ppSecurityDescriptor
AuditQuerySystemPolicy;Retrieves system audit policy for one or more audit-policy subcategories.;const GUID *pSubCategoryGuids, ULONG dwPolicyCount, PAUDIT_POLICY_INFORMATION *ppAuditPolicy
AuditSetGlobalSaclA;Sets a global system access control list (SACL) that delegates access to the audit messages.;PCSTR ObjectTypeName, PACL Acl
AuditSetGlobalSaclW;Sets a global system access control list (SACL) that delegates access to the audit messages.;PCWSTR ObjectTypeName, PACL Acl
AuditSetPerUserPolicy;Sets per-user audit policy in one or more audit subcategories for the specified principal.;const PSID pSid, PCAUDIT_POLICY_INFORMATION pAuditPolicy, ULONG dwPolicyCount
AuditSetSecurity;Sets a security descriptor that delegates access to audit policy.;SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor
AuditSetSystemPolicy;Sets system audit policy for one or more audit-policy subcategories.;PCAUDIT_POLICY_INFORMATION pAuditPolicy, ULONG dwPolicyCount
AuthzAccessCheck;Determines which access bits can be granted to a client for a given set of security descriptors.;DWORD Flags, AUTHZ_CLIENT_CONTEXT_HANDLE hAuthzClientContext, PAUTHZ_ACCESS_REQUEST pRequest, AUTHZ_AUDIT_EVENT_HANDLE hAuditEvent, PSECURITY_DESCRIPTOR pSecurityDescriptor, PSECURITY_DESCRIPTOR *OptionalSecurityDescriptorArray, DWORD OptionalSecurityDescriptorCount, PAUTHZ_ACCESS_REPLY pReply, PAUTHZ_ACCESS_CHECK_RESULTS_HANDLE phAccessCheckResults
AuthzAddSidsToContext;Creates a copy of an existing context and appends a given set of security identifiers (SIDs) and restricted SIDs.;AUTHZ_CLIENT_CONTEXT_HANDLE hAuthzClientContext, PSID_AND_ATTRIBUTES Sids, DWORD SidCount, PSID_AND_ATTRIBUTES RestrictedSids, DWORD RestrictedSidCount, PAUTHZ_CLIENT_CONTEXT_HANDLE phNewAuthzClientContext
AuthzCachedAccessCheck;Performs a fast access check based on a cached handle containing the static granted bits from a previous AuthzAccessCheck call.;DWORD Flags, AUTHZ_ACCESS_CHECK_RESULTS_HANDLE hAccessCheckResults, PAUTHZ_ACCESS_REQUEST pRequest, AUTHZ_AUDIT_EVENT_HANDLE hAuditEvent, PAUTHZ_ACCESS_REPLY pReply
AuthzEnumerateSecurityEventSources;Retrieves the registered security event sources that are not installed by default.;DWORD dwFlags, PAUTHZ_SOURCE_SCHEMA_REGISTRATION Buffer, PDWORD pdwCount, PDWORD pdwLength
AuthzFreeAuditEvent;Frees the structure allocated by the AuthzInitializeObjectAccessAuditEvent function.;AUTHZ_AUDIT_EVENT_HANDLE hAuditEvent
AuthzFreeCentralAccessPolicyCache;Decreases the CAP cache reference count by one so that the CAP cache can be deallocated.;
AuthzFreeContext;Frees all structures and memory associated with the client context. The list of handles for a client is freed in this call.;AUTHZ_CLIENT_CONTEXT_HANDLE hAuthzClientContext
AuthzFreeHandle;Finds and deletes a handle from the handle list.;AUTHZ_ACCESS_CHECK_RESULTS_HANDLE hAccessCheckResults
AuthzFreeResourceManager;Frees a resource manager object.;AUTHZ_RESOURCE_MANAGER_HANDLE hAuthzResourceManager
AuthzGetInformationFromContext;Returns information about an Authz context.;AUTHZ_CLIENT_CONTEXT_HANDLE hAuthzClientContext, AUTHZ_CONTEXT_INFORMATION_CLASS InfoClass, DWORD BufferSize, PDWORD pSizeRequired, PVOID Buffer
AuthzInitializeCompoundContext;Creates a user-mode context from the given user and device security contexts.;AUTHZ_CLIENT_CONTEXT_HANDLE UserContext, AUTHZ_CLIENT_CONTEXT_HANDLE DeviceContext, PAUTHZ_CLIENT_CONTEXT_HANDLE phCompoundContext
AuthzInitializeContextFromAuthzContext;Creates a new client context based on an existing client context.;DWORD Flags, AUTHZ_CLIENT_CONTEXT_HANDLE hAuthzClientContext, PLARGE_INTEGER pExpirationTime, LUID Identifier, PVOID DynamicGroupArgs, PAUTHZ_CLIENT_CONTEXT_HANDLE phNewAuthzClientContext
AuthzInitializeContextFromSid;Creates a user-mode client context from a user security identifier (SID).;DWORD Flags, PSID UserSid, AUTHZ_RESOURCE_MANAGER_HANDLE hAuthzResourceManager, PLARGE_INTEGER pExpirationTime, LUID Identifier, PVOID DynamicGroupArgs, PAUTHZ_CLIENT_CONTEXT_HANDLE phAuthzClientContext
AuthzInitializeContextFromToken;Initializes a client authorization context from a kernel token. The kernel token must have been opened for TOKEN_QUERY.;DWORD Flags, HANDLE TokenHandle, AUTHZ_RESOURCE_MANAGER_HANDLE hAuthzResourceManager, PLARGE_INTEGER pExpirationTime, LUID Identifier, PVOID DynamicGroupArgs, PAUTHZ_CLIENT_CONTEXT_HANDLE phAuthzClientContext
AuthzInitializeObjectAccessAuditEvent2;Allocates and initializes an AUTHZ_AUDIT_EVENT_HANDLE handle for use with the AuthzAccessCheck function.;DWORD Flags, AUTHZ_AUDIT_EVENT_TYPE_HANDLE hAuditEventType, PWSTR szOperationType, PWSTR szObjectType, PWSTR szObjectName, PWSTR szAdditionalInfo, PWSTR szAdditionalInfo2, PAUTHZ_AUDIT_EVENT_HANDLE phAuditEvent, DWORD dwAdditionalParameterCount, ...
AuthzInitializeObjectAccessAuditEvent;Initializes auditing for an object.;DWORD Flags, AUTHZ_AUDIT_EVENT_TYPE_HANDLE hAuditEventType, PWSTR szOperationType, PWSTR szObjectType, PWSTR szObjectName, PWSTR szAdditionalInfo, PAUTHZ_AUDIT_EVENT_HANDLE phAuditEvent, DWORD dwAdditionalParameterCount, ...
AuthzInitializeRemoteResourceManager;Allocates and initializes a remote resource manager. The caller can use the resulting handle to make RPC calls to a remote instance of the resource manager configured on a server.;PAUTHZ_RPC_INIT_INFO_CLIENT pRpcInitInfo, PAUTHZ_RESOURCE_MANAGER_HANDLE phAuthzResourceManager
AuthzInitializeResourceManagerEx;Allocates and initializes a resource manager structure.;DWORD Flags, PAUTHZ_INIT_INFO pAuthzInitInfo, PAUTHZ_RESOURCE_MANAGER_HANDLE phAuthzResourceManager
AuthzInitializeResourceManager;Uses Authz to verify that clients have access to various resources.;DWORD Flags, PFN_AUTHZ_DYNAMIC_ACCESS_CHECK pfnDynamicAccessCheck, PFN_AUTHZ_COMPUTE_DYNAMIC_GROUPS pfnComputeDynamicGroups, PFN_AUTHZ_FREE_DYNAMIC_GROUPS pfnFreeDynamicGroups, PCWSTR szResourceManagerName, PAUTHZ_RESOURCE_MANAGER_HANDLE phAuthzResourceManager
AuthzInstallSecurityEventSource;Installs the specified source as a security event source.;DWORD dwFlags, PAUTHZ_SOURCE_SCHEMA_REGISTRATION pRegistration
AuthzModifyClaims;Adds, deletes, or modifies user and device claims in the Authz client context.;AUTHZ_CLIENT_CONTEXT_HANDLE hAuthzClientContext, AUTHZ_CONTEXT_INFORMATION_CLASS ClaimClass, PAUTHZ_SECURITY_ATTRIBUTE_OPERATION pClaimOperations, PAUTHZ_SECURITY_ATTRIBUTES_INFORMATION pClaims
AuthzModifySecurityAttributes;Modifies the security attribute information in the specified client context.;AUTHZ_CLIENT_CONTEXT_HANDLE hAuthzClientContext, PAUTHZ_SECURITY_ATTRIBUTE_OPERATION pOperations, PAUTHZ_SECURITY_ATTRIBUTES_INFORMATION pAttributes
AuthzModifySids;Adds, deletes, or modifies user and device groups in the Authz client context.;AUTHZ_CLIENT_CONTEXT_HANDLE hAuthzClientContext, AUTHZ_CONTEXT_INFORMATION_CLASS SidClass, PAUTHZ_SID_OPERATION pSidOperations, PTOKEN_GROUPS pSids
AuthzOpenObjectAudit;Reads the system access control list (SACL) of the specified security descriptor and generates any appropriate audits specified by that SACL.;DWORD Flags, AUTHZ_CLIENT_CONTEXT_HANDLE hAuthzClientContext, PAUTHZ_ACCESS_REQUEST pRequest, AUTHZ_AUDIT_EVENT_HANDLE hAuditEvent, PSECURITY_DESCRIPTOR pSecurityDescriptor, PSECURITY_DESCRIPTOR *OptionalSecurityDescriptorArray, DWORD OptionalSecurityDescriptorCount, PAUTHZ_ACCESS_REPLY pReply
AuthzRegisterCapChangeNotification;Registers a CAP update notification callback.;PAUTHZ_CAP_CHANGE_SUBSCRIPTION_HANDLE phCapChangeSubscription, LPTHREAD_START_ROUTINE pfnCapChangeCallback, PVOID pCallbackContext
AuthzRegisterSecurityEventSource;Registers a security event source with the Local Security Authority (LSA).;DWORD dwFlags, PCWSTR szEventSourceName, PAUTHZ_SECURITY_EVENT_PROVIDER_HANDLE phEventProvider
AuthzReportSecurityEventFromParams;Generates a security audit for a registered security event source by using the specified array of audit parameters.;DWORD dwFlags, AUTHZ_SECURITY_EVENT_PROVIDER_HANDLE hEventProvider, DWORD dwAuditId, PSID pUserSid, PAUDIT_PARAMS pParams
AuthzReportSecurityEvent;Generates a security audit for a registered security event source.;DWORD dwFlags, AUTHZ_SECURITY_EVENT_PROVIDER_HANDLE hEventProvider, DWORD dwAuditId, PSID pUserSid, DWORD dwCount, ...
AuthzSetAppContainerInformation;Sets the app container and capability information in a current Authz context.;AUTHZ_CLIENT_CONTEXT_HANDLE hAuthzClientContext, PSID pAppContainerSid, DWORD CapabilityCount, PSID_AND_ATTRIBUTES pCapabilitySids
AuthzUninstallSecurityEventSource;Removes the specified source from the list of valid security event sources.;DWORD dwFlags, PCWSTR szEventSourceName
AuthzUnregisterCapChangeNotification;Removes a previously registered CAP update notification callback.;AUTHZ_CAP_CHANGE_SUBSCRIPTION_HANDLE hCapChangeSubscription
AuthzUnregisterSecurityEventSource;Unregisters a security event source with the Local Security Authority (LSA).;DWORD dwFlags, PAUTHZ_SECURITY_EVENT_PROVIDER_HANDLE phEventProvider
auxGetDevCapsA;The auxGetDevCaps function retrieves the capabilities of a given auxiliary output device.;UINT_PTR uDeviceID, LPAUXCAPSA pac, UINT cbac
auxGetDevCaps;The auxGetDevCaps function retrieves the capabilities of a given auxiliary output device.;UINT uDeviceID, LPAUXCAPS pac, UINT cbac
auxGetDevCapsW;The auxGetDevCaps function retrieves the capabilities of a given auxiliary output device.;UINT_PTR uDeviceID, LPAUXCAPSW pac, UINT cbac
auxGetNumDevs;The auxGetNumDevs function retrieves the number of auxiliary output devices present in the system.;
auxGetVolume;The auxGetVolume function retrieves the current volume setting of the specified auxiliary output device.;UINT uDeviceID, LPDWORD pdwVolume
auxOutMessage;The auxOutMessage function sends a message to the given auxiliary output device. This function also performs error checking on the device identifier passed as part of the message.;UINT uDeviceID, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2
auxSetVolume;The auxSetVolume function sets the volume of the specified auxiliary output device.;UINT uDeviceID, DWORD dwVolume
AuxUlibInitialize;Initializes the Aux_ulib library.;
AuxUlibIsDLLSynchronizationHeld;Determines whether the caller is holding a synchronization primitive.;PBOOL SynchronizationHeld
AuxUlibSetSystemFileCacheSize;Sets the current file system cache size.;SIZE_T MinimumFileCacheSize, SIZE_T MaximumFileCacheSize, DWORD Flags
AvQuerySystemResponsiveness;Retrieves the system responsiveness setting used by the multimedia class scheduler service.;HANDLE AvrtHandle, PULONG SystemResponsivenessValue
AvRevertMmThreadCharacteristics;Indicates that a thread is no longer performing work associated with the specified task.;HANDLE AvrtHandle
AvRtCreateThreadOrderingGroup;Creates a thread ordering group.;PHANDLE Context, PLARGE_INTEGER Period, GUID *ThreadOrderingGuid, PLARGE_INTEGER Timeout
AvRtCreateThreadOrderingGroupExA;Creates a thread ordering group and associates the server thread with a task.;PHANDLE Context, PLARGE_INTEGER Period, GUID *ThreadOrderingGuid, PLARGE_INTEGER Timeout, LPCSTR TaskName
AvRtCreateThreadOrderingGroupExW;Creates a thread ordering group and associates the server thread with a task.;PHANDLE Context, PLARGE_INTEGER Period, GUID *ThreadOrderingGuid, PLARGE_INTEGER Timeout, LPCWSTR TaskName
AvRtDeleteThreadOrderingGroup;Deletes the specified thread ordering group created by the caller. It cleans up resources for the thread ordering group, including the context information, and returns.;HANDLE Context
AvRtJoinThreadOrderingGroup;Joins client threads to a thread ordering group.;PHANDLE Context, GUID *ThreadOrderingGuid, BOOL Before
AvRtLeaveThreadOrderingGroup;Enables client threads to leave a thread ordering group.;HANDLE Context
AvRtWaitOnThreadOrderingGroup;Enables client threads of a thread ordering group to wait until they should execute.;HANDLE Context
AvSetMmMaxThreadCharacteristicsA;Associates the calling thread with the specified tasks.;LPCSTR FirstTask, LPCSTR SecondTask, LPDWORD TaskIndex
AvSetMmMaxThreadCharacteristicsW;Associates the calling thread with the specified tasks.;LPCWSTR FirstTask, LPCWSTR SecondTask, LPDWORD TaskIndex
AvSetMmThreadCharacteristicsA;Associates the calling thread with the specified task.;LPCSTR TaskName, LPDWORD TaskIndex
AvSetMmThreadCharacteristicsW;Associates the calling thread with the specified task.;LPCWSTR TaskName, LPDWORD TaskIndex
AvSetMmThreadPriority;Adjusts the thread priority of the calling thread relative to other threads performing the same task.;HANDLE AvrtHandle, AVRT_PRIORITY Priority
BackupEventLogA;Saves the specified event log to a backup file.;HANDLE hEventLog, LPCSTR lpBackupFileName
BackupEventLogW;Saves the specified event log to a backup file.;HANDLE hEventLog, LPCWSTR lpBackupFileName
BackupRead;Back up a file or directory, including the security information.;HANDLE hFile, LPBYTE lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, BOOL bAbort, BOOL bProcessSecurity, LPVOID *lpContext
BackupSeek;Seeks forward in a data stream initially accessed by using the BackupRead or BackupWrite function.;HANDLE hFile, DWORD dwLowBytesToSeek, DWORD dwHighBytesToSeek, LPDWORD lpdwLowByteSeeked, LPDWORD lpdwHighByteSeeked, LPVOID *lpContext
BackupWrite;Restore a file or directory that was backed up using BackupRead.;HANDLE hFile, LPBYTE lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, BOOL bAbort, BOOL bProcessSecurity, LPVOID *lpContext
BCryptAddContextFunction;Adds a cryptographic function to the list of functions that are supported by an existing CNG context.;ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, ULONG dwPosition
BCryptCloseAlgorithmProvider;Closes an algorithm provider.;BCRYPT_ALG_HANDLE hAlgorithm, ULONG dwFlags
BCryptConfigureContextFunction;Sets the configuration information for the cryptographic function of an existing CNG context.;ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, PCRYPT_CONTEXT_FUNCTION_CONFIG pConfig
BCryptConfigureContext;Sets the configuration information for an existing CNG context.;ULONG dwTable, LPCWSTR pszContext, PCRYPT_CONTEXT_CONFIG pConfig
BCryptCreateContext;Creates a new CNG configuration context.;ULONG dwTable, LPCWSTR pszContext, PCRYPT_CONTEXT_CONFIG pConfig
BCryptCreateHash;Called to create a hash or Message Authentication Code (MAC) object.;BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_HASH_HANDLE *phHash, PUCHAR pbHashObject, ULONG cbHashObject, PUCHAR pbSecret, ULONG cbSecret, ULONG dwFlags
BCryptCreateMultiHash;The BCryptCreateMultiHash function creates a multi-hash state that allows for the parallel computation of multiple hash operations.;BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_HASH_HANDLE *phHash, ULONG nHashes, PUCHAR pbHashObject, ULONG cbHashObject, PUCHAR pbSecret, ULONG cbSecret, ULONG dwFlags
BCryptDecrypt;Decrypts a block of data.;BCRYPT_KEY_HANDLE hKey, PUCHAR pbInput, ULONG cbInput, VOID *pPaddingInfo, PUCHAR pbIV, ULONG cbIV, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags
BCryptDeleteContext;Deletes an existing CNG configuration context.;ULONG dwTable, LPCWSTR pszContext
BCryptDeriveKeyCapi;Derives a key from a hash value.;BCRYPT_HASH_HANDLE hHash, BCRYPT_ALG_HANDLE hTargetAlg, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG dwFlags
BCryptDeriveKey;Derives a key from a secret agreement value.;BCRYPT_SECRET_HANDLE hSharedSecret, LPCWSTR pwszKDF, BCryptBufferDesc *pParameterList, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG *pcbResult, ULONG dwFlags
BCryptDeriveKeyPBKDF2;Derives a key from a hash value by using the PBKDF2 key derivation algorithm as defined by RFC 2898.;BCRYPT_ALG_HANDLE hPrf, PUCHAR pbPassword, ULONG cbPassword, PUCHAR pbSalt, ULONG cbSalt, ULONGLONG cIterations, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG dwFlags
BCryptDestroyHash;Destroys a hash or Message Authentication Code (MAC) object.;BCRYPT_HASH_HANDLE hHash
BCryptDestroyKey;Destroys a key.;BCRYPT_KEY_HANDLE hKey
BCryptDestroySecret;Destroys a secret agreement handle that was created by using the BCryptSecretAgreement function.;BCRYPT_SECRET_HANDLE hSecret
BCryptDuplicateHash;Duplicates an existing hash or Message Authentication Code (MAC) object.;BCRYPT_HASH_HANDLE hHash, BCRYPT_HASH_HANDLE *phNewHash, PUCHAR pbHashObject, ULONG cbHashObject, ULONG dwFlags
BCryptDuplicateKey;Creates a duplicate of a symmetric key.;BCRYPT_KEY_HANDLE hKey, BCRYPT_KEY_HANDLE *phNewKey, PUCHAR pbKeyObject, ULONG cbKeyObject, ULONG dwFlags
BCryptEncrypt;Encrypts a block of data.;BCRYPT_KEY_HANDLE hKey, PUCHAR pbInput, ULONG cbInput, VOID *pPaddingInfo, PUCHAR pbIV, ULONG cbIV, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags
BCryptEnumAlgorithms;Gets a list of the registered algorithm identifiers.;ULONG dwAlgOperations, ULONG *pAlgCount, BCRYPT_ALGORITHM_IDENTIFIER **ppAlgList, ULONG dwFlags
BCryptEnumContextFunctionProviders;Obtains the providers for the cryptographic functions for a context in the specified configuration table.;ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, ULONG *pcbBuffer, PCRYPT_CONTEXT_FUNCTION_PROVIDERS *ppBuffer
BCryptEnumContextFunctions;Obtains the cryptographic functions for a context in the specified configuration table.;ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, ULONG *pcbBuffer, PCRYPT_CONTEXT_FUNCTIONS *ppBuffer
BCryptEnumContexts;Obtains the identifiers of the contexts in the specified configuration table.;ULONG dwTable, ULONG *pcbBuffer, PCRYPT_CONTEXTS *ppBuffer
BCryptEnumProviders;Obtains all of the CNG providers that support a specified algorithm.;LPCWSTR pszAlgId, ULONG *pImplCount, BCRYPT_PROVIDER_NAME **ppImplList, ULONG dwFlags
BCryptEnumRegisteredProviders;Retrieves information about the registered providers.;ULONG *pcbBuffer, PCRYPT_PROVIDERS *ppBuffer
BCryptExportKey;Exports a key to a memory BLOB that can be persisted for later use.;BCRYPT_KEY_HANDLE hKey, BCRYPT_KEY_HANDLE hExportKey, LPCWSTR pszBlobType, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags
BCryptFinalizeKeyPair;Completes a public/private key pair.;BCRYPT_KEY_HANDLE hKey, ULONG dwFlags
BCryptFinishHash;Retrieves the hash or Message Authentication Code (MAC) value for the data accumulated from prior calls to BCryptHashData.;BCRYPT_HASH_HANDLE hHash, PUCHAR pbOutput, ULONG cbOutput, ULONG dwFlags
BCryptFreeBuffer;Used to free memory that was allocated by one of the CNG functions.;PVOID pvBuffer
BCryptGenerateKeyPair;Creates an empty public/private key pair.;BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE *phKey, ULONG dwLength, ULONG dwFlags
BCryptGenerateSymmetricKey;Creates a key object for use with a symmetrical key encryption algorithm from a supplied key.;BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE *phKey, PUCHAR pbKeyObject, ULONG cbKeyObject, PUCHAR pbSecret, ULONG cbSecret, ULONG dwFlags
BCryptGenRandom;Generates a random number.;BCRYPT_ALG_HANDLE hAlgorithm, PUCHAR pbBuffer, ULONG cbBuffer, ULONG dwFlags
BCryptGetFipsAlgorithmMode;Determines whether Federal Information Processing Standard (FIPS) compliance is enabled.;BOOLEAN *pfEnabled
BCryptGetProperty;Retrieves the value of a named property for a CNG object.;BCRYPT_HANDLE hObject, LPCWSTR pszProperty, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags
BCryptHashData;Performs a one way hash or Message Authentication Code (MAC) on a data buffer.;BCRYPT_HASH_HANDLE hHash, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags
BCryptHash;Performs a single hash computation. This is a convenience function that wraps calls to BCryptCreateHash, BCryptHashData, BCryptFinishHash, and BCryptDestroyHash.;BCRYPT_ALG_HANDLE hAlgorithm, PUCHAR pbSecret, ULONG cbSecret, PUCHAR pbInput, ULONG cbInput, PUCHAR pbOutput, ULONG cbOutput
BCryptImportKey;Imports a symmetric key from a key BLOB.;BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE hImportKey, LPCWSTR pszBlobType, BCRYPT_KEY_HANDLE *phKey, PUCHAR pbKeyObject, ULONG cbKeyObject, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags
BCryptImportKeyPair;Imports a public/private key pair from a key BLOB.;BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE hImportKey, LPCWSTR pszBlobType, BCRYPT_KEY_HANDLE *phKey, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags
BCRYPT_INIT_AUTH_MODE_INFO;Initializes a BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO structure for use in calls to BCryptEncrypt and BCryptDecrypt functions.;_AUTH_INFO_STRUCT_
BCryptKeyDerivation;Derives a key without requiring a secret agreement.;BCRYPT_KEY_HANDLE hKey, BCryptBufferDesc *pParameterList, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG *pcbResult, ULONG dwFlags
BCryptOpenAlgorithmProvider;Loads and initializes a CNG provider.;BCRYPT_ALG_HANDLE *phAlgorithm, LPCWSTR pszAlgId, LPCWSTR pszImplementation, ULONG dwFlags
BCryptProcessMultiOperations;The BCryptProcessMultiOperations function processes a sequence of operations on a multi-object state.;BCRYPT_HANDLE hObject, BCRYPT_MULTI_OPERATION_TYPE operationType, PVOID pOperations, ULONG cbOperations, ULONG dwFlags
BCryptQueryContextConfiguration;Retrieves the current configuration for the specified CNG context.;ULONG dwTable, LPCWSTR pszContext, ULONG *pcbBuffer, PCRYPT_CONTEXT_CONFIG *ppBuffer
BCryptQueryContextFunctionConfiguration;Obtains the cryptographic function configuration information for an existing CNG context.;ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, ULONG *pcbBuffer, PCRYPT_CONTEXT_FUNCTION_CONFIG *ppBuffer
BCryptQueryContextFunctionProperty;Obtains the value of a named property for a cryptographic function in an existing CNG context.;ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, LPCWSTR pszProperty, ULONG *pcbValue, PUCHAR *ppbValue
BCryptQueryProviderRegistration;Retrieves information about a CNG provider.;LPCWSTR pszProvider, ULONG dwMode, ULONG dwInterface, ULONG *pcbBuffer, PCRYPT_PROVIDER_REG *ppBuffer
BCryptRegisterConfigChangeNotify;Creates a user mode CNG configuration change event handler.;PRKEVENT pEvent
BCryptRegisterConfigChangeNotify;;HANDLE *phEvent
BCryptRemoveContextFunction;Removes a cryptographic function from the list of functions that are supported by an existing CNG context.;ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction
BCryptResolveProviders;Obtains a collection of all of the providers that meet the specified criteria.;LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, LPCWSTR pszProvider, ULONG dwMode, ULONG dwFlags, ULONG *pcbBuffer, PCRYPT_PROVIDER_REFS *ppBuffer
BCryptSecretAgreement;Creates a secret agreement value from a private and a public key.;BCRYPT_KEY_HANDLE hPrivKey, BCRYPT_KEY_HANDLE hPubKey, BCRYPT_SECRET_HANDLE *phAgreedSecret, ULONG dwFlags
BCryptSetContextFunctionProperty;Sets the value of a named property for a cryptographic function in an existing CNG context.;ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, LPCWSTR pszProperty, ULONG cbValue, PUCHAR pbValue
BCryptSetProperty;Sets the value of a named property for a CNG object.;BCRYPT_HANDLE hObject, LPCWSTR pszProperty, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags
BCryptSignHash;Creates a signature of a hash value.;BCRYPT_KEY_HANDLE hKey, VOID *pPaddingInfo, PUCHAR pbInput, ULONG cbInput, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags
BCryptUnregisterConfigChangeNotify;;HANDLE hEvent
BCryptUnregisterConfigChangeNotify;Removes a user mode CNG configuration change event handler that was created by using the BCryptRegisterConfigChangeNotify(HANDLE*) function.;PRKEVENT pEvent
BCryptVerifySignature;Verifies that the specified signature matches the specified hash.;BCRYPT_KEY_HANDLE hKey, VOID *pPaddingInfo, PUCHAR pbHash, ULONG cbHash, PUCHAR pbSignature, ULONG cbSignature, ULONG dwFlags
BeginDeferWindowPos;Allocates memory for a multiple-window- position structure and returns the handle to the structure.;int nNumWindows
BeginNtmsDeviceChangeDetection;The BeginNtmsDeviceChangeDetection function allows the application to begin a device change detection session.;HANDLE hSession, LPHANDLE lpDetectHandle
BeginPaint;The BeginPaint function prepares the specified window for painting and fills a PAINTSTRUCT structure with information about the painting.;HWND hWnd, LPPAINTSTRUCT lpPaint
BeginPath;The BeginPath function opens a path bracket in the specified device context.;HDC hdc
BeginUpdateResourceA;Retrieves a handle that can be used by the UpdateResource function to add, delete, or replace resources in a binary module.;LPCSTR pFileName, BOOL bDeleteExistingResources
BeginUpdateResourceW;Retrieves a handle that can be used by the UpdateResource function to add, delete, or replace resources in a binary module.;LPCWSTR pFileName, BOOL bDeleteExistingResources
ber_bvfree;The ber_bvfree function frees a berval structure.;berval *bv
binaryBlobToString;Converts a binary data BLOB to a string. This method uses the CryptBinaryToString function to perform the conversion. This method was first defined in the IEnroll4 interface.;LONG Flags, PCRYPT_DATA_BLOB pblobBinary, LPWSTR *ppwszString
BinarySDToSecurityDescriptor;Converts a binary security descriptor to an IADsSecurityDescriptor object.;PSECURITY_DESCRIPTOR pSecurityDescriptor, VARIANT *pVarsec, LPCWSTR pszServerName, LPCWSTR userName, LPCWSTR passWord, DWORD dwFlags
binaryToString;Converts a binary data BLOB to a string. This method was first defined in the ICEnroll4 interface.;LONG Flags, BSTR strBinary, BSTR *pstrEncoded
BindIoCompletionCallback;Associates the I/O completion port owned by the thread pool with the specified file handle. On completion of an I/O request involving this file, a non-I/O worker thread will execute the specified callback function.;HANDLE FileHandle, LPOVERLAPPED_COMPLETION_ROUTINE Function, ULONG Flags
bind;The bind function associates a local address with a socket.;SOCKET s, const sockaddr *addr, int namelen
bind;The bind function associates a local address with a socket.;SOCKET s, const sockaddr *name, int namelen
BitBlt;The BitBlt function performs a bit-block transfer of the color data corresponding to a rectangle of pixels from the specified source device context into a destination device context.;HDC hdc, int x, int y, int cx, int cy, HDC hdcSrc, int x1, int y1, DWORD rop
BizruleGroupSupported;Returns a Boolean value that specifies whether this IAzAuthorizationStore3 object supports application groups that use business rule (BizRule) scripts.;VARIANT_BOOL *pbSupported
BlockInput;Blocks keyboard and mouse input events from reaching applications.;BOOL fBlockIt
BringWindowToTop;Brings the specified window to the top of the Z order. If the window is a top-level window, it is activated. If the window is a child window, the top-level parent window associated with the child window is activated.;HWND hWnd
BroadcastSystemMessageExA;Sends a message to the specified recipients.;DWORD flags, LPDWORD lpInfo, UINT Msg, WPARAM wParam, LPARAM lParam, PBSMINFO pbsmInfo
BroadcastSystemMessageExW;Sends a message to the specified recipients.;DWORD flags, LPDWORD lpInfo, UINT Msg, WPARAM wParam, LPARAM lParam, PBSMINFO pbsmInfo
BroadcastSystemMessage;Sends a message to the specified recipients.;DWORD flags, LPDWORD lpInfo, UINT Msg, WPARAM wParam, LPARAM lParam
BroadcastSystemMessageW;Sends a message to the specified recipients.;DWORD flags, LPDWORD lpInfo, UINT Msg, WPARAM wParam, LPARAM lParam
BrowseForGPO;The BrowseForGPO function creates a GPO browser dialog box that allows the user to open or create a GPO.;LPGPOBROWSEINFO lpBrowseInfo
BuildCommDCBA;Fills a specified DCB structure with values specified in a device-control string.;LPCSTR lpDef, LPDCB lpDCB
BuildCommDCBAndTimeoutsA;Translates a device-definition string into appropriate device-control block codes and places them into a device control block.;LPCSTR lpDef, LPDCB lpDCB, LPCOMMTIMEOUTS lpCommTimeouts
BuildCommDCBAndTimeoutsW;Translates a device-definition string into appropriate device-control block codes and places them into a device control block.;LPCWSTR lpDef, LPDCB lpDCB, LPCOMMTIMEOUTS lpCommTimeouts
BuildCommDCBW;Fills a specified DCB structure with values specified in a device-control string.;LPCWSTR lpDef, LPDCB lpDCB
BuildExplicitAccessWithNameA;Initializes an EXPLICIT_ACCESS structure with data specified by the caller. The trustee is identified by a name string.;PEXPLICIT_ACCESS_A pExplicitAccess, LPSTR pTrusteeName, DWORD AccessPermissions, ACCESS_MODE AccessMode, DWORD Inheritance
BuildExplicitAccessWithNameW;Initializes an EXPLICIT_ACCESS structure with data specified by the caller. The trustee is identified by a name string.;PEXPLICIT_ACCESS_W pExplicitAccess, LPWSTR pTrusteeName, DWORD AccessPermissions, ACCESS_MODE AccessMode, DWORD Inheritance
BuildSecurityDescriptorA;Allocates and initializes a new security descriptor.;PTRUSTEE_A pOwner, PTRUSTEE_A pGroup, ULONG cCountOfAccessEntries, PEXPLICIT_ACCESS_A pListOfAccessEntries, ULONG cCountOfAuditEntries, PEXPLICIT_ACCESS_A pListOfAuditEntries, PSECURITY_DESCRIPTOR pOldSD, PULONG pSizeNewSD, PSECURITY_DESCRIPTOR *pNewSD
BuildSecurityDescriptorW;Allocates and initializes a new security descriptor.;PTRUSTEE_W pOwner, PTRUSTEE_W pGroup, ULONG cCountOfAccessEntries, PEXPLICIT_ACCESS_W pListOfAccessEntries, ULONG cCountOfAuditEntries, PEXPLICIT_ACCESS_W pListOfAuditEntries, PSECURITY_DESCRIPTOR pOldSD, PULONG pSizeNewSD, PSECURITY_DESCRIPTOR *pNewSD
BuildTrusteeWithNameA;Initializes a TRUSTEE structure. The caller specifies the trustee name. The function sets other members of the structure to default values.;PTRUSTEE_A pTrustee, LPSTR pName
BuildTrusteeWithNameW;Initializes a TRUSTEE structure. The caller specifies the trustee name. The function sets other members of the structure to default values.;PTRUSTEE_W pTrustee, LPWSTR pName
BuildTrusteeWithObjectsAndNameA;Initializes a TRUSTEE structure with the object-specific access control entry (ACE) information and initializes the remaining members of the structure to default values. The caller also specifies the name of the trustee.;PTRUSTEE_A pTrustee, POBJECTS_AND_NAME_A pObjName, SE_OBJECT_TYPE ObjectType, LPSTR ObjectTypeName, LPSTR InheritedObjectTypeName, LPSTR Name
BuildTrusteeWithObjectsAndNameW;Initializes a TRUSTEE structure with the object-specific access control entry (ACE) information and initializes the remaining members of the structure to default values. The caller also specifies the name of the trustee.;PTRUSTEE_W pTrustee, POBJECTS_AND_NAME_W pObjName, SE_OBJECT_TYPE ObjectType, LPWSTR ObjectTypeName, LPWSTR InheritedObjectTypeName, LPWSTR Name
BuildTrusteeWithObjectsAndSidA;Initializes a TRUSTEE structure with the object-specific access control entry (ACE) information and initializes the remaining members of the structure to default values.;PTRUSTEE_A pTrustee, POBJECTS_AND_SID pObjSid, GUID *pObjectGuid, GUID *pInheritedObjectGuid, PSID pSid
BuildTrusteeWithObjectsAndSidW;Initializes a TRUSTEE structure with the object-specific access control entry (ACE) information and initializes the remaining members of the structure to default values.;PTRUSTEE_W pTrustee, POBJECTS_AND_SID pObjSid, GUID *pObjectGuid, GUID *pInheritedObjectGuid, PSID pSid
BuildTrusteeWithSidA;Initializes a TRUSTEE structure. The caller specifies the security identifier (SID) of the trustee. The function sets other members of the structure to default values and does not look up the name associated with the SID.;PTRUSTEE_A pTrustee, PSID pSid
BuildTrusteeWithSidW;Initializes a TRUSTEE structure. The caller specifies the security identifier (SID) of the trustee. The function sets other members of the structure to default values and does not look up the name associated with the SID.;PTRUSTEE_W pTrustee, PSID pSid
CAImportPFX;Imports a certification authority (CA) certificate and its associated private key into the local computer store.;const BSTR bstrFileName, const BSTR bstrPasswd, VARIANT_BOOL bOverwriteExistingKey, ICertSrvSetupKeyInformation **ppVal
CalculatePopupWindowPosition;Calculates an appropriate pop-up window position using the specified anchor point, pop-up window size, flags, and the optional exclude rectangle.;const POINT *anchorPoint, const SIZE *windowSize, UINT flags, RECT *excludeRect, RECT *popupWindowPosition
CallbackMayRunLong;Indicates that the callback may not return quickly.;PTP_CALLBACK_INSTANCE pci
CallEnclave;Calls a function within an enclave.;LPENCLAVE_ROUTINE lpRoutine, LPVOID lpParameter, BOOL fWaitForThread, LPVOID *lpReturnValue
CallMsgFilterA;Passes the specified message and hook code to the hook procedures associated with the WH_SYSMSGFILTER and WH_MSGFILTER hooks.;LPMSG lpMsg, int nCode
CallMsgFilterW;Passes the specified message and hook code to the hook procedures associated with the WH_SYSMSGFILTER and WH_MSGFILTER hooks.;LPMSG lpMsg, int nCode
CallNamedPipeA;Connects to a message-type pipe (and waits if an instance of the pipe is not available), writes to and reads from the pipe, and then closes the pipe.;LPCSTR lpNamedPipeName, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesRead, DWORD nTimeOut
CallNextHookEx;Passes the hook information to the next hook procedure in the current hook chain. A hook procedure can call this function either before or after processing the hook information.;HHOOK hhk, int nCode, WPARAM wParam, LPARAM lParam
CallWindowProcA;Passes message information to the specified window procedure.;WNDPROC lpPrevWndFunc, HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam
CallWindowProcW;Passes message information to the specified window procedure.;WNDPROC lpPrevWndFunc, HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam
CancelConnectNotify;Calls CancelConnectNotify before and after each cancel connection operation (WNetCancelConnection and WNetCancelConnection2).;LPNOTIFYINFO lpNotifyInfo, LPNOTIFYCANCEL lpCancelInfo
CancelDC;The CancelDC function cancels any pending operation on the specified device context (DC).;HDC hdc
CancelIfTimestampConfigChange;This function is reserved for system use, and you should not call it from your code.;HIFTIMESTAMPCHANGE NotificationHandle
CancelIPChangeNotify;Cancels notification of IPv4 address and route changes previously requested with successful calls to the NotifyAddrChange or NotifyRouteChange functions.;LPOVERLAPPED notifyOverlapped
CancelMibChangeNotify2;Deregisters for change notifications for IP interface changes, IP address changes, IP route changes, Teredo port changes, and when the unicast IP address table is stable and can be retrieved.;HANDLE NotificationHandle
CancelNtmsLibraryRequest;The CancelNtmsLibraryRequest function cancels outstanding RSM requests, such as calls to the CleanNtmsDrive function. If the library is busy, RSM queues the cancellation and returns success.;HANDLE hSession, LPNTMS_GUID lpRequestId
CancelNtmsOperatorRequest;The CancelNtmsOperatorRequest function cancels the specified RSM operator request.;HANDLE hSession, LPNTMS_GUID lpRequestId
CancelThreadpoolIo;Cancels the notification from the StartThreadpoolIo function.;PTP_IO pio
CancelWaitableTimer;Sets the specified waitable timer to the inactive state.;HANDLE hTimer
CapabilitiesRequestAndCapabilitiesReply;Retrieves a string describing a monitor's capabilities.;HANDLE hMonitor, LPSTR pszASCIICapabilitiesString, DWORD dwCapabilitiesStringLengthInCharacters
CaptureInterfaceHardwareCrossTimestamp;This function is reserved for system use, and you should not call it from your code.;const NET_LUID *InterfaceLuid, PINTERFACE_HARDWARE_CROSSTIMESTAMP CrossTimestamp
CascadeWindows;Cascades the specified child windows of the specified parent window.;HWND hwndParent, UINT wHow, const RECT *lpRect, UINT cKids, const HWND *lpKids
CertAddCertificateContextToStore;Adds a certificate context to the certificate store.;HCERTSTORE hCertStore, PCCERT_CONTEXT pCertContext, DWORD dwAddDisposition, PCCERT_CONTEXT *ppStoreContext
CertAddCertificateLinkToStore;Adds a link in a certificate store to a certificate context in a different store.;HCERTSTORE hCertStore, PCCERT_CONTEXT pCertContext, DWORD dwAddDisposition, PCCERT_CONTEXT *ppStoreContext
CertAddCRLContextToStore;Adds a certificate revocation list (CRL) context to the specified certificate store.;HCERTSTORE hCertStore, PCCRL_CONTEXT pCrlContext, DWORD dwAddDisposition, PCCRL_CONTEXT *ppStoreContext
CertAddCRLLinkToStore;Adds a link in a store to a certificate revocation list (CRL) context in a different store.;HCERTSTORE hCertStore, PCCRL_CONTEXT pCrlContext, DWORD dwAddDisposition, PCCRL_CONTEXT *ppStoreContext
CertAddCTLContextToStore;Adds a certificate trust list (CTL) context to a certificate store.;HCERTSTORE hCertStore, PCCTL_CONTEXT pCtlContext, DWORD dwAddDisposition, PCCTL_CONTEXT *ppStoreContext
CertAddCTLLinkToStore;The CertAddCTLLinkToStore function adds a link in a store to a certificate trust list (CTL) context in a different store. Instead of creating and adding a duplicate of a CTL context, this function adds a link to the original CTL context.;HCERTSTORE hCertStore, PCCTL_CONTEXT pCtlContext, DWORD dwAddDisposition, PCCTL_CONTEXT *ppStoreContext
CertAddEncodedCertificateToStore;Creates a certificate context from an encoded certificate and adds it to the certificate store.;HCERTSTORE hCertStore, DWORD dwCertEncodingType, const BYTE *pbCertEncoded, DWORD cbCertEncoded, DWORD dwAddDisposition, PCCERT_CONTEXT *ppCertContext
CertAddEncodedCertificateToSystemStoreA;Opens the specified system store and adds the encoded certificate to it.;LPCSTR szCertStoreName, const BYTE *pbCertEncoded, DWORD cbCertEncoded
CertAddEncodedCertificateToSystemStoreW;Opens the specified system store and adds the encoded certificate to it.;LPCWSTR szCertStoreName, const BYTE *pbCertEncoded, DWORD cbCertEncoded
CertAddEncodedCRLToStore;Creates a certificate revocation list (CRL) context from an encoded CRL and adds it to the certificate store.;HCERTSTORE hCertStore, DWORD dwCertEncodingType, const BYTE *pbCrlEncoded, DWORD cbCrlEncoded, DWORD dwAddDisposition, PCCRL_CONTEXT *ppCrlContext
CertAddEncodedCTLToStore;Creates a certificate trust list (CTL) context from an encoded CTL and adds it to the certificate store.;HCERTSTORE hCertStore, DWORD dwMsgAndCertEncodingType, const BYTE *pbCtlEncoded, DWORD cbCtlEncoded, DWORD dwAddDisposition, PCCTL_CONTEXT *ppCtlContext
CertAddEnhancedKeyUsageIdentifier;The CertAddEnhancedKeyUsageIdentifier function adds a usage identifier object identifier (OID) to the enhanced key usage (EKU) extended property of the certificate.;PCCERT_CONTEXT pCertContext, LPCSTR pszUsageIdentifier
CertAddRefServerOcspResponseContext;Increments the reference count for a CERT_SERVER_OCSP_RESPONSE_CONTEXT structure.;PCCERT_SERVER_OCSP_RESPONSE_CONTEXT pServerOcspResponseContext
CertAddRefServerOcspResponse;Increments the reference count for an HCERT_SERVER_OCSP_RESPONSE handle.;HCERT_SERVER_OCSP_RESPONSE hServerOcspResponse
CertAddSerializedElementToStore;Adds a serialized certificate, certificate revocation list (CRL), or certificate trust list (CTL) element to the store.;HCERTSTORE hCertStore, const BYTE *pbElement, DWORD cbElement, DWORD dwAddDisposition, DWORD dwFlags, DWORD dwContextTypeFlags, DWORD *pdwContextType, const void **ppvContext
CertAddStoreToCollection;The CertAddStoreToCollection function adds a sibling certificate store to a collection certificate store.;HCERTSTORE hCollectionStore, HCERTSTORE hSiblingStore, DWORD dwUpdateFlags, DWORD dwPriority
CertAlgIdToOID;Converts a CryptoAPI algorithm identifier (ALG_ID) to an Abstract Syntax Notation One (ASN.1) object identifier (OID) string.;DWORD dwAlgId
CertCloseServerOcspResponse;Closes an online certificate status protocol (OCSP) server response handle.;HCERT_SERVER_OCSP_RESPONSE hServerOcspResponse, DWORD dwFlags
CertCloseStore;Closes a certificate store handle and reduces the reference count on the store.;HCERTSTORE hCertStore, DWORD dwFlags
CertCompareCertificate;Determines whether two certificates are identical by comparing the issuer name and serial number of the certificates.;DWORD dwCertEncodingType, PCERT_INFO pCertId1, PCERT_INFO pCertId2
CertCompareCertificateName;The CertCompareCertificateName function compares two certificate CERT_NAME_BLOB structures to determine whether they are identical. The CERT_NAME_BLOB structures are used for the subject and the issuer of certificates.;DWORD dwCertEncodingType, PCERT_NAME_BLOB pCertName1, PCERT_NAME_BLOB pCertName2
CertCompareIntegerBlob;The CertCompareIntegerBlob function compares two integer BLOBs to determine whether they represent equal numeric values.;PCRYPT_INTEGER_BLOB pInt1, PCRYPT_INTEGER_BLOB pInt2
CertComparePublicKeyInfo;The CertComparePublicKeyInfo function compares two encoded public keys to determine whether they are identical.;DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pPublicKey1, PCERT_PUBLIC_KEY_INFO pPublicKey2
CertControlStore;Allows an application to be notified when there is a difference between the contents of a cached store in use and the contents of that store as it is persisted to storage.;HCERTSTORE hCertStore, DWORD dwFlags, DWORD dwCtrlType, void const *pvCtrlPara
CertCreateCertificateChainEngine;The CertCreateCertificateChainEngine function creates a new, nondefault chain engine for an application.;PCERT_CHAIN_ENGINE_CONFIG pConfig, HCERTCHAINENGINE *phChainEngine
CertCreateCertificateContext;Creates a certificate context from an encoded certificate. The created context is not persisted to a certificate store. The function makes a copy of the encoded certificate within the created context.;DWORD dwCertEncodingType, const BYTE *pbCertEncoded, DWORD cbCertEncoded
CertCreateContext;Creates the specified context from the encoded bytes. The context created does not include any extended properties.;DWORD dwContextType, DWORD dwEncodingType, const BYTE *pbEncoded, DWORD cbEncoded, DWORD dwFlags, PCERT_CREATE_CONTEXT_PARA pCreatePara
CertCreateCRLContext;The CertCreateCRLContext function creates a certificate revocation list (CRL) context from an encoded CRL. The created context is not persisted to a certificate store. It makes a copy of the encoded CRL within the created context.;DWORD dwCertEncodingType, const BYTE *pbCrlEncoded, DWORD cbCrlEncoded
CertCreateCTLContext;The CertCreateCTLContext function creates a certificate trust list (CTL) context from an encoded CTL. The created context is not persisted to a certificate store. The function makes a copy of the encoded CTL within the created context.;DWORD dwMsgAndCertEncodingType, const BYTE *pbCtlEncoded, DWORD cbCtlEncoded
CertCreateCTLEntryFromCertificateContextProperties;The CertCreateCTLEntryFromCertificateContextProperties function creates a certificate trust list (CTL) entry whose attributes are the properties of the certificate context. The SubjectIdentifier in the CTL entry is the SHA1 hash of the certificate.;PCCERT_CONTEXT pCertContext, DWORD cOptAttr, PCRYPT_ATTRIBUTE rgOptAttr, DWORD dwFlags, void *pvReserved, PCTL_ENTRY pCtlEntry, DWORD *pcbCtlEntry
CertCreateSelfSignCertificate;Builds a self-signed certificate and returns a pointer to a CERT_CONTEXT structure that represents the certificate.;HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey, PCERT_NAME_BLOB pSubjectIssuerBlob, DWORD dwFlags, PCRYPT_KEY_PROV_INFO pKeyProvInfo, PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm, PSYSTEMTIME pStartTime, PSYSTEMTIME pEndTime, PCERT_EXTENSIONS pExtensions
CertDeleteCertificateFromStore;The CertDeleteCertificateFromStore function deletes the specified certificate context from the certificate store.;PCCERT_CONTEXT pCertContext
CertDeleteCRLFromStore;The CertDeleteCRLFromStore function deletes the specified certificate revocation list (CRL) context from the certificate store.;PCCRL_CONTEXT pCrlContext
CertDeleteCTLFromStore;The CertDeleteCTLFromStore function deletes the specified certificate trust list (CTL) context from a certificate store.;PCCTL_CONTEXT pCtlContext
CertDuplicateCertificateChain;The CertDuplicateCertificateChain function duplicates a pointer to a certificate chain by incrementing the chain's reference count.;PCCERT_CHAIN_CONTEXT pChainContext
CertDuplicateCertificateContext;Duplicates a certificate context by incrementing its reference count.;PCCERT_CONTEXT pCertContext
CertDuplicateCRLContext;The CertDuplicateCRLContext function duplicates a certificate revocation list (CRL) context by incrementing its reference count.;PCCRL_CONTEXT pCrlContext
CertDuplicateCTLContext;The CertDuplicateCTLContext function duplicates a certificate trust list (CTL) context by incrementing its reference count.;PCCTL_CONTEXT pCtlContext
CertDuplicateStore;Duplicates a store handle by incrementing the store's reference count.;HCERTSTORE hCertStore
CertEnumCertificateContextProperties;The CertEnumCertificateContextProperties function retrieves the first or next extended property associated with a certificate context.;PCCERT_CONTEXT pCertContext, DWORD dwPropId
CertEnumCertificatesInStore;Retrieves the first or next certificate in a certificate store. Used in a loop, this function can retrieve in sequence all certificates in a certificate store.;HCERTSTORE hCertStore, PCCERT_CONTEXT pPrevCertContext
CertEnumCRLContextProperties;The CertEnumCRLContextProperties function retrieves the first or next extended property associated with a certificate revocation list (CRL) context.;PCCRL_CONTEXT pCrlContext, DWORD dwPropId
CertEnumCRLsInStore;The CertEnumCRLsInStore function retrieves the first or next certificate revocation list (CRL) context in a certificate store. Used in a loop, this function can retrieve in sequence all CRL contexts in a certificate store.;HCERTSTORE hCertStore, PCCRL_CONTEXT pPrevCrlContext
CertEnumCTLContextProperties;The CertEnumCTLContextProperties function retrieves the first or next extended property associated with a certificate trust list (CTL) context. Used in a loop, this function can retrieve in sequence all extended properties associated with a CTL context.;PCCTL_CONTEXT pCtlContext, DWORD dwPropId
CertEnumCTLsInStore;The CertEnumCTLsInStore function retrieves the first or next certificate trust list (CTL) context in a certificate store. Used in a loop, this function can retrieve in sequence all CTL contexts in a certificate store.;HCERTSTORE hCertStore, PCCTL_CONTEXT pPrevCtlContext
CertEnumPhysicalStore;The CertEnumPhysicalStore function retrieves the physical stores on a computer. The function calls the provided callback function for each physical store found.;const void *pvSystemStore, DWORD dwFlags, void *pvArg, PFN_CERT_ENUM_PHYSICAL_STORE pfnEnum
CertEnumSubjectInSortedCTL;Retrieves the first or next TrustedSubject in a sorted certificate trust list (CTL).;PCCTL_CONTEXT pCtlContext, void **ppvNextSubject, PCRYPT_DER_BLOB pSubjectIdentifier, PCRYPT_DER_BLOB pEncodedAttributes
CertEnumSystemStoreLocation;The CertEnumSystemStoreLocation function retrieves all of the system store locations. The function calls the provided callback function for each system store location found.;DWORD dwFlags, void *pvArg, PFN_CERT_ENUM_SYSTEM_STORE_LOCATION pfnEnum
CertEnumSystemStore;The CertEnumSystemStore function retrieves the system stores available. The function calls the provided callback function for each system store found.;DWORD dwFlags, void *pvSystemStoreLocationPara, void *pvArg, PFN_CERT_ENUM_SYSTEM_STORE pfnEnum
CertFindAttribute;The CertFindAttribute function finds the first attribute in the CRYPT_ATTRIBUTE array, as identified by its object identifier (OID).;LPCSTR pszObjId, DWORD cAttr, CRYPT_ATTRIBUTE [] rgAttr
CertFindCertificateInCRL;The CertFindCertificateInCRL function searches the certificate revocation list (CRL) for the specified certificate.;PCCERT_CONTEXT pCert, PCCRL_CONTEXT pCrlContext, DWORD dwFlags, void *pvReserved, PCRL_ENTRY *ppCrlEntry
CertFindCertificateInStore;Finds the first or next certificate context in a certificate store that matches a search criteria established by the dwFindType and its associated pvFindPara.;HCERTSTORE hCertStore, DWORD dwCertEncodingType, DWORD dwFindFlags, DWORD dwFindType, const void *pvFindPara, PCCERT_CONTEXT pPrevCertContext
CertFindChainInStore;Finds the first or next certificate in a store that meets the specified criteria.;HCERTSTORE hCertStore, DWORD dwCertEncodingType, DWORD dwFindFlags, DWORD dwFindType, const void *pvFindPara, PCCERT_CHAIN_CONTEXT pPrevChainContext
CertFindCRLInStore;Finds the first or next certificate revocation list (CRL) context in a certificate store that matches a search criterion established by the dwFindType parameter and the associated pvFindPara parameter.;HCERTSTORE hCertStore, DWORD dwCertEncodingType, DWORD dwFindFlags, DWORD dwFindType, const void *pvFindPara, PCCRL_CONTEXT pPrevCrlContext
CertFindCTLInStore;Finds the first or next certificate trust list (CTL) context that matches search criteria established by the dwFindType and its associated pvFindPara.;HCERTSTORE hCertStore, DWORD dwMsgAndCertEncodingType, DWORD dwFindFlags, DWORD dwFindType, const void *pvFindPara, PCCTL_CONTEXT pPrevCtlContext
CertFindExtension;The CertFindExtension function finds the first extension in the CERT_EXTENSION array, as identified by its object identifier (OID).;LPCSTR pszObjId, DWORD cExtensions, CERT_EXTENSION [] rgExtensions
CertFindRDNAttr;The CertFindRDNAttr function finds the first RDN attribute identified by its object identifier (OID) in a list of the Relative Distinguished Names (RDN).;LPCSTR pszObjId, PCERT_NAME_INFO pName
CertFindSubjectInCTL;The CertFindSubjectInCTL function attempts to find the specified subject in a certificate trust list (CTL).;DWORD dwEncodingType, DWORD dwSubjectType, void *pvSubject, PCCTL_CONTEXT pCtlContext, DWORD dwFlags
CertFindSubjectInSortedCTL;The CertFindSubjectInSortedCTL function attempts to find the specified subject in a sorted certificate trust list (CTL).;PCRYPT_DATA_BLOB pSubjectIdentifier, PCCTL_CONTEXT pCtlContext, DWORD dwFlags, void *pvReserved, PCRYPT_DER_BLOB pEncodedAttributes
CertFreeCertificateChainEngine;The CertFreeCertificateChainEngine function frees a certificate trust engine.;HCERTCHAINENGINE hChainEngine
CertFreeCertificateChainList;Frees the array of pointers to chain contexts.;PCCERT_CHAIN_CONTEXT *prgpSelection
CertFreeCertificateChain;The CertFreeCertificateChain function frees a certificate chain by reducing its reference count. If the reference count becomes zero, memory allocated for the chain is released.;PCCERT_CHAIN_CONTEXT pChainContext
CertFreeCertificateContext;Frees a certificate context by decrementing its reference count. When the reference count goes to zero, CertFreeCertificateContext frees the memory used by a certificate context.;PCCERT_CONTEXT pCertContext
CertFreeCRLContext;Frees a certificate revocation list (CRL) context by decrementing its reference count.;PCCRL_CONTEXT pCrlContext
CertFreeCTLContext;Frees a certificate trust list (CTL) context by decrementing its reference count.;PCCTL_CONTEXT pCtlContext
CertFreeServerOcspResponseContext;Decrements the reference count for a CERT_SERVER_OCSP_RESPONSE_CONTEXT structure.;PCCERT_SERVER_OCSP_RESPONSE_CONTEXT pServerOcspResponseContext
CertGetCertificateChain;Builds a certificate chain context starting from an end certificate and going back, if possible, to a trusted root certificate.;HCERTCHAINENGINE hChainEngine, PCCERT_CONTEXT pCertContext, LPFILETIME pTime, HCERTSTORE hAdditionalStore, PCERT_CHAIN_PARA pChainPara, DWORD dwFlags, LPVOID pvReserved, PCCERT_CHAIN_CONTEXT *ppChainContext
CertGetCertificateContextProperty;Retrieves the information contained in an extended property of a certificate context.;PCCERT_CONTEXT pCertContext, DWORD dwPropId, void *pvData, DWORD *pcbData
CertGetCRLContextProperty;Gets an extended property for the specified certificate revocation list (CRL) context.;PCCRL_CONTEXT pCrlContext, DWORD dwPropId, void *pvData, DWORD *pcbData
CertGetCRLFromStore;Gets the first or next certificate revocation list (CRL) context from the certificate store for the specified issuer.;HCERTSTORE hCertStore, PCCERT_CONTEXT pIssuerContext, PCCRL_CONTEXT pPrevCrlContext, DWORD *pdwFlags
CertGetCTLContextProperty;Retrieves an extended property of a certificate trust list (CTL) context.;PCCTL_CONTEXT pCtlContext, DWORD dwPropId, void *pvData, DWORD *pcbData
CertGetEnhancedKeyUsage;Returns information from the enhanced key usage (EKU) extension or the EKU extended property of a certificate.;PCCERT_CONTEXT pCertContext, DWORD dwFlags, PCERT_ENHKEY_USAGE pUsage, DWORD *pcbUsage
CertGetIntendedKeyUsage;Acquires the intended key usage bytes from a certificate.;DWORD dwCertEncodingType, PCERT_INFO pCertInfo, BYTE *pbKeyUsage, DWORD cbKeyUsage
CertGetIssuerCertificateFromStore;Retrieves the certificate context from the certificate store for the first or next issuer of the specified subject certificate. The new Certificate Chain Verification Functions are recommended instead of the use of this function.;HCERTSTORE hCertStore, PCCERT_CONTEXT pSubjectContext, PCCERT_CONTEXT pPrevIssuerContext, DWORD *pdwFlags
CertGetNameStringA;Obtains the subject or issuer name from a certificate CERT_CONTEXT structure and converts it to a null-terminated character string.;PCCERT_CONTEXT pCertContext, DWORD dwType, DWORD dwFlags, void *pvTypePara, LPSTR pszNameString, DWORD cchNameString
CertGetNameStringW;Obtains the subject or issuer name from a certificate CERT_CONTEXT structure and converts it to a null-terminated character string.;PCCERT_CONTEXT pCertContext, DWORD dwType, DWORD dwFlags, void *pvTypePara, LPWSTR pszNameString, DWORD cchNameString
CertGetPublicKeyLength;The CertGetPublicKeyLength function acquires the bit length of public/private keys from a public key BLOB.;DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pPublicKey
CertGetServerOcspResponseContext;Retrieves a non-blocking, time valid online certificate status protocol (OCSP) response context for the specified handle.;HCERT_SERVER_OCSP_RESPONSE hServerOcspResponse, DWORD dwFlags, LPVOID pvReserved
CertGetStoreProperty;Retrieves a store property.;HCERTSTORE hCertStore, DWORD dwPropId, void *pvData, DWORD *pcbData
CertGetSubjectCertificateFromStore;Returns from a certificate store a subject certificate context uniquely identified by its issuer and serial number.;HCERTSTORE hCertStore, DWORD dwCertEncodingType, PCERT_INFO pCertId
CertGetValidUsages;Returns an array of usages that consist of the intersection of the valid usages for all certificates in an array of certificates.;DWORD cCerts, PCCERT_CONTEXT *rghCerts, int *cNumOIDs, LPSTR *rghOIDs, DWORD *pcbOIDs
CertIsRDNAttrsInCertificateName;The CertIsRDNAttrsInCertificateName function compares the attributes in the certificate name with the specified CERT_RDN to determine whether all attributes are included there.;DWORD dwCertEncodingType, DWORD dwFlags, PCERT_NAME_BLOB pCertName, PCERT_RDN pRDN
CertIsStrongHashToSign;Determines whether the specified hash algorithm and the public key in the signing certificate can be used to perform strong signing.;PCCERT_STRONG_SIGN_PARA pStrongSignPara, LPCWSTR pwszCNGHashAlgid, PCCERT_CONTEXT pSigningCert
CertIsValidCRLForCertificate;The CertIsValidCRLForCertificate function checks a CRL to find out if it is a CRL that would include a specific certificate if that certificate were revoked.;PCCERT_CONTEXT pCert, PCCRL_CONTEXT pCrl, DWORD dwFlags, void *pvReserved
CertModifyCertificatesToTrust;Modifies the set of certificates in a certificate trust list (CTL) for a given purpose.;int cCerts, PCTL_MODIFY_REQUEST rgCerts, LPCSTR szPurpose, HWND hwnd, HCERTSTORE hcertstoreTrust, PCCERT_CONTEXT pccertSigner
CertNameToStrA;Converts an encoded name in a CERT_NAME_BLOB structure to a null-terminated character string.;DWORD dwCertEncodingType, PCERT_NAME_BLOB pName, DWORD dwStrType, LPSTR psz, DWORD csz
CertNameToStrW;Converts an encoded name in a CERT_NAME_BLOB structure to a null-terminated character string.;DWORD dwCertEncodingType, PCERT_NAME_BLOB pName, DWORD dwStrType, LPWSTR psz, DWORD csz
CertOIDToAlgId;Use the CryptFindOIDInfo function instead of this function because ALG_ID identifiers are no longer supported in CNG.;LPCSTR pszObjId
CertOpenServerOcspResponse;Opens a handle to an online certificate status protocol (OCSP) response associated with a server certificate chain.;PCCERT_CHAIN_CONTEXT pChainContext, DWORD dwFlags, PCERT_SERVER_OCSP_RESPONSE_OPEN_PARA pOpenPara
CertOpenStore;Opens a certificate store by using a specified store provider type.;LPCSTR lpszStoreProvider, DWORD dwEncodingType, HCRYPTPROV_LEGACY hCryptProv, DWORD dwFlags, const void *pvPara
CertOpenSystemStoreA;Opens the most common system certificate store. To open certificate stores with more complex requirements, such as file-based or memory-based stores, use CertOpenStore.;HCRYPTPROV_LEGACY hProv, LPCSTR szSubsystemProtocol
CertOpenSystemStoreW;Opens the most common system certificate store. To open certificate stores with more complex requirements, such as file-based or memory-based stores, use CertOpenStore.;HCRYPTPROV_LEGACY hProv, LPCWSTR szSubsystemProtocol
CertRDNValueToStrA;The CertRDNValueToStr function converts a name in a CERT_RDN_VALUE_BLOB to a null-terminated character string.;DWORD dwValueType, PCERT_RDN_VALUE_BLOB pValue, LPSTR psz, DWORD csz
CertRDNValueToStrW;The CertRDNValueToStr function converts a name in a CERT_RDN_VALUE_BLOB to a null-terminated character string.;DWORD dwValueType, PCERT_RDN_VALUE_BLOB pValue, LPWSTR psz, DWORD csz
CertRegisterPhysicalStore;Adds a physical store to a registry system store collection.;const void *pvSystemStore, DWORD dwFlags, LPCWSTR pwszStoreName, PCERT_PHYSICAL_STORE_INFO pStoreInfo, void *pvReserved
CertRegisterSystemStore;Registers a system store.;const void *pvSystemStore, DWORD dwFlags, PCERT_SYSTEM_STORE_INFO pStoreInfo, void *pvReserved
CertRemoveEnhancedKeyUsageIdentifier;The CertRemoveEnhancedKeyUsageIdentifier function removes a usage identifier object identifier (OID) from the enhanced key usage (EKU) extended property of the certificate.;PCCERT_CONTEXT pCertContext, LPCSTR pszUsageIdentifier
CertRemoveStoreFromCollection;Removes a sibling certificate store from a collection store.;HCERTSTORE hCollectionStore, HCERTSTORE hSiblingStore
CertResyncCertificateChainEngine;Resyncs the certificate chain engine, which resynchronizes the stores the store's engine and updates the engine caches.;HCERTCHAINENGINE hChainEngine
CertRetrieveLogoOrBiometricInfo;Performs a URL retrieval of logo or biometric information specified in either the szOID_LOGOTYPE_EXT or szOID_BIOMETRIC_EXT certificate extension.;PCCERT_CONTEXT pCertContext, LPCSTR lpszLogoOrBiometricType, DWORD dwRetrievalFlags, DWORD dwTimeout, DWORD dwFlags, void *pvReserved, BYTE **ppbData, DWORD *pcbData, LPWSTR *ppwszMimeType
CertSaveStore;Saves the certificate store to a file or to a memory BLOB.;HCERTSTORE hCertStore, DWORD dwEncodingType, DWORD dwSaveAs, DWORD dwSaveTo, void *pvSaveToPara, DWORD dwFlags
CertSelectCertificateA;Presents a dialog box that allows the user to select certificates from a set of certificates that match the given criteria.;PCERT_SELECT_STRUCT_A pCertSelectInfo
CertSelectCertificateChains;Retrieves certificate chains based on specified selection criteria.;LPCGUID pSelectionContext, DWORD dwFlags, PCCERT_SELECT_CHAIN_PARA pChainParameters, DWORD cCriteria, PCCERT_SELECT_CRITERIA rgpCriteria, HCERTSTORE hStore, PDWORD pcSelection, PCCERT_CHAIN_CONTEXT **pprgpSelection
CertSelectCertificateW;Presents a dialog box that allows the user to select certificates from a set of certificates that match the given criteria.;PCERT_SELECT_STRUCT_W pCertSelectInfo
CertSelectionGetSerializedBlob;A helper function used to retrieve a serialized certificate BLOB from a CERT_SELECTUI_INPUT structure.;PCERT_SELECTUI_INPUT pcsi, void **ppOutBuffer, ULONG *pulOutBufferSize
CertSerializeCertificateStoreElement;The CertSerializeCertificateStoreElement function serializes a certificate context's encoded certificate and its encoded properties. The result can be persisted to storage so that the certificate and properties can be retrieved at a later time.;PCCERT_CONTEXT pCertContext, DWORD dwFlags, BYTE *pbElement, DWORD *pcbElement
CertSerializeCRLStoreElement;The CertSerializeCRLStoreElement function serializes an encoded certificate revocation list (CRL) context and the encoded representation of its properties.;PCCRL_CONTEXT pCrlContext, DWORD dwFlags, BYTE *pbElement, DWORD *pcbElement
CertSerializeCTLStoreElement;The CertSerializeCTLStoreElement function serializes an encoded certificate trust list (CTL) context and the encoded representation of its properties. The result can be persisted to storage so that the CTL and properties can be retrieved later.;PCCTL_CONTEXT pCtlContext, DWORD dwFlags, BYTE *pbElement, DWORD *pcbElement
CertSetCertificateContextPropertiesFromCTLEntry;Sets the properties on the certificate context by using the attributes in the specified certificate trust list (CTL) entry.;PCCERT_CONTEXT pCertContext, PCTL_ENTRY pCtlEntry, DWORD dwFlags
CertSetCertificateContextProperty;Sets an extended property for a specified certificate context.;PCCERT_CONTEXT pCertContext, DWORD dwPropId, DWORD dwFlags, const void *pvData
CertSetCRLContextProperty;Sets an extended property for the specified certificate revocation list (CRL) context.;PCCRL_CONTEXT pCrlContext, DWORD dwPropId, DWORD dwFlags, const void *pvData
CertSetCTLContextProperty;Sets an extended property for the specified certificate trust list (CTL) context.;PCCTL_CONTEXT pCtlContext, DWORD dwPropId, DWORD dwFlags, const void *pvData
CertSetEnhancedKeyUsage;The CertSetEnhancedKeyUsage function sets the enhanced key usage (EKU) property for the certificate.;PCCERT_CONTEXT pCertContext, PCERT_ENHKEY_USAGE pUsage
CertSetStoreProperty;The CertSetStoreProperty function sets a store property.;HCERTSTORE hCertStore, DWORD dwPropId, DWORD dwFlags, const void *pvData
CertSrvBackupClose;Closes the file opened by the CertSrvBackupOpenFile function.;HCSBC hbc
CertSrvBackupEnd;Ends a Certificate Services backup session.;HCSBC hbc
CertSrvBackupFree;Used to free memory allocated from certain Certificate Services Backup APIs.;VOID *pv
CertSrvBackupGetBackupLogsW;Retrieves the list of Certificate Services log file names that need to be backed up for the given backup context.;HCSBC hbc, PWSTR *ppwszzBackupLogFiles, DWORD *pcbSize
CertSrvBackupGetDatabaseNamesW;Retrieves the list of Certificate Services database file names that need to be backed up for the given backup context.;HCSBC hbc, PWSTR *ppwszzAttachmentInformation, DWORD *pcbSize
CertSrvBackupGetDynamicFileListW;Retrieves the list of Certificate Services dynamic file names that need to be backed up for the given backup context.;HCSBC hbc, PWSTR *ppwszzFileList, DWORD *pcbSize
CertSrvBackupOpenFileW;Opens a file for backup.;HCSBC hbc, WCHAR const *pwszAttachmentName, DWORD cbReadHintSize, LARGE_INTEGER *pliFileSize
CertSrvBackupPrepareW;Used to prepare a Certificate Services server for backup operations.;WCHAR const *pwszServerName, ULONG grbitJet, ULONG dwBackupFlags, HCSBC *phbc
CertSrvBackupRead;Reads bytes from a Certificate Services file.;HCSBC hbc, VOID *pvBuffer, DWORD cbBuffer, DWORD *pcbRead
CertSrvBackupTruncateLogs;Eliminates redundant records and reduces the disk storage space used by log files.;HCSBC hbc
CertSrvIsServerOnlineW;Determines if a Certificate Services server is online; if the Certificate Services server is not online, backup operations will not be successful.;WCHAR const *pwszServerName, BOOL *pfServerOnline
CertSrvRestoreEnd;Ends a Certificate Services restore session.;HCSBC hbc
CertSrvRestoreGetDatabaseLocationsW;Used both in backup and restore scenarios and retrieves the list of Certificate Services database location names for all the files being backed up or restored.;HCSBC hbc, PWSTR *ppwszzDatabaseLocationList, DWORD *pcbSize
CertSrvRestorePrepareW;Prepares a Certificate Services instance for restore operations.;WCHAR const *pwszServerName, ULONG dwRestoreFlags, HCSBC *phbc
CertSrvRestoreRegisterComplete;Completes a registered Certificate Services restore operation.;HCSBC hbc, HRESULT hrRestoreState
CertSrvRestoreRegisterThroughFile;Registers a Certificate Services restore.;HCSBC hbc, WCHAR const *pwszCheckPointFilePath, WCHAR const *pwszLogPath, CSEDB_RSTMAPW [] rgrstmap, LONG crstmap, WCHAR const *pwszBackupLogPath, ULONG genLow, ULONG genHigh
CertSrvRestoreRegisterW;Registers a Certificate Services restore.;HCSBC hbc, WCHAR const *pwszCheckPointFilePath, WCHAR const *pwszLogPath, CSEDB_RSTMAPW [] rgrstmap, LONG crstmap, WCHAR const *pwszBackupLogPath, ULONG genLow, ULONG genHigh
CertSrvServerControlW;Issues a service control command to programmatically stop Certificate Services.;WCHAR const *pwszServerName, DWORD dwControlFlags, DWORD *pcbOut, BYTE **ppbOut
CertStrToNameA;Converts a null-terminated X.500 string to an encoded certificate name.;DWORD dwCertEncodingType, LPCSTR pszX500, DWORD dwStrType, void *pvReserved, BYTE *pbEncoded, DWORD *pcbEncoded, LPCSTR *ppszError
CertStrToNameW;Converts a null-terminated X.500 string to an encoded certificate name.;DWORD dwCertEncodingType, LPCWSTR pszX500, DWORD dwStrType, void *pvReserved, BYTE *pbEncoded, DWORD *pcbEncoded, LPCWSTR *ppszError
CertUnregisterPhysicalStore;The CertUnregisterPhysicalStore function removes a physical store from a specified system store collection. CertUnregisterPhysicalStore can also be used to delete the physical store.;const void *pvSystemStore, DWORD dwFlags, LPCWSTR pwszStoreName
CertUnregisterSystemStore;The CertUnregisterSystemStore function unregisters a specified system store.;const void *pvSystemStore, DWORD dwFlags
CertVerifyCertificateChainPolicy;Checks a certificate chain to verify its validity, including its compliance with any specified validity policy criteria.;LPCSTR pszPolicyOID, PCCERT_CHAIN_CONTEXT pChainContext, PCERT_CHAIN_POLICY_PARA pPolicyPara, PCERT_CHAIN_POLICY_STATUS pPolicyStatus
CertVerifyCRLRevocation;Check a certificate revocation list (CRL) to determine whether a subject's certificate has or has not been revoked.;DWORD dwCertEncodingType, PCERT_INFO pCertId, DWORD cCrlInfo, PCRL_INFO [] rgpCrlInfo
CertVerifyCRLTimeValidity;The CertVerifyCRLTimeValidity function verifies the time validity of a CRL.;LPFILETIME pTimeToVerify, PCRL_INFO pCrlInfo
CertVerifyCTLUsage;Verifies that a subject is trusted for a specified usage by finding a signed and time-valid certificate trust list (CTL) with the usage identifiers that contain the subject.;DWORD dwEncodingType, DWORD dwSubjectType, void *pvSubject, PCTL_USAGE pSubjectUsage, DWORD dwFlags, PCTL_VERIFY_USAGE_PARA pVerifyUsagePara, PCTL_VERIFY_USAGE_STATUS pVerifyUsageStatus
CertVerifyRevocation;Checks the revocation status of the certificates contained in the rgpvContext array. If a certificate in the list is found to be revoked, no further checking is done.;DWORD dwEncodingType, DWORD dwRevType, DWORD cContext, PVOID [] rgpvContext, DWORD dwFlags, PCERT_REVOCATION_PARA pRevPara, PCERT_REVOCATION_STATUS pRevStatus
CertVerifySubjectCertificateContext;The CertVerifySubjectCertificateContext function performs the enabled verification checks on a certificate by checking the validity of the certificate's issuer. The new Certificate Chain Verification Functions are recommended instead of this function.;PCCERT_CONTEXT pSubject, PCCERT_CONTEXT pIssuer, DWORD *pdwFlags
CertVerifyTimeValidity;The CertVerifyTimeValidity function verifies the time validity of a certificate.;LPFILETIME pTimeToVerify, PCERT_INFO pCertInfo
CertVerifyValidityNesting;The CertVerifyValidityNesting function verifies that a subject certificate's time validity nests correctly within its issuer's time validity.;PCERT_INFO pSubjectInfo, PCERT_INFO pIssuerInfo
CertViewPropertiesA;The CertViewProperties function displays the properties for a certificate in a user interface (UI) dialog box. This function has no associated import library. You must use the LoadLibrary and GetProcAddress functions to dynamically link to CryptDlg.dll.;PCERT_VIEWPROPERTIES_STRUCT_A pCertViewInfo
CertViewPropertiesW;The CertViewProperties function displays the properties for a certificate in a user interface (UI) dialog box. This function has no associated import library. You must use the LoadLibrary and GetProcAddress functions to dynamically link to CryptDlg.dll.;PCERT_VIEWPROPERTIES_STRUCT_W pCertViewInfo
CfCloseHandle;Closes the file or directory handle returned by CfOpenFileWithOplock. This should not be used with standard Win32 file handles, only on handles used within CfApi.h.;HANDLE FileHandle
CfConnectSyncRoot;Initiates bi-directional communication between a sync provider and the sync filter API.;LPCWSTR SyncRootPath, const CF_CALLBACK_REGISTRATION *CallbackTable, LPCVOID CallbackContext, CF_CONNECT_FLAGS ConnectFlags, CF_CONNECTION_KEY *ConnectionKey
CfConvertToPlaceholder;Converts a normal file/directory to a placeholder file/directory.;HANDLE FileHandle, LPCVOID FileIdentity, DWORD FileIdentityLength, CF_CONVERT_FLAGS ConvertFlags, USN *ConvertUsn, LPOVERLAPPED Overlapped
CfCreatePlaceholders;Creates one or more new placeholder files or directories under a sync root tree.;LPCWSTR BaseDirectoryPath, CF_PLACEHOLDER_CREATE_INFO *PlaceholderArray, DWORD PlaceholderCount, CF_CREATE_FLAGS CreateFlags, PDWORD EntriesProcessed
CfDisconnectSyncRoot;Disconnects a communication channel created by CfConnectSyncRoot.;CF_CONNECTION_KEY ConnectionKey
CfExecute;The main entry point for all connection key based placeholder operations. It is intended to be used by a sync provider to respond to various callbacks from the platform.;const CF_OPERATION_INFO *OpInfo, CF_OPERATION_PARAMETERS *OpParams
CfGetCorrelationVector;Allows the sync provider to query the current correlation vector for a given placeholder file.;HANDLE FileHandle, PCORRELATION_VECTOR CorrelationVector
CfGetPlaceholderInfo;Gets various characteristics of a placeholder file or folder.;HANDLE FileHandle, CF_PLACEHOLDER_INFO_CLASS InfoClass, PVOID InfoBuffer, DWORD InfoBufferLength, PDWORD ReturnedLength
CfGetPlaceholderRangeInfo;Gets range information about a placeholder file or folder.;HANDLE FileHandle, CF_PLACEHOLDER_RANGE_INFO_CLASS InfoClass, LARGE_INTEGER StartingOffset, LARGE_INTEGER Length, PVOID InfoBuffer, DWORD InfoBufferLength, PDWORD ReturnedLength
CfGetPlaceholderStateFromAttributeTag;Gets a set of placeholder states based on the FileAttributes and ReparseTag values of the file.;DWORD FileAttributes, DWORD ReparseTag
CfGetPlaceholderStateFromFileInfo;Gets a set of placeholder states based on the various information of the file.;LPCVOID InfoBuffer, FILE_INFO_BY_HANDLE_CLASS InfoClass
CfGetPlaceholderStateFromFindData;Gets a set of placeholder states based on the WIN32_FIND_DATA structure.;const WIN32_FIND_DATA *FindData
CfGetPlatformInfo;Gets the platform version information.;CF_PLATFORM_INFO *PlatformVersion
CfGetSyncRootInfoByHandle;Gets various characteristics of the sync root containing a given file specified by a file handle.;HANDLE FileHandle, CF_SYNC_ROOT_INFO_CLASS InfoClass, PVOID InfoBuffer, DWORD InfoBufferLength, DWORD *ReturnedLength
CfGetSyncRootInfoByPath;Gets various sync root information given a file under the sync root.;LPCWSTR FilePath, CF_SYNC_ROOT_INFO_CLASS InfoClass, PVOID InfoBuffer, DWORD InfoBufferLength, DWORD *ReturnedLength
CfGetTransferKey;Initiates a transfer of data into a placeholder file or folder.;HANDLE FileHandle, CF_TRANSFER_KEY *TransferKey
CfGetWin32HandleFromProtectedHandle;Converts a protected handle to a Win32 handle so that it can be used with all handle-based Win32 APIs.;HANDLE ProtectedHandle
CfHydratePlaceholder;Hydrates a placeholder file by ensuring that the specified byte range is present on-disk in the placeholder. This is valid for files only.;HANDLE FileHandle, LARGE_INTEGER StartingOffset, LARGE_INTEGER Length, CF_HYDRATE_FLAGS HydrateFlags, LPOVERLAPPED Overlapped
CfOpenFileWithOplock;Opens an asynchronous opaque handle to a file or directory (for both normal and placeholder files) and sets up a proper oplock on it based on the open flags.;LPCWSTR FilePath, CF_OPEN_FILE_FLAGS Flags, PHANDLE ProtectedHandle
CfQuerySyncProviderStatus;Queries a sync provider to get the status of the provider.;CF_CONNECTION_KEY ConnectionKey, CF_SYNC_PROVIDER_STATUS *ProviderStatus
CfReferenceProtectedHandle;Allows the caller to reference a protected handle to a Win32 handle which can be used with non-CfApi Win32 APIs.;HANDLE ProtectedHandle
CfRegisterSyncRoot;Performs a one time sync root registration.;LPCWSTR SyncRootPath, const CF_SYNC_REGISTRATION *Registration, const CF_SYNC_POLICIES *Policies, CF_REGISTER_FLAGS RegisterFlags
CfReleaseProtectedHandle;Releases a protected handle referenced by CfReferenceProtectedHandle.;HANDLE ProtectedHandle
CfReleaseTransferKey;Releases a transfer key obtained by CfGetTransferKey.;HANDLE FileHandle, CF_TRANSFER_KEY *TransferKey
CfReportProviderProgress;Allows a sync provider to report progress out-of-band.;CF_CONNECTION_KEY ConnectionKey, CF_TRANSFER_KEY TransferKey, LARGE_INTEGER ProviderProgressTotal, LARGE_INTEGER ProviderProgressCompleted
CfReportSyncStatus;Allows a sync provider to notify the platform of its status on a specified sync root without having to connect with a call to CfConnectSyncRoot first.;LPCWSTR SyncRootPath, CF_SYNC_STATUS *SyncStatus
CfRevertPlaceholder;Reverts a placeholder back to a regular file, stripping away all special characteristics such as the reparse tag, the file identity, etc.;HANDLE FileHandle, CF_REVERT_FLAGS RevertFlags, LPOVERLAPPED Overlapped
CfSetCorrelationVector;Allows a sync provider to instruct the platform to use a specific correlation vector for telemetry purposes on a placeholder file. This is optional.;HANDLE FileHandle, const PCORRELATION_VECTOR CorrelationVector
CfSetInSyncState;Sets the in-sync state for a placeholder file or folder.;HANDLE FileHandle, CF_IN_SYNC_STATE InSyncState, CF_SET_IN_SYNC_FLAGS InSyncFlags, USN *InSyncUsn
CfSetPinState;This sets the pin state of a placeholder, used to represent a user’s intent. Any application (not just the sync provider) can call this function.;HANDLE FileHandle, CF_PIN_STATE PinState, CF_SET_PIN_FLAGS PinFlags, LPOVERLAPPED Overlapped
CfUnregisterSyncRoot;Unregisters a previously registered sync root.;LPCWSTR SyncRootPath
CfUpdatePlaceholder;Updates characteristics of the placeholder file or directory.;HANDLE FileHandle, const CF_FS_METADATA *FsMetadata, LPCVOID FileIdentity, DWORD FileIdentityLength, const CF_FILE_RANGE *DehydrateRangeArray, DWORD DehydrateRangeCount, CF_UPDATE_FLAGS UpdateFlags, USN *UpdateUsn, LPOVERLAPPED Overlapped
CfUpdateSyncProviderStatus;Updates the current status of the sync provider.;CF_CONNECTION_KEY ConnectionKey, CF_SYNC_PROVIDER_STATUS ProviderStatus
ChangeAccountPasswordA;Changes the password for a Windows domain account by using the specified Security Support Provider.;SEC_CHAR *pszPackageName, SEC_CHAR *pszDomainName, SEC_CHAR *pszAccountName, SEC_CHAR *pszOldPassword, SEC_CHAR *pszNewPassword, BOOLEAN bImpersonating, unsigned long dwReserved, PSecBufferDesc pOutput
ChangeAccountPasswordW;Changes the password for a Windows domain account by using the specified Security Support Provider.;SEC_WCHAR *pszPackageName, SEC_WCHAR *pszDomainName, SEC_WCHAR *pszAccountName, SEC_WCHAR *pszOldPassword, SEC_WCHAR *pszNewPassword, BOOLEAN bImpersonating, unsigned long dwReserved, PSecBufferDesc pOutput
ChangeClipboardChain;Removes a specified window from the chain of clipboard viewers.;HWND hWndRemove, HWND hWndNewNext
ChangeCredential;Changes the credentials associated with the specified identity.;HWND hwndParent, LPCWSTR lpszUniqueID
ChangeDisplaySettingsA;The ChangeDisplaySettings function changes the settings of the default display device to the specified graphics mode.;DEVMODEA *lpDevMode, DWORD dwFlags
ChangeDisplaySettingsExA;The ChangeDisplaySettingsEx function changes the settings of the specified display device to the specified graphics mode.;LPCSTR lpszDeviceName, DEVMODEA *lpDevMode, HWND hwnd, DWORD dwflags, LPVOID lParam
ChangeDisplaySettingsExW;The ChangeDisplaySettingsEx function changes the settings of the specified display device to the specified graphics mode.;LPCWSTR lpszDeviceName, DEVMODEW *lpDevMode, HWND hwnd, DWORD dwflags, LPVOID lParam
ChangeDisplaySettingsW;The ChangeDisplaySettings function changes the settings of the default display device to the specified graphics mode.;DEVMODEW *lpDevMode, DWORD dwFlags
ChangeNtmsMediaType;The ChangeNtmsMediaType function moves the specified PMID to the specified target media pool and sets the PMID's media type identifier to the media type of the target media pool.;HANDLE hSession, LPNTMS_GUID lpMediaId, LPNTMS_GUID lpPoolId
ChangeServiceConfig2A;Changes the optional configuration parameters of a service.;SC_HANDLE hService, DWORD dwInfoLevel, LPVOID lpInfo
ChangeServiceConfig2W;Changes the optional configuration parameters of a service.;SC_HANDLE hService, DWORD dwInfoLevel, LPVOID lpInfo
ChangeServiceConfigA;Changes the configuration parameters of a service.;SC_HANDLE hService, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCSTR lpBinaryPathName, LPCSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCSTR lpDependencies, LPCSTR lpServiceStartName, LPCSTR lpPassword, LPCSTR lpDisplayName
ChangeServiceConfigW;Changes the configuration parameters of a service.;SC_HANDLE hService, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCWSTR lpBinaryPathName, LPCWSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCWSTR lpDependencies, LPCWSTR lpServiceStartName, LPCWSTR lpPassword, LPCWSTR lpDisplayName
ChangeWindowMessageFilter;Adds or removes a message from the User Interface Privilege Isolation (UIPI) message filter.;UINT message, DWORD dwFlag
ChangeWindowMessageFilterEx;Modifies the User Interface Privilege Isolation (UIPI) message filter for a specified window.;HWND hwnd, UINT message, DWORD action, PCHANGEFILTERSTRUCT pChangeFilterStruct
CharLowerA;Converts a character string or a single character to lowercase. If the operand is a character string, the function converts the characters in place.;LPSTR lpsz
CharLowerBuffA;Converts uppercase characters in a buffer to lowercase characters. The function converts the characters in place.;LPSTR lpsz, DWORD cchLength
CharLowerBuffW;Converts uppercase characters in a buffer to lowercase characters. The function converts the characters in place.;LPWSTR lpsz, DWORD cchLength
CharLowerW;Converts a character string or a single character to lowercase. If the operand is a character string, the function converts the characters in place.;LPWSTR lpsz
CharNextA;Retrieves a pointer to the next character in a string. This function can handle strings consisting of either single- or multi-byte characters.;LPCSTR lpsz
CharNextExA;Retrieves the pointer to the next character in a string. This function can handle strings consisting of either single- or multi-byte characters.;WORD CodePage, LPCSTR lpCurrentChar, DWORD dwFlags
CharNextW;Retrieves a pointer to the next character in a string. This function can handle strings consisting of either single- or multi-byte characters.;LPCWSTR lpsz
CharPrevA;Retrieves a pointer to the preceding character in a string. This function can handle strings consisting of either single- or multi-byte characters.;LPCSTR lpszStart, LPCSTR lpszCurrent
CharPrevExA;Retrieves the pointer to the preceding character in a string. This function can handle strings consisting of either single- or multi-byte characters.;WORD CodePage, LPCSTR lpStart, LPCSTR lpCurrentChar, DWORD dwFlags
CharPrevW;Retrieves a pointer to the preceding character in a string. This function can handle strings consisting of either single- or multi-byte characters.;LPCWSTR lpszStart, LPCWSTR lpszCurrent
CharToOemA;Translates a string into the OEM-defined character set.Warning  Do not use.;LPCSTR pSrc, LPSTR pDst
CharToOemBuffA;Translates a specified number of characters in a string into the OEM-defined character set.;LPCSTR lpszSrc, LPSTR lpszDst, DWORD cchDstLength
CharToOemBuffW;Translates a specified number of characters in a string into the OEM-defined character set.;LPCWSTR lpszSrc, LPSTR lpszDst, DWORD cchDstLength
CharToOemW;Translates a string into the OEM-defined character set.Warning  Do not use.;LPCWSTR pSrc, LPSTR pDst
CharUpperA;Converts a character string or a single character to uppercase. If the operand is a character string, the function converts the characters in place.;LPSTR lpsz
CharUpperBuffA;Converts lowercase characters in a buffer to uppercase characters. The function converts the characters in place.;LPSTR lpsz, DWORD cchLength
CharUpperBuffW;Converts lowercase characters in a buffer to uppercase characters. The function converts the characters in place.;LPWSTR lpsz, DWORD cchLength
CharUpperW;Converts a character string or a single character to uppercase. If the operand is a character string, the function converts the characters in place.;LPWSTR lpsz
CheckCertificateSignature;Verifies the certificate signature.;VARIANT_BOOL ValidateCertificateChain
CheckCertificateSignature;Verifies the signature for a specified signer.;ISignerCertificate *pSignerCertificate, VARIANT_BOOL ValidateCertificateChain
CheckColorsInGamut;The CheckColorsInGamut function determines whether a specified set of RGB triples lies in the output gamut of a specified device. The RGB triples are interpreted in the input logical color space.;HDC hdc, LPRGBTRIPLE lpRGBTriple, LPVOID dlpBuffer, DWORD nCount
CheckDlgButton;Changes the check state of a button control.;HWND hDlg, int nIDButton, UINT uCheck
CheckMenuItem;Sets the state of the specified menu item's check-mark attribute to either selected or clear.;HMENU hMenu, UINT uIDCheckItem, UINT uCheck
CheckMenuRadioItem;Checks a specified menu item and makes it a radio item. At the same time, the function clears all other menu items in the associated group and clears the radio-item type flag for those items.;HMENU hmenu, UINT first, UINT last, UINT check, UINT flags
CheckNameLegalDOS8Dot3A;Determines whether the specified name can be used to create a file on a FAT file system.;LPCSTR lpName, LPSTR lpOemName, DWORD OemNameSize, PBOOL pbNameContainsSpaces, PBOOL pbNameLegal
CheckNameLegalDOS8Dot3W;Determines whether the specified name can be used to create a file on a FAT file system.;LPCWSTR lpName, LPSTR lpOemName, DWORD OemNameSize, PBOOL pbNameContainsSpaces, PBOOL pbNameLegal
CheckPublicKeySignature;Verifies the certificate signature by using the public key of the signing certificate.;IX509PublicKey *pPublicKey
CheckRadioButton;Adds a check mark to (checks) a specified radio button in a group and removes a check mark from (clears) all other radio buttons in the group.;HWND hDlg, int nIDFirstButton, int nIDLastButton, int nIDCheckButton
CheckRemoteDebuggerPresent;Determines whether the specified process is being debugged.;HANDLE hProcess, PBOOL pbDebuggerPresent
CheckSignature;Verifies that the certificate request has been signed and that the signature is valid.;Pkcs10AllowedSignatureTypes AllowedSignatureTypes
CheckTokenCapability;Checks the capabilities of a given token.;HANDLE TokenHandle, PSID CapabilitySidToCheck, PBOOL HasCapability
CheckTokenMembership;Determines whether a specified security identifier (SID) is enabled in an access token.;HANDLE TokenHandle, PSID SidToCheck, PBOOL IsMember
CheckTokenMembershipEx;Determines whether the specified SID is enabled in the specified token.;HANDLE TokenHandle, PSID SidToCheck, DWORD Flags, PBOOL IsMember
ChildWindowFromPoint;Determines which, if any, of the child windows belonging to a parent window contains the specified point. The search is restricted to immediate child windows. Grandchildren, and deeper descendant windows are not searched.;HWND hWndParent, POINT Point
ChildWindowFromPointEx;Determines which, if any, of the child windows belonging to the specified parent window contains the specified point.;HWND hwnd, POINT pt, UINT flags
ChoosePixelFormat;The ChoosePixelFormat function attempts to match an appropriate pixel format supported by a device context to a given pixel format specification.;HDC hdc, const PIXELFORMATDESCRIPTOR *ppfd
Chord;The Chord function draws a chord (a region bounded by the intersection of an ellipse and a line segment, called a secant). The chord is outlined by using the current pen and filled by using the current brush.;HDC hdc, int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4
ChrCmpIA;Performs a comparison between two characters. The comparison is not case-sensitive.;WORD w1, WORD w2
ChrCmpIW;Performs a comparison between two characters. The comparison is not case-sensitive.;WCHAR w1, WCHAR w2
cldap_openA;Establishes a session with an LDAP server over a connectionless User Datagram Protocol (UDP) service.;PSTR HostName, ULONG PortNumber
cldap_open;Establishes a session with an LDAP server over a connectionless User Datagram Protocol (UDP) service.;PSTR HostName, ULONG PortNumber
cldap_openW;Establishes a session with an LDAP server over a connectionless User Datagram Protocol (UDP) service.;PWSTR HostName, ULONG PortNumber
CleanNtmsDrive;The CleanNtmsDrive function queues a cleaning request for the specified drive for cleaning.;HANDLE hSession, LPNTMS_GUID lpDriveId
ClearCommBreak;Restores character transmission for a specified communications device and places the transmission line in a nonbreak state.;HANDLE hFile
ClearCommError;Retrieves information about a communications error and reports the current status of a communications device.;HANDLE hFile, LPDWORD lpErrors, LPCOMSTAT lpStat
ClearEventLogA;Clears the specified event log, and optionally saves the current copy of the log to a backup file.;HANDLE hEventLog, LPCSTR lpBackupFileName
ClearEventLogW;Clears the specified event log, and optionally saves the current copy of the log to a backup file.;HANDLE hEventLog, LPCWSTR lpBackupFileName
Clear;Removes all ICertificationAuthority objects from the collection.;
Clear;Removes all ICryptAttribute objects from the collection.;
Clear;Removes all ICspAlgorithm objects from the collection.;
Clear;Removes all ICspInformation objects from the collection.;
Clear;Removes all ICspStatus objects from the collection.;
Clear;Removes all IObjectId objects from the collection.;
Clear;Removes all ISignerCertificate objects from the collection.;
Clear;Removes all IX509Attribute objects from the collection.;
Clear;Removes all IX509CertificateTemplate objects from the collection.;
Clear;Removes all IX509Extension objects from the collection.;
Clear;Removes all IX509NameValuePair objects from the collection.;
Clear;Removes all IX509PolicyServerUrl objects from the collection.;
Clear;Removes all objects from the collection.;
Clear;Removes all properties from the collection.;
ClfsLsnEqual;Determines whether two LSNs from the same stream are equal.;const CLFS_LSN *plsn1, const CLFS_LSN *plsn2
ClfsLsnGreater;Determines whether one LSN is greater than another LSN. The two LSNs must be from the same stream.;const CLFS_LSN *plsn1, const CLFS_LSN *plsn2
ClfsLsnLess;Determines whether one LSN is less than another LSN. The two LSNs must be from the same stream.;const CLFS_LSN *plsn1, const CLFS_LSN *plsn2
ClfsLsnNull;Determines whether a specified LSN is equal to the smallest possible LSN, which is CLFS_LSN_NULL.;const CLFS_LSN *plsn
ClientToScreen;The ClientToScreen function converts the client-area coordinates of a specified point to screen coordinates.;HWND hWnd, LPPOINT lpPoint
ClipCursor;Confines the cursor to a rectangular area on the screen.;const RECT *lpRect
CloneContext;Creates a recognizer context that contains the same settings as the original. The new recognizer context does not include the ink or recognition results of the original.;HRECOCONTEXT hrc, HRECOCONTEXT *pCloneHrc
Clone;Creates a copy of the attribute-enumeration sequence object in its current state.;IEnumCERTVIEWATTRIBUTE **ppenum
Clone;Creates a copy of the column-enumeration sequence.;IEnumCERTVIEWCOLUMN **ppenum
Clone;Creates a copy of the extension-enumeration sequence.;IEnumCERTVIEWEXTENSION **ppenum
CloseApplication;Unloads a specified IAzApplication object from the cache.;BSTR bstrApplicationName, LONG lFlag
CloseClipboard;Closes the clipboard.;
Close;Closes the endorsement key. You can only call the Close method after the Open method has been successfully called.;
CloseClusterCryptProvider;Closes a handle to a Cryptographic Service Provider (CSP). The PCLOSE_CLUSTER_CRYPT_PROVIDER type defines a pointer to this function.;HCLUSCRYPTPROVIDER hClusCryptProvider
CloseCompressor;Call to close an open COMPRESSOR_HANDLE.;COMPRESSOR_HANDLE CompressorHandle
CloseDecompressor;Call to close an open DECOMPRESSOR_HANDLE.;DECOMPRESSOR_HANDLE DecompressorHandle
CloseDesktop;Closes an open handle to a desktop object.;HDESK hDesktop
CloseDriver;Closes an installable driver.;HDRVR hDriver, LPARAM lParam1, LPARAM lParam2
CloseEncryptedFileRaw;Closes an encrypted file after a backup or restore operation, and frees associated system resources.;PVOID pvContext
CloseEnhMetaFile;The CloseEnhMetaFile function closes an enhanced-metafile device context and returns a handle that identifies an enhanced-format metafile.;HDC hdc
CloseEventLog;Closes the specified event log.;HANDLE hEventLog
CloseFigure;The CloseFigure function closes an open figure in a path.;HDC hdc
CloseGestureInfoHandle;Closes resources associated with a gesture information handle.;HGESTUREINFO hGestureInfo
CloseHandle;The CloseHandle method closes a handle opened during a previous call to ISceSvcAttachmentData::Initialize.;SCESVC_HANDLE scesvcHandle
CloseMetaFile;The CloseMetaFile function closes a metafile device context and returns a handle that identifies a Windows-format metafile.;HDC hdc
CloseNtmsNotification;The CloseNtmsNotification function closes the specified open notification channel.;HANDLE hNotification
CloseNtmsSession;The CloseNtmsSession function closes the specified RSM session.;HANDLE hSession
ClosePackageInfo;Closes a reference to the specified package information.;PACKAGE_INFO_REFERENCE packageInfoReference
ClosePrivateNamespace;Closes an open namespace handle.;HANDLE Handle, ULONG Flags
Close;Releases the handle of the cryptographic service provider (CSP) or the handle of the Cryptography API:_Next Generation (CNG) key storage provider (KSP).;
CloseServiceHandle;Closes a handle to a service control manager or service object.;SC_HANDLE hSCObject
closesocket;The closesocket function closes an existing socket.;SOCKET s
CloseThreadpoolCleanupGroup;Closes the specified cleanup group.;PTP_CLEANUP_GROUP ptpcg
CloseThreadpoolCleanupGroupMembers;Releases the members of the specified cleanup group, waits for all callback functions to complete, and optionally cancels any outstanding callback functions.;PTP_CLEANUP_GROUP ptpcg, BOOL fCancelPendingCallbacks, PVOID pvCleanupContext
CloseThreadpool;Closes the specified thread pool.;PTP_POOL ptpp
CloseThreadpoolIo;Releases the specified I/O completion object.;PTP_IO pio
CloseThreadpoolTimer;Releases the specified timer object.;PTP_TIMER pti
CloseThreadpoolWait;Releases the specified wait object.;PTP_WAIT pwa
CloseThreadpoolWork;Releases the specified work object.;PTP_WORK pwk
CloseTouchInputHandle;Closes a touch input handle, frees process memory associated with it, and invalidates the handle.;HTOUCHINPUT hTouchInput
CloseWindow;Minimizes (but does not destroy) the specified window.;HWND hWnd
CloseWindowStation;Closes an open window station handle.;HWINSTA hWinSta
CLRES_V1_FUNCTION_TABLE;Initializes a function table for version 1.0 of the Resource API.;_Name, _Version, _Prefix, _Arbitrate, _Release, _ResControl, _ResTypeControl
CLRES_V2_FUNCTION_TABLE_SET;Initializes a function table for version 2.0 of the Resource API.;_Name, _Version, _Prefix, _Arbitrate, _Release, _ResControl, _ResTypeControl, _LooksAlive, _IsAlive, _Cancel
CLRES_V3_FUNCTION_TABLE_SET;Initializes a function table for version 3.0 of the Resource API.;_Name, _Version, _Prefix, _Arbitrate, _Release, _BeginResourceControl, _BeginResourceTypeControl, _LooksAlive, _IsAlive, _Cancel
CLRES_V4_FUNCTION_TABLE_SET;Initializes a function table for version 4.0 of the Resource API.;_Name, _Version, _Prefix, _Arbitrate, _Release, _BeginResCtrl, _BeginResTypeCtrl, _LooksAlive, _IsAlive, _Cancel, _BeginResCtrlAsUser, _BeginResTypeCtrlAsUser
CLSIDFromProgIDEx;Triggers automatic installation if the COMClassStore policy is enabled.;LPCOLESTR lpszProgID, LPCLSID lpclsid
CLSIDFromProgID;Looks up a CLSID in the registry, given a ProgID.;LPCOLESTR lpszProgID, LPCLSID lpclsid
CLSIDFromString;Converts a string generated by the StringFromCLSID function back into the original CLSID.;LPCOLESTR lpsz, LPCLSID pclsid
ClusAddClusterHealthFault;TBD.;HCLUSTER hCluster, CLUSTER_HEALTH_FAULT *failure, DWORD
ClusGetClusterHealthFaults;TBD.;HCLUSTER hCluster, CLUSTER_HEALTH_FAULT_ARRAY *objects, DWORD flags
ClusRemoveClusterHealthFault;TBD.;HCLUSTER hCluster, LPCWSTR id, DWORD flags
ClusterClearBackupStateForSharedVolume;Clears the backup state for the cluster shared volume.;LPCWSTR lpszVolumePathName
ClusterDecrypt;Decrypts Checkpointing data for a Cryptographic Service Provider (CSP).;HCLUSCRYPTPROVIDER hClusCryptProvider, PBYTE pCryptInput, DWORD cbCryptInput, PBYTE *ppCryptOutput, PDWORD pcbCryptOutput
ClusterEncrypt;Encrypts Checkpointing data for a Cryptographic Service Provider (CSP).;HCLUSCRYPTPROVIDER hClusCryptProvider, PBYTE pData, DWORD cbData, PBYTE *ppData, PDWORD pcbData
ClusterGetVolumeNameForVolumeMountPoint;ClusterGetVolumeNameForVolumeMountPoint may be altered or unavailable. Instead, use GetVolumeNameForVolumeMountPoint.;LPCWSTR lpszVolumeMountPoint, LPWSTR lpszVolumeName, DWORD cchBufferLength
ClusterGetVolumePathName;ClusterGetVolumePathName may be altered or unavailable. Instead, use GetVolumePathName.;LPCWSTR lpszFileName, LPWSTR lpszVolumePathName, DWORD cchBufferLength
ClusterIsPathOnSharedVolume;Determines whether a path is on a cluster shared volume.;LPCWSTR lpszPathName
ClusterPrepareSharedVolumeForBackup;ClusterPrepareSharedVolumeForBackup may be altered or unavailable.;LPCWSTR lpszFileName, LPWSTR lpszVolumePathName, LPDWORD lpcchVolumePathName, LPWSTR lpszVolumeName, LPDWORD lpcchVolumeName
ClusWorkerCheckTerminate;Determines whether a worker thread should exit as soon as possible. The PCLUSAPIClusWorkerCheckTerminate type defines a pointer to this function.;PCLUS_WORKER lpWorker
ClusWorkerCreate;Creates a worker thread. The PCLUSAPI_CLUS_WORKER_CREATE type defines a pointer to this function.;PCLUS_WORKER lpWorker, PWORKER_START_ROUTINE lpStartAddress, PVOID lpParameter
ClusWorkersTerminate;Waits for multiple worker threads to terminate up to the specified timeout.;PCLUS_WORKER *ClusWorkers, size_t const ClusWorkersCount, DWORD TimeoutInMilliseconds, BOOL WaitOnly
ClusWorkerTerminateEx;Waits for a worker thread to terminate up to the specified timeout.;PCLUS_WORKER ClusWorker, DWORD TimeoutInMilliseconds, BOOL WaitOnly
ClusWorkerTerminate;Waits for a worker thread to terminate up to the specified timeout.;PCLUS_WORKER lpWorker
CM_Add_Empty_Log_Conf_Ex;The CM_Add_Empty_Log_Conf_Ex function creates an empty logical configuration, for a specified configuration type and a specified device instance, on either the local or a remote machine.;PLOG_CONF plcLogConf, DEVINST dnDevInst, PRIORITY Priority, ULONG ulFlags, HMACHINE hMachine
CM_Add_Empty_Log_Conf;The CM_Add_Empty_Log_Conf function creates an empty logical configuration, for a specified configuration type and a specified device instance, on the local machine.;PLOG_CONF plcLogConf, DEVINST dnDevInst, PRIORITY Priority, ULONG ulFlags
CM_Add_ID_ExW;The CM_Add_ID_Ex function appends a device ID (if not already present) to a device instance's hardware ID list or compatible ID list, on either the local or a remote machine.;DEVINST dnDevInst, PWSTR pszID, ULONG ulFlags, HMACHINE hMachine
CM_Add_IDW;The CM_Add_ID function appends a specified device ID (if not already present) to a device instance's�hardware ID list or compatible ID list.;DEVINST dnDevInst, PWSTR pszID, ULONG ulFlags
CM_Add_Res_Des_Ex;The CM_Add_Res_Des_Ex function adds a resource descriptor to a logical configuration. The logical configuration can be on either the local or a remote machine.;PRES_DES prdResDes, LOG_CONF lcLogConf, RESOURCEID ResourceID, PCVOID ResourceData, ULONG ResourceLen, ULONG ulFlags, HMACHINE hMachine
CM_Add_Res_Des;The CM_Add_Res_Des function adds a resource descriptor to a logical configuration.;PRES_DES prdResDes, LOG_CONF lcLogConf, RESOURCEID ResourceID, PCVOID ResourceData, ULONG ResourceLen, ULONG ulFlags
CM_Connect_MachineW;The CM_Connect_Machine function creates a connection to a remote machine.;PCWSTR UNCServerName, PHMACHINE phMachine
CM_Delete_Class_Key;The CM_Delete_Class_Key function removes the specified installed device class from the system.;LPGUID ClassGuid, ULONG ulFlags
CM_Delete_Device_Interface_Key_ExA;The CM_Delete_Device_Interface_Key_ExA function deletes the registry subkey that is used by applications and drivers to store interface-specific information.;LPCSTR pszDeviceInterface, ULONG ulFlags, HMACHINE hMachine
CM_Delete_Device_Interface_Key_ExW;The CM_Delete_Device_Interface_Key_ExW function deletes the registry subkey that is used by applications and drivers to store interface-specific information.;LPCWSTR pszDeviceInterface, ULONG ulFlags, HMACHINE hMachine
CM_Delete_Device_Interface_KeyW;The CM_Delete_Device_Interface_Key function deletes the registry subkey that is used by applications and drivers to store interface-specific information.;LPCWSTR pszDeviceInterface, ULONG ulFlags
CM_Delete_DevNode_Key;The CM_Delete_DevNode_Key function deletes the specified user-accessible registry keys that are associated with a device.;DEVNODE dnDevNode, ULONG ulHardwareProfile, ULONG ulFlags
CM_Disable_DevNode;The CM_Disable_DevNode function disables a device.;DEVINST dnDevInst, ULONG ulFlags
CM_Disconnect_Machine;The CM_Disconnect_Machine function removes a connection to a remote machine.;HMACHINE hMachine
CM_Enable_DevNode;The CM_Enable_DevNode function enables a device.;DEVINST dnDevInst, ULONG ulFlags
CM_Enumerate_Classes_Ex;The CM_Enumerate_Classes_Ex function, when called repeatedly, enumerates a local or a remote machine's installed device classes, by supplying each class's GUID.;ULONG ulClassIndex, LPGUID ClassGuid, ULONG ulFlags, HMACHINE hMachine
CM_Enumerate_Classes;The CM_Enumerate_Classes function, when called repeatedly, enumerates the local machine's installed device classes by supplying each class's GUID.;ULONG ulClassIndex, LPGUID ClassGuid, ULONG ulFlags
CM_Enumerate_Enumerators_ExW;The CM_Enumerate_Enumerators_Ex function enumerates a local or a remote machine's device enumerators, by supplying each enumerator's name.;ULONG ulEnumIndex, PWSTR Buffer, PULONG pulLength, ULONG ulFlags, HMACHINE hMachine
CM_Enumerate_EnumeratorsW;The CM_Enumerate_Enumerators function enumerates the local machine's device enumerators by supplying each enumerator's name.;ULONG ulEnumIndex, PWSTR Buffer, PULONG pulLength, ULONG ulFlags
CM_Free_Log_Conf_Ex;The CM_Free_Log_Conf_Ex function removes a logical configuration and all associated resource descriptors from either a local or a remote machine.;LOG_CONF lcLogConfToBeFreed, ULONG ulFlags, HMACHINE hMachine
CM_Free_Log_Conf_Handle;The CM_Free_Log_Conf_Handle function invalidates a logical configuration handle and frees its associated memory allocation.;LOG_CONF lcLogConf
CM_Free_Log_Conf;The CM_Free_Log_Conf function removes a logical configuration and all associated resource descriptors from the local machine.;LOG_CONF lcLogConfToBeFreed, ULONG ulFlags
CM_Free_Res_Des_Ex;The CM_Free_Res_Des_Ex function removes a resource descriptor from a logical configuration on either a local or a remote machine.;PRES_DES prdResDes, RES_DES rdResDes, ULONG ulFlags, HMACHINE hMachine
CM_Free_Res_Des_Handle;The CM_Free_Res_Des_Handle function invalidates a resource description handle and frees its associated memory allocation.;RES_DES rdResDes
CM_Free_Res_Des;The CM_Free_Res_Des function removes a resource descriptor from a logical configuration on the local machine.;PRES_DES prdResDes, RES_DES rdResDes, ULONG ulFlags
CM_Free_Resource_Conflict_Handle;The CM_Free_Resource_Conflict_Handle function invalidates a handle to a resource conflict list, and frees the handle's associated memory allocation.;CONFLICT_LIST clConflictList
CM_Get_Child_Ex;The CM_Get_Child_Ex function is used to retrieve a device instance handle to the first child node of a specified device node (devnode) in a local or a remote machine's device tree.;PDEVINST pdnDevInst, DEVINST dnDevInst, ULONG ulFlags, HMACHINE hMachine
CM_Get_Child;The CM_Get_Child function is used to retrieve a device instance handle to the first child node of a specified device node (devnode) in the local machine's device tree.;PDEVINST pdnDevInst, DEVINST dnDevInst, ULONG ulFlags
CM_Get_Class_Property_ExW;The CM_Get_Class_Property_ExW function retrieves a device property that is set for a device interface class or device setup class.;LPCGUID ClassGUID, const DEVPROPKEY *PropertyKey, DEVPROPTYPE *PropertyType, PBYTE PropertyBuffer, PULONG PropertyBufferSize, ULONG ulFlags, HMACHINE hMachine
CM_Get_Class_Property_Keys_Ex;The CM_Get_Class_Property_Keys_Ex function retrieves an array of the device property keys that represent the device properties that are set for a device interface class or device setup class.;LPCGUID ClassGUID, DEVPROPKEY *PropertyKeyArray, PULONG PropertyKeyCount, ULONG ulFlags, HMACHINE hMachine
CM_Get_Class_Property_Keys;The CM_Get_Class_Property_Keys function retrieves an array of the device property keys that represent the device properties that are set for a device interface class or device setup class.;LPCGUID ClassGUID, DEVPROPKEY *PropertyKeyArray, PULONG PropertyKeyCount, ULONG ulFlags
CM_Get_Class_PropertyW;The CM_Get_Class_Property function retrieves a device property that is set for a device interface class or device setup class.;LPCGUID ClassGUID, const DEVPROPKEY *PropertyKey, DEVPROPTYPE *PropertyType, PBYTE PropertyBuffer, PULONG PropertyBufferSize, ULONG ulFlags
CM_Get_Class_Registry_PropertyW;The CM_Get_Class_Registry_Property function retrieves a device setup class property.;LPGUID ClassGuid, ULONG ulProperty, PULONG pulRegDataType, PVOID Buffer, PULONG pulLength, ULONG ulFlags, HMACHINE hMachine
CM_Get_Depth_Ex;The CM_Get_Depth_Ex function is used to obtain the depth of a specified device node (devnode) within a local or a remote machine's device tree.;PULONG pulDepth, DEVINST dnDevInst, ULONG ulFlags, HMACHINE hMachine
CM_Get_Depth;The CM_Get_Depth function is used to obtain the depth of a specified device node (devnode) within the local machine's device tree.;PULONG pulDepth, DEVINST dnDevInst, ULONG ulFlags
CM_Get_Device_ID_ExW;The CM_Get_Device_ID_Ex function retrieves the device instance ID for a specified device instance on a local or a remote machine.;DEVINST dnDevInst, PWSTR Buffer, ULONG BufferLen, ULONG ulFlags, HMACHINE hMachine
CM_Get_Device_ID_ListA;The CM_Get_Device_ID_List function retrieves a list of device instance IDs for the local computer's device instances.;PCSTR pszFilter, PZZSTR Buffer, ULONG BufferLen, ULONG ulFlags
CM_Get_Device_ID_List_ExW;The CM_Get_Device_ID_List_Ex function retrieves a list of device instance IDs for the device instances on a local or a remote machine.;PCWSTR pszFilter, PZZWSTR Buffer, ULONG BufferLen, ULONG ulFlags, HMACHINE hMachine
CM_Get_Device_ID_List_SizeA;The CM_Get_Device_ID_List_Size function retrieves the buffer size required to hold a list of device instance IDs for the local machine's device instances.;PULONG pulLen, PCSTR pszFilter, ULONG ulFlags
CM_Get_Device_ID_List_Size_ExW;The CM_Get_Device_ID_List_Size_Ex function retrieves the buffer size required to hold a list of device instance IDs for a local or a remote machine's device instances.;PULONG pulLen, PCWSTR pszFilter, ULONG ulFlags, HMACHINE hMachine
CM_Get_Device_ID_List_SizeW;The CM_Get_Device_ID_List_Size function retrieves the buffer size required to hold a list of device instance IDs for the local machine's device instances.;PULONG pulLen, PCWSTR pszFilter, ULONG ulFlags
CM_Get_Device_ID_ListW;The CM_Get_Device_ID_List function retrieves a list of device instance IDs for the local computer's device instances.;PCWSTR pszFilter, PZZWSTR Buffer, ULONG BufferLen, ULONG ulFlags
CM_Get_Device_ID_Size_Ex;The CM_Get_Device_ID_Size_Ex function retrieves the buffer size required to hold a device instance ID for a device instance on a local or a remote machine.;PULONG pulLen, DEVINST dnDevInst, ULONG ulFlags, HMACHINE hMachine
CM_Get_Device_ID_Size;The CM_Get_Device_ID_Size function retrieves the buffer size required to hold a device instance ID for a device instance on the local machine.;PULONG pulLen, DEVINST dnDevInst, ULONG ulFlags
CM_Get_Device_IDW;The CM_Get_Device_ID function retrieves the device instance ID for a specified device instance on the local machine.;DEVINST dnDevInst, PWSTR Buffer, ULONG BufferLen, ULONG ulFlags
CM_Get_Device_Interface_AliasW;The CM_Get_Device_Interface_Alias function returns the alias of the specified device interface instance, if the alias exists.;LPCWSTR pszDeviceInterface, LPGUID AliasInterfaceGuid, LPWSTR pszAliasDeviceInterface, PULONG pulLength, ULONG ulFlags
CM_Get_Device_Interface_ListA;The CM_Get_Device_Interface_List function retrieves a list of device interface instances that belong to a specified device interface class.;LPGUID InterfaceClassGuid, DEVINSTID_A pDeviceID, PZZSTR Buffer, ULONG BufferLen, ULONG ulFlags
CM_Get_Device_Interface_List_SizeA;The CM_Get_Device_Interface_List_Size function retrieves the buffer size that must be passed to the CM_Get_Device_Interface_List function.;PULONG pulLen, LPGUID InterfaceClassGuid, DEVINSTID_A pDeviceID, ULONG ulFlags
CM_Get_Device_Interface_List_SizeW;The CM_Get_Device_Interface_List_Size function retrieves the buffer size that must be passed to the CM_Get_Device_Interface_List function.;PULONG pulLen, LPGUID InterfaceClassGuid, DEVINSTID_W pDeviceID, ULONG ulFlags
CM_Get_Device_Interface_ListW;The CM_Get_Device_Interface_List function retrieves a list of device interface instances that belong to a specified device interface class.;LPGUID InterfaceClassGuid, DEVINSTID_W pDeviceID, PZZWSTR Buffer, ULONG BufferLen, ULONG ulFlags
CM_Get_Device_Interface_Property_ExW;The CM_Get_Device_Interface_Property_ExW function retrieves a device property that is set for a device interface.;LPCWSTR pszDeviceInterface, const DEVPROPKEY *PropertyKey, DEVPROPTYPE *PropertyType, PBYTE PropertyBuffer, PULONG PropertyBufferSize, ULONG ulFlags, HMACHINE hMachine
CM_Get_Device_Interface_Property_Keys_ExW;The CM_Get_Device_Interface_Property_Keys_ExW function retrieves an array of device property keys that represent the device properties that are set for a device interface.;LPCWSTR pszDeviceInterface, DEVPROPKEY *PropertyKeyArray, PULONG PropertyKeyCount, ULONG ulFlags, HMACHINE hMachine
CM_Get_Device_Interface_Property_KeysW;The CM_Get_Device_Interface_Property_Keys function retrieves an array of device property keys that represent the device properties that are set for a device interface.;LPCWSTR pszDeviceInterface, DEVPROPKEY *PropertyKeyArray, PULONG PropertyKeyCount, ULONG ulFlags
CM_Get_Device_Interface_PropertyW;The CM_Get_Device_Interface_Property function retrieves a device property that is set for a device interface.;LPCWSTR pszDeviceInterface, const DEVPROPKEY *PropertyKey, DEVPROPTYPE *PropertyType, PBYTE PropertyBuffer, PULONG PropertyBufferSize, ULONG ulFlags
CM_Get_DevNode_Property_ExW;The CM_Get_DevNode_Property_ExW function retrieves a device instance property.;DEVINST dnDevInst, const DEVPROPKEY *PropertyKey, DEVPROPTYPE *PropertyType, PBYTE PropertyBuffer, PULONG PropertyBufferSize, ULONG ulFlags, HMACHINE hMachine
CM_Get_DevNode_Property_Keys_Ex;The CM_Get_DevNode_Property_Keys_Ex function retrieves an array of the device property keys that represent the device properties that are set for a device instance.;DEVINST dnDevInst, DEVPROPKEY *PropertyKeyArray, PULONG PropertyKeyCount, ULONG ulFlags, HMACHINE hMachine
CM_Get_DevNode_Property_Keys;The CM_Get_DevNode_Property_Keys function retrieves an array of the device property keys that represent the device properties that are set for a device instance.;DEVINST dnDevInst, DEVPROPKEY *PropertyKeyArray, PULONG PropertyKeyCount, ULONG ulFlags
CM_Get_DevNode_PropertyW;The CM_Get_DevNode_Property function retrieves a device instance property.;DEVINST dnDevInst, const DEVPROPKEY *PropertyKey, DEVPROPTYPE *PropertyType, PBYTE PropertyBuffer, PULONG PropertyBufferSize, ULONG ulFlags
CM_Get_DevNode_Registry_PropertyW;The CM_Get_DevNode_Registry_Property function retrieves a specified device property from the registry.;DEVINST dnDevInst, ULONG ulProperty, PULONG pulRegDataType, PVOID Buffer, PULONG pulLength, ULONG ulFlags
CM_Get_DevNode_Status_Ex;The CM_Get_DevNode_Status_Ex function obtains the status of a device instance from its device node (devnode) on a local or a remote machine's device tree.;PULONG pulStatus, PULONG pulProblemNumber, DEVINST dnDevInst, ULONG ulFlags, HMACHINE hMachine
CM_Get_DevNode_Status;The CM_Get_DevNode_Status function obtains the status of a device instance from its device node (devnode) in the local machine's device tree.;PULONG pulStatus, PULONG pulProblemNumber, DEVINST dnDevInst, ULONG ulFlags
CM_Get_First_Log_Conf_Ex;The CM_Get_First_Log_Conf_Ex function obtains the first logical configuration associated with a specified device instance on a local or a remote machine.;PLOG_CONF plcLogConf, DEVINST dnDevInst, ULONG ulFlags, HMACHINE hMachine
CM_Get_First_Log_Conf;The CM_Get_First_Log_Conf function obtains the first logical configuration, of a specified configuration type, associated with a specified device instance on the local machine.;PLOG_CONF plcLogConf, DEVINST dnDevInst, ULONG ulFlags
CM_Get_HW_Prof_FlagsA;The CM_Get_HW_Prof_Flags function retrieves the hardware profile-specific configuration flags for a device instance on a local machine.;DEVINSTID_A pDeviceID, ULONG ulHardwareProfile, PULONG pulValue, ULONG ulFlags
CM_Get_HW_Prof_Flags_ExA;The CM_Get_HW_Prof_Flags_Ex function retrieves the hardware profile-specific configuration flags for a device instance on a remote machine or a local machine.;DEVINSTID_A pDeviceID, ULONG ulHardwareProfile, PULONG pulValue, ULONG ulFlags, HMACHINE hMachine
CM_Get_HW_Prof_Flags_ExW;The CM_Get_HW_Prof_Flags_Ex function retrieves the hardware profile-specific configuration flags for a device instance on a remote machine or a local machine.;DEVINSTID_W pDeviceID, ULONG ulHardwareProfile, PULONG pulValue, ULONG ulFlags, HMACHINE hMachine
CM_Get_HW_Prof_FlagsW;The CM_Get_HW_Prof_Flags function retrieves the hardware profile-specific configuration flags for a device instance on a local machine.;DEVINSTID_W pDeviceID, ULONG ulHardwareProfile, PULONG pulValue, ULONG ulFlags
CM_Get_Log_Conf_Priority_Ex;The CM_Get_Log_Conf_Priority_Ex function obtains the configuration priority of a specified logical configuration on a local or a remote machine.;LOG_CONF lcLogConf, PPRIORITY pPriority, ULONG ulFlags, HMACHINE hMachine
CM_Get_Log_Conf_Priority;The CM_Get_Log_Conf_Priority function obtains the configuration priority of a specified logical configuration on the local machine.;LOG_CONF lcLogConf, PPRIORITY pPriority, ULONG ulFlags
CM_Get_Next_Log_Conf_Ex;The CM_Get_Next_Log_Conf_Ex function obtains the next logical configuration associated with a specific device instance on a local or a remote machine.;PLOG_CONF plcLogConf, LOG_CONF lcLogConf, ULONG ulFlags, HMACHINE hMachine
CM_Get_Next_Log_Conf;The CM_Get_Next_Log_Conf function obtains the next logical configuration associated with a specific device instance on the local machine.;PLOG_CONF plcLogConf, LOG_CONF lcLogConf, ULONG ulFlags
CM_Get_Next_Res_Des_Ex;The CM_Get_Next_Res_Des_Ex function obtains a handle to the next resource descriptor, of a specified resource type, for a logical configuration on a local or a remote machine.;PRES_DES prdResDes, RES_DES rdResDes, RESOURCEID ForResource, PRESOURCEID pResourceID, ULONG ulFlags, HMACHINE hMachine
CM_Get_Next_Res_Des;The CM_Get_Next_Res_Des function obtains a handle to the next resource descriptor, of a specified resource type, for a logical configuration on the local machine.;PRES_DES prdResDes, RES_DES rdResDes, RESOURCEID ForResource, PRESOURCEID pResourceID, ULONG ulFlags
CM_Get_Parent_Ex;The CM_Get_Parent_Ex function obtains a device instance handle to the parent node of a specified device node (devnode) in a local or a remote machine's device tree.;PDEVINST pdnDevInst, DEVINST dnDevInst, ULONG ulFlags, HMACHINE hMachine
CM_Get_Parent;The CM_Get_Parent function obtains a device instance handle to the parent node of a specified device node (devnode) in the local machine's device tree.;PDEVINST pdnDevInst, DEVINST dnDevInst, ULONG ulFlags
CM_Get_Res_Des_Data_Ex;The CM_Get_Res_Des_Data_Ex function retrieves the information stored in a resource descriptor on a local or a remote machine.;RES_DES rdResDes, PVOID Buffer, ULONG BufferLen, ULONG ulFlags, HMACHINE hMachine
CM_Get_Res_Des_Data_Size_Ex;The CM_Get_Res_Des_Data_Size_Ex function obtains the buffer size required to hold the information contained in a specified resource descriptor on a local or a remote machine.;PULONG pulSize, RES_DES rdResDes, ULONG ulFlags, HMACHINE hMachine
CM_Get_Res_Des_Data_Size;The CM_Get_Res_Des_Data_Size function obtains the buffer size required to hold the information contained in a specified resource descriptor on the local machine.;PULONG pulSize, RES_DES rdResDes, ULONG ulFlags
CM_Get_Res_Des_Data;The CM_Get_Res_Des_Data function retrieves the information stored in a resource descriptor on the local machine.;RES_DES rdResDes, PVOID Buffer, ULONG BufferLen, ULONG ulFlags
CM_Get_Resource_Conflict_Count;The CM_Get_Resource_Conflict_Count function obtains the number of conflicts contained in a specified resource conflict list.;CONFLICT_LIST clConflictList, PULONG pulCount
CM_Get_Resource_Conflict_DetailsW;The CM_Get_Resource_Conflict_Details function obtains the details about one of the resource conflicts in a conflict list.;CONFLICT_LIST clConflictList, ULONG ulIndex, PCONFLICT_DETAILS_W pConflictDetails
CM_Get_Sibling_Ex;The CM_Get_Sibling_Ex function obtains a device instance handle to the next sibling node of a specified device node, in a local or a remote machine's device tree.;PDEVINST pdnDevInst, DEVINST dnDevInst, ULONG ulFlags, HMACHINE hMachine
CM_Get_Sibling;The CM_Get_Sibling function obtains a device instance handle to the next sibling node of a specified device node (devnode) in the local machine's device tree.;PDEVINST pdnDevInst, DEVINST dnDevInst, ULONG ulFlags
CM_Get_Version_Ex;The CM_Get_Version_Ex function returns version 4.0 of the Plug and Play (PnP) Configuration Manager DLL (Cfgmgr32.dll) for a local or a remote machine.;HMACHINE hMachine
CM_Get_Version;The CM_Get_Version function returns version 4.0 of the Plug and Play (PnP) Configuration Manager DLL (Cfgmgr32.dll) for a local machine.;
CM_Is_Dock_Station_Present_Ex;The CM_Is_Dock_Station_Present_Ex function identifies whether a docking station is present in a local or a remote machine.;PBOOL pbPresent, HMACHINE hMachine
CM_Is_Dock_Station_Present;The CM_Is_Dock_Station_Present function identifies whether a docking station is present in a local machine.;PBOOL pbPresent
CM_Is_Version_Available_Ex;The CM_Is_Version_Available_Ex function indicates whether a specified version of the Plug and Play (PNP) Configuration Manager DLL (Cfgmgr32.dll) is supported by a local or a remote machine.;WORD wVersion, HMACHINE hMachine
CM_Is_Version_Available;The CM_Is_Version_Available function indicates whether a specified version of the Plug and Play (PnP) Configuration Manager DLL (Cfgmgr32.dll) is supported by a local machine.;WORD wVersion
CM_Locate_DevNodeA;The CM_Locate_DevNode function obtains a device instance handle to the device node that is associated with a specified device instance ID on the local machine.;PDEVINST pdnDevInst, DEVINSTID_A pDeviceID, ULONG ulFlags
CM_Locate_DevNode_ExW;The CM_Locate_DevNode_Ex function obtains a device instance handle to the device node that is associated with a specified device instance ID, on a local machine or a remote machine.;PDEVINST pdnDevInst, DEVINSTID_W pDeviceID, ULONG ulFlags, HMACHINE hMachine
CM_Locate_DevNodeW;The CM_Locate_DevNode function obtains a device instance handle to the device node that is associated with a specified device instance ID on the local machine.;PDEVINST pdnDevInst, DEVINSTID_W pDeviceID, ULONG ulFlags
CM_MapCrToWin32Err;Converts a specified CONFIGRET code to its equivalent system error code.;CONFIGRET CmReturnCode, DWORD DefaultErr
CM_Modify_Res_Des_Ex;The CM_Modify_Res_Des_Ex function modifies a specified resource descriptor on a local or a remote machine.;PRES_DES prdResDes, RES_DES rdResDes, RESOURCEID ResourceID, PCVOID ResourceData, ULONG ResourceLen, ULONG ulFlags, HMACHINE hMachine
CM_Modify_Res_Des;The CM_Modify_Res_Des function modifies a specified resource descriptor on the local machine.;PRES_DES prdResDes, RES_DES rdResDes, RESOURCEID ResourceID, PCVOID ResourceData, ULONG ResourceLen, ULONG ulFlags
CM_Open_Class_KeyW;The CM_Open_Class_Key function opens the device setup class registry key, the device interface class registry key, or a specific subkey of a class.;LPGUID ClassGuid, LPCWSTR pszClassName, REGSAM samDesired, REGDISPOSITION Disposition, PHKEY phkClass, ULONG ulFlags
CM_Open_Device_Interface_KeyA;The CM_Open_Device_Interface_Key function opens the registry subkey that is used by applications and drivers to store information that is specific to a device interface.;LPCSTR pszDeviceInterface, REGSAM samDesired, REGDISPOSITION Disposition, PHKEY phkDeviceInterface, ULONG ulFlags
CM_Open_Device_Interface_Key_ExA;The CM_Open_Device_Interface_Key_ExA function opens the registry subkey that is used by applications and drivers to store information that is specific to a device interface.;LPCSTR pszDeviceInterface, REGSAM samDesired, REGDISPOSITION Disposition, PHKEY phkDeviceInterface, ULONG ulFlags, HMACHINE hMachine
CM_Open_Device_Interface_Key_ExW;The CM_Open_Device_Interface_Key_ExW function opens the registry subkey that is used by applications and drivers to store information that is specific to a device interface.;LPCWSTR pszDeviceInterface, REGSAM samDesired, REGDISPOSITION Disposition, PHKEY phkDeviceInterface, ULONG ulFlags, HMACHINE hMachine
CM_Open_Device_Interface_KeyW;The CM_Open_Device_Interface_Key function opens the registry subkey that is used by applications and drivers to store information that is specific to a device interface.;LPCWSTR pszDeviceInterface, REGSAM samDesired, REGDISPOSITION Disposition, PHKEY phkDeviceInterface, ULONG ulFlags
CM_Open_DevNode_Key;The CM_Open_DevNode_Key function opens a registry key for device-specific configuration information.;DEVINST dnDevNode, REGSAM samDesired, ULONG ulHardwareProfile, REGDISPOSITION Disposition, PHKEY phkDevice, ULONG ulFlags
CM_Query_And_Remove_SubTree_ExW;The CM_Query_And_Remove_SubTree_Ex function checks whether a device instance and its children can be removed and, if so, it removes them.;DEVINST dnAncestor, PPNP_VETO_TYPE pVetoType, LPWSTR pszVetoName, ULONG ulNameLength, ULONG ulFlags, HMACHINE hMachine
CM_Query_And_Remove_SubTreeW;The CM_Query_And_Remove_SubTree function checks whether a device instance and its children can be removed and, if so, it removes them.;DEVINST dnAncestor, PPNP_VETO_TYPE pVetoType, LPWSTR pszVetoName, ULONG ulNameLength, ULONG ulFlags
CM_Query_Resource_Conflict_List;The CM_Query_Resource_Conflict_List function identifies device instances having resource requirements that conflict with a specified device instance's resource description.;PCONFLICT_LIST pclConflictList, DEVINST dnDevInst, RESOURCEID ResourceID, PCVOID ResourceData, ULONG ResourceLen, ULONG ulFlags, HMACHINE hMachine
CM_Reenumerate_DevNode_Ex;The CM_Reenumerate_DevNode_Ex function enumerates the devices identified by a specified device node and all of its children.;DEVINST dnDevInst, ULONG ulFlags, HMACHINE hMachine
CM_Reenumerate_DevNode;The CM_Reenumerate_DevNode function enumerates the devices identified by a specified device node and all of its children.;DEVINST dnDevInst, ULONG ulFlags
CM_Register_Notification;Use RegisterDeviceNotification instead of CM_Register_Notification if your code targets Windows 7 or earlier versions of Windows. Kernel mode callers should use IoRegisterPlugPlayNotification instead.;PCM_NOTIFY_FILTER pFilter, PVOID pContext, PCM_NOTIFY_CALLBACK pCallback, PHCMNOTIFICATION pNotifyContext
CM_Request_Device_Eject_ExW;The CM_Request_Device_Eject_Ex function prepares a local or a remote device instance for safe removal, if the device is removable. If the device can be physically ejected, it will be.;DEVINST dnDevInst, PPNP_VETO_TYPE pVetoType, LPWSTR pszVetoName, ULONG ulNameLength, ULONG ulFlags, HMACHINE hMachine
CM_Request_Device_EjectW;The CM_Request_Device_Eject function prepares a local device instance for safe removal, if the device is removable. If the device can be physically ejected, it will be.;DEVINST dnDevInst, PPNP_VETO_TYPE pVetoType, LPWSTR pszVetoName, ULONG ulNameLength, ULONG ulFlags
CM_Request_Eject_PC_Ex;The CM_Request_Eject_PC_Ex function requests that a portable PC, which is inserted in a local or a remote docking station, be ejected.;HMACHINE hMachine
CM_Request_Eject_PC;The CM_Request_Eject_PC function requests that a portable PC, which is inserted in a local docking station, be ejected.;
CM_Set_Class_Property_ExW;The CM_Set_Class_Property_ExW function sets a class property for a device setup class or a device interface class.;LPCGUID ClassGUID, const DEVPROPKEY *PropertyKey, DEVPROPTYPE PropertyType, const PBYTE PropertyBuffer, ULONG PropertyBufferSize, ULONG ulFlags, HMACHINE hMachine
CM_Set_Class_PropertyW;The CM_Set_Class_Property function sets a class property for a device setup class or a device interface class.;LPCGUID ClassGUID, const DEVPROPKEY *PropertyKey, DEVPROPTYPE PropertyType, const PBYTE PropertyBuffer, ULONG PropertyBufferSize, ULONG ulFlags
CM_Set_Class_Registry_PropertyW;The CM_Set_Class_Registry_Property function sets or deletes a property of a device setup class.;LPGUID ClassGuid, ULONG ulProperty, PCVOID Buffer, ULONG ulLength, ULONG ulFlags, HMACHINE hMachine
CM_Set_Device_Interface_Property_ExW;The CM_Set_Device_Interface_Property_ExW function sets a device property of a device interface.;LPCWSTR pszDeviceInterface, const DEVPROPKEY *PropertyKey, DEVPROPTYPE PropertyType, const PBYTE PropertyBuffer, ULONG PropertyBufferSize, ULONG ulFlags, HMACHINE hMachine
CM_Set_Device_Interface_PropertyW;The CM_Set_Device_Interface_Property function sets a device property of a device interface.;LPCWSTR pszDeviceInterface, const DEVPROPKEY *PropertyKey, DEVPROPTYPE PropertyType, const PBYTE PropertyBuffer, ULONG PropertyBufferSize, ULONG ulFlags
CM_Set_DevNode_Problem_Ex;The CM_Set_DevNode_Problem_Ex function sets a problem code for a device that is installed in a local or a remote machine.;DEVINST dnDevInst, ULONG ulProblem, ULONG ulFlags, HMACHINE hMachine
CM_Set_DevNode_Problem;The CM_Set_DevNode_Problem function sets a problem code for a device that is installed in a local machine.;DEVINST dnDevInst, ULONG ulProblem, ULONG ulFlags
CM_Set_DevNode_Property_ExW;The CM_Set_DevNode_Property_ExW function sets a device instance property.;DEVINST dnDevInst, const DEVPROPKEY *PropertyKey, DEVPROPTYPE PropertyType, const PBYTE PropertyBuffer, ULONG PropertyBufferSize, ULONG ulFlags, HMACHINE hMachine
CM_Set_DevNode_PropertyW;The CM_Set_DevNode_Property function sets a device instance property.;DEVINST dnDevInst, const DEVPROPKEY *PropertyKey, DEVPROPTYPE PropertyType, const PBYTE PropertyBuffer, ULONG PropertyBufferSize, ULONG ulFlags
CM_Set_DevNode_Registry_PropertyW;The CM_Set_DevNode_Registry_Property function sets a specified device property in the registry.;DEVINST dnDevInst, ULONG ulProperty, PCVOID Buffer, ULONG ulLength, ULONG ulFlags
CM_Setup_DevNode;The CM_Setup_DevNode function restarts a device instance that is not running because there is a problem with the device configuration.;DEVINST dnDevInst, ULONG ulFlags
CM_Uninstall_DevNode;The CM_Uninstall_DevNode function removes all persistent state associated with a device instance.;DEVNODE dnDevInst, ULONG ulFlags
CM_Unregister_Notification;Use UnregisterDeviceNotification instead of CM_Unregister_Notification if your code targets Windows 7 or earlier versions of Windows.;HCMNOTIFICATION NotifyContext
CM_WaitNoPendingInstallEvents;The CMP_WaitNoPendingInstallEvents (CM_WaitNoPendingInstallEvents) function waits until there are no pending device installation activities for the PnP manager to perform.;DWORD dwTimeout
CMYK;The CMYK macro creates a CMYK color value by combining the specified cyan, magenta, yellow, and black values.;c, m, y, k
CoAddRefServerProcess;Increments a global per-process reference count.;
CoAllowUnmarshalerCLSID;Adds an unmarshaler CLSID to the allowed list for the calling process only.;REFCLSID clsid
CoCancelCall;Requests cancellation of an outbound DCOM method call pending on a specified thread.;DWORD dwThreadId, ULONG ulTimeout
CoCopyProxy;Makes a private copy of the specified proxy.;IUnknown *pProxy, IUnknown **ppCopy
CoCreateFreeThreadedMarshaler;Creates an aggregatable object capable of context-dependent marshaling.;LPUNKNOWN punkOuter, LPUNKNOWN *ppunkMarshal
CoCreateGuid;Creates a GUID, a unique 128-bit integer used for CLSIDs and interface identifiers.;GUID *pguid
CoCreateInstance;Creates a single uninitialized object of the class associated with a specified CLSID.;REFCLSID rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, REFIID riid, LPVOID *ppv
CoCreateInstanceEx;Creates an instance of a specific class on a specific computer.;REFCLSID Clsid, IUnknown *punkOuter, DWORD dwClsCtx, COSERVERINFO *pServerInfo, DWORD dwCount, MULTI_QI *pResults
CoCreateInstanceFromApp;Creates an instance of a specific class on a specific computer from within an app container.;REFCLSID Clsid, IUnknown *punkOuter, DWORD dwClsCtx, PVOID reserved, DWORD dwCount, MULTI_QI *pResults
CoDecodeProxy;Locates the implementation of a Component Object Model (COM) interface in a server process given an interface to a proxied object.;DWORD dwClientPid, UINT64 ui64ProxyAddress, PServerInformation pServerInformation
CoDecrementMTAUsage;Releases the increment made by a previous call to the CoIncrementMTAUsage function.;CO_MTA_USAGE_COOKIE Cookie
CoDisableCallCancellation;Undoes the action of a call to CoEnableCallCancellation. Disables cancellation of synchronous calls on the calling thread when all calls to CoEnableCallCancellation are balanced by calls to CoDisableCallCancellation.;LPVOID pReserved
CoDisconnectContext;Disconnects all proxy connections that are being maintained on behalf of all interface pointers that point to objects in the current context.;DWORD dwTimeout
CoDisconnectObject;Disconnects all remote process connections being maintained on behalf of all the interface pointers that point to a specified object.;LPUNKNOWN pUnk, DWORD dwReserved
CoEnableCallCancellation;Enables cancellation of synchronous calls on the calling thread.;LPVOID pReserved
CoFileTimeNow;Returns the current time as a FILETIME structure.;FILETIME *lpFileTime
CoFreeUnusedLibrariesEx;Unloads any DLLs that are no longer in use and whose unload delay has expired.;DWORD dwUnloadDelay, DWORD dwReserved
CoFreeUnusedLibraries;Unloads any DLLs that are no longer in use, probably because the DLL no longer has any instantiated COM objects outstanding.;
CoGetApartmentType;Returns the current apartment type and type qualifier.;APTTYPE *pAptType, APTTYPEQUALIFIER *pAptQualifier
CoGetCallContext;Retrieves the context of the current call on the current thread.;REFIID riid, void **ppInterface
CoGetCallerTID;Returns a pointer to a DWORD that contains the apartment ID of the caller's thread.;LPDWORD lpdwTID
CoGetCancelObject;Obtains a pointer to a call control interface, normally ICancelMethodCalls, on the cancel object corresponding to an outbound COM method call pending on the same or another client thread.;DWORD dwThreadId, REFIID iid, void **ppUnk
CoGetClassObject;Provides a pointer to an interface on a class object associated with a specified CLSID.;REFCLSID rclsid, DWORD dwClsContext, LPVOID pvReserved, REFIID riid, LPVOID *ppv
CoGetContextToken;Returns a pointer to an implementation of IObjContext for the current context.;ULONG_PTR *pToken
CoGetCurrentLogicalThreadId;Returns the logical thread identifier of the current physical thread.;GUID *pguid
CoGetCurrentProcess;Returns a value that is unique to the current thread. CoGetCurrentProcess can be used to avoid thread ID reuse problems.;
CoGetDefaultContext;Retrieves a reference to the default context of the specified apartment.;APTTYPE aptType, REFIID riid, void **ppv
CoGetInterfaceAndReleaseStream;Unmarshals a buffer containing an interface pointer and releases the stream when an interface pointer has been marshaled from another thread to the calling thread.;LPSTREAM pStm, REFIID iid, LPVOID *ppv
CoGetMalloc;Retrieves a pointer to the default OLE task memory allocator (which supports the system implementation of the IMalloc interface) so applications can call its methods to manage memory.;DWORD dwMemContext, LPMALLOC *ppMalloc
CoGetMarshalSizeMax;Returns an upper bound on the number of bytes needed to marshal the specified interface pointer to the specified object.;ULONG *pulSize, REFIID riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags
CoGetObjectContext;Returns the context for the current object.;REFIID riid, LPVOID *ppv
CoGetPSClsid;Returns the CLSID of the DLL that implements the proxy and stub for the specified interface.;REFIID riid, CLSID *pClsid
CoGetStandardMarshal;Creates a default, or standard, marshaling object in either the client process or the server process, depending on the caller, and returns a pointer to that object's IMarshal implementation.;REFIID riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags, LPMARSHAL *ppMarshal
CoGetStdMarshalEx;Creates an aggregated standard marshaler for use with lightweight client-side handlers.;LPUNKNOWN pUnkOuter, DWORD smexflags, LPUNKNOWN *ppUnkInner
CoGetTreatAsClass;Returns the CLSID of an object that can emulate the specified object.;REFCLSID clsidOld, LPCLSID pClsidNew
CoHandlePriorityEventsFromMessagePump;Called by message dispatchers on an ASTA thread after dispatching a windows message to provide an opportunity for short-running infrastructural COM calls and other high-priority or short-running COM work to be dispatched between messages.;
CoImpersonateClient;Enables the server to impersonate the client of the current call for the duration of the call.;
CoIncrementMTAUsage;Keeps MTA support active when no MTA threads are running.;CO_MTA_USAGE_COOKIE *pCookie
CoInitializeEx;Initializes the COM library for use by the calling thread, sets the thread's concurrency model, and creates a new apartment for the thread if one is required.;LPVOID pvReserved, DWORD dwCoInit
CoInitializeSecurity;Registers security and sets the default security values for the process.;PSECURITY_DESCRIPTOR pSecDesc, LONG cAuthSvc, SOLE_AUTHENTICATION_SERVICE *asAuthSvc, void *pReserved1, DWORD dwAuthnLevel, DWORD dwImpLevel, void *pAuthList, DWORD dwCapabilities, void *pReserved3
CoInvalidateRemoteMachineBindings;Tells the service control manager to flush any cached RPC binding handles for the specified computer.;LPOLESTR pszMachineName
CoIsHandlerConnected;Determines whether a remote object is connected to the corresponding in-process object.;LPUNKNOWN pUnk
CoLockObjectExternal;Called either to lock an object to ensure that it stays in memory, or to release such a lock.;LPUNKNOWN pUnk, BOOL fLock, BOOL fLastUnlockReleases
ColorAdjustLuma;Changes the luminance of a RGB value. Hue and saturation are not affected.;COLORREF clrRGB, int n, BOOL fScale
ColorCorrectPalette;The ColorCorrectPalette function corrects the entries of a palette using the WCS 1.0 parameters in the specified device context.;HDC hdc, HPALETTE hPal, DWORD deFirst, DWORD num
ColorHLSToRGB;Converts colors from hue-luminance-saturation (HLS) to RGB format.;WORD wHue, WORD wLuminance, WORD wSaturation
ColorMatchToTarget;The ColorMatchToTarget function enables you to preview colors as they would appear on the target device.;HDC hdc, HDC hdcTarget, DWORD action
ColorRGBToHLS;Converts colors from RGB to hue-luminance-saturation (HLS) format.;COLORREF clrRGB, WORD *pwHue, WORD *pwLuminance, WORD *pwSaturation
CoMarshalHresult;Marshals an HRESULT to the specified stream, from which it can be unmarshaled using the CoUnmarshalHresult function.;LPSTREAM pstm, HRESULT hresult
CoMarshalInterface;Writes into a stream the data required to initialize a proxy object in some client process.;LPSTREAM pStm, REFIID riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags
CoMarshalInterThreadInterfaceInStream;Marshals an interface pointer from one thread to another thread in the same process.;REFIID riid, LPUNKNOWN pUnk, LPSTREAM *ppStm
CombineRgn;The CombineRgn function combines two regions and stores the result in a third region. The two regions are combined according to the specified mode.;HRGN hrgnDst, HRGN hrgnSrc1, HRGN hrgnSrc2, int iMode
CombineTransform;The CombineTransform function concatenates two world-space to page-space transformations.;LPXFORM lpxfOut, const XFORM *lpxf1, const XFORM *lpxf2
CommandLineToArgvW;Parses a Unicode command line string and returns an array of pointers to the command line arguments, along with a count of such arguments, in a way that is similar to the standard C run-time argv and argc values.;LPCWSTR lpCmdLine, int *pNumArgs
CommConfigDialogA;Displays a driver-supplied configuration dialog box.;LPCSTR lpszName, HWND hWnd, LPCOMMCONFIG lpCC
CommConfigDialogW;Displays a driver-supplied configuration dialog box.;LPCWSTR lpszName, HWND hWnd, LPCOMMCONFIG lpCC
Commit;Deletes a template from or saves it to Active Directory.;CommitTemplateFlags commitFlags, BSTR strServerContext
CommitUrlCacheEntryA;Stores data in the specified file in the Internet cache and associates it with the specified URL.;LPCSTR lpszUrlName, LPCSTR lpszLocalFileName, FILETIME ExpireTime, FILETIME LastModifiedTime, DWORD CacheEntryType, LPBYTE lpHeaderInfo, DWORD cchHeaderInfo, LPCSTR lpszFileExtension, LPCSTR lpszOriginalUrl
CommitUrlCacheEntryW;Stores data in the specified file in the Internet cache and associates it with the specified URL.;LPCWSTR lpszUrlName, LPCWSTR lpszLocalFileName, FILETIME ExpireTime, FILETIME LastModifiedTime, DWORD CacheEntryType, LPWSTR lpszHeaderInfo, DWORD cchHeaderInfo, LPCWSTR lpszFileExtension, LPCWSTR lpszOriginalUrl
CompareFileTime;Compares two file times.;const FILETIME *lpFileTime1, const FILETIME *lpFileTime2
CompareStringA;Compares two character strings, for a locale specified by identifier.Caution  Using CompareString incorrectly can compromise the security of your application.;LCID Locale, DWORD dwCmpFlags, PCNZCH lpString1, int cchCount1, PCNZCH lpString2, int cchCount2
CompareString;Compares two character strings, for a locale specified by identifier.Caution  Using CompareString incorrectly can compromise the security of your application.;LCID Locale, DWORD dwCmpFlags, LPCTSTR lpString1, int cchCount1, LPCTSTR lpString2, int cchCount2
CompleteAuthToken;Completes an authentication token.;PCtxtHandle phContext, PSecBufferDesc pToken
Compress;Takes a block of information and compresses it.;COMPRESSOR_HANDLE CompressorHandle, LPCVOID UncompressedData, SIZE_T UncompressedDataSize, PVOID CompressedBuffer, SIZE_T CompressedBufferSize, PSIZE_T CompressedDataSize
ComputeEffectivePermissionWithSecondarySecurity;Computes the effective permissions by using the secondary security for an object.;PSID pSid, PSID pDeviceSid, PCWSTR pszServerName, PSECURITY_OBJECT pSecurityObjects, DWORD dwSecurityObjectCount, PTOKEN_GROUPS pUserGroups, PAUTHZ_SID_OPERATION pAuthzUserGroupsOperations, PTOKEN_GROUPS pDeviceGroups, PAUTHZ_SID_OPERATION pAuthzDeviceGroupsOperations, PAUTHZ_SECURITY_ATTRIBUTES_INFORMATION pAuthzUserClaims, PAUTHZ_SECURITY_ATTRIBUTE_OPERATION pAuthzUserClaimsOperations, PAUTHZ_SECURITY_ATTRIBUTES_INFORMATION pAuthzDeviceClaims, PAUTHZ_SECURITY_ATTRIBUTE_OPERATION pAuthzDeviceClaimsOperations, PEFFPERM_RESULT_LIST pEffpermResultLists
ComputeKeyIdentifier;Creates an identifier from a 160-bit SHA-1 hash of the public key.;KeyIdentifierHashAlgorithm Algorithm, EncodingType Encoding, BSTR *pValue
ComputeSiteCosts;Is not currently used.;
Configure;Displays the module user interface.;const BSTR strConfig, BSTR strStorageLocation, LONG Flags
ConnectIdentity;Connects an identity to a domain user.;BYTE *AuthBuffer, ULONG AuthBufferSize
ConnectNamedPipe;Enables a named pipe server process to wait for a client process to connect to an instance of a named pipe.;HANDLE hNamedPipe, LPOVERLAPPED lpOverlapped
connect;The connect function establishes a connection to a specified socket.;SOCKET s, const sockaddr *name, int namelen
ConnectToConnectionPoint;Establishes or terminates a connection between a client's sink and a connection point container.;IUnknown *punk, REFIID riidEvent, BOOL fConnect, IUnknown *punkTarget, DWORD *pdwCookie, IConnectionPoint **ppcpOut
ContinueDebugEvent;Enables a debugger to continue a thread that previously reported a debugging event.;DWORD dwProcessId, DWORD dwThreadId, DWORD dwContinueStatus
ControlServiceExA;Sends a control code to a service.;SC_HANDLE hService, DWORD dwControl, DWORD dwInfoLevel, PVOID pControlParams
ControlServiceExW;Sends a control code to a service.;SC_HANDLE hService, DWORD dwControl, DWORD dwInfoLevel, PVOID pControlParams
ControlService;Sends a control code to a service.;SC_HANDLE hService, DWORD dwControl, LPSERVICE_STATUS lpServiceStatus
ConvertDefaultLocale;Converts a default locale value to an actual locale identifier.;LCID Locale
ConvertFiberToThread;Converts the current fiber into a thread.;
ConvertInterfaceAliasToLuid;Converts an interface alias name for a network interface to the locally unique identifier (LUID) for the interface.;const WCHAR *InterfaceAlias, PNET_LUID InterfaceLuid
ConvertInterfaceGuidToLuid;Converts a globally unique identifier (GUID) for a network interface to the locally unique identifier (LUID) for the interface.;const GUID *InterfaceGuid, PNET_LUID InterfaceLuid
ConvertInterfaceIndexToLuid;Converts a local index for a network interface to the locally unique identifier (LUID) for the interface.;NET_IFINDEX InterfaceIndex, PNET_LUID InterfaceLuid
ConvertInterfaceLuidToAlias;Converts a locally unique identifier (LUID) for a network interface to an interface alias.;const NET_LUID *InterfaceLuid, PWSTR InterfaceAlias, SIZE_T Length
ConvertInterfaceLuidToGuid;Converts a locally unique identifier (LUID) for a network interface to a globally unique identifier (GUID) for the interface.;const NET_LUID *InterfaceLuid, GUID *InterfaceGuid
ConvertInterfaceLuidToIndex;Converts a locally unique identifier (LUID) for a network interface to the local index for the interface.;const NET_LUID *InterfaceLuid, PNET_IFINDEX InterfaceIndex
ConvertInterfaceLuidToNameA;Converts a locally unique identifier (LUID) for a network interface to the ANSI interface name.;const NET_LUID *InterfaceLuid, PSTR InterfaceName, SIZE_T Length
ConvertInterfaceLuidToNameW;Converts a locally unique identifier (LUID) for a network interface to the Unicode interface name.;const NET_LUID *InterfaceLuid, PWSTR InterfaceName, SIZE_T Length
ConvertInterfaceNameToLuidA;Converts an ANSI network interface name to the locally unique identifier (LUID) for the interface.;const CHAR *InterfaceName, NET_LUID *InterfaceLuid
ConvertInterfaceNameToLuidW;Converts a Unicode network interface name to the locally unique identifier (LUID) for the interface.;const WCHAR *InterfaceName, NET_LUID *InterfaceLuid
ConvertIpv4MaskToLength;Converts an IPv4 subnet mask to an IPv4 prefix length.;ULONG Mask, PUINT8 MaskLength
ConvertLengthToIpv4Mask;Converts an IPv4 prefix length to an IPv4 subnet mask.;ULONG MaskLength, PULONG Mask
ConvertSecurityDescriptorToStringSecurityDescriptorA;Converts a security descriptor to a string format. You can use the string format to store or transmit the security descriptor.;PSECURITY_DESCRIPTOR SecurityDescriptor, DWORD RequestedStringSDRevision, SECURITY_INFORMATION SecurityInformation, LPSTR *StringSecurityDescriptor, PULONG StringSecurityDescriptorLen
ConvertSecurityDescriptorToStringSecurityDescriptorW;Converts a security descriptor to a string format. You can use the string format to store or transmit the security descriptor.;PSECURITY_DESCRIPTOR SecurityDescriptor, DWORD RequestedStringSDRevision, SECURITY_INFORMATION SecurityInformation, LPWSTR *StringSecurityDescriptor, PULONG StringSecurityDescriptorLen
ConvertSidToStringSidA;Converts a security identifier (SID) to a string format suitable for display, storage, or transmission.;PSID Sid, LPSTR *StringSid
ConvertSidToStringSidW;Converts a security identifier (SID) to a string format suitable for display, storage, or transmission.;PSID Sid, LPWSTR *StringSid
ConvertStringSecurityDescriptorToSecurityDescriptorA;Converts a string-format security descriptor into a valid, functional security descriptor.;LPCSTR StringSecurityDescriptor, DWORD StringSDRevision, PSECURITY_DESCRIPTOR *SecurityDescriptor, PULONG SecurityDescriptorSize
ConvertStringSecurityDescriptorToSecurityDescriptorW;Converts a string-format security descriptor into a valid, functional security descriptor.;LPCWSTR StringSecurityDescriptor, DWORD StringSDRevision, PSECURITY_DESCRIPTOR *SecurityDescriptor, PULONG SecurityDescriptorSize
ConvertStringSidToSidA;Converts a string-format security identifier (SID) into a valid, functional SID. You can use this function to retrieve a SID that the ConvertSidToStringSid function converted to string format.;LPCSTR StringSid, PSID *Sid
ConvertStringSidToSidW;Converts a string-format security identifier (SID) into a valid, functional SID. You can use this function to retrieve a SID that the ConvertSidToStringSid function converted to string format.;LPCWSTR StringSid, PSID *Sid
ConvertThreadToFiber;Converts the current thread into a fiber. You must convert a thread into a fiber before you can schedule other fibers.;LPVOID lpParameter
ConvertThreadToFiberEx;Converts the current thread into a fiber. You must convert a thread into a fiber before you can schedule other fibers.;LPVOID lpParameter, DWORD dwFlags
ConvertToAutoInheritPrivateObjectSecurity;Converts a security descriptor and its access control lists (ACLs) to a format that supports automatic propagation of inheritable access control entries (ACEs).;PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CurrentSecurityDescriptor, PSECURITY_DESCRIPTOR *NewSecurityDescriptor, GUID *ObjectType, BOOLEAN IsDirectoryObject, PGENERIC_MAPPING GenericMapping
ConvertToSid;Retrieves the security identifier (SID) associated with the specified identity and identity provider.;LPCWSTR lpszUniqueID, REFGUID ProviderGUID, USHORT cbSid, BYTE *pSid, USHORT *pcbRequiredSid
CopyAcceleratorTableA;Copies the specified accelerator table. This function is used to obtain the accelerator-table data that corresponds to an accelerator-table handle, or to determine the size of the accelerator-table data.;HACCEL hAccelSrc, LPACCEL lpAccelDst, int cAccelEntries
CopyAcceleratorTableW;Copies the specified accelerator table. This function is used to obtain the accelerator-table data that corresponds to an accelerator-table handle, or to determine the size of the accelerator-table data.;HACCEL hAccelSrc, LPACCEL lpAccelDst, int cAccelEntries
CopyContext;Copies a source context structure (including any XState) onto an initialized destination context structure.;PCONTEXT Destination, DWORD ContextFlags, PCONTEXT Source
CopyCursor;Copies the specified cursor.;pcur
CopyEnhMetaFileA;The CopyEnhMetaFile function copies the contents of an enhanced-format metafile to a specified file.;HENHMETAFILE hEnh, LPCSTR lpFileName
CopyEnhMetaFileW;The CopyEnhMetaFile function copies the contents of an enhanced-format metafile to a specified file.;HENHMETAFILE hEnh, LPCWSTR lpFileName
CopyFile2;Copies an existing file to a new file, notifying the application of its progress through a callback function.;PCWSTR pwszExistingFileName, PCWSTR pwszNewFileName, COPYFILE2_EXTENDED_PARAMETERS *pExtendedParameters
CopyFileA;Copies an existing file to a new file.;LPCSTR lpExistingFileName, LPCSTR lpNewFileName, BOOL bFailIfExists
CopyFile;Copies an existing file to a new file.;LPCTSTR lpExistingFileName, LPCTSTR lpNewFileName, BOOL bFailIfExists
CopyFileExA;Copies an existing file to a new file, notifying the application of its progress through a callback function.;LPCSTR lpExistingFileName, LPCSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, LPBOOL pbCancel, DWORD dwCopyFlags
CopyFileExW;Copies an existing file to a new file, notifying the application of its progress through a callback function.;LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, LPBOOL pbCancel, DWORD dwCopyFlags
CopyFileTransactedA;Copies an existing file to a new file as a transacted operation, notifying the application of its progress through a callback function.;LPCSTR lpExistingFileName, LPCSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, LPBOOL pbCancel, DWORD dwCopyFlags, HANDLE hTransaction
CopyFileTransactedW;Copies an existing file to a new file as a transacted operation, notifying the application of its progress through a callback function.;LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, LPBOOL pbCancel, DWORD dwCopyFlags, HANDLE hTransaction
CopyFileW;Copies an existing file to a new file.;LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, BOOL bFailIfExists
CopyIcon;Copies the specified icon from another module to the current module.;HICON hIcon
CopyImage;Creates a new image (icon, cursor, or bitmap) and copies the attributes of the specified image to the new one. If necessary, the function stretches the bits to fit the desired size of the new image.;HANDLE h, UINT type, int cx, int cy, UINT flags
CopyMetaFileA;The CopyMetaFile function copies the content of a Windows-format metafile to the specified file.;HMETAFILE , LPCSTR
CopyMetaFileW;The CopyMetaFile function copies the content of a Windows-format metafile to the specified file.;HMETAFILE , LPCWSTR
CopyRect;The CopyRect function copies the coordinates of one rectangle to another.;LPRECT lprcDst, const RECT *lprcSrc
CopySid;Copies a security identifier (SID) to a buffer.;DWORD nDestinationSidLength, PSID pDestinationSid, PSID pSourceSid
CoQueryAuthenticationServices;Retrieves a list of the authentication services registered when the process called CoInitializeSecurity.;DWORD *pcAuthSvc, SOLE_AUTHENTICATION_SERVICE **asAuthSvc
CoQueryClientBlanket;Called by the server to find out about the client that invoked the method executing on the current thread.;DWORD *pAuthnSvc, DWORD *pAuthzSvc, LPOLESTR *pServerPrincName, DWORD *pAuthnLevel, DWORD *pImpLevel, RPC_AUTHZ_HANDLE *pPrivs, DWORD *pCapabilities
CoQueryProxyBlanket;Retrieves the authentication information the client uses to make calls on the specified proxy.;IUnknown *pProxy, DWORD *pwAuthnSvc, DWORD *pAuthzSvc, LPOLESTR *pServerPrincName, DWORD *pAuthnLevel, DWORD *pImpLevel, RPC_AUTH_IDENTITY_HANDLE *pAuthInfo, DWORD *pCapabilites
CoRegisterActivationFilter;Registers a process-wide filter to process activation requests.;IActivationFilter *pActivationFilter
CoRegisterClassObject;Registers an EXE class object with OLE so other applications can connect to it.;REFCLSID rclsid, LPUNKNOWN pUnk, DWORD dwClsContext, DWORD flags, LPDWORD lpdwRegister
CoRegisterPSClsid;Enables a downloaded DLL to register its custom interfaces within its running process so that the marshaling code will be able to marshal those interfaces.;REFIID riid, REFCLSID rclsid
CoRegisterSurrogate;Registers the surrogate process through its ISurrogate interface pointer.;LPSURROGATE pSurrogate
CoReleaseMarshalData;Destroys a previously marshaled data packet.;LPSTREAM pStm
CoReleaseServerProcess;Decrements the global per-process reference count.;
CoResumeClassObjects;Called by a server that can register multiple class objects to inform the SCM about all registered classes, and permits activation requests for those class objects.;
CoRevertToSelf;Restores the authentication information on a thread of execution.;
CoRevokeClassObject;Informs OLE that a class object, previously registered with the CoRegisterClassObject function, is no longer available for use.;DWORD dwRegister
CoSetCancelObject;Sets (registers) or resets (unregisters) a cancel object for use during subsequent cancel operations on the current thread.;IUnknown *pUnk
CoSetMessageDispatcher;Registers or unregisters the per-thread message dispatcher that is to be invoked when there are window messages available to dispatch within COM wait APIs on an ASTA thread.;PMessageDispatcher pMessageDispatcher
CoSetProxyBlanket;Sets the authentication information that will be used to make calls on the specified proxy.;IUnknown *pProxy, DWORD dwAuthnSvc, DWORD dwAuthzSvc, OLECHAR *pServerPrincName, DWORD dwAuthnLevel, DWORD dwImpLevel, RPC_AUTH_IDENTITY_HANDLE pAuthInfo, DWORD dwCapabilities
CoSuspendClassObjects;Prevents any new activation requests from the SCM on all class objects registered within the process.;
CoSwitchCallContext;Switches the call context object used by CoGetCallContext.;IUnknown *pNewObject, IUnknown **ppOldObject
CoTaskMemAlloc;Allocates a block of task memory in the same way that IMalloc::Alloc does.;SIZE_T cb
CoTaskMemFree;Frees a block of task memory previously allocated through a call to the CoTaskMemAlloc or CoTaskMemRealloc function.;_Frees_ptr_opt_ LPVOID pv
CoTaskMemRealloc;Changes the size of a previously allocated block of task memory.;LPVOID pv, SIZE_T cb
CoTestCancel;Determines whether the call being executed on the server has been canceled by the client.;
CoUninitialize;Closes the COM library on the current thread, unloads all DLLs loaded by the thread, frees any other resources that the thread maintains, and forces all RPC connections on the thread to close.;
CoUnmarshalHresult;Unmarshals an HRESULT type from the specified stream.;LPSTREAM pstm, HRESULT *phresult
CoUnmarshalInterface;Initializes a newly created proxy using data written into the stream by a previous call to the CoMarshalInterface function, and returns an interface pointer to that proxy.;LPSTREAM pStm, REFIID riid, LPVOID *ppv
CountClipboardFormats;Retrieves the number of different data formats currently on the clipboard.;
CoWaitForMultipleHandles;Waits for specified handles to be signaled or for a specified timeout period to elapse.;DWORD dwFlags, DWORD dwTimeout, ULONG cHandles, LPHANDLE pHandles, LPDWORD lpdwindex
CoWaitForMultipleObjects;A replacement for CoWaitForMultipleHandles. This replacement API hides the options for CoWaitForMultipleHandles that are not supported in ASTA.;DWORD dwFlags, DWORD dwTimeout, ULONG cHandles, const HANDLE *pHandles, LPDWORD lpdwindex
CreateAcceleratorTableA;Creates an accelerator table.;LPACCEL paccel, int cAccel
CreateAcceleratorTableW;Creates an accelerator table.;LPACCEL paccel, int cAccel
CreateActCtxA;The CreateActCtx function creates an activation context.;PCACTCTXA pActCtx
CreateActCtxW;The CreateActCtx function creates an activation context.;PCACTCTXW pActCtx
CreateAnycastIpAddressEntry;Adds a new anycast IP address entry on the local computer.;const MIB_ANYCASTIPADDRESS_ROW *Row
CreateApplication2;Creates an IAzApplication2 object by using the specified name.;BSTR bstrApplicationName, VARIANT varReserved, IAzApplication2 **ppApplication
CreateApplication;Creates an IAzApplication object with the specified name.;BSTR bstrApplicationName, VARIANT varReserved, IAzApplication **ppApplication
CreateApplicationGroup;Creates an IAzApplicationGroup object with the specified name.;BSTR bstrGroupName, VARIANT varReserved, IAzApplicationGroup **ppGroup
CreateAssemblyCache;The CreateAssemblyCache function obtains an instance of the IAssemblyCache interface.;IAssemblyCache **ppAsmCache, DWORD dwReserved
CreateAssemblyNameObject;The CreateAssemblyNameObject function obtains an instance of the IAssemblyName interface.;LPASSEMBLYNAME *ppAssemblyNameObj, LPCWSTR szAssemblyName, DWORD dwFlags, LPVOID pvReserved
CreateBitmapIndirect;The CreateBitmapIndirect function creates a bitmap with the specified width, height, and color format (color planes and bits-per-pixel).;const BITMAP *pbm
CreateBitmap;The CreateBitmap function creates a bitmap with the specified width, height, and color format (color planes and bits-per-pixel).;int nWidth, int nHeight, UINT nPlanes, UINT nBitCount, const VOID *lpBits
CreateBoundaryDescriptorA;Creates a boundary descriptor.;LPCSTR Name, ULONG Flags
CreateBrushIndirect;The CreateBrushIndirect function creates a logical brush that has the specified style, color, and pattern.;const LOGBRUSH *plbrush
CreateCAConfiguration;Creates a new certification authority (CA) configuration and adds it to the configuration set.;const BSTR bstrIdentifier, VARIANT varCACert, IOCSPCAConfiguration **ppVal
CreateCaret;Creates a new shape for the system caret and assigns ownership of the caret to the specified window. The caret shape can be a line, a block, or a bitmap.;HWND hWnd, HBITMAP hBitmap, int nWidth, int nHeight
CreateColorSpaceA;The CreateColorSpace function creates a logical color space.;LPLOGCOLORSPACEA lplcs
CreateColorSpaceW;The CreateColorSpace function creates a logical color space.;LPLOGCOLORSPACEW lplcs
CreateCompatibleBitmap;The CreateCompatibleBitmap function creates a bitmap compatible with the device that is associated with the specified device context.;HDC hdc, int cx, int cy
CreateCompatibleDC;The CreateCompatibleDC function creates a memory device context (DC) compatible with the specified device.;HDC hdc
CreateCompressor;Generates a new COMPRESSOR_HANDLE.;DWORD Algorithm, PCOMPRESS_ALLOCATION_ROUTINES AllocationRoutines, PCOMPRESSOR_HANDLE CompressorHandle
CreateContext;Creates a recognizer context.;HRECOGNIZER hrec, HRECOCONTEXT *phrc
Create;Creates an asymmetric private key.;
Create;Creates a new identity associated with the specified user name.;LPCWSTR lpszUserName, IPropertyStore **ppPropertyStore, const PROPVARIANT *pKeywordsToAdd
CreateCursor;Creates a cursor having the specified size, bit patterns, and hot spot.;HINSTANCE hInst, int xHotSpot, int yHotSpot, int nWidth, int nHeight, const VOID *pvANDPlane, const VOID *pvXORPlane
CreateDCA;The CreateDC function creates a device context (DC) for a device using the specified name.;LPCSTR pwszDriver, LPCSTR pwszDevice, LPCSTR pszPort, const DEVMODEA *pdm
CreateDCW;The CreateDC function creates a device context (DC) for a device using the specified name.;LPCWSTR pwszDriver, LPCWSTR pwszDevice, LPCWSTR pszPort, const DEVMODEW *pdm
CreateDecompressor;Generates a new DECOMPRESSOR_HANDLE.;DWORD Algorithm, PCOMPRESS_ALLOCATION_ROUTINES AllocationRoutines, PDECOMPRESSOR_HANDLE DecompressorHandle
CreateDesktopA;Creates a new desktop, associates it with the current window station of the calling process, and assigns it to the calling thread.;LPCSTR lpszDesktop, LPCSTR lpszDevice, DEVMODEA *pDevmode, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa
CreateDesktopExA;Creates a new desktop with the specified heap, associates it with the current window station of the calling process, and assigns it to the calling thread.;LPCSTR lpszDesktop, LPCSTR lpszDevice, DEVMODEA *pDevmode, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa, ULONG ulHeapSize, PVOID pvoid
CreateDesktopExW;Creates a new desktop with the specified heap, associates it with the current window station of the calling process, and assigns it to the calling thread.;LPCWSTR lpszDesktop, LPCWSTR lpszDevice, DEVMODEW *pDevmode, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa, ULONG ulHeapSize, PVOID pvoid
CreateDesktopW;Creates a new desktop, associates it with the current window station of the calling process, and assigns it to the calling thread.;LPCWSTR lpszDesktop, LPCWSTR lpszDevice, DEVMODEW *pDevmode, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa
CreateDialogA;Creates a modeless dialog box from a dialog box template resource. The CreateDialog macro uses the CreateDialogParam function.;hInstance, lpName, hWndParent, lpDialogFunc
CreateDialogIndirectA;Creates a modeless dialog box from a dialog box template in memory. The CreateDialogIndirect macro uses the CreateDialogIndirectParam function.;hInstance, lpTemplate, hWndParent, lpDialogFunc
CreateDialogIndirectParamA;Creates a modeless dialog box from a dialog box template in memory.;HINSTANCE hInstance, LPCDLGTEMPLATEA lpTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam
CreateDialogIndirectParamW;Creates a modeless dialog box from a dialog box template in memory.;HINSTANCE hInstance, LPCDLGTEMPLATEW lpTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam
CreateDialogIndirectW;Creates a modeless dialog box from a dialog box template in memory. The CreateDialogIndirect macro uses the CreateDialogIndirectParam function.;hInstance, lpTemplate, hWndParent, lpDialogFunc
CreateDialogParamA;Creates a modeless dialog box from a dialog box template resource.;HINSTANCE hInstance, LPCSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam
CreateDialogParamW;Creates a modeless dialog box from a dialog box template resource.;HINSTANCE hInstance, LPCWSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam
CreateDialogW;Creates a modeless dialog box from a dialog box template resource. The CreateDialog macro uses the CreateDialogParam function.;hInstance, lpName, hWndParent, lpDialogFunc
CreateDIBitmap;The CreateDIBitmap function creates a compatible bitmap (DDB) from a DIB and, optionally, sets the bitmap bits.;HDC hdc, const BITMAPINFOHEADER *pbmih, DWORD flInit, const VOID *pjBits, const BITMAPINFO *pbmi, UINT iUsage
CreateDIBPatternBrushPt;The CreateDIBPatternBrushPt function creates a logical brush that has the pattern specified by the device-independent bitmap (DIB).;const VOID *lpPackedDIB, UINT iUsage
CreateDIBPatternBrush;The CreateDIBPatternBrush function creates a logical brush that has the pattern specified by the specified device-independent bitmap (DIB).;HGLOBAL h, UINT iUsage
CreateDIBSection;The CreateDIBSection function creates a DIB that applications can write to directly.;HDC hdc, const BITMAPINFO *pbmi, UINT usage, VOID **ppvBits, HANDLE hSection, DWORD offset
CreateDirectoryA;Creates a new directory.;LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes
CreateDirectory;Creates a new directory.;LPCTSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes
CreateDirectoryExA;Creates a new directory with the attributes of a specified template directory.;LPCSTR lpTemplateDirectory, LPCSTR lpNewDirectory, LPSECURITY_ATTRIBUTES lpSecurityAttributes
CreateDirectoryExW;Creates a new directory with the attributes of a specified template directory.;LPCWSTR lpTemplateDirectory, LPCWSTR lpNewDirectory, LPSECURITY_ATTRIBUTES lpSecurityAttributes
CreateDirectoryTransactedA;Creates a new directory as a transacted operation, with the attributes of a specified template directory.;LPCSTR lpTemplateDirectory, LPCSTR lpNewDirectory, LPSECURITY_ATTRIBUTES lpSecurityAttributes, HANDLE hTransaction
CreateDirectoryTransactedW;Creates a new directory as a transacted operation, with the attributes of a specified template directory.;LPCWSTR lpTemplateDirectory, LPCWSTR lpNewDirectory, LPSECURITY_ATTRIBUTES lpSecurityAttributes, HANDLE hTransaction
CreateDirectoryW;Creates a new directory.;LPCWSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes
CreateDiscardableBitmap;The CreateDiscardableBitmap function creates a discardable bitmap that is compatible with the specified device.;HDC hdc, int cx, int cy
CreateEllipticRgnIndirect;The CreateEllipticRgnIndirect function creates an elliptical region.;const RECT *lprect
CreateEllipticRgn;The CreateEllipticRgn function creates an elliptical region.;int x1, int y1, int x2, int y2
CreateEnclave;Creates a new uninitialized enclave. An enclave is an isolated region of code and data within the address space for an application. Only code that runs within the enclave can access data within the same enclave.;HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, SIZE_T dwInitialCommitment, DWORD flEnclaveType, LPCVOID lpEnclaveInformation, DWORD dwInfoLength, LPDWORD lpEnclaveError
CreateEnhMetaFileA;The CreateEnhMetaFile function creates a device context for an enhanced-format metafile. This device context can be used to store a device-independent picture.;HDC hdc, LPCSTR lpFilename, const RECT *lprc, LPCSTR lpDesc
CreateEnhMetaFileW;The CreateEnhMetaFile function creates a device context for an enhanced-format metafile. This device context can be used to store a device-independent picture.;HDC hdc, LPCWSTR lpFilename, const RECT *lprc, LPCWSTR lpDesc
CreateEventA;Creates or opens a named or unnamed event object.;LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset, BOOL bInitialState, LPCSTR lpName
CreateEventExA;Creates or opens a named or unnamed event object and returns a handle to the object.;LPSECURITY_ATTRIBUTES lpEventAttributes, LPCSTR lpName, DWORD dwFlags, DWORD dwDesiredAccess
CreateEventExW;Creates or opens a named or unnamed event object and returns a handle to the object.;LPSECURITY_ATTRIBUTES lpEventAttributes, LPCWSTR lpName, DWORD dwFlags, DWORD dwDesiredAccess
CreateEventW;Creates or opens a named or unnamed event object.;LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset, BOOL bInitialState, LPCWSTR lpName
CreateFiber;Allocates a fiber object, assigns it a stack, and sets up execution to begin at the specified start address, typically the fiber function. This function does not schedule the fiber.;SIZE_T dwStackSize, LPFIBER_START_ROUTINE lpStartAddress, LPVOID lpParameter
CreateFiberEx;Allocates a fiber object, assigns it a stack, and sets up execution to begin at the specified start address, typically the fiber function. This function does not schedule the fiber.;SIZE_T dwStackCommitSize, SIZE_T dwStackReserveSize, DWORD dwFlags, LPFIBER_START_ROUTINE lpStartAddress, LPVOID lpParameter
CreateFile2;Creates or opens a file or I/O device.;LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, DWORD dwCreationDisposition, LPCREATEFILE2_EXTENDED_PARAMETERS pCreateExParams
CreateFileA;Creates or opens a file or I/O device. The most commonly used I/O devices are as follows:_file, file stream, directory, physical disk, volume, console buffer, tape drive, communications resource, mailslot, and pipe.;LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile
CreateFileMapping2;Creates or opens a named or unnamed file mapping object for a specified file. You can specify a preferred NUMA node for the physical memory as an extended parameter; see the ;HANDLE File, SECURITY_ATTRIBUTES *SecurityAttributes, ULONG DesiredAccess, ULONG PageProtection, ULONG AllocationAttributes, ULONG64 MaximumSize, PCWSTR Name, MEM_EXTENDED_PARAMETER *ExtendedParameters, ULONG ParameterCount
CreateFileMappingA;Creates or opens a named or unnamed file mapping object for a specified file.;HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCSTR lpName
CreateFileMappingFromApp;Creates or opens a named or unnamed file mapping object for a specified file from a Windows Store app.;HANDLE hFile, PSECURITY_ATTRIBUTES SecurityAttributes, ULONG PageProtection, ULONG64 MaximumSize, PCWSTR Name
CreateFileMappingNumaA;Creates or opens a named or unnamed file mapping object for a specified file and specifies the NUMA node for the physical memory.;HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCSTR lpName, DWORD nndPreferred
CreateFileMappingNumaW;Creates or opens a named or unnamed file mapping object for a specified file and specifies the NUMA node for the physical memory.;HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCWSTR lpName, DWORD nndPreferred
CreateFileMappingW;Creates or opens a named or unnamed file mapping object for a specified file.;HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCWSTR lpName
createFilePFX;Saves the accepted certificate chain and private key in a file in Personal Information Exchange (PFX) format. This method was first defined in the ICEnroll4 interface.;BSTR strPassword, BSTR strPFXFileName
createFilePFXWStr;Saves the accepted certificate chain and private key in a file in Personal Information Exchange (PFX) format.;LPCWSTR pwszPassword, LPCWSTR pwszPFXFileName
createFilePKCS10;Creates a base64-encoded PKCS;BSTR DNName, BSTR Usage, BSTR wszPKCS10FileName
createFilePKCS10WStr;Creates a base64-encoded PKCS;LPCWSTR DNName, LPCWSTR Usage, LPCWSTR wszPKCS10FileName
createFileRequest;Creates a PKCS;LONG Flags, BSTR strDNName, BSTR strUsage, BSTR strRequestFileName
createFileRequestWStr;Creates a PKCS;LONG Flags, LPCWSTR pwszDNName, LPCWSTR pwszUsage, LPCWSTR pwszRequestFileName
CreateFileTransactedA;Creates or opens a file, file stream, or directory as a transacted operation.;LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile, HANDLE hTransaction, PUSHORT pusMiniVersion, PVOID lpExtendedParameter
CreateFileTransactedW;Creates or opens a file, file stream, or directory as a transacted operation.;LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile, HANDLE hTransaction, PUSHORT pusMiniVersion, PVOID lpExtendedParameter
CreateFileW;Creates or opens a file or I/O device. The most commonly used I/O devices are as follows:_file, file stream, directory, physical disk, volume, console buffer, tape drive, communications resource, mailslot, and pipe.;LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile
CreateFontA;The CreateFont function creates a logical font with the specified characteristics. The logical font can subsequently be selected as the font for any device.;int cHeight, int cWidth, int cEscapement, int cOrientation, int cWeight, DWORD bItalic, DWORD bUnderline, DWORD bStrikeOut, DWORD iCharSet, DWORD iOutPrecision, DWORD iClipPrecision, DWORD iQuality, DWORD iPitchAndFamily, LPCSTR pszFaceName
CreateFontIndirectA;The CreateFontIndirect function creates a logical font that has the specified characteristics. The font can subsequently be selected as the current font for any device context.;const LOGFONTA *lplf
CreateFontIndirectExA;The CreateFontIndirectEx function specifies a logical font that has the characteristics in the specified structure. The font can subsequently be selected as the current font for any device context.;const ENUMLOGFONTEXDVA *Arg1
CreateFontIndirectExW;The CreateFontIndirectEx function specifies a logical font that has the characteristics in the specified structure. The font can subsequently be selected as the current font for any device context.;const ENUMLOGFONTEXDVW *Arg1
CreateFontIndirectW;The CreateFontIndirect function creates a logical font that has the specified characteristics. The font can subsequently be selected as the current font for any device context.;const LOGFONTW *lplf
CreateFontW;The CreateFont function creates a logical font with the specified characteristics. The logical font can subsequently be selected as the font for any device.;int cHeight, int cWidth, int cEscapement, int cOrientation, int cWeight, DWORD bItalic, DWORD bUnderline, DWORD bStrikeOut, DWORD iCharSet, DWORD iOutPrecision, DWORD iClipPrecision, DWORD iQuality, DWORD iPitchAndFamily, LPCWSTR pszFaceName
CreateGPOLink;The CreateGPOLink function creates a link between the specified GPO and the specified site, domain, or organizational unit.;LPOLESTR lpGPO, LPOLESTR lpContainer, BOOL fHighPriority
CreateHalftonePalette;The CreateHalftonePalette function creates a halftone palette for the specified device context (DC).;HDC hdc
CreateHardLinkA;Establishes a hard link between an existing file and a new file.;LPCSTR lpFileName, LPCSTR lpExistingFileName, LPSECURITY_ATTRIBUTES lpSecurityAttributes
CreateHardLinkTransactedA;Establishes a hard link between an existing file and a new file as a transacted operation.;LPCSTR lpFileName, LPCSTR lpExistingFileName, LPSECURITY_ATTRIBUTES lpSecurityAttributes, HANDLE hTransaction
CreateHardLinkTransactedW;Establishes a hard link between an existing file and a new file as a transacted operation.;LPCWSTR lpFileName, LPCWSTR lpExistingFileName, LPSECURITY_ATTRIBUTES lpSecurityAttributes, HANDLE hTransaction
CreateHardLinkW;Establishes a hard link between an existing file and a new file.;LPCWSTR lpFileName, LPCWSTR lpExistingFileName, LPSECURITY_ATTRIBUTES lpSecurityAttributes
CreateHatchBrush;The CreateHatchBrush function creates a logical brush that has the specified hatch pattern and color.;int iHatch, COLORREF color
CreateHrtfApo;Creates an instance of the IXAPO interface for head-related transfer function (HRTF) processing.;const HrtfApoInit *init, IXAPO **xApo
CreateICA;The CreateIC function creates an information context for the specified device.;LPCSTR pszDriver, LPCSTR pszDevice, LPCSTR pszPort, const DEVMODEA *pdm
CreateIcon;Creates an icon that has the specified size, colors, and bit patterns.;HINSTANCE hInstance, int nWidth, int nHeight, BYTE cPlanes, BYTE cBitsPixel, const BYTE *lpbANDbits, const BYTE *lpbXORbits
CreateIconFromResource;Creates an icon or cursor from resource bits describing the icon.;PBYTE presbits, DWORD dwResSize, BOOL fIcon, DWORD dwVer
CreateIconFromResourceEx;Creates an icon or cursor from resource bits describing the icon.;PBYTE presbits, DWORD dwResSize, BOOL fIcon, DWORD dwVer, int cxDesired, int cyDesired, UINT Flags
CreateIconIndirect;Creates an icon or cursor from an ICONINFO structure.;PICONINFO piconinfo
CreateICW;The CreateIC function creates an information context for the specified device.;LPCWSTR pszDriver, LPCWSTR pszDevice, LPCWSTR pszPort, const DEVMODEW *pdm
CreateILockBytesOnHGlobal;Creates a byte array object that uses an HGLOBAL memory handle to store the bytes intended for in-memory storage of a compound file.;HGLOBAL hGlobal, BOOL fDeleteOnRelease, LPLOCKBYTES *pplkbyt
CreateIpForwardEntry2;Creates a new IP route entry on the local computer.;const MIB_IPFORWARD_ROW2 *Row
CreateIpForwardEntry;The CreateIpForwardEntry function creates a route in the local computer's IPv4 routing table.;PMIB_IPFORWARDROW pRoute
CreateIpNetEntry2;Creates a new neighbor IP address entry on the local computer.;const MIB_IPNET_ROW2 *Row
CreateIpNetEntry;The CreateIpNetEntry function creates an Address Resolution Protocol (ARP) entry in the ARP table on the local computer.;PMIB_IPNETROW pArpEntry
CreateJobObjectA;Creates or opens a job object.;LPSECURITY_ATTRIBUTES lpJobAttributes, LPCSTR lpName
CreateMailslotA;Creates a mailslot with the specified name and returns a handle that a mailslot server can use to perform operations on the mailslot.;LPCSTR lpName, DWORD nMaxMessageSize, DWORD lReadTimeout, LPSECURITY_ATTRIBUTES lpSecurityAttributes
CreateMailslotW;Creates a mailslot with the specified name and returns a handle that a mailslot server can use to perform operations on the mailslot.;LPCWSTR lpName, DWORD nMaxMessageSize, DWORD lReadTimeout, LPSECURITY_ATTRIBUTES lpSecurityAttributes
CreateMD5SSOHash;The CreateMD5SSOHash function obtains the default Microsoft Passport password for a specified account or realm, creates an MD5 hash from it using a specified wide-character challenge string, and returns the result as a string of hexadecimal digit bytes.;PWSTR pszChallengeInfo, PWSTR pwszRealm, PWSTR pwszTarget, PBYTE pbHexHash
CreateMDIWindowA;Creates a multiple-document interface (MDI) child window.;LPCSTR lpClassName, LPCSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HINSTANCE hInstance, LPARAM lParam
CreateMDIWindowW;Creates a multiple-document interface (MDI) child window.;LPCWSTR lpClassName, LPCWSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HINSTANCE hInstance, LPARAM lParam
CreateMemoryResourceNotification;Creates a memory resource notification object.;MEMORY_RESOURCE_NOTIFICATION_TYPE NotificationType
CreateMenu;Creates a menu. The menu is initially empty, but it can be filled with menu items by using the InsertMenuItem, AppendMenu, and InsertMenu functions.;
CreateMetaFileA;The CreateMetaFile function creates a device context for a Windows-format metafile.;LPCSTR pszFile
CreateMetaFileW;The CreateMetaFile function creates a device context for a Windows-format metafile.;LPCWSTR pszFile
CreateMutexA;Creates or opens a named or unnamed mutex object.;LPSECURITY_ATTRIBUTES lpMutexAttributes, BOOL bInitialOwner, LPCSTR lpName
CreateMutexExA;Creates or opens a named or unnamed mutex object and returns a handle to the object.;LPSECURITY_ATTRIBUTES lpMutexAttributes, LPCSTR lpName, DWORD dwFlags, DWORD dwDesiredAccess
CreateMutexExW;Creates or opens a named or unnamed mutex object and returns a handle to the object.;LPSECURITY_ATTRIBUTES lpMutexAttributes, LPCWSTR lpName, DWORD dwFlags, DWORD dwDesiredAccess
CreateMutexW;Creates or opens a named or unnamed mutex object.;LPSECURITY_ATTRIBUTES lpMutexAttributes, BOOL bInitialOwner, LPCWSTR lpName
CreateNamedPipeA;Creates an instance of a named pipe and returns a handle for subsequent pipe operations.;LPCSTR lpName, DWORD dwOpenMode, DWORD dwPipeMode, DWORD nMaxInstances, DWORD nOutBufferSize, DWORD nInBufferSize, DWORD nDefaultTimeOut, LPSECURITY_ATTRIBUTES lpSecurityAttributes
CreateNtmsMediaA;The CreateNtmsMedia function creates a PMID and side (or sides) for a new piece of offline media. The media is placed in the media pool specified for lpPhysicalMedia.;HANDLE hSession, LPNTMS_OBJECTINFORMATIONA lpMedia, LPNTMS_OBJECTINFORMATIONA lpList, DWORD dwOptions
CreateNtmsMediaPoolA;The CreateNtmsMediaPool function creates a new application media pool.;HANDLE hSession, LPCSTR lpPoolName, LPNTMS_GUID lpMediaType, DWORD dwAction, LPSECURITY_ATTRIBUTES lpSecurityAttributes, LPNTMS_GUID lpPoolId
CreateNtmsMediaPool;The CreateNtmsMediaPool function creates a new application media pool.;HANDLE hSession, LPCTSTR lpPoolName, LPNTMS_GUID lpMediaType, DWORD dwAction, LPSECURITY_ATTRIBUTES lpSecurityAttributes, LPNTMS_GUID lpPoolId
CreateNtmsMediaPoolW;The CreateNtmsMediaPool function creates a new application media pool.;HANDLE hSession, LPCWSTR lpPoolName, LPNTMS_GUID lpMediaType, DWORD dwAction, LPSECURITY_ATTRIBUTES lpSecurityAttributes, LPNTMS_GUID lpPoolId
CreateNtmsMediaW;The CreateNtmsMedia function creates a PMID and side (or sides) for a new piece of offline media. The media is placed in the media pool specified for lpPhysicalMedia.;HANDLE hSession, LPNTMS_OBJECTINFORMATIONW lpMedia, LPNTMS_OBJECTINFORMATIONW lpList, DWORD dwOptions
CreateObject;Can be used to create an object in the user context on a webpage.;BSTR strProgID, IUnknown **ppIUnknown
CreateObject;Creates an IX509EnrollmentHelper object on a webpage.;BSTR strProgID, IX509EnrollmentHelper **ppIHelper
CreateOperation;Creates an IAzOperation object with the specified name.;BSTR bstrOperationName, VARIANT varReserved, IAzOperation **ppOperation
CreatePalette;The CreatePalette function creates a logical palette.;const LOGPALETTE *plpal
CreatePatternBrush;The CreatePatternBrush function creates a logical brush with the specified bitmap pattern. The bitmap can be a DIB section bitmap, which is created by the CreateDIBSection function, or it can be a device-dependent bitmap.;HBITMAP hbm
CreatePenIndirect;The CreatePenIndirect function creates a logical cosmetic pen that has the style, width, and color specified in a structure.;const LOGPEN *plpen
CreatePen;The CreatePen function creates a logical pen that has the specified style, width, and color. The pen can subsequently be selected into a device context and used to draw lines and curves.;int iStyle, int cWidth, COLORREF color
CreatePersistentTcpPortReservation;Creates a persistent TCP port reservation for a consecutive block of TCP ports on the local computer.;USHORT StartPort, USHORT NumberOfPorts, PULONG64 Token
CreatePersistentUdpPortReservation;Creates a persistent UDP port reservation for a consecutive block of UDP ports on the local computer.;USHORT StartPort, USHORT NumberOfPorts, PULONG64 Token
CreatePFX;Creates a Personal Information Exchange (PFX) message.;BSTR strPassword, PFXExportOptions ExportOptions, EncodingType Encoding, BSTR *pValue
createPFX;Saves the accepted certificate chain and private key in a Personal Information Exchange (PFX) format string. The PFX format is also known as PKCS;BSTR strPassword, BSTR *pstrPFX
createPFXWStr;Saves the accepted certificate chain and private key in a Personal Information Exchange (PFX) format string. The PFX format is also known as PKCS;LPCWSTR pwszPassword, PCRYPT_DATA_BLOB pblobPFX
CreatePipe;Creates an anonymous pipe, and returns handles to the read and write ends of the pipe.;PHANDLE hReadPipe, PHANDLE hWritePipe, LPSECURITY_ATTRIBUTES lpPipeAttributes, DWORD nSize
createPKCS10;Creates a base64-encoded PKCS;BSTR DNName, BSTR Usage, BSTR *pPKCS10
createPKCS10WStr;Creates a base64-encoded PKCS;LPCWSTR DNName, LPCWSTR Usage, PCRYPT_DATA_BLOB pPkcs10Blob
CreatePKCS7RequestFromRequest;The CreatePKCS7RequestFromRequest method creates a PKCS;PCRYPT_DATA_BLOB pRequest, PCCERT_CONTEXT pSigningCertContext, PCRYPT_DATA_BLOB pPkcs7Blob
CreatePolygonRgn;The CreatePolygonRgn function creates a polygonal region.;const POINT *pptl, int cPoint, int iMode
CreatePolyPolygonRgn;The CreatePolyPolygonRgn function creates a region consisting of a series of polygons. The polygons can overlap.;const POINT *pptl, const INT *pc, int cPoly, int iMode
CreatePopupMenu;Creates a drop-down menu, submenu, or shortcut menu.;
CreatePrivateNamespaceA;Creates a private namespace.;LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes, LPVOID lpBoundaryDescriptor, LPCSTR lpAliasPrefix
CreatePrivateObjectSecurity;Allocates and initializes a self-relative security descriptor for a new private object. A protected server calls this function when it creates a new private object.;PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CreatorDescriptor, PSECURITY_DESCRIPTOR *NewDescriptor, BOOL IsDirectoryObject, HANDLE Token, PGENERIC_MAPPING GenericMapping
CreatePrivateObjectSecurityEx;Allocates and initializes a self-relative security descriptor for a new private object created by the resource manager calling this function.;PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CreatorDescriptor, PSECURITY_DESCRIPTOR *NewDescriptor, GUID *ObjectType, BOOL IsContainerObject, ULONG AutoInheritFlags, HANDLE Token, PGENERIC_MAPPING GenericMapping
CreatePrivateObjectSecurityWithMultipleInheritance;Allocates and initializes a self-relative security descriptor for a new private object created by the resource manager calling this function.;PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR CreatorDescriptor, PSECURITY_DESCRIPTOR *NewDescriptor, GUID **ObjectTypes, ULONG GuidCount, BOOL IsContainerObject, ULONG AutoInheritFlags, HANDLE Token, PGENERIC_MAPPING GenericMapping
CreateProcessA;Creates a new process and its primary thread. The new process runs in the security context of the calling process.;LPCSTR lpApplicationName, LPSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCSTR lpCurrentDirectory, LPSTARTUPINFOA lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation
CreateProcessAsUserA;Creates a new process and its primary thread. The new process runs in the security context of the user represented by the specified token.;HANDLE hToken, LPCSTR lpApplicationName, LPSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCSTR lpCurrentDirectory, LPSTARTUPINFOA lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation
CreateProcessAsUserW;Creates a new process and its primary thread. The new process runs in the security context of the user represented by the specified token.;HANDLE hToken, LPCWSTR lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation
CreateProcessW;Creates a new process and its primary thread. The new process runs in the security context of the calling process.;LPCWSTR lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation
CreateProcessWithLogonW;Creates a new process and its primary thread. Then the new process runs the specified executable file in the security context of the specified credentials (user, domain, and password). It can optionally load the user profile for a specified user.;LPCWSTR lpUsername, LPCWSTR lpDomain, LPCWSTR lpPassword, DWORD dwLogonFlags, LPCWSTR lpApplicationName, LPWSTR lpCommandLine, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation
CreateProcessWithTokenW;Creates a new process and its primary thread. The new process runs in the security context of the specified token. It can optionally load the user profile for the specified user.;HANDLE hToken, DWORD dwLogonFlags, LPCWSTR lpApplicationName, LPWSTR lpCommandLine, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation
CreateProperty;Creates a new property and adds it to a property set.;const BSTR bstrPropName, const VARIANT *pVarPropValue, IOCSPProperty **ppVal
CreateProxyArpEntry;The CreateProxyArpEnry function creates a Proxy Address Resolution Protocol (PARP) entry on the local computer for the specified IPv4 address.;DWORD dwAddress, DWORD dwMask, DWORD dwIfIndex
CreateRecognizer;Creates a recognizer.;CLSID *pCLSID, HRECOGNIZER *phrec
CreateRectRgnIndirect;The CreateRectRgnIndirect function creates a rectangular region.;const RECT *lprect
CreateRectRgn;The CreateRectRgn function creates a rectangular region.;int x1, int y1, int x2, int y2
CreateRemoteThread;Creates a thread that runs in the virtual address space of another process.;HANDLE hProcess, LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId
CreateRemoteThreadEx;Creates a thread that runs in the virtual address space of another process and optionally specifies extended attributes such as processor group affinity.;HANDLE hProcess, LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList, LPDWORD lpThreadId
createRequest;Creates a PKCS;LONG Flags, BSTR strDNName, BSTR Usage, BSTR *pstrRequest
CreateRequestMessage;Create a PKCS10 request message with a challenge password. The request message is in an enveloped PKCS7 encrypted with the SCEP server encryption certificate and signed by the server signing certificate.;EncodingType Encoding, BSTR *pValue
CreateRequest;Retrieves an encoded certificate request.;EncodingType Encoding, BSTR *pValue
createRequestWStr;Creates a PKCS;LONG Flags, LPCWSTR pwszDNName, LPCWSTR pwszUsage, PCRYPT_DATA_BLOB pblobRequest
CreateRestrictedToken;Creates a new access token that is a restricted version of an existing access token. The restricted token can have disabled security identifiers (SIDs), deleted privileges, and a list of restricting SIDs.;HANDLE ExistingTokenHandle, DWORD Flags, DWORD DisableSidCount, PSID_AND_ATTRIBUTES SidsToDisable, DWORD DeletePrivilegeCount, PLUID_AND_ATTRIBUTES PrivilegesToDelete, DWORD RestrictedSidCount, PSID_AND_ATTRIBUTES SidsToRestrict, PHANDLE NewTokenHandle
CreateRetrieveCertificateMessage;Retrieve a previously issued certificate.;X509CertificateEnrollmentContext Context, BSTR strIssuer, EncodingType IssuerEncoding, BSTR strSerialNumber, EncodingType SerialNumberEncoding, EncodingType Encoding, BSTR *pValue
CreateRetrievePendingMessage;Create a message for certificate polling (manual enrollment).;EncodingType Encoding, BSTR *pValue
CreateRoleAssignment;Creates a new IAzRoleAssignment object with the specified name.;BSTR bstrRoleAssignmentName, IAzRoleAssignment **ppRoleAssignment
CreateRoleAssignment;Creates a new IAzRoleAssignment object with the specified name in this scope.;BSTR bstrRoleAssignmentName, IAzRoleAssignment **ppRoleAssignment
CreateRole;Creates an IAzRole object with the specified name.;BSTR bstrRoleName, VARIANT varReserved, IAzRole **ppRole
CreateRoleDefinition;Creates a new IAzRoleDefinition object with the specified name.;BSTR bstrRoleDefinitionName, IAzRoleDefinition **ppRoleDefinitions
CreateRoleDefinition;Creates a new IAzRoleDefinition object with the specified name in this scope.;BSTR bstrRoleDefinitionName, IAzRoleDefinition **ppRoleDefinitions
CreateRoundRectRgn;The CreateRoundRectRgn function creates a rectangular region with rounded corners.;int x1, int y1, int x2, int y2, int w, int h
CreateScalableFontResourceA;The CreateScalableFontResource function creates a font resource file for a scalable font.;DWORD fdwHidden, LPCSTR lpszFont, LPCSTR lpszFile, LPCSTR lpszPath
CreateScalableFontResourceW;The CreateScalableFontResource function creates a font resource file for a scalable font.;DWORD fdwHidden, LPCWSTR lpszFont, LPCWSTR lpszFile, LPCWSTR lpszPath
CreateScope2;Creates a new IAzScope2 object with the specified name.;BSTR bstrScopeName, IAzScope2 **ppScope2
CreateScope;Creates an IAzScope object with the specified name.;BSTR bstrScopeName, VARIANT varReserved, IAzScope **ppScope
CreateSecurityPage;Creates a basic security property page that enables the user to view and edit the access rights allowed or denied by the access control entries (ACEs) in an object's discretionary access control list (DACL).;LPSECURITYINFO psi
CreateSemaphoreA;Creates or opens a named or unnamed semaphore object.;LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCSTR lpName
CreateSemaphoreExA;Creates or opens a named or unnamed semaphore object and returns a handle to the object.;LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCSTR lpName, DWORD dwFlags, DWORD dwDesiredAccess
CreateSemaphoreExW;Creates or opens a named or unnamed semaphore object and returns a handle to the object.;LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCWSTR lpName, DWORD dwFlags, DWORD dwDesiredAccess
CreateSemaphoreW;Creates or opens a named or unnamed semaphore object.;LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCWSTR lpName
CreateServiceA;Creates a service object and adds it to the specified service control manager database.;SC_HANDLE hSCManager, LPCSTR lpServiceName, LPCSTR lpDisplayName, DWORD dwDesiredAccess, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCSTR lpBinaryPathName, LPCSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCSTR lpDependencies, LPCSTR lpServiceStartName, LPCSTR lpPassword
CreateServiceW;Creates a service object and adds it to the specified service control manager database.;SC_HANDLE hSCManager, LPCWSTR lpServiceName, LPCWSTR lpDisplayName, DWORD dwDesiredAccess, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCWSTR lpBinaryPathName, LPCWSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCWSTR lpDependencies, LPCWSTR lpServiceStartName, LPCWSTR lpPassword
CreateSolidBrush;The CreateSolidBrush function creates a logical brush that has the specified solid color.;COLORREF color
CreateSortedAddressPairs;Takes a supplied list of potential IP destination addresses, pairs the destination addresses with the host machine's local IP addresses, and sorts the pairs according to which address pair is best suited for communication between the two peers.;const PSOCKADDR_IN6 SourceAddressList, ULONG SourceAddressCount, const PSOCKADDR_IN6 DestinationAddressList, ULONG DestinationAddressCount, ULONG AddressSortOptions, PSOCKADDR_IN6_PAIR *SortedAddressPairList, ULONG *SortedAddressPairCount
CreateStreamOnHGlobal;Creates a stream object that uses an HGLOBAL memory handle to store the stream contents.;HGLOBAL hGlobal, BOOL fDeleteOnRelease, LPSTREAM *ppstm
CreateSymbolicLinkA;Creates a symbolic link.;LPCSTR lpSymlinkFileName, LPCSTR lpTargetFileName, DWORD dwFlags
CreateSymbolicLinkTransactedA;Creates a symbolic link as a transacted operation.;LPCSTR lpSymlinkFileName, LPCSTR lpTargetFileName, DWORD dwFlags, HANDLE hTransaction
CreateSymbolicLinkTransactedW;Creates a symbolic link as a transacted operation.;LPCWSTR lpSymlinkFileName, LPCWSTR lpTargetFileName, DWORD dwFlags, HANDLE hTransaction
CreateSymbolicLinkW;Creates a symbolic link.;LPCWSTR lpSymlinkFileName, LPCWSTR lpTargetFileName, DWORD dwFlags
CreateSyntheticPointerDevice;Configures the pointer injection device for the calling application, and initializes the maximum number of simultaneous pointers that the app can inject.;POINTER_INPUT_TYPE pointerType, ULONG maxCount, POINTER_FEEDBACK_MODE mode
CreateTapePartition;Reformats a tape.;HANDLE hDevice, DWORD dwPartitionMethod, DWORD dwCount, DWORD dwSize
CreateTask;Creates an IAzTask object with the specified name.;BSTR bstrTaskName, VARIANT varReserved, IAzTask **ppTask
CreateThread;Creates a thread to execute within the virtual address space of the calling process.;LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, __drv_aliasesMem LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId
CreateThreadpool;Allocates a new pool of threads to execute callbacks.;PVOID reserved
CreateThreadpoolCleanupGroup;Creates a cleanup group that applications can use to track one or more thread pool callbacks.;
CreateThreadpoolIo;Creates a new I/O completion object.;HANDLE fl, PTP_WIN32_IO_CALLBACK pfnio, PVOID pv, PTP_CALLBACK_ENVIRON pcbe
CreateThreadpoolTimer;Creates a new timer object.;PTP_TIMER_CALLBACK pfnti, PVOID pv, PTP_CALLBACK_ENVIRON pcbe
CreateThreadpoolWait;Creates a new wait object.;PTP_WAIT_CALLBACK pfnwa, PVOID pv, PTP_CALLBACK_ENVIRON pcbe
CreateThreadpoolWork;Creates a new work object.;PTP_WORK_CALLBACK pfnwk, PVOID pv, PTP_CALLBACK_ENVIRON pcbe
CreateUmsCompletionList;Creates a user-mode scheduling (UMS) completion list.;PUMS_COMPLETION_LIST *UmsCompletionList
CreateUmsThreadContext;Creates a user-mode scheduling (UMS) thread context to represent a UMS worker thread.;PUMS_CONTEXT *lpUmsThread
CreateUnicastIpAddressEntry;Adds a new unicast IP address entry on the local computer.;const MIB_UNICASTIPADDRESS_ROW *Row
CreateUrlCacheContainerA;Creates a cache container in the specified cache path to hold cache entries based on the specified name, cache prefix, and container type.;LPCSTR Name, LPCSTR lpCachePrefix, LPCSTR lpszCachePath, DWORD KBCacheLimit, DWORD dwContainerType, DWORD dwOptions, LPVOID pvBuffer, LPDWORD cbBuffer
CreateUrlCacheContainerW;Creates a cache container in the specified cache path to hold cache entries based on the specified name, cache prefix, and container type.;LPCWSTR Name, LPCWSTR lpCachePrefix, LPCWSTR lpszCachePath, DWORD KBCacheLimit, DWORD dwContainerType, DWORD dwOptions, LPVOID pvBuffer, LPDWORD cbBuffer
CreateUrlCacheEntryA;Creates a local file name for saving the cache entry based on the specified URL and the file name extension.;LPCSTR lpszUrlName, DWORD dwExpectedFileSize, LPCSTR lpszFileExtension, LPSTR lpszFileName, DWORD dwReserved
CreateUrlCacheEntryW;Creates a local file name for saving the cache entry based on the specified URL and the file name extension.;LPCWSTR lpszUrlName, DWORD dwExpectedFileSize, LPCWSTR lpszFileExtension, LPWSTR lpszFileName, DWORD dwReserved
CreateUrlCacheGroup;Generates cache group identifications.;DWORD dwFlags, LPVOID lpReserved
CreateVirtualSmartCard;Creates a TPM virtual smart card with the given parameters.;LPCWSTR pszFriendlyName, BYTE bAdminAlgId, const BYTE *pbAdminKey, DWORD cbAdminKey, const BYTE *pbAdminKcv, DWORD cbAdminKcv, const BYTE *pbPuk, DWORD cbPuk, const BYTE *pbPin, DWORD cbPin, BOOL fGenerate, ITpmVirtualSmartCardManagerStatusCallback *pStatusCallback, LPWSTR *ppszInstanceId, BOOL *pfNeedReboot
CreateWaitableTimerExW;Creates or opens a waitable timer object and returns a handle to the object.;LPSECURITY_ATTRIBUTES lpTimerAttributes, LPCWSTR lpTimerName, DWORD dwFlags, DWORD dwDesiredAccess
CreateWaitableTimerW;Creates or opens a waitable timer object.;LPSECURITY_ATTRIBUTES lpTimerAttributes, BOOL bManualReset, LPCWSTR lpTimerName
CreateWellKnownSid;Creates a SID for predefined aliases.;WELL_KNOWN_SID_TYPE WellKnownSidType, PSID DomainSid, PSID pSid, DWORD *cbSid
CreateWindowA;Creates an overlapped, pop-up, or child window.;lpClassName, lpWindowName, dwStyle, x, y, nWidth, nHeight, hWndParent, hMenu, hInstance, lpParam
CreateWindowExA;Creates an overlapped, pop-up, or child window with an extended window style; otherwise, this function is identical to the CreateWindow function.;DWORD dwExStyle, LPCSTR lpClassName, LPCSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, LPVOID lpParam
CreateWindowExW;Creates an overlapped, pop-up, or child window with an extended window style; otherwise, this function is identical to the CreateWindow function.;DWORD dwExStyle, LPCWSTR lpClassName, LPCWSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, LPVOID lpParam
CreateWindowStationA;Creates a window station object, associates it with the calling process, and assigns it to the current session.;LPCSTR lpwinsta, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa
CreateWindowStationW;Creates a window station object, associates it with the calling process, and assigns it to the current session.;LPCWSTR lpwinsta, DWORD dwFlags, ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa
CreateWindowW;Creates an overlapped, pop-up, or child window.;lpClassName, lpWindowName, dwStyle, x, y, nWidth, nHeight, hWndParent, hMenu, hInstance, lpParam
CredDeleteA;Deletes a credential from the user's credential set.;LPCSTR TargetName, DWORD Type, DWORD Flags
CredDeleteW;Deletes a credential from the user's credential set.;LPCWSTR TargetName, DWORD Type, DWORD Flags
CredEnumerateA;Enumerates the credentials from the user's credential set.;LPCSTR Filter, DWORD Flags, DWORD *Count, PCREDENTIALA **Credential
CredEnumerateW;Enumerates the credentials from the user's credential set.;LPCWSTR Filter, DWORD Flags, DWORD *Count, PCREDENTIALW **Credential
CredFindBestCredentialA;Searches the Credentials Management (CredMan) database for the set of generic credentials that are associated with the current logon session and that best match the specified target resource.;LPCSTR TargetName, DWORD Type, DWORD Flags, PCREDENTIALA *Credential
CredFindBestCredentialW;Searches the Credentials Management (CredMan) database for the set of generic credentials that are associated with the current logon session and that best match the specified target resource.;LPCWSTR TargetName, DWORD Type, DWORD Flags, PCREDENTIALW *Credential
CredFreeCredentialsFn;Frees memory used to store credentials used by a security package.;ULONG Count, PENCRYPTED_CREDENTIALW *Credentials ) {...}
CredFree;The CredFree function frees a buffer returned by any of the credentials management functions.;PVOID Buffer
CredGetSessionTypes;The CredGetSessionTypes function returns the maximum persistence supported by the current logon session. A separate maximum persistence is returned for each credential type.;DWORD MaximumPersistCount, LPDWORD MaximumPersist
CredGetTargetInfoA;The CredGetTargetInfo function retrieves all known target name information for the named target computer.;LPCSTR TargetName, DWORD Flags, PCREDENTIAL_TARGET_INFORMATIONA *TargetInfo
CredGetTargetInfoW;The CredGetTargetInfo function retrieves all known target name information for the named target computer.;LPCWSTR TargetName, DWORD Flags, PCREDENTIAL_TARGET_INFORMATIONW *TargetInfo
CredIsMarshaledCredentialA;Determines whether a specified user name string is a marshaled credential previously marshaled by CredMarshalCredential.;LPCSTR MarshaledCredential
CredIsMarshaledCredentialW;Determines whether a specified user name string is a marshaled credential previously marshaled by CredMarshalCredential.;LPCWSTR MarshaledCredential
CredIsProtectedA;Specifies whether the specified credentials are encrypted by a previous call to the CredProtect function.;LPSTR pszProtectedCredentials, CRED_PROTECTION_TYPE *pProtectionType
CredIsProtectedW;Specifies whether the specified credentials are encrypted by a previous call to the CredProtect function.;LPWSTR pszProtectedCredentials, CRED_PROTECTION_TYPE *pProtectionType
CrediUnmarshalandDecodeStringFn;Transforms a marshaled string back into its original form, and decrypts the unmarshaled string.;LPWSTR MarshaledString, LPBYTE *Blob, ULONG *BlobSize, BOOLEAN *IsFailureFatal ) {...}
CredMarshalCredentialA;The CredMarshalCredential function transforms a credential into a text string.;CRED_MARSHAL_TYPE CredType, PVOID Credential, LPSTR *MarshaledCredential
CredMarshalCredentialW;The CredMarshalCredential function transforms a credential into a text string.;CRED_MARSHAL_TYPE CredType, PVOID Credential, LPWSTR *MarshaledCredential
CredMarshalTargetInfo;Serializes the specified target into an array of byte values.;PCREDENTIAL_TARGET_INFORMATIONW InTargetInfo, PUSHORT *Buffer, PULONG BufferSize
CredPackAuthenticationBufferA;Converts a string user name and password into an authentication buffer.;DWORD dwFlags, LPSTR pszUserName, LPSTR pszPassword, PBYTE pPackedCredentials, DWORD *pcbPackedCredentials
CredPackAuthenticationBufferW;Converts a string user name and password into an authentication buffer.;DWORD dwFlags, LPWSTR pszUserName, LPWSTR pszPassword, PBYTE pPackedCredentials, DWORD *pcbPackedCredentials
CredProtectA;Encrypts the specified credentials so that only the current security context can decrypt them.;BOOL fAsSelf, LPSTR pszCredentials, DWORD cchCredentials, LPSTR pszProtectedCredentials, DWORD *pcchMaxChars, CRED_PROTECTION_TYPE *ProtectionType
CredProtectW;Encrypts the specified credentials so that only the current security context can decrypt them.;BOOL fAsSelf, LPWSTR pszCredentials, DWORD cchCredentials, LPWSTR pszProtectedCredentials, DWORD *pcchMaxChars, CRED_PROTECTION_TYPE *ProtectionType
CredReadA;Reads a credential from the user's credential set.;LPCSTR TargetName, DWORD Type, DWORD Flags, PCREDENTIALA *Credential
CredReadDomainCredentialsA;Reads the domain credentials from the user's credential set.;PCREDENTIAL_TARGET_INFORMATIONA TargetInfo, DWORD Flags, DWORD *Count, PCREDENTIALA **Credential
CredReadDomainCredentialsFn;Reads a domain credential from the Credential Manager.;PLUID LogonId, ULONG CredFlags, PCREDENTIAL_TARGET_INFORMATIONW TargetInfo, ULONG Flags, PULONG Count, PENCRYPTED_CREDENTIALW **Credential ) {...}
CredReadDomainCredentialsW;Reads the domain credentials from the user's credential set.;PCREDENTIAL_TARGET_INFORMATIONW TargetInfo, DWORD Flags, DWORD *Count, PCREDENTIALW **Credential
CredReadFn;Reads a credential from the Credential Manager.;PLUID LogonId, ULONG CredFlags, LPWSTR TargetName, ULONG Type, ULONG Flags, PENCRYPTED_CREDENTIALW *Credential ) {...}
CredReadW;Reads a credential from the user's credential set.;LPCWSTR TargetName, DWORD Type, DWORD Flags, PCREDENTIALW *Credential
CredRenameA;CredRename is no longer supported.;LPCSTR OldTargetName, LPCSTR NewTargetName, DWORD Type, DWORD Flags
CredRenameW;CredRename is no longer supported.;LPCWSTR OldTargetName, LPCWSTR NewTargetName, DWORD Type, DWORD Flags
CredUICmdLinePromptForCredentialsA;Prompts for and accepts credential information from a user working in a command-line (console) application. The name and password typed by the user are passed back to the calling application for verification.;PCSTR pszTargetName, PCtxtHandle pContext, DWORD dwAuthError, PSTR UserName, ULONG ulUserBufferSize, PSTR pszPassword, ULONG ulPasswordBufferSize, PBOOL pfSave, DWORD dwFlags
CredUICmdLinePromptForCredentialsW;Prompts for and accepts credential information from a user working in a command-line (console) application. The name and password typed by the user are passed back to the calling application for verification.;PCWSTR pszTargetName, PCtxtHandle pContext, DWORD dwAuthError, PWSTR UserName, ULONG ulUserBufferSize, PWSTR pszPassword, ULONG ulPasswordBufferSize, PBOOL pfSave, DWORD dwFlags
CredUIConfirmCredentialsA;Is called after CredUIPromptForCredentials or CredUICmdLinePromptForCredentials, to confirm the validity of the credential harvested.;PCSTR pszTargetName, BOOL bConfirm
CredUIConfirmCredentialsW;Is called after CredUIPromptForCredentials or CredUICmdLinePromptForCredentials, to confirm the validity of the credential harvested.;PCWSTR pszTargetName, BOOL bConfirm
CredUIParseUserNameA;The CredUIParseUserName function extracts the domain and user account name from a fully qualified user name.;PCSTR userName, CHAR *user, ULONG userBufferSize, CHAR *domain, ULONG domainBufferSize
CredUIParseUserNameW;The CredUIParseUserName function extracts the domain and user account name from a fully qualified user name.;PCWSTR UserName, WCHAR *user, ULONG userBufferSize, WCHAR *domain, ULONG domainBufferSize
CredUIPromptForCredentialsA;Creates and displays a configurable dialog box that accepts credentials information from a user.;PCREDUI_INFOA pUiInfo, PCSTR pszTargetName, PCtxtHandle pContext, DWORD dwAuthError, PSTR pszUserName, ULONG ulUserNameBufferSize, PSTR pszPassword, ULONG ulPasswordBufferSize, BOOL *save, DWORD dwFlags
CredUIPromptForWindowsCredentialsA;Creates and displays a configurable dialog box that allows users to supply credential information by using any credential provider installed on the local computer.;PCREDUI_INFOA pUiInfo, DWORD dwAuthError, ULONG *pulAuthPackage, LPCVOID pvInAuthBuffer, ULONG ulInAuthBufferSize, LPVOID *ppvOutAuthBuffer, ULONG *pulOutAuthBufferSize, BOOL *pfSave, DWORD dwFlags
CredUIPromptForWindowsCredentialsW;Creates and displays a configurable dialog box that allows users to supply credential information by using any credential provider installed on the local computer.;PCREDUI_INFOW pUiInfo, DWORD dwAuthError, ULONG *pulAuthPackage, LPCVOID pvInAuthBuffer, ULONG ulInAuthBufferSize, LPVOID *ppvOutAuthBuffer, ULONG *pulOutAuthBufferSize, BOOL *pfSave, DWORD dwFlags
CredUIReadSSOCredW;The CredUIReadSSOCredW function retrieves the user name for a single logon credential.;PCWSTR pszRealm, PWSTR *ppszUsername
CredUIStoreSSOCredW;The CredUIStoreSSOCredW function stores a single logon credential.;PCWSTR pszRealm, PCWSTR pszUsername, PCWSTR pszPassword, BOOL bPersist
CredUnmarshalCredentialA;The CredUnmarshalCredential function transforms a marshaled credential back into its original form.;LPCSTR MarshaledCredential, PCRED_MARSHAL_TYPE CredType, PVOID *Credential
CredUnmarshalCredentialW;The CredUnmarshalCredential function transforms a marshaled credential back into its original form.;LPCWSTR MarshaledCredential, PCRED_MARSHAL_TYPE CredType, PVOID *Credential
CredUnPackAuthenticationBufferA;Converts an authentication buffer returned by a call to the CredUIPromptForWindowsCredentials function into a string user name and password.;DWORD dwFlags, PVOID pAuthBuffer, DWORD cbAuthBuffer, LPSTR pszUserName, DWORD *pcchlMaxUserName, LPSTR pszDomainName, DWORD *pcchMaxDomainName, LPSTR pszPassword, DWORD *pcchMaxPassword
CredUnPackAuthenticationBufferW;Converts an authentication buffer returned by a call to the CredUIPromptForWindowsCredentials function into a string user name and password.;DWORD dwFlags, PVOID pAuthBuffer, DWORD cbAuthBuffer, LPWSTR pszUserName, DWORD *pcchMaxUserName, LPWSTR pszDomainName, DWORD *pcchMaxDomainName, LPWSTR pszPassword, DWORD *pcchMaxPassword
CredUnprotectA;Decrypts credentials that were previously encrypted by using the CredProtect function.;BOOL fAsSelf, LPSTR pszProtectedCredentials, DWORD cchProtectedCredentials, LPSTR pszCredentials, DWORD *pcchMaxChars
CredUnprotectW;Decrypts credentials that were previously encrypted by using the CredProtect function.;BOOL fAsSelf, LPWSTR pszProtectedCredentials, DWORD cchProtectedCredentials, LPWSTR pszCredentials, DWORD *pcchMaxChars
CredWriteA;Creates a new credential or modifies an existing credential in the user's credential set.;PCREDENTIALA Credential, DWORD Flags
CredWriteDomainCredentialsA;Writes domain credentials to the user's credential set.;PCREDENTIAL_TARGET_INFORMATIONA TargetInfo, PCREDENTIALA Credential, DWORD Flags
CredWriteDomainCredentialsW;Writes domain credentials to the user's credential set.;PCREDENTIAL_TARGET_INFORMATIONW TargetInfo, PCREDENTIALW Credential, DWORD Flags
CredWriteFn;Writes the specified credential to the Credential Manager.;PLUID LogonId, ULONG CredFlags, PENCRYPTED_CREDENTIALW Credential, ULONG Flags ) {...}
CredWriteW;Creates a new credential or modifies an existing credential in the user's credential set.;PCREDENTIALW Credential, DWORD Flags
CryptAcquireCertificatePrivateKey;Obtains the private key for a certificate.;PCCERT_CONTEXT pCert, DWORD dwFlags, void *pvParameters, HCRYPTPROV_OR_NCRYPT_KEY_HANDLE *phCryptProvOrNCryptKey, DWORD *pdwKeySpec, BOOL *pfCallerFreeProvOrNCryptKey
CryptAcquireContextA;Used to acquire a handle to a particular key container within a particular cryptographic service provider (CSP). This returned handle is used in calls to CryptoAPI functions that use the selected CSP.;HCRYPTPROV *phProv, LPCSTR szContainer, LPCSTR szProvider, DWORD dwProvType, DWORD dwFlags
CryptAcquireContextW;Used to acquire a handle to a particular key container within a particular cryptographic service provider (CSP). This returned handle is used in calls to CryptoAPI functions that use the selected CSP.;HCRYPTPROV *phProv, LPCWSTR szContainer, LPCWSTR szProvider, DWORD dwProvType, DWORD dwFlags
CryptBinaryToStringA;Converts an array of bytes into a formatted string.;const BYTE *pbBinary, DWORD cbBinary, DWORD dwFlags, LPSTR pszString, DWORD *pcchString
CryptBinaryToStringW;Converts an array of bytes into a formatted string.;const BYTE *pbBinary, DWORD cbBinary, DWORD dwFlags, LPWSTR pszString, DWORD *pcchString
CryptCATAdminAcquireContext2;Acquires a handle to a catalog administrator context for a given hash algorithm and hash policy.;HCATADMIN *phCatAdmin, const GUID *pgSubsystem, PCWSTR pwszHashAlgorithm, PCCERT_STRONG_SIGN_PARA pStrongHashPolicy, DWORD dwFlags
CryptCATAdminAcquireContext;Acquires a handle to a catalog administrator context.;HCATADMIN *phCatAdmin, const GUID *pgSubsystem, DWORD dwFlags
CryptCATAdminAddCatalog;Adds a catalog to the catalog database.;HCATADMIN hCatAdmin, PWSTR pwszCatalogFile, PWSTR pwszSelectBaseName, DWORD dwFlags
CryptCATAdminCalcHashFromFileHandle2;Calculates the hash for a file by using the specified algorithm.;HCATADMIN hCatAdmin, HANDLE hFile, DWORD *pcbHash, BYTE *pbHash, DWORD dwFlags
CryptCATAdminCalcHashFromFileHandle;Calculates the hash for a file.;HANDLE hFile, DWORD *pcbHash, BYTE *pbHash, DWORD dwFlags
CryptCATAdminEnumCatalogFromHash;Enumerates the catalogs that contain a specified hash.;HCATADMIN hCatAdmin, BYTE *pbHash, DWORD cbHash, DWORD dwFlags, HCATINFO *phPrevCatInfo
CryptCATAdminReleaseCatalogContext;Releases a handle to a catalog context previously returned by the CryptCATAdminAddCatalog function.;HCATADMIN hCatAdmin, HCATINFO hCatInfo, DWORD dwFlags
CryptCATAdminReleaseContext;Releases the handle previously assigned by the CryptCATAdminAcquireContext function.;HCATADMIN hCatAdmin, DWORD dwFlags
CryptCATAdminRemoveCatalog;Deletes a catalog file and removes that catalog's entry from the Windows catalog database.;HCATADMIN hCatAdmin, LPCWSTR pwszCatalogFile, DWORD dwFlags
CryptCATAdminResolveCatalogPath;Retrieves the fully qualified path of the specified catalog.;HCATADMIN hCatAdmin, WCHAR *pwszCatalogFile, CATALOG_INFO *psCatInfo, DWORD dwFlags
CryptCATCatalogInfoFromContext;Retrieves catalog information from a specified catalog context.;HCATINFO hCatInfo, CATALOG_INFO *psCatInfo, DWORD dwFlags
CryptCATCDFClose;Closes a catalog definition file (CDF) and frees the memory for the corresponding CRYPTCATCDF structure.;CRYPTCATCDF *pCDF
CryptCATCDFEnumCatAttributes;Enumerates catalog-level attributes within the CatalogHeader section of a catalog definition file (CDF).;CRYPTCATCDF *pCDF, CRYPTCATATTRIBUTE *pPrevAttr, PFN_CDF_PARSE_ERROR_CALLBACK pfnParseError
CryptCATCDFOpen;Opens an existing catalog definition file (CDF) for reading and initializes a CRYPTCATCDF structure.;LPWSTR pwszFilePath, PFN_CDF_PARSE_ERROR_CALLBACK pfnParseError
CryptCATClose;Closes a catalog handle opened previously by the CryptCATOpen function.;HANDLE hCatalog
CryptCATEnumerateAttr;Enumerates the attributes associated with a member of a catalog. This function has no associated import library.;HANDLE hCatalog, CRYPTCATMEMBER *pCatMember, CRYPTCATATTRIBUTE *pPrevAttr
CryptCATEnumerateCatAttr;Enumerates the attributes associated with a catalog. This function has no associated import library.;HANDLE hCatalog, CRYPTCATATTRIBUTE *pPrevAttr
CryptCATEnumerateMember;Enumerates the members of a catalog.;HANDLE hCatalog, CRYPTCATMEMBER *pPrevMember
CryptCATGetAttrInfo;Retrieves information about an attribute of a member of a catalog.;HANDLE hCatalog, CRYPTCATMEMBER *pCatMember, LPWSTR pwszReferenceTag
CryptCATGetMemberInfo;Retrieves member information from the catalog's PKCS;HANDLE hCatalog, LPWSTR pwszReferenceTag
CryptCATHandleFromStore;Retrieves a catalog handle from memory.;CRYPTCATSTORE *pCatStore
CryptCATOpen;Opens a catalog and returns a context handle to the open catalog.;LPWSTR pwszFileName, DWORD fdwOpenFlags, HCRYPTPROV hProv, DWORD dwPublicVersion, DWORD dwEncodingType
CryptCATPersistStore;Saves the information in the specified catalog store to an unsigned catalog file.;HANDLE hCatalog
CryptCATPutAttrInfo;Allocates memory for an attribute and adds it to a catalog member.;HANDLE hCatalog, CRYPTCATMEMBER *pCatMember, LPWSTR pwszReferenceTag, DWORD dwAttrTypeAndAction, DWORD cbData, BYTE *pbData
CryptCATPutCatAttrInfo;Allocates memory for a catalog file attribute and adds it to the catalog.;HANDLE hCatalog, LPWSTR pwszReferenceTag, DWORD dwAttrTypeAndAction, DWORD cbData, BYTE *pbData
CryptCATPutMemberInfo;Allocates memory for a catalog member and adds it to the catalog.;HANDLE hCatalog, LPWSTR pwszFileName, LPWSTR pwszReferenceTag, GUID *pgSubjectType, DWORD dwCertVersion, DWORD cbSIPIndirectData, BYTE *pbSIPIndirectData
CryptCATStoreFromHandle;Retrieves a CRYPTCATSTORE structure from a catalog handle.;HANDLE hCatalog
CryptContextAddRef;Adds one to the reference count of an HCRYPTPROV cryptographic service provider (CSP) handle.;HCRYPTPROV hProv, DWORD *pdwReserved, DWORD dwFlags
CryptCreateHash;Initiates the hashing of a stream of data. It creates and returns to the calling application a handle to a cryptographic service provider (CSP) hash object.;HCRYPTPROV hProv, ALG_ID Algid, HCRYPTKEY hKey, DWORD dwFlags, HCRYPTHASH *phHash
CryptCreateKeyIdentifierFromCSP;Important  This API is deprecated.;DWORD dwCertEncodingType, LPCSTR pszPubKeyOID, const PUBLICKEYSTRUC *pPubKeyStruc, DWORD cbPubKeyStruc, DWORD dwFlags, void *pvReserved, BYTE *pbHash, DWORD *pcbHash
CryptDecodeMessage;Decodes, decrypts, and verifies a cryptographic message.;DWORD dwMsgTypeFlags, PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara, PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara, DWORD dwSignerIndex, const BYTE *pbEncodedBlob, DWORD cbEncodedBlob, DWORD dwPrevInnerContentType, DWORD *pdwMsgType, DWORD *pdwInnerContentType, BYTE *pbDecoded, DWORD *pcbDecoded, PCCERT_CONTEXT *ppXchgCert, PCCERT_CONTEXT *ppSignerCert
CryptDecodeObjectEx;Decodes a structure of the type indicated by the lpszStructType parameter.;DWORD dwCertEncodingType, LPCSTR lpszStructType, const BYTE *pbEncoded, DWORD cbEncoded, DWORD dwFlags, PCRYPT_DECODE_PARA pDecodePara, void *pvStructInfo, DWORD *pcbStructInfo
CryptDecodeObject;The CryptDecodeObject function decodes a structure of the type indicated by the lpszStructType parameter. The use of CryptDecodeObjectEx is recommended as an API that performs the same function with significant performance improvements.;DWORD dwCertEncodingType, LPCSTR lpszStructType, const BYTE *pbEncoded, DWORD cbEncoded, DWORD dwFlags, void *pvStructInfo, DWORD *pcbStructInfo
CryptDecryptAndVerifyMessageSignature;The CryptDecryptAndVerifyMessageSignature function decrypts a message and verifies its signature.;PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara, PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara, DWORD dwSignerIndex, const BYTE *pbEncryptedBlob, DWORD cbEncryptedBlob, BYTE *pbDecrypted, DWORD *pcbDecrypted, PCCERT_CONTEXT *ppXchgCert, PCCERT_CONTEXT *ppSignerCert
CryptDecrypt;Decrypts data previously encrypted by using the CryptEncrypt function.;HCRYPTKEY hKey, HCRYPTHASH hHash, BOOL Final, DWORD dwFlags, BYTE *pbData, DWORD *pdwDataLen
CryptDecryptMessage;The CryptDecryptMessage function decodes and decrypts a message.;PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara, const BYTE *pbEncryptedBlob, DWORD cbEncryptedBlob, BYTE *pbDecrypted, DWORD *pcbDecrypted, PCCERT_CONTEXT *ppXchgCert
CryptDeriveKey;Generates cryptographic session keys derived from a base data value.;HCRYPTPROV hProv, ALG_ID Algid, HCRYPTHASH hBaseData, DWORD dwFlags, HCRYPTKEY *phKey
CryptDestroyHash;Destroys the hash object referenced by the hHash parameter.;HCRYPTHASH hHash
CryptDestroyKey;Releases the handle referenced by the hKey parameter.;HCRYPTKEY hKey
CryptDuplicateHash;Makes an exact copy of a hash to the point when the duplication is done.;HCRYPTHASH hHash, DWORD *pdwReserved, DWORD dwFlags, HCRYPTHASH *phHash
CryptDuplicateKey;Makes an exact copy of a key and the state of the key.;HCRYPTKEY hKey, DWORD *pdwReserved, DWORD dwFlags, HCRYPTKEY *phKey
CryptEncodeObjectEx;Encodes a structure of the type indicated by the value of the lpszStructType parameter.;DWORD dwCertEncodingType, LPCSTR lpszStructType, const void *pvStructInfo, DWORD dwFlags, PCRYPT_ENCODE_PARA pEncodePara, void *pvEncoded, DWORD *pcbEncoded
CryptEncodeObject;The CryptEncodeObject function encodes a structure of the type indicated by the value of the lpszStructType parameter. The use of CryptEncodeObjectEx is recommended as an API that performs the same function with significant performance improvements.;DWORD dwCertEncodingType, LPCSTR lpszStructType, const void *pvStructInfo, BYTE *pbEncoded, DWORD *pcbEncoded
CryptEncrypt;Encrypts data. The algorithm used to encrypt the data is designated by the key held by the CSP module and is referenced by the hKey parameter.;HCRYPTKEY hKey, HCRYPTHASH hHash, BOOL Final, DWORD dwFlags, BYTE *pbData, DWORD *pdwDataLen, DWORD dwBufLen
CryptEncryptMessage;The CryptEncryptMessage function encrypts and encodes a message.;PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara, DWORD cRecipientCert, PCCERT_CONTEXT [] rgpRecipientCert, const BYTE *pbToBeEncrypted, DWORD cbToBeEncrypted, BYTE *pbEncryptedBlob, DWORD *pcbEncryptedBlob
CryptEnumKeyIdentifierProperties;The CryptEnumKeyIdentifierProperties function enumerates key identifiers and their properties.;const CRYPT_HASH_BLOB *pKeyIdentifier, DWORD dwPropId, DWORD dwFlags, LPCWSTR pwszComputerName, void *pvReserved, void *pvArg, PFN_CRYPT_ENUM_KEYID_PROP pfnEnum
CryptEnumOIDFunction;The CryptEnumOIDFunction function enumerates the registered object identifier (OID) functions.;DWORD dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID, DWORD dwFlags, void *pvArg, PFN_CRYPT_ENUM_OID_FUNC pfnEnumOIDFunc
CryptEnumOIDInfo;Enumerates predefined and registered object identifier (OID) CRYPT_OID_INFO structures. This function enumerates either all of the predefined and registered structures or only structures identified by a selected OID group.;DWORD dwGroupId, DWORD dwFlags, void *pvArg, PFN_CRYPT_ENUM_OID_INFO pfnEnumOIDInfo
CryptEnumProvidersA;Important  This API is deprecated.;DWORD dwIndex, DWORD *pdwReserved, DWORD dwFlags, DWORD *pdwProvType, LPSTR szProvName, DWORD *pcbProvName
CryptEnumProvidersW;Important  This API is deprecated.;DWORD dwIndex, DWORD *pdwReserved, DWORD dwFlags, DWORD *pdwProvType, LPWSTR szProvName, DWORD *pcbProvName
CryptEnumProviderTypesA;Retrieves the first or next types of cryptographic service provider (CSP) supported on the computer.;DWORD dwIndex, DWORD *pdwReserved, DWORD dwFlags, DWORD *pdwProvType, LPSTR szTypeName, DWORD *pcbTypeName
CryptEnumProviderTypesW;Retrieves the first or next types of cryptographic service provider (CSP) supported on the computer.;DWORD dwIndex, DWORD *pdwReserved, DWORD dwFlags, DWORD *pdwProvType, LPWSTR szTypeName, DWORD *pcbTypeName
CryptExportKey;Exports a cryptographic key or a key pair from a cryptographic service provider (CSP) in a secure manner.;HCRYPTKEY hKey, HCRYPTKEY hExpKey, DWORD dwBlobType, DWORD dwFlags, BYTE *pbData, DWORD *pdwDataLen
CryptExportPKCS8Ex;Exports the private key in PKCS;CRYPT_PKCS8_EXPORT_PARAMS *psExportParams, DWORD dwFlags, void *pvAuxInfo, BYTE *pbPrivateKeyBlob, DWORD *pcbPrivateKeyBlob
CryptExportPKCS8;Exports the private key in PKCS;HCRYPTPROV hCryptProv, DWORD dwKeySpec, LPSTR pszPrivateKeyObjId, DWORD dwFlags, void *pvAuxInfo, BYTE *pbPrivateKeyBlob, DWORD *pcbPrivateKeyBlob
CryptExportPublicKeyInfoEx;Exports the public key information associated with the provider's corresponding private key.;HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey, DWORD dwKeySpec, DWORD dwCertEncodingType, LPSTR pszPublicKeyObjId, DWORD dwFlags, void *pvAuxInfo, PCERT_PUBLIC_KEY_INFO pInfo, DWORD *pcbInfo
CryptExportPublicKeyInfoFromBCryptKeyHandle;Exports the public key information associated with a provider's corresponding private key.;BCRYPT_KEY_HANDLE hBCryptKey, DWORD dwCertEncodingType, LPSTR pszPublicKeyObjId, DWORD dwFlags, void *pvAuxInfo, PCERT_PUBLIC_KEY_INFO pInfo, DWORD *pcbInfo
CryptExportPublicKeyInfo;The CryptExportPublicKeyInfo function exports the public key information associated with the corresponding private key of the provider. For an updated version of this function, see CryptExportPublicKeyInfoEx.;HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey, DWORD dwKeySpec, DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pInfo, DWORD *pcbInfo
CryptFindCertificateKeyProvInfo;Enumerates the cryptographic providers and their containers to find the private key that corresponds to the certificate's public key.;PCCERT_CONTEXT pCert, DWORD dwFlags, void *pvReserved
CryptFindLocalizedName;Finds the localized name for the specified name, such as the localize name of the &quot;Root&quot; system store.;LPCWSTR pwszCryptName
CryptFindOIDInfo;Retrieves the first predefined or registered CRYPT_OID_INFO structure that matches a specified key type and key. The search can be limited to object identifiers (OIDs) within a specified OID group.;DWORD dwKeyType, void *pvKey, DWORD dwGroupId
CryptFormatObject;The CryptFormatObject function formats the encoded data and returns a Unicode string in the allocated buffer according to the certificate encoding type.;DWORD dwCertEncodingType, DWORD dwFormatType, DWORD dwFormatStrType, void *pFormatStruct, LPCSTR lpszStructType, const BYTE *pbEncoded, DWORD cbEncoded, void *pbFormat, DWORD *pcbFormat
CryptFreeOIDFunctionAddress;The CryptFreeOIDFunctionAddress function releases a handle returned by CryptGetOIDFunctionAddress or CryptGetDefaultOIDFunctionAddress by decrementing the reference count on the function handle.;HCRYPTOIDFUNCADDR hFuncAddr, DWORD dwFlags
CryptGenKey;Generates a random cryptographic session key or a public/private key pair. A handle to the key or key pair is returned in phKey. This handle can then be used as needed with any CryptoAPI function that requires a key handle.;HCRYPTPROV hProv, ALG_ID Algid, DWORD dwFlags, HCRYPTKEY *phKey
CryptGenRandom;Fills a buffer with cryptographically random bytes.;HCRYPTPROV hProv, DWORD dwLen, BYTE *pbBuffer
CryptGetDefaultOIDDllList;The CryptGetDefaultOIDDllList function acquires the list of the names of DLL files that contain registered default object identifier (OID) functions for a specified function set and encoding type.;HCRYPTOIDFUNCSET hFuncSet, DWORD dwEncodingType, WCHAR *pwszDllList, DWORD *pcchDllList
CryptGetDefaultOIDFunctionAddress;The CryptGetDefaultOIDFunctionAddress function loads the DLL that contains a default function address.;HCRYPTOIDFUNCSET hFuncSet, DWORD dwEncodingType, LPCWSTR pwszDll, DWORD dwFlags, void **ppvFuncAddr, HCRYPTOIDFUNCADDR *phFuncAddr
CryptGetDefaultProviderA;Finds the default cryptographic service provider (CSP) of a specified provider type for the local computer or current user.;DWORD dwProvType, DWORD *pdwReserved, DWORD dwFlags, LPSTR pszProvName, DWORD *pcbProvName
CryptGetDefaultProviderW;Finds the default cryptographic service provider (CSP) of a specified provider type for the local computer or current user.;DWORD dwProvType, DWORD *pdwReserved, DWORD dwFlags, LPWSTR pszProvName, DWORD *pcbProvName
CryptGetHashParam;Retrieves data that governs the operations of a hash object.;HCRYPTHASH hHash, DWORD dwParam, BYTE *pbData, DWORD *pdwDataLen, DWORD dwFlags
CryptGetKeyIdentifierProperty;The CryptGetKeyIdentifierProperty acquires a specific property from a specified key identifier.;const CRYPT_HASH_BLOB *pKeyIdentifier, DWORD dwPropId, DWORD dwFlags, LPCWSTR pwszComputerName, void *pvReserved, void *pvData, DWORD *pcbData
CryptGetKeyParam;Retrieves data that governs the operations of a key.;HCRYPTKEY hKey, DWORD dwParam, BYTE *pbData, DWORD *pdwDataLen, DWORD dwFlags
CryptGetMessageCertificates;The CryptGetMessageCertificates function returns the handle of an open certificate store containing the message's certificates and CRLs. This function calls CertOpenStore using provider type CERT_STORE_PROV_PKCS7 as its lpszStoreProvider parameter.;DWORD dwMsgAndCertEncodingType, HCRYPTPROV_LEGACY hCryptProv, DWORD dwFlags, const BYTE *pbSignedBlob, DWORD cbSignedBlob
CryptGetMessageSignerCount;The CryptGetMessageSignerCount function returns the number of signers of a signed message.;DWORD dwMsgEncodingType, const BYTE *pbSignedBlob, DWORD cbSignedBlob
CryptGetObjectUrl;Acquires the URL of the remote object from a certificate, certificate trust list (CTL), or certificate revocation list (CRL).;LPCSTR pszUrlOid, LPVOID pvPara, DWORD dwFlags, PCRYPT_URL_ARRAY pUrlArray, DWORD *pcbUrlArray, PCRYPT_URL_INFO pUrlInfo, DWORD *pcbUrlInfo, LPVOID pvReserved
CryptGetOIDFunctionAddress;Searches the list of registered and installed functions for an encoding type and object identifier (OID) match.;HCRYPTOIDFUNCSET hFuncSet, DWORD dwEncodingType, LPCSTR pszOID, DWORD dwFlags, void **ppvFuncAddr, HCRYPTOIDFUNCADDR *phFuncAddr
CryptGetOIDFunctionValue;The CryptGetOIDFunctionValue function queries a value associated with an OID.;DWORD dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID, LPCWSTR pwszValueName, DWORD *pdwValueType, BYTE *pbValueData, DWORD *pcbValueData
CryptGetProvParam;Retrieves parameters that govern the operations of a cryptographic service provider (CSP).;HCRYPTPROV hProv, DWORD dwParam, BYTE *pbData, DWORD *pdwDataLen, DWORD dwFlags
CryptGetTimeValidObject;Retrieves a CRL, an OCSP response, or CTL object that is valid within a given context and time.;LPCSTR pszTimeValidOid, LPVOID pvPara, PCCERT_CONTEXT pIssuer, LPFILETIME pftValidFor, DWORD dwFlags, DWORD dwTimeout, LPVOID *ppvObject, PCRYPT_CREDENTIALS pCredentials, PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO pExtraInfo
CryptGetUserKey;Retrieves a handle of one of a user's two public/private key pairs.;HCRYPTPROV hProv, DWORD dwKeySpec, HCRYPTKEY *phUserKey
CryptHashCertificate2;Hashes a block of data by using a CNG hash provider.;LPCWSTR pwszCNGHashAlgid, DWORD dwFlags, void *pvReserved, const BYTE *pbEncoded, DWORD cbEncoded, BYTE *pbComputedHash, DWORD *pcbComputedHash
CryptHashCertificate;The CryptHashCertificate function hashes the entire encoded content of a certificate including its signature.;HCRYPTPROV_LEGACY hCryptProv, ALG_ID Algid, DWORD dwFlags, const BYTE *pbEncoded, DWORD cbEncoded, BYTE *pbComputedHash, DWORD *pcbComputedHash
CryptHashData;Adds data to a specified hash object.;HCRYPTHASH hHash, const BYTE *pbData, DWORD dwDataLen, DWORD dwFlags
CryptHashMessage;Creates a hash of the message.;PCRYPT_HASH_MESSAGE_PARA pHashPara, BOOL fDetachedHash, DWORD cToBeHashed, const BYTE * [] rgpbToBeHashed, DWORD [] rgcbToBeHashed, BYTE *pbHashedBlob, DWORD *pcbHashedBlob, BYTE *pbComputedHash, DWORD *pcbComputedHash
CryptHashPublicKeyInfo;Encodes the public key information in a CERT_PUBLIC_KEY_INFO structure and computes the hash of the encoded bytes.;HCRYPTPROV_LEGACY hCryptProv, ALG_ID Algid, DWORD dwFlags, DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pInfo, BYTE *pbComputedHash, DWORD *pcbComputedHash
CryptHashSessionKey;Computes the cryptographic hash of a session key object.;HCRYPTHASH hHash, HCRYPTKEY hKey, DWORD dwFlags
CryptHashToBeSigned;Important  This API is deprecated.;HCRYPTPROV_LEGACY hCryptProv, DWORD dwCertEncodingType, const BYTE *pbEncoded, DWORD cbEncoded, BYTE *pbComputedHash, DWORD *pcbComputedHash
CryptImportKey;Transfers a cryptographic key from a key BLOB into a cryptographic service provider (CSP).;HCRYPTPROV hProv, const BYTE *pbData, DWORD dwDataLen, HCRYPTKEY hPubKey, DWORD dwFlags, HCRYPTKEY *phKey
CryptImportPKCS8;Imports the private key in PKCS;CRYPT_PKCS8_IMPORT_PARAMS sPrivateKeyAndParams, DWORD dwFlags, HCRYPTPROV *phCryptProv, void *pvAuxInfo
CryptImportPublicKeyInfo;Converts and imports the public key information into the provider and returns a handle of the public key.;HCRYPTPROV hCryptProv, DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pInfo, HCRYPTKEY *phKey
CryptImportPublicKeyInfoEx2;Imports a public key into the CNG asymmetric provider that corresponds to the public key object identifier (OID) and returns a CNG handle to the key.;DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pInfo, DWORD dwFlags, void *pvAuxInfo, BCRYPT_KEY_HANDLE *phKey
CryptImportPublicKeyInfoEx;Important  This API is deprecated.;HCRYPTPROV hCryptProv, DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pInfo, ALG_ID aiKeyAlg, DWORD dwFlags, void *pvAuxInfo, HCRYPTKEY *phKey
CryptInitOIDFunctionSet;The CryptInitOIDFunctionSet initializes and returns the handle of the OID function set identified by a supplied function set name.;LPCSTR pszFuncName, DWORD dwFlags
CryptInstallDefaultContext;Installs a specific provider to be the default context provider for the specified algorithm.;HCRYPTPROV hCryptProv, DWORD dwDefaultType, const void *pvDefaultPara, DWORD dwFlags, void *pvReserved, HCRYPTDEFAULTCONTEXT *phDefaultContext
CryptInstallOIDFunctionAddress;The CryptInstallOIDFunctionAddress function installs a set of callable object identifier (OID) function addresses.;HMODULE hModule, DWORD dwEncodingType, LPCSTR pszFuncName, DWORD cFuncEntry, const CRYPT_OID_FUNC_ENTRY [] rgFuncEntry, DWORD dwFlags
CryptMemAlloc;The CryptMemAlloc function allocates memory for a buffer. It is used by all Crypt32.lib functions that return allocated buffers.;ULONG cbSize
CryptMemFree;The CryptMemFree function frees memory allocated by CryptMemAlloc or CryptMemRealloc.;LPVOID pv
CryptMemRealloc;The CryptMemRealloc function frees the memory currently allocated for a buffer and allocates memory for a new buffer.;LPVOID pv, ULONG cbSize
CryptMsgCalculateEncodedLength;Calculates the maximum number of bytes needed for an encoded cryptographic message given the message type, encoding parameters, and total length of the data to be encoded.;DWORD dwMsgEncodingType, DWORD dwFlags, DWORD dwMsgType, void const *pvMsgEncodeInfo, LPSTR pszInnerContentObjID, DWORD cbData
CryptMsgClose;The CryptMsgClose function closes a cryptographic message handle. At each call to this function, the reference count on the message is reduced by one. When the reference count reaches zero, the message is fully released.;HCRYPTMSG hCryptMsg
CryptMsgControl;Performs a control operation after a message has been decoded by a final call to the CryptMsgUpdate function.;HCRYPTMSG hCryptMsg, DWORD dwFlags, DWORD dwCtrlType, void const *pvCtrlPara
CryptMsgCountersign;Countersigns an existing signature in a message.;HCRYPTMSG hCryptMsg, DWORD dwIndex, DWORD cCountersigners, PCMSG_SIGNER_ENCODE_INFO rgCountersigners
CryptMsgCountersignEncoded;Countersigns an existing PKCS;DWORD dwEncodingType, PBYTE pbSignerInfo, DWORD cbSignerInfo, DWORD cCountersigners, PCMSG_SIGNER_ENCODE_INFO rgCountersigners, PBYTE pbCountersignature, PDWORD pcbCountersignature
CryptMsgDuplicate;The CryptMsgDuplicate function duplicates a cryptographic message handle by incrementing its reference count.;HCRYPTMSG hCryptMsg
CryptMsgEncodeAndSignCTL;The CryptMsgEncodeAndSignCTL function encodes a CTL and creates a signed message containing the encoded CTL.This function first encodes the CTL pointed to by pCtlInfo and then calls CryptMsgSignCTL to sign the encoded message.;DWORD dwMsgEncodingType, PCTL_INFO pCtlInfo, PCMSG_SIGNED_ENCODE_INFO pSignInfo, DWORD dwFlags, BYTE *pbEncoded, DWORD *pcbEncoded
CryptMsgGetAndVerifySigner;The CryptMsgGetAndVerifySigner function verifies a cryptographic message's signature.;HCRYPTMSG hCryptMsg, DWORD cSignerStore, HCERTSTORE *rghSignerStore, DWORD dwFlags, PCCERT_CONTEXT *ppSigner, DWORD *pdwSignerIndex
CryptMsgGetParam;Acquires a message parameter after a cryptographic message has been encoded or decoded.;HCRYPTMSG hCryptMsg, DWORD dwParamType, DWORD dwIndex, void *pvData, DWORD *pcbData
CryptMsgOpenToDecode;Opens a cryptographic message for decoding and returns a handle of the opened message.;DWORD dwMsgEncodingType, DWORD dwFlags, DWORD dwMsgType, HCRYPTPROV_LEGACY hCryptProv, PCERT_INFO pRecipientInfo, PCMSG_STREAM_INFO pStreamInfo
CryptMsgOpenToEncode;Opens a cryptographic message for encoding and returns a handle of the opened message.;DWORD dwMsgEncodingType, DWORD dwFlags, DWORD dwMsgType, void const *pvMsgEncodeInfo, LPSTR pszInnerContentObjID, PCMSG_STREAM_INFO pStreamInfo
CryptMsgSignCTL;The CryptMsgSignCTL function creates a signed message containing an encoded CTL.;DWORD dwMsgEncodingType, BYTE *pbCtlContent, DWORD cbCtlContent, PCMSG_SIGNED_ENCODE_INFO pSignInfo, DWORD dwFlags, BYTE *pbEncoded, DWORD *pcbEncoded
CryptMsgUpdate;Adds contents to a cryptographic message.;HCRYPTMSG hCryptMsg, const BYTE *pbData, DWORD cbData, BOOL fFinal
CryptMsgVerifyCountersignatureEncodedEx;Verifies that the pbSignerInfoCounterSignature parameter contains the encrypted hash of the encryptedDigest field of the pbSignerInfo parameter structure.;HCRYPTPROV_LEGACY hCryptProv, DWORD dwEncodingType, PBYTE pbSignerInfo, DWORD cbSignerInfo, PBYTE pbSignerInfoCountersignature, DWORD cbSignerInfoCountersignature, DWORD dwSignerType, void *pvSigner, DWORD dwFlags, void *pvExtra
CryptMsgVerifyCountersignatureEncoded;Verifies a countersignature in terms of the SignerInfo structure (as defined by PKCS;HCRYPTPROV_LEGACY hCryptProv, DWORD dwEncodingType, PBYTE pbSignerInfo, DWORD cbSignerInfo, PBYTE pbSignerInfoCountersignature, DWORD cbSignerInfoCountersignature, PCERT_INFO pciCountersigner
CryptProtectData;Performs encryption on the data in a DATA_BLOB structure.;DATA_BLOB *pDataIn, LPCWSTR szDataDescr, DATA_BLOB *pOptionalEntropy, PVOID pvReserved, CRYPTPROTECT_PROMPTSTRUCT *pPromptStruct, DWORD dwFlags, DATA_BLOB *pDataOut
CryptProtectMemory;encrypts memory to prevent others from viewing sensitive information in your process.;LPVOID pDataIn, DWORD cbDataIn, DWORD dwFlags
CryptQueryObject;Retrieves information about the contents of a cryptography API object, such as a certificate, a certificate revocation list, or a certificate trust list.;DWORD dwObjectType, const void *pvObject, DWORD dwExpectedContentTypeFlags, DWORD dwExpectedFormatTypeFlags, DWORD dwFlags, DWORD *pdwMsgAndCertEncodingType, DWORD *pdwContentType, DWORD *pdwFormatType, HCERTSTORE *phCertStore, HCRYPTMSG *phMsg, const void **ppvContext
CryptRegisterDefaultOIDFunction;The CryptRegisterDefaultOIDFunction registers a DLL containing the default function to be called for the specified encoding type and function name. Unlike CryptRegisterOIDFunction, the function name to be exported by the DLL cannot be overridden.;DWORD dwEncodingType, LPCSTR pszFuncName, DWORD dwIndex, LPCWSTR pwszDll
CryptRegisterOIDFunction;Registers a DLL that contains the function to be called for the specified encoding type, function name, and object identifier (OID).;DWORD dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID, LPCWSTR pwszDll, LPCSTR pszOverrideFuncName
CryptRegisterOIDInfo;The CryptRegisterOIDInfo function registers the OID information specified in the CRYPT_OID_INFO structure, persisting it to the registry.;PCCRYPT_OID_INFO pInfo, DWORD dwFlags
CryptReleaseContext;Releases the handle of a cryptographic service provider (CSP) and a key container.;HCRYPTPROV hProv, DWORD dwFlags
CryptRetrieveObjectByUrlA;Retrieves the public key infrastructure (PKI) object from a location specified by a URL.;LPCSTR pszUrl, LPCSTR pszObjectOid, DWORD dwRetrievalFlags, DWORD dwTimeout, LPVOID *ppvObject, HCRYPTASYNC hAsyncRetrieve, PCRYPT_CREDENTIALS pCredentials, LPVOID pvVerify, PCRYPT_RETRIEVE_AUX_INFO pAuxInfo
CryptRetrieveObjectByUrlW;Retrieves the public key infrastructure (PKI) object from a location specified by a URL.;LPCWSTR pszUrl, LPCSTR pszObjectOid, DWORD dwRetrievalFlags, DWORD dwTimeout, LPVOID *ppvObject, HCRYPTASYNC hAsyncRetrieve, PCRYPT_CREDENTIALS pCredentials, LPVOID pvVerify, PCRYPT_RETRIEVE_AUX_INFO pAuxInfo
CryptRetrieveTimeStamp;Encodes a time stamp request and retrieves the time stamp token from a location specified by a URL to a Time Stamping Authority (TSA).;LPCWSTR wszUrl, DWORD dwRetrievalFlags, DWORD dwTimeout, LPCSTR pszHashId, const CRYPT_TIMESTAMP_PARA *pPara, const BYTE *pbData, DWORD cbData, PCRYPT_TIMESTAMP_CONTEXT *ppTsContext, PCCERT_CONTEXT *ppTsSigner, HCERTSTORE *phStore
CryptSetHashParam;Customizes the operations of a hash object, including setting up initial hash contents and selecting a specific hashing algorithm.;HCRYPTHASH hHash, DWORD dwParam, const BYTE *pbData, DWORD dwFlags
CryptSetKeyIdentifierProperty;The CryptSetKeyIdentifierProperty function sets the property of a specified key identifier. This function can set the property on the computer identified in pwszComputerName.;const CRYPT_HASH_BLOB *pKeyIdentifier, DWORD dwPropId, DWORD dwFlags, LPCWSTR pwszComputerName, void *pvReserved, const void *pvData
CryptSetKeyParam;Customizes various aspects of a session key's operations.;HCRYPTKEY hKey, DWORD dwParam, const BYTE *pbData, DWORD dwFlags
CryptSetOIDFunctionValue;The CryptSetOIDFunctionValue function sets a value for the specified encoding type, function name, OID, and value name.;DWORD dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID, LPCWSTR pwszValueName, DWORD dwValueType, const BYTE *pbValueData, DWORD cbValueData
CryptSetProviderA;Specifies the current user's default cryptographic service provider (CSP).;LPCSTR pszProvName, DWORD dwProvType
CryptSetProviderExA;Specifies the default cryptographic service provider (CSP) of a specified provider type for the local computer or current user.;LPCSTR pszProvName, DWORD dwProvType, DWORD *pdwReserved, DWORD dwFlags
CryptSetProviderExW;Specifies the default cryptographic service provider (CSP) of a specified provider type for the local computer or current user.;LPCWSTR pszProvName, DWORD dwProvType, DWORD *pdwReserved, DWORD dwFlags
CryptSetProviderW;Specifies the current user's default cryptographic service provider (CSP).;LPCWSTR pszProvName, DWORD dwProvType
CryptSetProvParam;Customizes the operations of a cryptographic service provider (CSP). This function is commonly used to set a security descriptor on the key container associated with a CSP to control access to the private keys in that key container.;HCRYPTPROV hProv, DWORD dwParam, const BYTE *pbData, DWORD dwFlags
CryptSignAndEncodeCertificate;Encodes and signs a certificate, certificate revocation list (CRL), certificate trust list (CTL), or certificate request.;BCRYPT_KEY_HANDLE hBCryptKey, DWORD dwKeySpec, DWORD dwCertEncodingType, LPCSTR lpszStructType, const void *pvStructInfo, PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm, const void *pvHashAuxInfo, BYTE *pbEncoded, DWORD *pcbEncoded
CryptSignAndEncryptMessage;The CryptSignAndEncryptMessage function creates a hash of the specified content, signs the hash, encrypts the content, hashes the encrypted contents and the signed hash, and then encodes both the encrypted content and the signed hash.;PCRYPT_SIGN_MESSAGE_PARA pSignPara, PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara, DWORD cRecipientCert, PCCERT_CONTEXT [] rgpRecipientCert, const BYTE *pbToBeSignedAndEncrypted, DWORD cbToBeSignedAndEncrypted, BYTE *pbSignedAndEncryptedBlob, DWORD *pcbSignedAndEncryptedBlob
CryptSignCertificate;The CryptSignCertificate function signs the &quot;to be signed&quot; information in the encoded signed content.;BCRYPT_KEY_HANDLE hBCryptKey, DWORD dwKeySpec, DWORD dwCertEncodingType, const BYTE *pbEncodedToBeSigned, DWORD cbEncodedToBeSigned, PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm, const void *pvHashAuxInfo, BYTE *pbSignature, DWORD *pcbSignature
CryptSignHashA;Signs data.;HCRYPTHASH hHash, DWORD dwKeySpec, LPCSTR szDescription, DWORD dwFlags, BYTE *pbSignature, DWORD *pdwSigLen
CryptSignHashW;Signs data.;HCRYPTHASH hHash, DWORD dwKeySpec, LPCWSTR szDescription, DWORD dwFlags, BYTE *pbSignature, DWORD *pdwSigLen
CryptSignMessage;The CryptSignMessage function creates a hash of the specified content, signs the hash, and then encodes both the original message content and the signed hash.;PCRYPT_SIGN_MESSAGE_PARA pSignPara, BOOL fDetachedSignature, DWORD cToBeSigned, const BYTE * [] rgpbToBeSigned, DWORD [] rgcbToBeSigned, BYTE *pbSignedBlob, DWORD *pcbSignedBlob
CryptSignMessageWithKey;Signs a message by using a CSP's private key specified in the parameters.;PCRYPT_KEY_SIGN_MESSAGE_PARA pSignPara, const BYTE *pbToBeSigned, DWORD cbToBeSigned, BYTE *pbSignedBlob, DWORD *pcbSignedBlob
CryptSIPAddProvider;The CryptSIPAddProvider function registers functions that are exported by a given DLL file that implements a Subject Interface Package (SIP).;SIP_ADD_NEWPROVIDER *psNewProv
CryptSIPCreateIndirectData;Returns a SIP_INDIRECT_DATA structure that contains a hash of the supplied SIP_SUBJECTINFO structure, the digest algorithm, and an encoding attribute. The hash can be used as an indirect reference to the data.;SIP_SUBJECTINFO *pSubjectInfo, DWORD *pcbIndirectData, SIP_INDIRECT_DATA *pIndirectData
CryptSIPGetCaps;Retrieves the capabilities of a subject interface package (SIP).;SIP_SUBJECTINFO *pSubjInfo, SIP_CAP_SET *pCaps
CryptSIPGetSignedDataMsg;Retrieves an Authenticode signature from the file.;SIP_SUBJECTINFO *pSubjectInfo, DWORD *pdwEncodingType, DWORD dwIndex, DWORD *pcbSignedDataMsg, BYTE *pbSignedDataMsg
CryptSIPLoad;Loads the dynamic-link library (DLL) that implements a subject interface package (SIP) and assigns appropriate library export functions to a SIP_DISPATCH_INFO structure.;const GUID *pgSubject, DWORD dwFlags, SIP_DISPATCH_INFO *pSipDispatch
CryptSIPPutSignedDataMsg;Stores an Authenticode signature in the target file.;SIP_SUBJECTINFO *pSubjectInfo, DWORD dwEncodingType, DWORD *pdwIndex, DWORD cbSignedDataMsg, BYTE *pbSignedDataMsg
CryptSIPRemoveProvider;Removes registry details of a Subject Interface Package (SIP) DLL file added by a previous call to the CryptSIPAddProvider function.;GUID *pgProv
CryptSIPRemoveSignedDataMsg;Removes a specified Authenticode signature.;SIP_SUBJECTINFO *pSubjectInfo, DWORD dwIndex
CryptSIPRetrieveSubjectGuidForCatalogFile;Retrieves the subject GUID associated with the specified file.;LPCWSTR FileName, HANDLE hFileIn, GUID *pgSubject
CryptSIPRetrieveSubjectGuid;Retrieves a GUID based on the header information in a specified file.;LPCWSTR FileName, HANDLE hFileIn, GUID *pgSubject
CryptSIPVerifyIndirectData;Validates the indirect hashed data against the supplied subject.;SIP_SUBJECTINFO *pSubjectInfo, SIP_INDIRECT_DATA *pIndirectData
CryptStringToBinaryA;Converts a formatted string into an array of bytes.;LPCSTR pszString, DWORD cchString, DWORD dwFlags, BYTE *pbBinary, DWORD *pcbBinary, DWORD *pdwSkip, DWORD *pdwFlags
CryptStringToBinaryW;Converts a formatted string into an array of bytes.;LPCWSTR pszString, DWORD cchString, DWORD dwFlags, BYTE *pbBinary, DWORD *pcbBinary, DWORD *pdwSkip, DWORD *pdwFlags
CryptUIDlgCertMgr;Displays a dialog box that allows the user to manage certificates.;PCCRYPTUI_CERT_MGR_STRUCT pCryptUICertMgr
CryptUIDlgSelectCertificateFromStore;Displays a dialog box that allows the selection of a certificate from a specified store.;HCERTSTORE hCertStore, HWND hwnd, LPCWSTR pwszTitle, LPCWSTR pwszDisplayString, DWORD dwDontUseColumn, DWORD dwFlags, void *pvReserved
CryptUIDlgViewCertificateA;Presents a dialog box that displays a specified certificate.;PCCRYPTUI_VIEWCERTIFICATE_STRUCTA pCertViewInfo, BOOL *pfPropertiesChanged
CryptUIDlgViewCertificateW;Presents a dialog box that displays a specified certificate.;PCCRYPTUI_VIEWCERTIFICATE_STRUCTW pCertViewInfo, BOOL *pfPropertiesChanged
CryptUIDlgViewContext;Displays a certificate, CTL, or CRL context.;DWORD dwContextType, const void *pvContext, HWND hwnd, LPCWSTR pwszTitle, DWORD dwFlags, void *pvReserved
CryptUIWizDigitalSign;Digitally signs a document or BLOB.;DWORD dwFlags, HWND hwndParent, LPCWSTR pwszWizardTitle, PCCRYPTUI_WIZ_DIGITAL_SIGN_INFO pDigitalSignInfo, PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT *ppSignContext
CryptUIWizExport;Exports a certificate, a certificate trust list (CTL), a certificate revocation list (CRL), or a certificate store to a file.;DWORD dwFlags, HWND hwndParent, LPCWSTR pwszWizardTitle, PCCRYPTUI_WIZ_EXPORT_INFO pExportInfo, void *pvoid
CryptUIWizFreeDigitalSignContext;Frees the CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT structure allocated by the CryptUIWizDigitalSign function.;PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT pSignContext
CryptUIWizImport;Imports a certificate, a certificate trust list (CTL), a certificate revocation list (CRL), or a certificate store to a certificate store.;DWORD dwFlags, HWND hwndParent, LPCWSTR pwszWizardTitle, PCCRYPTUI_WIZ_IMPORT_SRC_INFO pImportSrc, HCERTSTORE hDestCertStore
CryptUninstallDefaultContext;Important  This API is deprecated.;HCRYPTDEFAULTCONTEXT hDefaultContext, DWORD dwFlags, void *pvReserved
CryptUnprotectData;Decrypts and does an integrity check of the data in a DATA_BLOB structure.;DATA_BLOB *pDataIn, LPWSTR *ppszDataDescr, DATA_BLOB *pOptionalEntropy, PVOID pvReserved, CRYPTPROTECT_PROMPTSTRUCT *pPromptStruct, DWORD dwFlags, DATA_BLOB *pDataOut
CryptUnprotectMemory;Decrypts memory that was encrypted using the CryptProtectMemory function.;LPVOID pDataIn, DWORD cbDataIn, DWORD dwFlags
CryptUnregisterDefaultOIDFunction;The CryptUnregisterDefaultOIDFunction removes the registration of a DLL containing the default function to be called for the specified encoding type and function name.;DWORD dwEncodingType, LPCSTR pszFuncName, LPCWSTR pwszDll
CryptUnregisterOIDFunction;Removes the registration of a DLL that contains the function to be called for the specified encoding type, function name, and OID.;DWORD dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID
CryptUnregisterOIDInfo;The CryptUnregisterOIDInfo function removes the registration of a specified CRYPT_OID_INFO OID information structure. The structure to be unregistered is identified by the structure's pszOID and dwGroupId members.;PCCRYPT_OID_INFO pInfo
CryptUpdateProtectedState;Migrates the current user's master keys after the user's security identifier (SID) has changed.;PSID pOldSid, LPCWSTR pwszOldPassword, DWORD dwFlags, DWORD *pdwSuccessCount, DWORD *pdwFailureCount
CryptVerifyCertificateSignatureEx;Verifies the signature of a subject certificate, certificate revocation list, certificate request, or keygen request by using the issuer's public key.;HCRYPTPROV_LEGACY hCryptProv, DWORD dwCertEncodingType, DWORD dwSubjectType, void *pvSubject, DWORD dwIssuerType, void *pvIssuer, DWORD dwFlags, void *pvExtra
CryptVerifyCertificateSignature;Verifies the signature of a certificate, certificate revocation list (CRL), or certificate request by using the public key in a CERT_PUBLIC_KEY_INFO structure.;HCRYPTPROV_LEGACY hCryptProv, DWORD dwCertEncodingType, const BYTE *pbEncoded, DWORD cbEncoded, PCERT_PUBLIC_KEY_INFO pPublicKey
CryptVerifyDetachedMessageHash;The CryptVerifyDetachedMessageHash function verifies a detached hash.;PCRYPT_HASH_MESSAGE_PARA pHashPara, BYTE *pbDetachedHashBlob, DWORD cbDetachedHashBlob, DWORD cToBeHashed, const BYTE * [] rgpbToBeHashed, DWORD [] rgcbToBeHashed, BYTE *pbComputedHash, DWORD *pcbComputedHash
CryptVerifyDetachedMessageSignature;The CryptVerifyDetachedMessageSignature function verifies a signed message containing a detached signature or signatures.;PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara, DWORD dwSignerIndex, const BYTE *pbDetachedSignBlob, DWORD cbDetachedSignBlob, DWORD cToBeSigned, const BYTE * [] rgpbToBeSigned, DWORD [] rgcbToBeSigned, PCCERT_CONTEXT *ppSignerCert
CryptVerifyMessageHash;The CryptVerifyMessageHash function verifies the hash of specified content.;PCRYPT_HASH_MESSAGE_PARA pHashPara, BYTE *pbHashedBlob, DWORD cbHashedBlob, BYTE *pbToBeHashed, DWORD *pcbToBeHashed, BYTE *pbComputedHash, DWORD *pcbComputedHash
CryptVerifyMessageSignature;Verifies a signed message's signature.;PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara, DWORD dwSignerIndex, const BYTE *pbSignedBlob, DWORD cbSignedBlob, BYTE *pbDecoded, DWORD *pcbDecoded, PCCERT_CONTEXT *ppSignerCert
CryptVerifyMessageSignatureWithKey;Verifies a signed message's signature by using specified public key information.;PCRYPT_KEY_VERIFY_MESSAGE_PARA pVerifyPara, PCERT_PUBLIC_KEY_INFO pPublicKeyInfo, const BYTE *pbSignedBlob, DWORD cbSignedBlob, BYTE *pbDecoded, DWORD *pcbDecoded
CryptVerifySignatureA;Verifies the signature of a hash object.;HCRYPTHASH hHash, const BYTE *pbSignature, DWORD dwSigLen, HCRYPTKEY hPubKey, LPCSTR szDescription, DWORD dwFlags
CryptVerifySignatureW;Verifies the signature of a hash object.;HCRYPTHASH hHash, const BYTE *pbSignature, DWORD dwSigLen, HCRYPTKEY hPubKey, LPCWSTR szDescription, DWORD dwFlags
CryptVerifyTimeStampSignature;Validates the time stamp signature on a specified array of bytes.;const BYTE *pbTSContentInfo, DWORD cbTSContentInfo, const BYTE *pbData, DWORD cbData, HCERTSTORE hAdditionalStore, PCRYPT_TIMESTAMP_CONTEXT *ppTsContext, PCCERT_CONTEXT *ppTsSigner, HCERTSTORE *phStore
CryptXmlAddObject;Adds the Object element to the Signature in the Document Context opened for encoding.;HCRYPTXML hSignatureOrObject, DWORD dwFlags, const CRYPT_XML_PROPERTY *rgProperty, ULONG cProperty, const CRYPT_XML_BLOB *pEncoded, const CRYPT_XML_OBJECT **ppObject
CryptXmlClose;Closes a cryptographic XML object handle.;HCRYPTXML hCryptXml
CryptXmlCreateReference;Creates a reference to an XML signature.;HCRYPTXML hCryptXml, DWORD dwFlags, LPCWSTR wszId, LPCWSTR wszURI, LPCWSTR wszType, const CRYPT_XML_ALGORITHM *pDigestMethod, ULONG cTransform, const CRYPT_XML_ALGORITHM *rgTransform, HCRYPTXML *phReference
CryptXmlDigestReference;Is used by an application to digest the resolved reference. This function applies transforms before updating the digest.;HCRYPTXML hReference, DWORD dwFlags, CRYPT_XML_DATA_PROVIDER *pDataProviderIn
CryptXmlDllCloseDigest;Frees the CRYPT_XML_DIGEST allocated by the CryptXmlDllCreateDigest function.;CRYPT_XML_DIGEST hDigest ) {...}
CryptXmlDllCreateDigest;Creates a digest object for the specified method.;const CRYPT_XML_ALGORITHM *pDigestMethod, ULONG *pcbSize, CRYPT_XML_DIGEST *phDigest ) {...}
CryptXmlDllCreateKey;Parses the KeyValue element and creates a Cryptography API:_Next Generation (CNG) BCrypt key handle to verify a signature.;const CRYPT_XML_BLOB *pEncoded, BCRYPT_KEY_HANDLE *phKey ) {...}
CryptXmlDllDigestData;Puts data into the digest.;CRYPT_XML_DIGEST hDigest, const BYTE *pbData, ULONG cbData ) {...}
CryptXmlDllEncodeAlgorithm;Encodes SignatureMethod or DigestMethod elements for agile algorithms with default parameters.;const CRYPT_XML_ALGORITHM_INFO *pAlgInfo, CRYPT_XML_CHARSET dwCharset, void *pvCallbackState, PFN_CRYPT_XML_WRITE_CALLBACK pfnWrite ) {...}
CryptXmlDllEncodeKeyValue;Encodes a KeyValue element.;NCRYPT_KEY_HANDLE hKey, CRYPT_XML_CHARSET dwCharset, void *pvCallbackState, PFN_CRYPT_XML_WRITE_CALLBACK pfnWrite ) {...}
CryptXmlDllFinalizeDigest;Retrieves the digest value.;CRYPT_XML_DIGEST hDigest, BYTE *pbDigest, ULONG cbDigest ) {...}
CryptXmlDllGetAlgorithmInfo;Decodes the XML algorithm and returns information about the algorithm.;const CRYPT_XML_ALGORITHM *pXmlAlgorithm, CRYPT_XML_ALGORITHM_INFO **ppAlgInfo ) {...}
CryptXmlDllGetInterface;Retrieves a pointer to the cryptographic extension functions for the specified algorithm.;DWORD dwFlags, const CRYPT_XML_ALGORITHM_INFO *pMethod, CRYPT_XML_CRYPTOGRAPHIC_INTERFACE *pInterface ) {...}
CryptXmlDllSignData;Signs data.;const CRYPT_XML_ALGORITHM *pSignatureMethod, HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey, DWORD dwKeySpec, const BYTE *pbInput, ULONG cbInput, BYTE *pbOutput, ULONG cbOutput, ULONG *pcbResult ) {...}
CryptXmlDllVerifySignature;Verifies a signature.;const CRYPT_XML_ALGORITHM *pSignatureMethod, BCRYPT_KEY_HANDLE hKey, const BYTE *pbInput, ULONG cbInput, const BYTE *pbSignature, ULONG cbSignature ) {...}
CryptXmlEncode;Encodes signature data by using the supplied XML writer callback function.;HCRYPTXML hCryptXml, CRYPT_XML_CHARSET dwCharset, const CRYPT_XML_PROPERTY *rgProperty, ULONG cProperty, void *pvCallbackState, PFN_CRYPT_XML_WRITE_CALLBACK pfnWrite
CryptXmlGetAlgorithmInfo;Decodes the CRYPT_XML_ALGORITHM structure and returns information about the algorithm.;const CRYPT_XML_ALGORITHM *pXmlAlgorithm, DWORD dwFlags, CRYPT_XML_ALGORITHM_INFO **ppAlgInfo
CryptXmlGetDocContext;Returns the document context specified by the supplied handle.;HCRYPTXML hCryptXml, const CRYPT_XML_DOC_CTXT **ppStruct
CryptXmlGetReference;Returns the Reference element specified by the supplied handle.;HCRYPTXML hCryptXml, const CRYPT_XML_REFERENCE **ppStruct
CryptXmlGetSignature;Returns an XML Signature element.;HCRYPTXML hCryptXml, const CRYPT_XML_SIGNATURE **ppStruct
CryptXmlGetStatus;Returns a CRYPT_XML_STATUS structure that contains status information about the object specified by the supplied handle.;HCRYPTXML hCryptXml, CRYPT_XML_STATUS *pStatus
CryptXmlGetTransforms;Returns information about the default transform chain engine.;const CRYPT_XML_TRANSFORM_CHAIN_CONFIG **ppConfig
CryptXmlImportPublicKey;Imports the public key specified by the supplied handle.;DWORD dwFlags, const CRYPT_XML_KEY_VALUE *pKeyValue, BCRYPT_KEY_HANDLE *phKey
CryptXmlOpenToDecode;Opens an XML digital signature to decode and returns the handle of the document context that encapsulates a CRYPT_XML_SIGNATURE structure. The document context can include one or more Signature elements.;const CRYPT_XML_TRANSFORM_CHAIN_CONFIG *pConfig, DWORD dwFlags, const CRYPT_XML_PROPERTY *rgProperty, ULONG cProperty, const CRYPT_XML_BLOB *pEncoded, HCRYPTXML *phCryptXml
CryptXmlOpenToEncode;Opens an XML digital signature to encode and returns a handle of the opened Signature element. The handle encapsulates a document context with a single CRYPT_XML_SIGNATURE structure and remains open until the CryptXmlClose function is called.;const CRYPT_XML_TRANSFORM_CHAIN_CONFIG *pConfig, DWORD dwFlags, LPCWSTR wszId, const CRYPT_XML_PROPERTY *rgProperty, ULONG cProperty, const CRYPT_XML_BLOB *pEncoded, HCRYPTXML *phSignature
CryptXmlSetHMACSecret;Sets the HMAC secret on the handle before calling the CryptXmlSign or CryptXmlVerify function.;HCRYPTXML hSignature, const BYTE *pbSecret, ULONG cbSecret
CryptXmlSign;Creates a cryptographic signature of a SignedInfo element.;HCRYPTXML hSignature, HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hKey, DWORD dwKeySpec, DWORD dwFlags, CRYPT_XML_KEYINFO_SPEC dwKeyInfoSpec, const void *pvKeyInfoSpec, const CRYPT_XML_ALGORITHM *pSignatureMethod, const CRYPT_XML_ALGORITHM *pCanonicalization
CryptXmlVerifySignature;Performs a cryptographic signature validation of a SignedInfo element.;HCRYPTXML hSignature, BCRYPT_KEY_HANDLE hKey, DWORD dwFlags
CStdAsyncStubBuffer2_Connect;Implements the IRpcStubBuffer::Connect method and connects the server object to the stub.;IRpcStubBuffer *pthis, IUnknown *pUnkServer
CStdAsyncStubBuffer2_Disconnect;Implements the IRpcStubBuffer::Disconnect method and disconnects the server object from the stub.;IRpcStubBuffer *pthis
CStdAsyncStubBuffer2_Release;Implements the IRpcStubBuffer::Release method.;IRpcStubBuffer *pthis
CStdAsyncStubBuffer_AddRef;Implements the IRpcStubBuffer::AddRef method.;IRpcStubBuffer *pthis
CStdAsyncStubBuffer_Connect;Implements the IRpcStubBuffer::Connect method and connects the server object to the stub.;IRpcStubBuffer *pthis, IUnknown *pUnkServer
CStdAsyncStubBuffer_Disconnect;Implements the IRpcStubBuffer::Disconnect method and disconnects the server object from the stub.;IRpcStubBuffer *pthis
CStdAsyncStubBuffer_Invoke;Implements the IRpcStubBuffer::Invoke method.;IRpcStubBuffer *pthis, RPCOLEMESSAGE *_prpcmsg, IRpcChannelBuffer *_pRpcChannelBuffer
CStdAsyncStubBuffer_QueryInterface;Implements the IRpcStubBuffer::QueryInterface method.;IRpcStubBuffer *pthis, REFIID riid, void **ppvObject
CStdAsyncStubBuffer_Release;Implements the IRpcStubBuffer::Release method.;IRpcStubBuffer *pthis
CStdStubBuffer2_Connect;Implements the IRpcStubBuffer::Connect method and connects the server object to the stub.;IRpcStubBuffer *pthis, IUnknown *pUnkServer
CStdStubBuffer2_CountRefs;Implements the IRpcStubBuffer::CountRefs method.;IRpcStubBuffer *pthis
CStdStubBuffer2_Disconnect;Implements the IRpcStubBuffer::Disconnect method and disconnects the server object from the stub.;IRpcStubBuffer *pthis
CStdStubBuffer2_QueryInterface;Implements the IRpcStubBuffer::QueryInterface method.;IRpcStubBuffer *This, REFIID riid, void **ppvObject
CStdStubBuffer_AddRef;The CStdStubBuffer_AddRef function implements the IRpcStubBuffer::AddRef method.;IRpcStubBuffer *This
CStdStubBuffer_Connect;The CStdStubBuffer_Connect function implements the IRpcStubBuffer::Connect method and connects the server object to the stub.;IRpcStubBuffer *This, IUnknown *pUnkServer
CStdStubBuffer_CountRefs;The CStdStubBuffer_CountRefs function implements the IRpcStubBuffer::CountRefs method.;IRpcStubBuffer *This
CStdStubBuffer_DebugServerQueryInterface;The CStdStubBuffer_DebugServerQueryInterface function implements the IRpcStubBuffer::DebugServerQueryInterface method.;IRpcStubBuffer *This, void **ppv
CStdStubBuffer_DebugServerRelease;The CStdStubBuffer_DebugServerRelease function implements the IRpcStubBuffer::DebugServerRelease method.;IRpcStubBuffer *This, void *pv
CStdStubBuffer_Disconnect;The CStdStubBuffer_Disconnect function implements the IRpcStubBuffer::Disconnect method and disconnects the server object from the stub.;IRpcStubBuffer *This
CStdStubBuffer_Invoke;The CStdStubBuffer_Invoke function implements the IRpcStubBuffer::Invoke method.;IRpcStubBuffer *This, RPCOLEMESSAGE *pRpcMsg, IRpcChannelBuffer *pRpcChannelBuffer
CStdStubBuffer_IsIIDSupported;The CStdStubBuffer_IsIIDSupported function implements the IRpcStubBuffer::IsIIDSupported method.;IRpcStubBuffer *This, REFIID riid
CStdStubBuffer_QueryInterface;The CStdStubBuffer_QueryInterface function implements the IRpcStubBuffer::QueryInterface method.;IRpcStubBuffer *This, REFIID riid, void **ppvObject
CveEventWrite;A tracing function for publishing events when an attempted security vulnerability exploit is detected in your user-mode application.;PCWSTR CveId, PCWSTR AdditionalDetails
DceErrorInqTextA;The DceErrorInqText function returns the message text for a status code.;RPC_STATUS RpcStatus, RPC_CSTR ErrorText
DceErrorInqText;The DceErrorInqText function returns the message text for a status code.;RPC_STATUS RpcStatus, RPC_CSTR ErrorText
DceErrorInqTextW;The DceErrorInqText function returns the message text for a status code.;RPC_STATUS RpcStatus, RPC_WSTR ErrorText
DdqCancelDiagnosticRecordOperation;Cancels all outstanding Diagnostic Data Query API internal query operations for this session. This can be called from another thread to interrupt long running Query APIs.;HDIAGNOSTIC_DATA_QUERY_SESSION hSession
DdqCloseSession;Closes a Diagnostic Data Query session handle.;HDIAGNOSTIC_DATA_QUERY_SESSION hSession
DdqCreateSession;Creates a Diagnostic Data Query API session handle to be used to uniquely identify a Diagnostic Data Query session.;DdqAccessLevel accessLevel, HDIAGNOSTIC_DATA_QUERY_SESSION *hSession
DdqExtractDiagnosticReport;Used for retrieving Windows Error Reporting reports, this API extracts cabs to destination path specified. If the error report does not contain any cabs, no work is performed.;HDIAGNOSTIC_DATA_QUERY_SESSION hSession, UINT32 reportStoreType, PCWSTR reportKey, PCWSTR destinationPath
DdqFreeDiagnosticRecordLocaleTags;Frees memory allocated for tag information referenced by HDIAGNOSTIC_EVENT_TAG_DESCRIPTION handle.;HDIAGNOSTIC_EVENT_TAG_DESCRIPTION hTagDescription
DdqFreeDiagnosticRecordPage;Frees memory allocated for the diagnostic record page referenced by HDIAGNOSTIC_RECORD handle.;HDIAGNOSTIC_RECORD hRecord
DdqFreeDiagnosticRecordProducerCategories;Frees memory allocated for set of categories and the text representation of the categories referenced by HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION handle.;HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION hCategoryDescription
DdqFreeDiagnosticRecordProducers;Frees memory allocated for the set of producers referenced by HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION handle.;HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION hProducerDescription
DdqFreeDiagnosticReport;Frees memory allocated for error reports referenced by HDIAGNOSTIC_REPORT_DATA handle.;HDIAGNOSTIC_REPORT hReport
DdqGetDiagnosticDataAccessLevelAllowed;Returns the highest available data access level for the API caller. This can be NoData, CurrentUserData or AllUserData.;DdqAccessLevel *accessLevel
DdqGetDiagnosticRecordAtIndex;Fetches diagnostic data record information at the specified index in the resource pointed to by the HDIAGNOSTIC_DATA_RECORD handle.;HDIAGNOSTIC_RECORD hRecord, UINT32 index, DIAGNOSTIC_DATA_RECORD *record
DdqGetDiagnosticRecordBinaryDistribution;Fetches binary name and associated estimated total upload of Diagnostic Data Events volume in bytes for top N noisiest binaries based on total estimated upload size, where N is the value passed in for topNBinaries.;HDIAGNOSTIC_DATA_QUERY_SESSION hSession, PCWSTR *producerNames, UINT32 producerNameCount, UINT32 topNBinaries, DIAGNOSTIC_DATA_EVENT_BINARY_STATS **binaryStats, UINT32 *statCount
DdqGetDiagnosticRecordCategoryAtIndex;Fetches a diagnostic record category at the specified index in the resource pointed to by the HDIAGNOSTIC_DATA_EVENT_CATEGORY_DESCRIPTION handle.;HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION hCategoryDescription, UINT32 index, DIAGNOSTIC_DATA_EVENT_CATEGORY_DESCRIPTION *categoryDescription
DdqGetDiagnosticRecordCategoryCount;Fetches the number (size) of diagnostic record categories in the resource pointed by the HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION handle.;HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION hCategoryDescription, UINT32 *categoryDescriptionCount
DdqGetDiagnosticRecordCount;Fetches number (size) of elements in the resource pointed to by the HDIAGNOSTIC_DATA_RECORD handle.;HDIAGNOSTIC_RECORD hRecord, UINT32 *recordCount
DdqGetDiagnosticRecordLocaleTagAtIndex;Fetches tag description at the specified index in the resource pointed to by the HDIAGNOSTIC_DATA_EVENT_TAG_DESCRIPTION handle.;HDIAGNOSTIC_EVENT_TAG_DESCRIPTION hTagDescription, UINT32 index, DIAGNOSTIC_DATA_EVENT_TAG_DESCRIPTION *tagDescription
DdqGetDiagnosticRecordLocaleTagCount;Fetches the number (size) of tags in the resource pointed to by the HDIAGNOSTIC_DATA_EVENT_TAG_DESCRIPTION handle.;HDIAGNOSTIC_EVENT_TAG_DESCRIPTION hTagDescription, UINT32 *tagDescriptionCount
DdqGetDiagnosticRecordPage;Fetches a page (batch) of filtered records. The filtering on records returned is performed internally using the input parameters DIAGNOSTIC_DATA_SEARCH_CRITERIA searchCriteria, pageRecordCount, offset and baseRowId.;HDIAGNOSTIC_DATA_QUERY_SESSION hSession, DIAGNOSTIC_DATA_SEARCH_CRITERIA * const searchCriteria, UINT32 offset, UINT32 pageRecordCount, INT64 baseRowId, HDIAGNOSTIC_RECORD *hRecord
DdqGetDiagnosticRecordPayload;Fetches the payload text for the event record specified by rowId.;HDIAGNOSTIC_DATA_QUERY_SESSION hSession, INT64 rowId, PCWSTR *payload
DdqGetDiagnosticRecordProducerAtIndex;Fetches the description of a producer at the specified index in the resource pointed to by the HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION handle.;HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION hProducerDescription, UINT32 index, DIAGNOSTIC_DATA_EVENT_PRODUCER_DESCRIPTION *producerDescription
DdqGetDiagnosticRecordProducerCategories;Producers and categories have a hierarchical relationship--that is, categories belong to producers. This function fetches the available Category IDs and text representation of categories for a given diagnostic Producer Name.;HDIAGNOSTIC_DATA_QUERY_SESSION hSession, PCWSTR producerName, HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION *hCategoryDescription
DdqGetDiagnosticRecordProducerCount;Fetches the number (size) of producers in the resource pointed to by the HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION.;HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION hProducerDescription, UINT32 *producerDescriptionCount
DdqGetDiagnosticRecordProducers;Fetches Diagnostic Data Producers available for a Diagnostic Data Query session.;HDIAGNOSTIC_DATA_QUERY_SESSION hSession, HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION *hProducerDescription
DdqGetDiagnosticRecordStats;Fetches the filtered event transcript Diagnostic Data record stats. The filtering on statistics returned is performed using the input parameter, DIAGNOSTIC_DATA_SEARCH_CRITERIA filter. The record state describes how many records matching the search criteria are available, and returns parameters used for further querying of data. One of the uses of this API is to check if there have been changes since the last time data was queried for. A change in the output parameters indicate a change in state of the event transcript record state.;HDIAGNOSTIC_DATA_QUERY_SESSION hSession, DIAGNOSTIC_DATA_SEARCH_CRITERIA const *searchCriteria, UINT32 *recordCount, INT64 *minRowId, INT64 *maxRowId
DdqGetDiagnosticRecordSummary;Fetches general statistics about the diagnostic data records, filterable by producer.;HDIAGNOSTIC_DATA_QUERY_SESSION hSession, const PCWSTR *producerNames, UINT32 producerNameCount, DIAGNOSTIC_DATA_GENERAL_STATS *generalStats
DdqGetDiagnosticRecordTagDistribution;Fetches Diagnostic Data Events per privacy tag event distribution statistics based on the specified producer names.;HDIAGNOSTIC_DATA_QUERY_SESSION hSession, PCWSTR *producerNames, UINT32 producerNameCount, DIAGNOSTIC_DATA_EVENT_TAG_STATS **tagStats, UINT32 *statCount
DdqGetDiagnosticReportAtIndex;Fetches an error report and its information at the specified index in the resource pointed to by the HDIAGNOSTIC_REPORT_DATA handle.;HDIAGNOSTIC_REPORT hReport, UINT32 index, DIAGNOSTIC_REPORT_DATA *report
DdqGetDiagnosticReportCount;Fetches the number (size) of error reports in the resource pointed to by HDIAGNOSTIC_REPORT_DATA handle.;HDIAGNOSTIC_REPORT hReport, UINT32 *reportCount
DdqGetDiagnosticReport;Fetches error reports uploaded or enqueued for upload from this PC via HDIAGNOSTIC_REPORT_DATA handle.;HDIAGNOSTIC_DATA_QUERY_SESSION hSession, UINT32 reportStoreType, HDIAGNOSTIC_REPORT *hReport
DdqGetDiagnosticReportStoreReportCount;Fetches the number (size) of reports stored in the requested store.;HDIAGNOSTIC_DATA_QUERY_SESSION hSession, UINT32 reportStoreType, UINT32 *reportCount
DdqGetSessionAccessLevel;Returns the data access level of the current Diagnostic Data Query session.;HDIAGNOSTIC_DATA_QUERY_SESSION hSession, DdqAccessLevel *accessLevel
DdqGetTranscriptConfiguration;Gets event transcript configuration, such as maximum storage size and hours of data history.;HDIAGNOSTIC_DATA_QUERY_SESSION hSession, DIAGNOSTIC_DATA_EVENT_TRANSCRIPT_CONFIGURATION *currentConfig
DdqIsDiagnosticRecordSampledIn;Fetches the sampled-in state of the device for an event.;HDIAGNOSTIC_DATA_QUERY_SESSION hSession, const GUID *providerGroup, const GUID *providerId, PCWSTR providerName, const UINT32 *eventId, PCWSTR eventName, const UINT32 *eventVersion, const UINT64 *eventKeywords, BOOL *isSampledIn
DdqSetTranscriptConfiguration;Sets event transcript configuration, such as maximum storage size and hours of data history. Note that setting the configuration will fail if the user is not elevated.;HDIAGNOSTIC_DATA_QUERY_SESSION hSession, const DIAGNOSTIC_DATA_EVENT_TRANSCRIPT_CONFIGURATION *desiredConfig
DeactivateActCtx;The DeactivateActCtx function deactivates the activation context corresponding to the specified cookie.;DWORD dwFlags, ULONG_PTR ulCookie
DeallocateNtmsMedia;The DeallocateNtmsMedia function deallocates the side associated with the specified logical media.;HANDLE hSession, LPNTMS_GUID lpMediaId, DWORD dwOptions
DebugActiveProcess;Enables a debugger to attach to an active process and debug it.;DWORD dwProcessId
DebugActiveProcessStop;Stops the debugger from debugging the specified process.;DWORD dwProcessId
DebugBreak;Causes a breakpoint exception to occur in the current process. This allows the calling thread to signal the debugger to handle the exception.;
DebugBreakProcess;Causes a breakpoint exception to occur in the specified process. This allows the calling thread to signal the debugger to handle the exception.;HANDLE Process
DebugSetProcessKillOnExit;Sets the action to be performed when the calling thread exits.;BOOL KillOnExit
Decode;Decodes an Abstract Syntax Notation One (ASN.1)-encoded alternate name extension and stores the resulting array of strings in the CertEncodeAltName object.;const BSTR strBinary
Decode;Decodes an Abstract Syntax Notation One (ASN.1)-encoded bit string and stores the resulting bit string in this object.;const BSTR strBinary
Decode;Decodes an Abstract Syntax Notation One (ASN.1)-encoded certificate revocation list (CRL) distribution information extension and stores the resulting array in the COM object.;const BSTR strBinary
Decode;Decodes an Abstract Syntax Notation One (ASN.1)-encoded date array and stores the resulting array of date values in the CertEncodeDateArray object.;const BSTR strBinary
Decode;Decodes an Abstract Syntax Notation One (ASN.1)-encoded Long array and stores the resulting array of Long values in the CertEncodeLongArray object.;const BSTR strBinary
Decode;Decodes an Abstract Syntax Notation One (ASN.1)-encoded string array and stores the resulting array of strings in the CertEncodeStringArray object.;const BSTR strBinary
Decode;Initializes the object from a Unicode-encoded distinguished name.;BSTR strEncodedName, EncodingType Encoding, X500NameFlags NameFlags
DecommissionNtmsMedia;The DecommissionNtmsMedia function moves a side from the Available state to the Decommissioned state.;HANDLE hSession, LPNTMS_GUID lpMediaId
Decompress;Takes a block of compressed information and decompresses it.;DECOMPRESSOR_HANDLE DecompressorHandle, LPCVOID CompressedData, SIZE_T CompressedDataSize, PVOID UncompressedBuffer, SIZE_T UncompressedBufferSize, PSIZE_T UncompressedDataSize
DecryptChallenge;Decrypts the challenge from the Certificate Management over CMS (CMC) response and creates a re-encrypted response to send to the CA.;EncodingType Encoding, BSTR *pstrEnvelopedPkcs7ReencryptedToCA
DecryptFileA;Decrypts an encrypted file or directory.;LPCSTR lpFileName, DWORD dwReserved
DecryptFileW;Decrypts an encrypted file or directory.;LPCWSTR lpFileName, DWORD dwReserved
DecryptMessage;Decrypts a message by using Digest.;PCtxtHandle phContext, PSecBufferDesc pMessage, unsigned long MessageSeqNo, unsigned long *pfQOP
DefDlgProcW;Calls the default dialog box window procedure to provide default processing for any window messages that a dialog box with a private window class does not process.;HWND hDlg, UINT Msg, WPARAM wParam, LPARAM lParam
DefDriverProc;Provides default processing for any messages not processed by an installable driver. This function is intended to be used only within the DriverProc function of an installable driver.;DWORD_PTR dwDriverIdentifier, HDRVR hdrvr, UINT uMsg, LPARAM lParam1, LPARAM lParam2
DeferWindowPos;Updates the specified multiple-window � position structure for the specified window.;HDWP hWinPosInfo, HWND hWnd, HWND hWndInsertAfter, int x, int y, int cx, int cy, UINT uFlags
DefFrameProcA;Provides default processing for any window messages that the window procedure of a multiple-document interface (MDI) frame window does not process.;HWND hWnd, HWND hWndMDIClient, UINT uMsg, WPARAM wParam, LPARAM lParam
DefFrameProcW;Provides default processing for any window messages that the window procedure of a multiple-document interface (MDI) frame window does not process.;HWND hWnd, HWND hWndMDIClient, UINT uMsg, WPARAM wParam, LPARAM lParam
DefineDosDeviceA;Defines, redefines, or deletes MS-DOS device names.;DWORD dwFlags, LPCSTR lpDeviceName, LPCSTR lpTargetPath
DefineDosDeviceW;Defines, redefines, or deletes MS-DOS device names.;DWORD dwFlags, LPCWSTR lpDeviceName, LPCWSTR lpTargetPath
DefMDIChildProcA;Provides default processing for any window message that the window procedure of a multiple-document interface (MDI) child window does not process.;HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam
DefMDIChildProcW;Provides default processing for any window message that the window procedure of a multiple-document interface (MDI) child window does not process.;HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam
DefRawInputProc;Verifies that the size of the RAWINPUTHEADER structure is correct.;PRAWINPUT *paRawInput, INT nInput, UINT cbSizeHeader
DefWindowProcA;Calls the default window procedure to provide default processing for any window messages that an application does not process.;HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam
DefWindowProcW;Calls the default window procedure to provide default processing for any window messages that an application does not process.;HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam
DegaussMonitor;Degausses a monitor.;HANDLE hMonitor
DeleteAce;Deletes an access control entry (ACE) from an access control list (ACL).;PACL pAcl, DWORD dwAceIndex
DeleteAllGPOLinks;The DeleteAllGPOLinks function deletes all GPO links for the specified site, domain, or organizational unit.;LPOLESTR lpContainer
DeleteAnycastIpAddressEntry;Deletes an existing anycast IP address entry on the local computer.;const MIB_ANYCASTIPADDRESS_ROW *Row
DeleteApplicationGroup;Removes the IAzApplicationGroup object with the specified name from the AzAuthorizationStore object.;BSTR bstrGroupName, VARIANT varReserved
DeleteApplicationGroup;Removes the IAzApplicationGroup object with the specified name from the IAzApplication object.;BSTR bstrGroupName, VARIANT varReserved
DeleteApplicationGroup;Removes the IAzApplicationGroup object with the specified name from the IAzScope object.;BSTR bstrGroupName, VARIANT varReserved
DeleteApplication;Removes the IAzApplication object with the specified name from the AzAuthorizationStore object.;BSTR bstrApplicationName, VARIANT varReserved
DeleteAppMember;Removes the specified IAzApplicationGroup object from the list of application groups that belong to the role.;BSTR bstrProp, VARIANT varReserved
DeleteAppMember;Removes the specified IAzApplicationGroup object from the list of application groups that belong to this application group.;BSTR bstrProp, VARIANT varReserved
DeleteAppNonMember;Removes the specified IAzApplicationGroup object from the list of application groups that are refused membership in this application group.;BSTR bstrProp, VARIANT varReserved
DeleteAtom;Decrements the reference count of a local string atom. If the atom's reference count is reduced to zero, DeleteAtom removes the string associated with the atom from the local atom table.;ATOM nAtom
DeleteBoundaryDescriptor;Deletes the specified boundary descriptor.;HANDLE BoundaryDescriptor
DeleteCAConfiguration;Removes a named certification authority (CA) configuration from the configuration set.;const BSTR bstrIdentifier
DeleteColorSpace;The DeleteColorSpace function removes and destroys a specified color space.;HCOLORSPACE hcs
DeleteCriticalSection;Releases all resources used by an unowned critical section object.;LPCRITICAL_SECTION lpCriticalSection
DeleteDC;The DeleteDC function deletes the specified device context (DC).;HDC hdc
DeleteDelegatedPolicyUserName;Removes the specified account name from the list of principals that act as delegated policy users.;BSTR bstrDelegatedPolicyUser, VARIANT varReserved
DeleteDelegatedPolicyUser;Removes the specified security identifier (SID) in text form from the list of principals that act as delegated policy users.;BSTR bstrDelegatedPolicyUser, VARIANT varReserved
DeleteDelegatedPolicyUser;The IAzApplication::DeleteDelegatedPolicyUser method removes the specified security identifier in text form from the list of principals that act as delegated policy users.;BSTR bstrDelegatedPolicyUser, VARIANT varReserved
Delete;Deletes the policy store currently in use by the AzAuthorizationStore object.;VARIANT varReserved
DeleteEnclave;Deletes the specified enclave.;LPVOID lpAddress
DeleteEnhMetaFile;The DeleteEnhMetaFile function deletes an enhanced-format metafile or an enhanced-format metafile handle.;HENHMETAFILE hmf
DeleteFiber;Deletes an existing fiber.;LPVOID lpFiber
DeleteFileA;Deletes an existing file.;LPCSTR lpFileName
DeleteFile;Deletes an existing file.;LPCTSTR lpFileName
DeleteFileTransactedA;Deletes an existing file as a transacted operation.;LPCSTR lpFileName, HANDLE hTransaction
DeleteFileTransactedW;Deletes an existing file as a transacted operation.;LPCWSTR lpFileName, HANDLE hTransaction
DeleteFileW;Deletes an existing file.;LPCWSTR lpFileName
DeleteGPOLink;The DeleteGPOLink function deletes the link between the specified GPO and the specified site, domain, or organizational unit.;LPOLESTR lpGPO, LPOLESTR lpContainer
DeleteIPAddress;The DeleteIPAddress function deletes an IP address previously added using AddIPAddress.;ULONG NTEContext
DeleteIpForwardEntry2;Deletes an IP route entry on the local computer.;const MIB_IPFORWARD_ROW2 *Row
DeleteIpForwardEntry;Deletes an existing route in the local computer's IPv4 routing table.;PMIB_IPFORWARDROW pRoute
DeleteIpNetEntry2;Deletes a neighbor IP address entry on the local computer.;const MIB_IPNET_ROW2 *Row
DeleteIpNetEntry;The DeleteIpNetEntry function deletes an ARP entry from the ARP table on the local computer.;PMIB_IPNETROW pArpEntry
DeleteMemberName;Removes the specified account name from the list of accounts that belong to the application group.;BSTR bstrProp, VARIANT varReserved
DeleteMemberName;Removes the specified account name from the list of accounts that belong to the role.;BSTR bstrProp, VARIANT varReserved
DeleteMember;Removes the specified security identifier (SID) in text form from the list of accounts that belong to the application group.;BSTR bstrProp, VARIANT varReserved
DeleteMember;Removes the specified security identifier (SID) in text form from the list of Windows accounts that belong to the role.;BSTR bstrProp, VARIANT varReserved
DeleteMenu;Deletes an item from the specified menu. If the menu item opens a menu or submenu, this function destroys the handle to the menu or submenu and frees the memory used by the menu or submenu.;HMENU hMenu, UINT uPosition, UINT uFlags
DeleteMetaFile;The DeleteMetaFile function deletes a Windows-format metafile or Windows-format metafile handle.;HMETAFILE hmf
DeleteNonMemberName;Removes the specified account name from the list of accounts that are refused membership in the application group.;BSTR bstrProp, VARIANT varReserved
DeleteNonMember;Removes the specified security identifier (SID) in text form from the list of accounts that are refused membership in the application group.;BSTR bstrProp, VARIANT varReserved
DeleteNtmsDrive;The DeleteNtmsDrive function deletes a drive from the RSM database. The drive must have a dwOperationalState of NTMS_NOT_PRESENT.;HANDLE hSession, LPNTMS_GUID lpDriveId
DeleteNtmsLibrary;The DeleteNtmsLibrary function deletes a library, and all the devices contained in the library, from the RSM database. All media in the library is moved to the offline library.;HANDLE hSession, LPNTMS_GUID lpLibraryId
DeleteNtmsMediaPool;The DeleteNtmsMediaPool function deletes the specified application media pool.;HANDLE hSession, LPNTMS_GUID lpPoolId
DeleteNtmsMedia;The DeleteNtmsMedia function deletes a physical piece of offline media from RSM by removing all references to the specified media from the database.;HANDLE hSession, LPNTMS_GUID lpMediaId
DeleteNtmsMediaType;The DeleteNtmsMediaType function deletes the specified media type relation from the specified library, provided that the library does not contain any physical media objects of the specified media type.;HANDLE hSession, LPNTMS_GUID lpMediaTypeId, LPNTMS_GUID lpLibId
DeleteNtmsRequests;The DeleteNtmsRequests function deletes a request or a list of requests from the RSM database.;HANDLE hSession, LPNTMS_GUID lpRequestId, DWORD dwType, DWORD dwCount
DeleteObject;The DeleteObject function deletes a logical pen, brush, font, bitmap, region, or palette, freeing all system resources associated with the object. After the object is deleted, the specified handle is no longer valid.;HGDIOBJ ho
DeleteOperation;Removes the IAzOperation object with the specified name from the IAzApplication object.;BSTR bstrOperationName, VARIANT varReserved
DeleteOperation;Removes the IAzOperation object with the specified name from the role.;BSTR bstrProp, VARIANT varReserved
DeleteOperation;Removes the IAzOperation object with the specified name from the task.;BSTR bstrOp, VARIANT varReserved
DeletePersistentTcpPortReservation;Deletes a persistent TCP port reservation for a consecutive block of TCP ports on the local computer.;USHORT StartPort, USHORT NumberOfPorts
DeletePersistentUdpPortReservation;Deletes a persistent TCP port reservation for a consecutive block of TCP ports on the local computer.;USHORT StartPort, USHORT NumberOfPorts
DeletePolicyAdministratorName;Removes the specified account name from the list of principals that act as policy administrators.;BSTR bstrAdmin, VARIANT varReserved
DeletePolicyAdministratorName;The DeletePolicyAdministratorName method of IAzScope removes the specified account name from the list of principals that act as policy administrators.;BSTR bstrAdmin, VARIANT varReserved
DeletePolicyAdministrator;Removes the specified security identifier (SID) in text form from the list of principals that act as policy administrators.;BSTR bstrAdmin, VARIANT varReserved
DeletePolicyAdministrator;The DeletePolicyAdministrator method of IAzApplication removes the specified security identifier in text form from the list of principals that act as policy administrators.;BSTR bstrAdmin, VARIANT varReserved
DeletePolicyAdministrator;The DeletePolicyAdministrator method of IAzScope removes the specified security identifier in text form from the list of principals that act as policy administrators.;BSTR bstrAdmin, VARIANT varReserved
DeletePolicyReaderName;Removes the specified account name from the list of principals that act as policy readers.;BSTR bstrReader, VARIANT varReserved
DeletePolicyReaderName;The DeletePolicyReaderName method of IAzScope removes the specified account name from the list of principals that act as policy readers.;BSTR bstrReader, VARIANT varReserved
DeletePolicyReader;Removes the specified security identifier (SID) in text form from the list of principals that act as policy readers.;BSTR bstrReader, VARIANT varReserved
DeletePolicyReader;The DeletePolicyReader method of IAzApplication removes the specified security identifier in text form from the list of principals that act as policy readers.;BSTR bstrReader, VARIANT varReserved
DeletePolicyReader;The DeletePolicyReader method of IAzScope removes the specified security identifier in text form from the list of principals that act as policy readers.;BSTR bstrReader, VARIANT varReserved
DeleteProcThreadAttributeList;Deletes the specified list of attributes for process and thread creation.;LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList
DeletePropertyItem;Removes the specified entity from the specified list.;LONG lPropId, VARIANT varProp, VARIANT varReserved
DeletePropertyItem;Removes the specified principal from the specified list of principals.;LONG lPropId, VARIANT varProp, VARIANT varReserved
DeleteProperty;Removes a named property from a property set.;const BSTR bstrPropName
DeleteProxyArpEntry;The DeleteProxyArpEntry function deletes the PARP entry on the local computer specified by the dwAddress and dwIfIndex parameters.;DWORD dwAddress, DWORD dwMask, DWORD dwIfIndex
Delete;Releases the handle of the cryptographic service provider (CSP) or the handle of the Cryptography API:_Next Generation (CNG) key storage provider (KSP) and deletes the key from disk or smart card.;
Delete;Removes the specified identity from the identity store or the specified properties from the identity.;LPCWSTR lpszUniqueID, const PROPVARIANT *pKeywordsToDelete
DeleteRequest;Delete any certificates or keys created for the request.;
DeleteRoleAssignment;Removes the specified IAzRoleAssignment object from the IAzApplication3 object.;BSTR bstrRoleAssignmentName
DeleteRoleAssignment;Removes the specified IAzRoleAssignment object from this scope.;BSTR bstrRoleAssignmentName
DeleteRoleDefinition;Removes the IAzRoleDefinition object with the specified name from this IAzRoleAssignment object.;BSTR bstrRoleDefinition
DeleteRoleDefinition;Removes the IAzRoleDefinition object with the specified name from this IAzRoleDefinition object.;BSTR bstrRoleDefinition
DeleteRoleDefinition;Removes the specified IAzRoleDefinition object from the IAzApplication3 object.;BSTR bstrRoleDefinitionName
DeleteRoleDefinition;Removes the specified IAzRoleDefinition object from this scope.;BSTR bstrRoleDefinitionName
DeleteRole;Removes the IAzRole object with the specified name from the IAzApplication object.;BSTR bstrRoleName, VARIANT varReserved
DeleteRole;Removes the IAzRole object with the specified name from the IAzScope object.;BSTR bstrRoleName, VARIANT varReserved
DeleteRow;The DeleteRow method deletes a row or set of rows from a database table. The caller specifies a database table and either a row ID or an ending date.;const BSTR strConfig, LONG Flags, DATE Date, LONG Table, LONG RowId, LONG *pcDeleted
DeleteScope2;Removes the specified IAzScope2 object from the IAzApplication3 object.;BSTR bstrScopeName
DeleteScope;Removes the IAzScope object with the specified name from the IAzApplication object.;BSTR bstrScopeName, VARIANT varReserved
DeleteSecurityContext;Deletes the local data structures associated with the specified security context initiated by a previous call to the InitializeSecurityContext (General) function or the AcceptSecurityContext (General) function.;PCtxtHandle phContext
DeleteSecurityPackageA;Deletes a security support provider from the list of providers supported by Microsoft Negotiate.;LPSTR pszPackageName
DeleteSecurityPackageW;Deletes a security support provider from the list of providers supported by Microsoft Negotiate.;LPWSTR pszPackageName
DeleteService;Marks the specified service for deletion from the service control manager database.;SC_HANDLE hService
DeleteSynchronizationBarrier;Deletes a synchronization barrier.;LPSYNCHRONIZATION_BARRIER lpBarrier
DeleteTask;Removes the IAzTask object with the specified name from the IAzApplication object.;BSTR bstrTaskName, VARIANT varReserved
DeleteTask;Removes the IAzTask object with the specified name from the IAzScope object.;BSTR bstrTaskName, VARIANT varReserved
DeleteTask;Removes the IAzTask object with the specified name from the role.;BSTR bstrProp, VARIANT varReserved
DeleteTask;Removes the IAzTask object with the specified name from the task.;BSTR bstrTask, VARIANT varReserved
Delete;The Delete method deletes the GPO.;
DeleteTimerQueue;Deletes a timer queue. Any pending timers in the queue are canceled and deleted.;HANDLE TimerQueue
DeleteUmsCompletionList;Deletes the specified user-mode scheduling (UMS) completion list. The list must be empty.;PUMS_COMPLETION_LIST UmsCompletionList
DeleteUmsThreadContext;Deletes the specified user-mode scheduling (UMS) thread context. The thread must be terminated.;PUMS_CONTEXT UmsThread
DeleteUnicastIpAddressEntry;Deletes an existing unicast IP address entry on the local computer.;const MIB_UNICASTIPADDRESS_ROW *Row
DeleteUrlCacheContainerA;Deletes a cache container (which contains cache entries) based on the specified name.;LPCSTR Name, DWORD dwOptions
DeleteUrlCacheContainerW;Deletes a cache container (which contains cache entries) based on the specified name.;LPCWSTR Name, DWORD dwOptions
DeleteUrlCacheEntryA;Removes the file associated with the source name from the cache, if the file exists.;LPCSTR lpszUrlName
DeleteUrlCacheEntry;Removes the file associated with the source name from the cache, if the file exists.;LPCSTR lpszUrlName
DeleteUrlCacheEntryW;Removes the file associated with the source name from the cache, if the file exists.;LPCWSTR lpszUrlName
DeleteUrlCacheGroup;Releases the specified GROUPID and any associated state in the cache index file.;GROUPID GroupId, DWORD dwFlags, LPVOID lpReserved
DeleteVolumeMountPointA;Deletes a drive letter or mounted folder.;LPCSTR lpszVolumeMountPoint
DeleteVolumeMountPointW;Deletes a drive letter or mounted folder.;LPCWSTR lpszVolumeMountPoint
DenyRequest;Denies a specified certificate request that is pending.;const BSTR strConfig, LONG RequestId
DequeueUmsCompletionListItems;Retrieves user-mode scheduling (UMS) worker threads from the specified UMS completion list.;PUMS_COMPLETION_LIST UmsCompletionList, DWORD WaitTimeOut, PUMS_CONTEXT *UmsThreadList
DeregisterEventSource;Closes the specified event log.;HANDLE hEventLog
DeregisterShellHookWindow;Unregisters a specified Shell window that is registered to receive Shell hook messages.;HWND hwnd
DeriveCapabilitySidsFromName;This function constructs two arrays of SIDs out of a capability name. One is an array group SID with NT Authority, and the other is an array of capability SIDs with AppAuthority.;LPCWSTR CapName, PSID **CapabilityGroupSids, DWORD *CapabilityGroupSidCount, PSID **CapabilitySids, DWORD *CapabilitySidCount
DescribePixelFormat;The DescribePixelFormat function obtains information about the pixel format identified by iPixelFormat of the device associated with hdc. The function sets the members of the PIXELFORMATDESCRIPTOR structure pointed to by ppfd with that pixel format data.;HDC hdc, int iPixelFormat, UINT nBytes, LPPIXELFORMATDESCRIPTOR ppfd
DestroyAcceleratorTable;Destroys an accelerator table.;HACCEL hAccel
DestroyAlternate;This function is obsolete and need not be implemented by custom application recognizers.;HRECOALT hrcalt
DestroyCaret;Destroys the caret's current shape, frees the caret from the window, and removes the caret from the screen.;
DestroyContext;Destroys a recognizer context.;HRECOCONTEXT hrc
DestroyCursor;Destroys a cursor and frees any memory the cursor occupied. Do not use this function to destroy a shared cursor.;HCURSOR hCursor
DestroyIcon;Destroys an icon and frees any memory the icon occupied.;HICON hIcon
DestroyMenu;Destroys the specified menu and frees any memory that the menu occupies.;HMENU hMenu
DestroyPhysicalMonitor;Closes a handle to a physical monitor.;HANDLE hMonitor
DestroyPhysicalMonitors;Closes an array of physical monitor handles.;DWORD dwPhysicalMonitorArraySize, LPPHYSICAL_MONITOR pPhysicalMonitorArray
DestroyPrivateObjectSecurity;Deletes a private object's security descriptor.;PSECURITY_DESCRIPTOR *ObjectDescriptor
DestroyRecognizer;Destroys a recognizer.;HRECOGNIZER hrec
DestroySyntheticPointerDevice;Destroys the specified pointer injection device.;HSYNTHETICPOINTERDEVICE device
DestroyThreadpoolEnvironment;Deletes the specified callback environment. Call this function when the callback environment is no longer needed for creating new thread pool objects.;PTP_CALLBACK_ENVIRON pcbe
DestroyVirtualSmartCard;Destroys the TPM virtual smart card that has the given instance ID.;LPCWSTR pszInstanceId, ITpmVirtualSmartCardManagerStatusCallback *pStatusCallback, BOOL *pfNeedReboot
DestroyWindow;Destroys the specified window.;HWND hWnd
DestroyWordList;Destroys the current word list.;HRECOWORDLIST hwl
DetectAutoProxyUrl;Attempts to determine the location of a WPAD autoproxy script.;PSTR pszAutoProxyUrl, DWORD cchAutoProxyUrl, DWORD dwDetectFlags
DeviceCapabilitiesA;The DeviceCapabilities function retrieves the capabilities of a printer driver.;LPCSTR pDevice, LPCSTR pPort, WORD fwCapability, LPSTR pOutput, const DEVMODEA *pDevMode
DeviceCapabilitiesW;The DeviceCapabilities function retrieves the capabilities of a printer driver.;LPCWSTR pDevice, LPCWSTR pPort, WORD fwCapability, LPWSTR pOutput, const DEVMODEW *pDevMode
DialogBoxA;Creates a modal dialog box from a dialog box template resource. DialogBox does not return control until the specified callback function terminates the modal dialog box by calling the EndDialog function.;hInstance, lpTemplate, hWndParent, lpDialogFunc
DialogBoxIndirectA;Creates a modal dialog box from a dialog box template in memory. DialogBoxIndirect does not return control until the specified callback function terminates the modal dialog box by calling the EndDialog function.;hInstance, lpTemplate, hWndParent, lpDialogFunc
DialogBoxIndirectParamA;Creates a modal dialog box from a dialog box template in memory.;HINSTANCE hInstance, LPCDLGTEMPLATEA hDialogTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam
DialogBoxIndirectParamW;Creates a modal dialog box from a dialog box template in memory.;HINSTANCE hInstance, LPCDLGTEMPLATEW hDialogTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam
DialogBoxIndirectW;Creates a modal dialog box from a dialog box template in memory. DialogBoxIndirect does not return control until the specified callback function terminates the modal dialog box by calling the EndDialog function.;hInstance, lpTemplate, hWndParent, lpDialogFunc
DialogBoxParamA;Creates a modal dialog box from a dialog box template resource.;HINSTANCE hInstance, LPCSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam
DialogBoxParamW;Creates a modal dialog box from a dialog box template resource.;HINSTANCE hInstance, LPCWSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam
DialogBoxW;Creates a modal dialog box from a dialog box template resource. DialogBox does not return control until the specified callback function terminates the modal dialog box by calling the EndDialog function.;hInstance, lpTemplate, hWndParent, lpDialogFunc
DisableMediaSense;The DisableMediaSense function disables the media sensing capability of the TCP/IP stack on a local computer.;HANDLE *pHandle, OVERLAPPED *pOverLapped
DisableNtmsObject;The DisableNtmsObject function disables the specified RSM object.;HANDLE hSession, DWORD dwType, LPNTMS_GUID lpObjectId
DisableProcessWindowsGhosting;Disables the window ghosting feature for the calling GUI process. Window ghosting is a Windows Manager feature that lets the user minimize, move, or close the main window of an application that is not responding.;
DisableThreadLibraryCalls;Disables the DLL_THREAD_ATTACH and DLL_THREAD_DETACH notifications for the specified dynamic-link library (DLL).;HMODULE hLibModule
DisableThreadProfiling;Disables thread profiling.;HANDLE PerformanceDataHandle
DisassociateCurrentThreadFromCallback;Removes the association between the currently executing callback function and the object that initiated the callback. The current thread will no longer count as executing a callback on behalf of the object.;PTP_CALLBACK_INSTANCE pci
DisassociateIdentity;Disassociates the specified identity from a local user account.;HWND hwndParent, LPCWSTR lpszUniqueID
DiscardVirtualMemory;Discards the memory contents of a range of memory pages, without decommitting the memory. The contents of discarded memory is undefined and must be rewritten by the application.;PVOID VirtualAddress, SIZE_T Size
DisconnectIdentity;Disconnects an online identity from the current domain user.;
DisconnectNamedPipe;Disconnects the server end of a named pipe instance from a client process.;HANDLE hNamedPipe
DismountNtmsDrive;The DismountNtmsDrive function queues a command to move the media in the specified drive to its storage slot. This function should be paired with the MountNtmsMedia function.;HANDLE hSession, LPNTMS_GUID lpDriveId
DismountNtmsMedia;The DismountNtmsMedia function queues a command to move the specified media in a drive to its storage. This function should be paired with the MountNtmsMedia function.;HANDLE hSession, LPNTMS_GUID lpMediaId, DWORD dwCount, DWORD dwOptions
DispatchMessageA;Dispatches a message to a window procedure. It is typically used to dispatch a message retrieved by the GetMessage function.;const MSG *lpMsg
DispatchMessage;Dispatches a message to a window procedure. It is typically used to dispatch a message retrieved by the GetMessage function.;const MSG *lpMsg
DispatchMessageW;Dispatches a message to a window procedure. It is typically used to dispatch a message retrieved by the GetMessage function.;const MSG *lpMsg
DisplayConfigGetDeviceInfo;The DisplayConfigGetDeviceInfo function retrieves display configuration information about the device.;DISPLAYCONFIG_DEVICE_INFO_HEADER *requestPacket
DisplayConfigSetDeviceInfo;The DisplayConfigSetDeviceInfo function sets the properties of a target.;DISPLAYCONFIG_DEVICE_INFO_HEADER *setPacket
DlgDirListA;Replaces the contents of a list box with the names of the subdirectories and files in a specified directory. You can filter the list of names by specifying a set of file attributes. The list can optionally include mapped drives.;HWND hDlg, LPSTR lpPathSpec, int nIDListBox, int nIDStaticPath, UINT uFileType
DlgDirListComboBoxA;Replaces the contents of a combo box with the names of the subdirectories and files in a specified directory. You can filter the list of names by specifying a set of file attributes. The list of names can include mapped drive letters.;HWND hDlg, LPSTR lpPathSpec, int nIDComboBox, int nIDStaticPath, UINT uFiletype
DlgDirListComboBoxW;Replaces the contents of a combo box with the names of the subdirectories and files in a specified directory. You can filter the list of names by specifying a set of file attributes. The list of names can include mapped drive letters.;HWND hDlg, LPWSTR lpPathSpec, int nIDComboBox, int nIDStaticPath, UINT uFiletype
DlgDirListW;Replaces the contents of a list box with the names of the subdirectories and files in a specified directory. You can filter the list of names by specifying a set of file attributes. The list can optionally include mapped drives.;HWND hDlg, LPWSTR lpPathSpec, int nIDListBox, int nIDStaticPath, UINT uFileType
DlgDirSelectComboBoxExA;Retrieves the current selection from a combo box filled by using the DlgDirListComboBox function. The selection is interpreted as a drive letter, a file, or a directory name.;HWND hwndDlg, LPSTR lpString, int cchOut, int idComboBox
DlgDirSelectComboBoxExW;Retrieves the current selection from a combo box filled by using the DlgDirListComboBox function. The selection is interpreted as a drive letter, a file, or a directory name.;HWND hwndDlg, LPWSTR lpString, int cchOut, int idComboBox
DlgDirSelectExA;Retrieves the current selection from a single-selection list box. It assumes that the list box has been filled by the DlgDirList function and that the selection is a drive letter, filename, or directory name.;HWND hwndDlg, LPSTR lpString, int chCount, int idListBox
DlgDirSelectExW;Retrieves the current selection from a single-selection list box. It assumes that the list box has been filled by the DlgDirList function and that the selection is a drive letter, filename, or directory name.;HWND hwndDlg, LPWSTR lpString, int chCount, int idListBox
DllCanUnloadNow;Determines whether the DLL that implements this function is in use. If not, the caller can unload the DLL from memory.;
DllGetClassObject;Retrieves the class object from a DLL object handler or object application.;REFCLSID rclsid, REFIID riid, LPVOID *ppv
DllInstall;Handles installation and setup for a DLL.;BOOL bInstall, PCWSTR pszCmdLine
DnsHostnameToComputerNameA;Converts a DNS-style host name to a NetBIOS-style computer name.;LPCSTR Hostname, LPSTR ComputerName, LPDWORD nSize
DnsHostnameToComputerNameW;Converts a DNS-style host name to a NetBIOS-style computer name.;LPCWSTR Hostname, LPWSTR ComputerName, LPDWORD nSize
DoEnvironmentSubstA;Parses an input string that contains references to one or more environment variables and replaces them with their fully expanded values.;LPSTR pszSrc, UINT cchSrc
DoEnvironmentSubstW;Parses an input string that contains references to one or more environment variables and replaces them with their fully expanded values.;LPWSTR pszSrc, UINT cchSrc
DosDateTimeToFileTime;Converts MS-DOS date and time values to a file time.;WORD wFatDate, WORD wFatTime, LPFILETIME lpFileTime
DPtoLP;The DPtoLP function converts device coordinates into logical coordinates. The conversion depends on the mapping mode of the device context, the settings of the origins and extents for the window and viewport, and the world transformation.;HDC hdc, LPPOINT lppt, int c
DragAcceptFiles;Registers whether a window accepts dropped files.;HWND hWnd, BOOL fAccept
DragDetect;Captures the mouse and tracks its movement until the user releases the left button, presses the ESC key, or moves the mouse outside the drag rectangle around the specified point.;HWND hwnd, POINT pt
DragFinish;Releases memory that the system allocated for use in transferring file names to the application.;HDROP hDrop
DragQueryFileA;Retrieves the names of dropped files that result from a successful drag-and-drop operation.;HDROP hDrop, UINT iFile, LPSTR lpszFile, UINT cch
DragQueryFileW;Retrieves the names of dropped files that result from a successful drag-and-drop operation.;HDROP hDrop, UINT iFile, LPWSTR lpszFile, UINT cch
DragQueryPoint;Retrieves the position of the mouse pointer at the time a file was dropped during a drag-and-drop operation.;HDROP hDrop, POINT *ppt
DrawAnimatedRects;Animates the caption of a window to indicate the opening of an icon or the minimizing or maximizing of a window.;HWND hwnd, int idAni, const RECT *lprcFrom, const RECT *lprcTo
DrawCaption;The DrawCaption function draws a window caption.;HWND hwnd, HDC hdc, const RECT *lprect, UINT flags
DrawEdge;The DrawEdge function draws one or more edges of rectangle.;HDC hdc, LPRECT qrc, UINT edge, UINT grfFlags
DrawEscape;The DrawEscape function provides drawing capabilities of the specified video display that are not directly available through the graphics device interface (GDI).;HDC hdc, int iEscape, int cjIn, LPCSTR lpIn
DrawFocusRect;The DrawFocusRect function draws a rectangle in the style used to indicate that the rectangle has the focus.;HDC hDC, const RECT *lprc
DrawFrameControl;The DrawFrameControl function draws a frame control of the specified type and style.;HDC , LPRECT , UINT , UINT
DrawIcon;Draws an icon or cursor into the specified device context.;HDC hDC, int X, int Y, HICON hIcon
DrawIconEx;Draws an icon or cursor into the specified device context, performing the specified raster operations, and stretching or compressing the icon or cursor as specified.;HDC hdc, int xLeft, int yTop, HICON hIcon, int cxWidth, int cyWidth, UINT istepIfAniCur, HBRUSH hbrFlickerFreeDraw, UINT diFlags
DrawMenuBar;Redraws the menu bar of the specified window. If the menu bar changes after the system has created the window, this function must be called to draw the changed menu bar.;HWND hWnd
DrawStateA;The DrawState function displays an image and applies a visual effect to indicate a state, such as a disabled or default state.;HDC hdc, HBRUSH hbrFore, DRAWSTATEPROC qfnCallBack, LPARAM lData, WPARAM wData, int x, int y, int cx, int cy, UINT uFlags
DrawStateW;The DrawState function displays an image and applies a visual effect to indicate a state, such as a disabled or default state.;HDC hdc, HBRUSH hbrFore, DRAWSTATEPROC qfnCallBack, LPARAM lData, WPARAM wData, int x, int y, int cx, int cy, UINT uFlags
DrawTextA;The DrawText function draws formatted text in the specified rectangle. It formats the text according to the specified method (expanding tabs, justifying characters, breaking lines, and so forth).;HDC hdc, LPCSTR lpchText, int cchText, LPRECT lprc, UINT format
DrawTextExA;The DrawTextEx function draws formatted text in the specified rectangle.;HDC hdc, LPSTR lpchText, int cchText, LPRECT lprc, UINT format, LPDRAWTEXTPARAMS lpdtp
DrawTextExW;The DrawTextEx function draws formatted text in the specified rectangle.;HDC hdc, LPWSTR lpchText, int cchText, LPRECT lprc, UINT format, LPDRAWTEXTPARAMS lpdtp
DrawText;The DrawText function draws formatted text in the specified rectangle. It formats the text according to the specified method (expanding tabs, justifying characters, breaking lines, and so forth).;HDC hdc, LPCTSTR lpchText, int cchText, LPRECT lprc, UINT format
DrawTextW;The DrawText function draws formatted text in the specified rectangle. It formats the text according to the specified method (expanding tabs, justifying characters, breaking lines, and so forth).;HDC hdc, LPCWSTR lpchText, int cchText, LPRECT lprc, UINT format
DriverCallback;Calls a callback function, sends a message to a window, or unblocks a thread. The action depends on the value of the notification flag. This function is intended to be used only within the DriverProc function of an installable driver.;DWORD_PTR dwCallback, DWORD dwFlags, HDRVR hDevice, DWORD dwMsg, DWORD_PTR dwUser, DWORD_PTR dwParam1, DWORD_PTR dwParam2
DrvDefDriverProc;Provides default processing for any messages not processed by an installable driver. This function is intended to be used only within the DriverProc function of an installable driver.;DWORD dwDriverIdentifier, HDRVR hdrvr, UINT uMsg, LPARAM lParam1, LPARAM lParam2
DrvGetModuleHandle;Retrieves the instance handle of the module that contains the installable driver. This function is provided for compatibility with previous versions of Windows.;HDRVR hDriver
DSCreateISecurityInfoObject;Creates an instance of the ISecurityInformation interface associated with the specified directory service (DS) object.;LPCWSTR pwszObjectPath, LPCWSTR pwszObjectClass, DWORD dwFlags, LPSECURITYINFO *ppSI, PFNREADOBJECTSECURITY pfnReadSD, PFNWRITEOBJECTSECURITY pfnWriteSD, LPARAM lpContext
DSCreateISecurityInfoObjectEx;Creates an instance of the ISecurityInformation interface associated with the specified directory service (DS) object on the specified server.;LPCWSTR pwszObjectPath, LPCWSTR pwszObjectClass, LPCWSTR pwszServer, LPCWSTR pwszUserName, LPCWSTR pwszPassword, DWORD dwFlags, LPSECURITYINFO *ppSI, PFNREADOBJECTSECURITY pfnReadSD, PFNWRITEOBJECTSECURITY pfnWriteSD, LPARAM lpContext
DSCreateSecurityPage;Creates a security property page for an Active Directory object.;LPCWSTR pwszObjectPath, LPCWSTR pwszObjectClass, DWORD dwFlags, HPROPSHEETPAGE *phPage, PFNREADOBJECTSECURITY pfnReadSD, PFNWRITEOBJECTSECURITY pfnWriteSD, LPARAM lpContext
DSEditSecurity;Displays a modal dialog box for editing security on a Directory Services (DS) object.;HWND hwndOwner, LPCWSTR pwszObjectPath, LPCWSTR pwszObjectClass, DWORD dwFlags, LPCWSTR pwszCaption, PFNREADOBJECTSECURITY pfnReadSD, PFNWRITEOBJECTSECURITY pfnWriteSD, LPARAM lpContext
DuplicateIcon;Creates a duplicate of a specified icon.;HINSTANCE hInst, HICON hIcon
DuplicateToken;Creates a new access token that duplicates one already in existence.;HANDLE ExistingTokenHandle, SECURITY_IMPERSONATION_LEVEL ImpersonationLevel, PHANDLE DuplicateTokenHandle
DuplicateTokenEx;Creates a new access token that duplicates an existing token. This function can create either a primary token or an impersonation token.;HANDLE hExistingToken, DWORD dwDesiredAccess, LPSECURITY_ATTRIBUTES lpTokenAttributes, SECURITY_IMPERSONATION_LEVEL ImpersonationLevel, TOKEN_TYPE TokenType, PHANDLE phNewToken
DwmAttachMilContent;This function is not implemented.;HWND hwnd
DwmDefWindowProc;Default window procedure for Desktop Window Manager (DWM) hit testing within the non-client area.;HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam, LRESULT *plResult
DwmDetachMilContent;This function is not implemented.;HWND hwnd
DwmEnableBlurBehindWindow;Enables the blur effect on a specified window.;HWND hWnd, const DWM_BLURBEHIND *pBlurBehind
DwmEnableComposition;Enables or disables Desktop Window Manager (DWM) composition.;UINT uCompositionAction
DwmEnableMMCSS;Notifies the Desktop Window Manager (DWM) to opt in to or out of Multimedia Class Schedule Service (MMCSS) scheduling while the calling process is alive.;BOOL fEnableMMCSS
DwmExtendFrameIntoClientArea;Extends the window frame into the client area.;HWND hWnd, const MARGINS *pMarInset
DwmFlush;Issues a flush call that blocks the caller until the next present, when all of the Microsoft DirectX surface updates that are currently outstanding have been made. This compensates for very complex scenes or calling processes with very low priority.;
DwmGetColorizationColor;Retrieves the current color used for Desktop Window Manager (DWM) glass composition.;DWORD *pcrColorization, BOOL *pfOpaqueBlend
DwmGetCompositionTimingInfo;Retrieves the current composition timing information for a specified window.;HWND hwnd, DWM_TIMING_INFO *pTimingInfo
DwmGetGraphicsStreamClient;This function is not implemented.;UINT uIndex, UUID *pClientUuid
DwmGetGraphicsStreamTransformHint;This function is not implemented.;UINT uIndex, MilMatrix3x2D *pTransform
DwmGetTransportAttributes;Retrieves transport attributes.;BOOL *pfIsRemoting, BOOL *pfIsConnected, DWORD *pDwGeneration
DwmGetUnmetTabRequirements;Note  This function is publically available, but nonfunctional, for Windows 10, version 1803.Checks the requirements needed to get tabs in the application title bar for the specified window.;HWND appWindow, DWM_TAB_WINDOW_REQUIREMENTS *value
DwmGetWindowAttribute;Retrieves the current value of a specified Desktop Window Manager (DWM) attribute applied to a window.;HWND hwnd, DWORD dwAttribute, PVOID pvAttribute, DWORD cbAttribute
DwmInvalidateIconicBitmaps;Called by an application to indicate that all previously provided iconic bitmaps from a window, both thumbnails and peek representations, should be refreshed.;HWND hwnd
DwmIsCompositionEnabled;Obtains a value that indicates whether Desktop Window Manager (DWM) composition is enabled. Applications on machines running Windows 7 or earlier can listen for composition state changes by handling the WM_DWMCOMPOSITIONCHANGED notification.;BOOL *pfEnabled
DwmModifyPreviousDxFrameDuration;Changes the number of monitor refreshes through which the previous frame will be displayed. DwmModifyPreviousDxFrameDuration is no longer supported. Starting with Windows 8.1, calls to DwmModifyPreviousDxFrameDuration always return E_NOTIMPL.;HWND hwnd, INT cRefreshes, BOOL fRelative
DwmQueryThumbnailSourceSize;Retrieves the source size of the Desktop Window Manager (DWM) thumbnail.;HTHUMBNAIL hThumbnail, PSIZE pSize
DwmRegisterThumbnail;Creates a Desktop Window Manager (DWM) thumbnail relationship between the destination and source windows.;HWND hwndDestination, HWND hwndSource, PHTHUMBNAIL phThumbnailId
DwmRenderGesture;Notifies Desktop Window Manager (DWM) that a touch contact has been recognized as a gesture, and that DWM should draw feedback for that gesture.;GESTURE_TYPE gt, UINT cContacts, const DWORD *pdwPointerID, const POINT *pPoints
DwmSetDxFrameDuration;Sets the number of monitor refreshes through which to display the presented frame. DwmSetDxFrameDuration is no longer supported. Starting with Windows 8.1, calls to DwmSetDxFrameDuration always return E_NOTIMPL.;HWND hwnd, INT cRefreshes
DwmSetIconicLivePreviewBitmap;Sets a static, iconic bitmap to display a live preview (also known as a Peek preview) of a window or tab. The taskbar can use this bitmap to show a full-sized preview of a window or tab.;HWND hwnd, HBITMAP hbmp, POINT *pptClient, DWORD dwSITFlags
DwmSetIconicThumbnail;Sets a static, iconic bitmap on a window or tab to use as a thumbnail representation. The taskbar can use this bitmap as a thumbnail switch target for the window or tab.;HWND hwnd, HBITMAP hbmp, DWORD dwSITFlags
DwmSetPresentParameters;Sets the present parameters for frame composition. DwmSetPresentParameters is no longer supported. Starting with Windows 8.1, calls to DwmSetPresentParameters always return E_NOTIMPL.;HWND hwnd, DWM_PRESENT_PARAMETERS *pPresentParams
DwmSetWindowAttribute;Sets the value of Desktop Window Manager (DWM) non-client rendering attributes for a window.;HWND hwnd, DWORD dwAttribute, LPCVOID pvAttribute, DWORD cbAttribute
DwmShowContact;Called by an app or framework to specify the visual feedback type to draw in response to a particular touch or pen contact.;DWORD dwPointerID, DWM_SHOWCONTACT eShowContact
DwmTetherContact;Enables the graphical feedback of touch and drag interactions to the user.;DWORD dwPointerID, BOOL fEnable, POINT ptTether
DwmTransitionOwnedWindow;Coordinates the animations of tool windows with the Desktop Window Manager (DWM).;HWND hwnd, DWMTRANSITION_OWNEDWINDOW_TARGET target
DwmUnregisterThumbnail;Removes a Desktop Window Manager (DWM) thumbnail relationship created by the DwmRegisterThumbnail function.;HTHUMBNAIL hThumbnailId
DwmUpdateThumbnailProperties;Updates the properties for a Desktop Window Manager (DWM) thumbnail.;HTHUMBNAIL hThumbnailId, const DWM_THUMBNAIL_PROPERTIES *ptnProperties
DXVA2CreateDirect3DDeviceManager9;Creates an instance of the Direct3D Device Manager.;UINT *pResetToken, IDirect3DDeviceManager9 **ppDeviceManager
DXVA2CreateVideoService;Creates a DirectX Video Acceleration (DXVA) services object.;IDirect3DDevice9 *pDD, REFIID riid, void **ppService
DXVA2_Fixed32OpaqueAlpha;Returns a DXVA2_Fixed32 structure that contains an opaque alpha value.;
DXVA2_Fixed32TransparentAlpha;Returns a DXVA2_Fixed32 structure that contains a transparent alpha value.;
DXVA2FixedToFloat;Converts a DXVA2_Fixed32 value to a floating-point number.;const DXVA2_Fixed32 _fixed_
DXVA2FloatToFixed;Converts a floating-point number to a DXVA2_Fixed32 value.;const float _float_
EapHostPeerBeginSession;Starts an EAP authentication session.;DWORD dwFlags, EAP_METHOD_TYPE eapType, const EapAttributes * const pAttributeArray, HANDLE hTokenImpersonateUser, DWORD dwSizeofConnectionData, const BYTE * const pConnectionData, DWORD dwSizeofUserData, const BYTE * const pUserData, DWORD dwMaxSendPacketSize, const GUID * const pConnectionId, NotificationHandler func, void *pContextData, EAP_SESSIONID *pSessionId, EAP_ERROR **ppEapError
EapHostPeerClearConnection;Clears the authentication session connection.;GUID *pConnectionId, EAP_ERROR **ppEapError
EapHostPeerEndSession;Terminates the current EAP authentication session between EAPHost and the calling supplicant, and clears data stored for the session.;EAP_SESSIONID sessionHandle, EAP_ERROR **ppEapError
EapHostPeerFreeEapError;Frees EAP_ERROR structures returned by EAPHost run-time APIs.;EAP_ERROR *pEapError
EapHostPeerFreeRuntimeMemory;Releases the memory space used during run-time.;BYTE *pData
EapHostPeerGetAuthStatus;Obtains the supplicant's current EAP authentication status from EAPHost.;EAP_SESSIONID sessionHandle, EapHostPeerAuthParams authParam, DWORD *pcbAuthData, BYTE **ppAuthData, EAP_ERROR **ppEapError
EapHostPeerGetDataToUnplumbCredentials;Returns the Connection Id,User Impersonation Token and Eaphost Process Id used by EAPHost to save the credentials for SSO. This data is needed to unplumb previously plumbed credentials.;GUID *pConnectionIdThatLastSavedCreds, __int3264 *phCredentialImpersonationToken, EAP_SESSIONID sessionHandle, EAP_ERROR **ppEapError, BOOL *fSaveToCredMan
EapHostPeerGetIdentity;This function is called by tunnel methods to request identity information from the inner methods. This function returns the identity and user credential information.;DWORD dwVersion, DWORD dwFlags, EAP_METHOD_TYPE eapMethodType, DWORD dwSizeofConnectionData, const BYTE *pConnectionData, DWORD dwSizeofUserData, const BYTE *pUserData, HANDLE hTokenImpersonateUser, BOOL *pfInvokeUI, DWORD *pdwSizeOfUserDataOut, BYTE **ppUserDataOut, LPWSTR *ppwszIdentity, EAP_ERROR **ppEapError, BYTE **ppvReserved
EapHostPeerGetResponseAttributes;Obtains an array of EAP authentication attributes from EAPHost.;EAP_SESSIONID sessionHandle, EapAttributes *pAttribs, EAP_ERROR **ppEapError
EapHostPeerGetResult;Obtains the authentication result for the specified EAP authentication session.;EAP_SESSIONID sessionHandle, EapHostPeerMethodResultReason reason, EapHostPeerMethodResult *ppResult, EAP_ERROR **ppEapError
EapHostPeerGetSendPacket;Is called by the supplicant when the supplicant needs to obtains a packet from EAPHost to send to the authenticator.;EAP_SESSIONID sessionHandle, DWORD *pcbSendPacket, BYTE **ppSendPacket, EAP_ERROR **ppEapError
EapHostPeerGetUIContext;Obtains the user interface context for the supplicant from EAPHost if the UI is to be raised.;EAP_SESSIONID sessionHandle, DWORD *pdwSizeOfUIContextData, BYTE **ppUIContextData, EAP_ERROR **ppEapError
EapHostPeerInitialize;Initializes an EAPHost authentication session.;
EapHostPeerProcessReceivedPacket;Is called by the supplicant every time the supplicant receives a packet that EAPHost needs to process.;EAP_SESSIONID sessionHandle, DWORD cbReceivePacket, const BYTE * const pReceivePacket, EapHostPeerResponseAction *pEapOutput, EAP_ERROR **ppEapError
EapHostPeerSetResponseAttributes;Provides updated EAP authentication attributes to EAPHost.;EAP_SESSIONID sessionHandle, const EapAttributes * const pAttribs, EapHostPeerResponseAction *pEapOutput, EAP_ERROR **ppEapError
EapHostPeerSetUIContext;Provides a new or updated user interface context to the EAP peer method loaded on EAPHost after the UI has been raised.;EAP_SESSIONID sessionHandle, DWORD dwSizeOfUIContextData, const BYTE * const pUIContextData, EapHostPeerResponseAction *pEapOutput, EAP_ERROR **ppEapError
EapHostPeerUninitialize;Uninitializes all EAPHost authentication sessions.;
EapPeerBeginSession;Starts an EAP authentication session on the peer EAPHost using the EAP method.;DWORD dwFlags, const EapAttributes * const pAttributeArray, HANDLE hTokenImpersonateUser, DWORD dwSizeofConnectionData, BYTE *pConnectionData, DWORD dwSizeofUserData, BYTE *pUserData, DWORD dwMaxSendPacketSize, EAP_SESSION_HANDLE *pSessionHandle, EAP_ERROR **ppEapError
EapPeerConfigBlob2Xml;Converts the configuration BLOB to XML.;DWORD dwFlags, EAP_METHOD_TYPE eapMethodType, const BYTE *pConfigIn, DWORD dwSizeOfConfigIn, IXMLDOMDocument2 **ppConfigDoc, EAP_ERROR **ppEapError
EapPeerConfigXml2Blob;Converts XML into the configuration BLOB.;DWORD dwFlags, EAP_METHOD_TYPE eapMethodType, IXMLDOMDocument2 *pConfigDoc, BYTE **ppConfigOut, DWORD *pdwSizeOfConfigOut, EAP_ERROR **ppEapError
EapPeerCredentialsXml2Blob;Converts XML into the configuration BLOB.;DWORD dwFlags, EAP_METHOD_TYPE eapMethodType, IXMLDOMDocument2 *pCredentialsDoc, const BYTE *pConfigIn, DWORD dwSizeOfConfigIn, BYTE **ppCredentialsOut, DWORD *pdwSizeOfCredentialsOut, EAP_ERROR **ppEapError
EapPeerEndSession;Ends an EAP authentication session for the EAP method.;EAP_SESSION_HANDLE sessionHandle, EAP_ERROR **ppEapError
EapPeerFreeErrorMemory;Releases error-specific memory allocated by the EAP peer method.;EAP_ERROR *pEapError
EapPeerFreeMemory;Releases all memory associated with an opaque user interface context data buffer.;void *pUIContextData
EapPeerGetConfigBlobAndUserBlob;Allows EAP method developers to provide the various connection properties and user properties supported by the method. EAPHost invokes this function to create the connection property and user property of the EAP method.;DWORD dwFlags, EAP_METHOD_TYPE eapMethodType, EapCredential eapCredential, DWORD *pdwConfigBlobSize, BYTE **ppConfigBlob, DWORD *pdwUserBlobSize, BYTE **ppUserBlob, EAP_ERROR **ppEapError
EapPeerGetIdentity;Returns the user data and user identity after being called by EAPHost.;DWORD dwFlags, DWORD dwSizeofConnectionData, const BYTE *pConnectionData, DWORD dwSizeofUserData, const BYTE *pUserData, HANDLE hTokenImpersonateUser, BOOL *pfInvokeUI, DWORD *pdwSizeOfUserDataOut, BYTE **ppUserDataOut, LPWSTR *ppwszIdentity, EAP_ERROR **ppEapError
EapPeerGetInfo;Obtains a set of function pointers for an implementation of the EAP peer method EapPeerGetInfo currently loaded on the EAPHost service.;EAP_TYPE *pEapType, EAP_PEER_METHOD_ROUTINES *pEapInfo, EAP_ERROR **ppEapError
EapPeerGetMethodProperties;EAP method-specific function that retrieves the properties of an EAP method given the connection and user data.;DWORD dwVersion, DWORD dwFlags, EAP_METHOD_TYPE eapMethodType, HANDLE hUserImpersonationToken, DWORD dwSizeOfConnectionDataIn, BYTE *pConnectionDataIn, DWORD dwSizeOfUserDataIn, BYTE *pUserDataIn, EAP_METHOD_PROPERTY_ARRAY *pMethodPropertyArray, EAP_ERROR **ppEapError
EapPeerGetResponseAttributes;Obtains an array of EAP response attributes from the EAP method.;EAP_SESSION_HANDLE sessionHandle, EapAttributes *pAttribs, EAP_ERROR **ppEapError
EapPeerGetResponsePacket;Obtains a response packet from the EAP method.;EAP_SESSION_HANDLE sessionHandle, DWORD *pcbSendPacket, EapPacket *pSendPacket, EAP_ERROR **ppEapError
EapPeerGetResult;Obtains the result of an authentication session from the EAP method.;EAP_SESSION_HANDLE sessionHandle, EapPeerMethodResultReason reason, EapPeerMethodResult *ppResult, EAP_ERROR **ppEapError
EapPeerGetUIContext;Obtains the user interface context from the EAP method.;EAP_SESSION_HANDLE sessionHandle, DWORD *pdwSizeOfUIContextData, BYTE **ppUIContextData, EAP_ERROR **ppEapError
EapPeerInitialize;Initializes an EAP peer method for EAPHost.;EAP_ERROR **ppEapError
EapPeerInvokeConfigUI;Raises the EAP method's specific connection configuration user interface dialog on the client.;EAP_METHOD_TYPE *pEapType, HWND hwndParent, DWORD dwFlags, DWORD dwSizeOfConnectionDataIn, BYTE *pConnectionDataIn, DWORD *pdwSizeOfConnectionDataOut, BYTE **ppConnectionDataOut, EAP_ERROR **ppEapError
EapPeerInvokeIdentityUI;Raises a custom interactive user interface dialog to obtain user identity information for the EAP method on the client.;EAP_METHOD_TYPE *pEapType, DWORD dwFlags, HWND hwndParent, DWORD dwSizeOfConnectionData, const BYTE *pConnectionData, DWORD dwSizeOfUserData, const BYTE *pUserData, DWORD *pdwSizeOfUserDataOut, BYTE **ppUserDataOut, LPWSTR *ppwszIdentity, EAP_ERROR **ppEapError
EapPeerInvokeInteractiveUI;Raises a custom interactive user interface dialog for the EAP method on the client.;EAP_METHOD_TYPE *pEapType, HWND hwndParent, DWORD dwSizeofUIContextData, BYTE *pUIContextData, DWORD *pdwSizeOfDataFromInteractiveUI, BYTE **ppDataFromInteractiveUI, EAP_ERROR **ppEapError
EapPeerProcessRequestPacket;Processes a packet received by EAPHost from a supplicant.;EAP_SESSION_HANDLE sessionHandle, DWORD cbReceivedPacket, EapPacket *pReceivedPacket, EapPeerMethodOutput *pEapOutput, EAP_ERROR **ppEapError
EapPeerQueryCredentialInputFields;Defines the implementation of an EAP method-specific function that obtains the EAP Single-Sign-On (SSO) credential input fields for an EAP method.;HANDLE hUserImpersonationToken, EAP_METHOD_TYPE eapMethodType, DWORD dwFlags, DWORD dwEapConnDataSize, BYTE *pbEapConnData, EAP_CONFIG_INPUT_FIELD_ARRAY *pEapConfigFieldsArray, EAP_ERROR **ppEapError
EapPeerQueryInteractiveUIInputFields;Defines the implementation of an EAP method API that provides the input fields for interactive UI components to be raised on the supplicant.;DWORD dwVersion, DWORD dwFlags, DWORD dwSizeofUIContextData, const BYTE *pUIContextData, EAP_INTERACTIVE_UI_DATA *pEapInteractiveUIData, EAP_ERROR **ppEapError, LPVOID *ppvReserved
EapPeerQueryUIBlobFromInteractiveUIInputFields;Converts user information into a user BLOB that can be consumed by EAPHost run-time functions.;DWORD dwVersion, DWORD dwFlags, DWORD dwSizeofUIContextData, const BYTE *pUIContextData, const EAP_INTERACTIVE_UI_DATA *pEapInteractiveUIData, DWORD *pdwSizeOfDataFromInteractiveUI, BYTE **ppDataFromInteractiveUI, EAP_ERROR **ppEapError, LPVOID *ppvReserved
EapPeerQueryUserBlobFromCredentialInputFields;Defines the implementation of an EAP method function that obtains the user BLOB data provided in an interactive Single-Sign-On (SSO) UI raised on the supplicant.;HANDLE hUserImpersonationToken, EAP_METHOD_TYPE eapMethodType, DWORD dwFlags, DWORD dwEapConnDataSize, BYTE *pbEapConnData, const EAP_CONFIG_INPUT_FIELD_ARRAY *pEapConfigInputFieldArray, DWORD *pdwUserBlobSize, BYTE **ppbUserBlob, EAP_ERROR **ppEapError
EapPeerSetCredentials;Supplies new or updated authentication credentials to the EAP method.;EAP_SESSION_HANDLE sessionHandle, LPWSTR pwszIdentity, LPWSTR pwszPassword, EAP_ERROR **ppEapError
EapPeerSetResponseAttributes;Provides an updated array of EAP response attributes to the EAP method.;EAP_SESSION_HANDLE sessionHandle, EapAttributes *pAttribs, EapPeerMethodOutput *pEapOutput, EAP_ERROR **ppEapError
EapPeerSetUIContext;Provides a user interface context to the EAP method. This function is called after the UI has been raised through the EapPeerGetUIContext function.;EAP_SESSION_HANDLE sessionHandle, DWORD dwSizeOfUIContextData, const BYTE *pUIContextData, EapPeerMethodOutput *pEapOutput, EAP_ERROR **ppEapError
EapPeerShutdown;Shuts down the EAP method and prepares to unload its corresponding DLL.;EAP_ERROR **ppEapError
EditSecurityAdvanced;Extends the EditSecurity function to include the security page type when displaying the property sheet that contains a basic security property page.;HWND hwndOwner, LPSECURITYINFO psi, SI_PAGE_TYPE uSIPage
EditSecurity;Displays a property sheet that contains a basic security property page. This property page enables the user to view and edit the access rights allowed or denied by the ACEs in an object's DACL.;HWND hwndOwner, LPSECURITYINFO psi
EjectDiskFromSADriveA;The EjectDiskFromSADrive function ejects the media that is in a standalone removable drive.;LPCSTR lpComputerName, LPCSTR lpAppName, LPCSTR lpDeviceName, HWND hWnd, LPCSTR lpTitle, LPCSTR lpMessage, DWORD dwOptions
EjectDiskFromSADriveW;The EjectDiskFromSADrive function ejects the media that is in a standalone removable drive.;LPCWSTR lpComputerName, LPCWSTR lpAppName, LPCWSTR lpDeviceName, HWND hWnd, LPCWSTR lpTitle, LPCWSTR lpMessage, DWORD dwOptions
EjectNtmsCleaner;The EjectNtmsCleaner function ejects the cleaning cartridge from the currently reserved cleaner slot.;HANDLE hSession, LPNTMS_GUID lpLibrary, LPNTMS_GUID lpEjectOperation, DWORD dwAction
EjectNtmsMedia;The EjectNtmsMedia function ejects the specified medium from the port of the current library. If the library is busy, RSM queues EjectNtmsMedia and returns success.;HANDLE hSession, LPNTMS_GUID lpMediaId, LPNTMS_GUID lpEjectOperation, DWORD dwAction
Ellipse;The Ellipse function draws an ellipse. The center of the ellipse is the center of the specified bounding rectangle. The ellipse is outlined by using the current pen and is filled by using the current brush.;HDC hdc, int left, int top, int right, int bottom
EmptyClipboard;Empties the clipboard and frees handles to data in the clipboard. The function then assigns ownership of the clipboard to the window that currently has the clipboard open.;
EmptyWorkingSet;Removes as many pages as possible from the working set of the specified process.;HANDLE hProcess
EnableMenuItem;Enables, disables, or grays the specified menu item.;HMENU hMenu, UINT uIDEnableItem, UINT uEnable
EnableMouseInPointer;Enables the mouse to act as a pointer input device and send WM_POINTER messages.;BOOL fEnable
EnableNonClientDpiScaling;In high-DPI displays, enables automatic display scaling of the non-client area portions of the specified top-level window. Must be called during the initialization of that window.;HWND hwnd
EnableNtmsObject;The EnableNtmsObject function enables the specified object.;HANDLE hSession, DWORD dwType, LPNTMS_GUID lpObjectId
EnableRouter;The EnableRouter function turns on IPv4 forwarding on the local computer. EnableRouter also increments a reference count that tracks the number of requests to enable IPv4 forwarding.;HANDLE *pHandle, OVERLAPPED *pOverlapped
EnableScrollBar;The EnableScrollBar function enables or disables one or both scroll bar arrows.;HWND hWnd, UINT wSBflags, UINT wArrows
EnableThreadProfiling;Enables thread profiling on the specified thread.;HANDLE ThreadHandle, DWORD Flags, DWORD64 HardwareCounters, HANDLE *PerformanceDataHandle
EnableWindow;Enables or disables mouse and keyboard input to the specified window or control. When input is disabled, the window does not receive input such as mouse clicks and key presses. When input is enabled, the window receives all input.;HWND hWnd, BOOL bEnable
Encode;Initializes the object from a string that contains a distinguished name.;BSTR strName, X500NameFlags NameFlags
Encode;Performs Abstract Syntax Notation One (ASN.1) encoding on a certificate revocation list (CRL) distribution information array stored in the COM object and returns the ASN.1-encoded extension.;BSTR *pstrBinary
Encode;Performs Abstract Syntax Notation One (ASN.1) encoding on a given bit string.;LONG BitCount, BSTR strBitString, BSTR *pstrBinary
Encode;Returns an Abstract Syntax Notation One (ASN.1)-encoded string of the date array stored in this object.;BSTR *pstrBinary
Encode;Returns an ASN.1-encoded string of the alternate name array stored in this object. The names in the object are not encoded.;BSTR *pstrBinary
Encode;Returns an ASN.1-encoded string of the LONG array stored in this object.;BSTR *pstrBinary
Encode;Returns an ASN.1-encoded string of the string array stored in this object.;BSTR *pstrBinary
Encode;Signs and encodes a certificate request and creates a key pair if one does not exist.;
EncryptFileA;Encrypts a file or directory.;LPCSTR lpFileName
EncryptFileW;Encrypts a file or directory.;LPCWSTR lpFileName
EncryptMessage;Encrypts a message to provide privacy by using Digest.;PCtxtHandle phContext, unsigned long fQOP, PSecBufferDesc pMessage, unsigned long MessageSeqNo
EndDeferWindowPos;Simultaneously updates the position and size of one or more windows in a single screen-refreshing cycle.;HDWP hWinPosInfo
EndDialog;Destroys a modal dialog box, causing the system to end any processing for the dialog box.;HWND hDlg, INT_PTR nResult
EndDoc;The EndDoc function ends a print job.;HDC hdc
EndInkInput;Indicates that no more ink will be added to the context.You cannot add strokes to the context after calling this function.;HRECOCONTEXT hrc
EndMenu;Ends the calling thread's active menu.;
EndNtmsDeviceChangeDetection;The EndNtmsDeviceChangeDetection function ends device change detection for any target devices specified using the SetNtmsDeviceChangeDetection function and closes the change detection handle.;HANDLE hSession, HANDLE DetectHandle
EndPage;The EndPage function notifies the device that the application has finished writing to a page. This function is typically used to direct the device driver to advance to a new page.;HDC hdc
EndPaint;The EndPaint function marks the end of painting in the specified window. This function is required for each call to the BeginPaint function, but only after painting is complete.;HWND hWnd, const PAINTSTRUCT *lpPaint
EndPath;The EndPath function closes a path bracket and selects the path defined by the bracket into the specified device context.;HDC hdc
EndTask;Forcibly closes the specified window.;HWND hWnd, BOOL fShutDown, BOOL fForce
EndUpdateResourceA;Commits or discards changes made prior to a call to UpdateResource.;HANDLE hUpdate, BOOL fDiscard
EndUpdateResourceW;Commits or discards changes made prior to a call to UpdateResource.;HANDLE hUpdate, BOOL fDiscard
Enroll;Encodes a request, submits it to an appropriate certification authority (CA), and installs the response.;
Enroll;Enrolls a certificate request and retrieves the issued certificate.;BSTR strEnrollmentPolicyServerURI, BSTR strTemplateName, EncodingType Encoding, WebEnrollmentFlags enrollFlags, BSTR *pstrCertificate
EnterCriticalPolicySection;The EnterCriticalPolicySection function pauses the application of policy to allow applications to safely read policy settings.;BOOL bMachine
EnterCriticalSection;Waits for ownership of the specified critical section object. The function returns when the calling thread is granted ownership.;LPCRITICAL_SECTION lpCriticalSection
EnterSynchronizationBarrier;Causes the calling thread to wait at a synchronization barrier until the maximum number of threads have entered the barrier.;LPSYNCHRONIZATION_BARRIER lpBarrier, DWORD dwFlags
EnterUmsSchedulingMode;Converts the calling thread into a user-mode scheduling (UMS) scheduler thread.;PUMS_SCHEDULER_STARTUP_INFO SchedulerStartupInfo
EnumAlgs;Retrieves the IDs of cryptographic algorithms in a given algorithm class that are supported by the current cryptographic service provider (CSP).;LONG dwIndex, LONG algClass, LONG *pdwAlgID
EnumAlgs;The ICEnroll4::EnumAlgs method retrieves the IDs of cryptographic algorithms in a given algorithm class that are supported by the current cryptographic service provider (CSP).;LONG dwIndex, LONG algClass, LONG *pdwAlgID
EnumCalendarInfoA;Enumerates calendar information for a specified locale.Note  To receive a calendar identifier in addition to calendar information, the application should use the EnumCalendarInfoEx function.;CALINFO_ENUMPROCA lpCalInfoEnumProc, LCID Locale, CALID Calendar, CALTYPE CalType
EnumCalendarInfoExA;Enumerates calendar information for a locale specified by identifier.Note  Any application that runs only on Windows Vista and later should use EnumCalendarInfoExEx in preference to this function.;CALINFO_ENUMPROCEXA lpCalInfoEnumProcEx, LCID Locale, CALID Calendar, CALTYPE CalType
EnumCalendarInfoExEx;Enumerates calendar information for a locale specified by name.Note  The application should call this function in preference to EnumCalendarInfo or EnumCalendarInfoEx if designed to run only on Windows Vista and later. Note  This function can enumerate data that changes between releases, for example, due to a custom locale. If your application must persist or transmit data, see Using Persistent Locale Data.;CALINFO_ENUMPROCEXEX pCalInfoEnumProcExEx, LPCWSTR lpLocaleName, CALID Calendar, LPCWSTR lpReserved, CALTYPE CalType, LPARAM lParam
EnumCalendarInfoExW;Enumerates calendar information for a locale specified by identifier.Note  Any application that runs only on Windows Vista and later should use EnumCalendarInfoExEx in preference to this function.;CALINFO_ENUMPROCEXW lpCalInfoEnumProcEx, LCID Locale, CALID Calendar, CALTYPE CalType
EnumCalendarInfoW;Enumerates calendar information for a specified locale.Note  To receive a calendar identifier in addition to calendar information, the application should use the EnumCalendarInfoEx function.;CALINFO_ENUMPROCW lpCalInfoEnumProc, LCID Locale, CALID Calendar, CALTYPE CalType
EnumCertViewAttribute;Obtains an instance of an attribute-enumeration sequence for the current row of the row-enumeration sequence.;LONG Flags, IEnumCERTVIEWATTRIBUTE **ppenum
EnumCertViewColumn;Obtains an instance of a column-enumeration sequence for the current row of the row-enumeration sequence.;IEnumCERTVIEWCOLUMN **ppenum
EnumCertViewColumn;Obtains an instance of a column-enumeration sequence for the database schema.;LONG fResultColumn, IEnumCERTVIEWCOLUMN **ppenum
EnumCertViewExtension;Obtains an instance of an extension-enumeration sequence for the current row of the row-enumeration sequence.;LONG Flags, IEnumCERTVIEWEXTENSION **ppenum
EnumChildWindows;Enumerates the child windows that belong to the specified parent window by passing the handle to each child window, in turn, to an application-defined callback function.;HWND hWndParent, WNDENUMPROC lpEnumFunc, LPARAM lParam
EnumClipboardFormats;Enumerates the data formats currently available on the clipboard.;UINT format
enumContainers;Retrieves the names of containers for the cryptographic service provider (CSP) specified by the ProviderName property. This method was first defined in the ICEnroll interface.;LONG dwIndex, BSTR *pbstr
enumContainersWStr;Retrieves the names of containers for the cryptographic service provider (CSP) specified by the ProviderNameWStr property.;LONG dwIndex, LPWSTR *pbstr
EnumDateFormatsA;Enumerates the long date, short date, or year/month formats that are available for a specified locale.;DATEFMT_ENUMPROCA lpDateFmtEnumProc, LCID Locale, DWORD dwFlags
EnumDateFormatsExA;Enumerates the long date, short date, or year/month formats that are available for a specified locale.Note  Any application that runs only on Windows Vista and later should use EnumDateFormatsExEx in preference to this function.;DATEFMT_ENUMPROCEXA lpDateFmtEnumProcEx, LCID Locale, DWORD dwFlags
EnumDateFormatsExEx;Enumerates the long date, short date, or year/month formats that are available for a locale specified by name.Note  The application should call this function in preference to EnumDateFormats or EnumDateFormatsEx if designed to run only on Windows Vista and later. Note  This function can enumerate data that changes between releases, for example, due to a custom locale. If your application must persist or transmit data, see Using Persistent Locale Data.;DATEFMT_ENUMPROCEXEX lpDateFmtEnumProcExEx, LPCWSTR lpLocaleName, DWORD dwFlags, LPARAM lParam
EnumDateFormatsExW;Enumerates the long date, short date, or year/month formats that are available for a specified locale.Note  Any application that runs only on Windows Vista and later should use EnumDateFormatsExEx in preference to this function.;DATEFMT_ENUMPROCEXW lpDateFmtEnumProcEx, LCID Locale, DWORD dwFlags
EnumDateFormatsW;Enumerates the long date, short date, or year/month formats that are available for a specified locale.;DATEFMT_ENUMPROCW lpDateFmtEnumProc, LCID Locale, DWORD dwFlags
EnumDependentServicesA;Retrieves the name and status of each service that depends on the specified service.;SC_HANDLE hService, DWORD dwServiceState, LPENUM_SERVICE_STATUSA lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned
EnumDependentServicesW;Retrieves the name and status of each service that depends on the specified service.;SC_HANDLE hService, DWORD dwServiceState, LPENUM_SERVICE_STATUSW lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned
EnumDesktopsA;Enumerates all desktops associated with the specified window station of the calling process. The function passes the name of each desktop, in turn, to an application-defined callback function.;HWINSTA hwinsta, DESKTOPENUMPROCA lpEnumFunc, LPARAM lParam
EnumDesktopsW;Enumerates all desktops associated with the specified window station of the calling process. The function passes the name of each desktop, in turn, to an application-defined callback function.;HWINSTA hwinsta, DESKTOPENUMPROCW lpEnumFunc, LPARAM lParam
EnumDesktopWindows;Enumerates all top-level windows associated with the specified desktop. It passes the handle to each window, in turn, to an application-defined callback function.;HDESK hDesktop, WNDENUMPROC lpfn, LPARAM lParam
EnumDeviceDrivers;Retrieves the load address for each device driver in the system.;LPVOID *lpImageBase, DWORD cb, LPDWORD lpcbNeeded
EnumDisplayDevicesA;The EnumDisplayDevices function lets you obtain information about the display devices in the current session.;LPCSTR lpDevice, DWORD iDevNum, PDISPLAY_DEVICEA lpDisplayDevice, DWORD dwFlags
EnumDisplayDevicesW;The EnumDisplayDevices function lets you obtain information about the display devices in the current session.;LPCWSTR lpDevice, DWORD iDevNum, PDISPLAY_DEVICEW lpDisplayDevice, DWORD dwFlags
EnumDisplayMonitors;The EnumDisplayMonitors function enumerates display monitors (including invisible pseudo-monitors associated with the mirroring drivers) that intersect a region formed by the intersection of a specified clipping rectangle and the visible region of a device context. EnumDisplayMonitors calls an application-defined MonitorEnumProc callback function once for each monitor that is enumerated. Note that GetSystemMetrics (SM_CMONITORS) counts only the display monitors.;HDC hdc, LPCRECT lprcClip, MONITORENUMPROC lpfnEnum, LPARAM dwData
EnumDisplaySettingsA;The EnumDisplaySettings function retrieves information about one of the graphics modes for a display device. To retrieve information for all the graphics modes of a display device, make a series of calls to this function.;LPCSTR lpszDeviceName, DWORD iModeNum, DEVMODEA *lpDevMode
EnumDisplaySettingsExA;The EnumDisplaySettingsEx function retrieves information about one of the graphics modes for a display device. To retrieve information for all the graphics modes for a display device, make a series of calls to this function.;LPCSTR lpszDeviceName, DWORD iModeNum, DEVMODEA *lpDevMode, DWORD dwFlags
EnumDisplaySettingsExW;The EnumDisplaySettingsEx function retrieves information about one of the graphics modes for a display device. To retrieve information for all the graphics modes for a display device, make a series of calls to this function.;LPCWSTR lpszDeviceName, DWORD iModeNum, DEVMODEW *lpDevMode, DWORD dwFlags
EnumDisplaySettingsW;The EnumDisplaySettings function retrieves information about one of the graphics modes for a display device. To retrieve information for all the graphics modes of a display device, make a series of calls to this function.;LPCWSTR lpszDeviceName, DWORD iModeNum, DEVMODEW *lpDevMode
EnumDynamicTimeZoneInformation;Enumerates DYNAMIC_TIME_ZONE_INFORMATION entries stored in the registry.;const DWORD dwIndex, PDYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation
EnumEnhMetaFile;The EnumEnhMetaFile function enumerates the records within an enhanced-format metafile by retrieving each record and passing it to the specified callback function.;HDC hdc, HENHMETAFILE hmf, ENHMFENUMPROC proc, LPVOID param, const RECT *lpRect
EnumerateAttributesClose;Frees any resources connected with attribute enumeration.;
EnumerateAttributesClose;Frees the resources connected with attribute enumeration.;
EnumerateAttributes;Retrieves the name of the current attribute and moves the internal enumeration pointer to the next attribute.;BSTR *pstrAttributeName
EnumerateAttributes;Returns the name of the next request attribute within the current context, then increments the internal pointer to the following attribute.;BSTR *pstrAttributeName
EnumerateAttributesSetup;Initializes the internal enumeration pointer to the first request attribute associated with the current context.;LONG Flags
EnumerateExtensionsClose;Frees any resources connected with extension enumeration.;
EnumerateExtensionsClose;Frees the resources connected with extension enumeration.;
EnumerateExtensions;Retrieves the object identifier (OID) of the current extension and moves the internal enumeration pointer to the next extension.;BSTR *pstrExtensionName
EnumerateExtensions;Returns the object identifier (OID) string (also known as the extension name) of the next certificate extension to be enumerated, then increments the internal pointer to the following extension.;BSTR *pstrExtensionName
EnumerateExtensionsSetup;Initializes the internal enumeration pointer to the first certificate extension associated with the current context.;LONG Flags
EnumerateIdentities;Gets a pointer to an IEnumUnknown interface pointer that can be used to enumerate identities across identity providers.;const IDENTITY_TYPE eIdentityType, const PROPERTYKEY *pFilterkey, const PROPVARIANT *pFilterPropVarValue, IEnumUnknown **ppIdentityEnum
EnumerateNtmsObject;The EnumerateNtmsObject function enumerates the RSM objects contained in the lpContainerId parameter.;HANDLE hSession, const LPNTMS_GUID lpContainerId, LPNTMS_GUID lpList, LPDWORD lpdwListSize, DWORD dwType, DWORD dwOptions
EnumerateSecurityPackagesA;Returns an array of SecPkgInfo structures that provide information about the security packages available to the client.;unsigned long *pcPackages, PSecPkgInfoA *ppPackageInfo
EnumerateSecurityPackagesW;Returns an array of SecPkgInfo structures that provide information about the security packages available to the client.;unsigned long *pcPackages, PSecPkgInfoW *ppPackageInfo
EnumFontFamiliesA;The EnumFontFamilies function enumerates the fonts in a specified font family that are available on a specified device.;HDC hdc, LPCSTR lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam
EnumFontFamiliesExA;The EnumFontFamiliesEx function enumerates all uniquely-named fonts in the system that match the font characteristics specified by the LOGFONT structure. EnumFontFamiliesEx enumerates fonts based on typeface name, character set, or both.;HDC hdc, LPLOGFONTA lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam, DWORD dwFlags
EnumFontFamiliesExW;The EnumFontFamiliesEx function enumerates all uniquely-named fonts in the system that match the font characteristics specified by the LOGFONT structure. EnumFontFamiliesEx enumerates fonts based on typeface name, character set, or both.;HDC hdc, LPLOGFONTW lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam, DWORD dwFlags
EnumFontFamiliesW;The EnumFontFamilies function enumerates the fonts in a specified font family that are available on a specified device.;HDC hdc, LPCWSTR lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam
EnumFontsA;The EnumFonts function enumerates the fonts available on a specified device.;HDC hdc, LPCSTR lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam
EnumFontsW;The EnumFonts function enumerates the fonts available on a specified device.;HDC hdc, LPCWSTR lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam
EnumICMProfilesA;The EnumICMProfiles function enumerates the different output color profiles that the system supports for a given device context.;HDC hdc, ICMENUMPROCA proc, LPARAM param
EnumICMProfilesW;The EnumICMProfiles function enumerates the different output color profiles that the system supports for a given device context.;HDC hdc, ICMENUMPROCW proc, LPARAM param
EnumLanguageGroupLocalesA;Enumerates the locales in a specified language group.;LANGGROUPLOCALE_ENUMPROCA lpLangGroupLocaleEnumProc, LGRPID LanguageGroup, DWORD dwFlags, LONG_PTR lParam
EnumLanguageGroupLocalesW;Enumerates the locales in a specified language group.;LANGGROUPLOCALE_ENUMPROCW lpLangGroupLocaleEnumProc, LGRPID LanguageGroup, DWORD dwFlags, LONG_PTR lParam
EnumMetaFile;The EnumMetaFile function enumerates the records within a Windows-format metafile by retrieving each record and passing it to the specified callback function.;HDC hdc, HMETAFILE hmf, MFENUMPROC proc, LPARAM param
EnumObjects;The EnumObjects function enumerates the pens or brushes available for the specified device context (DC).;HDC hdc, int nType, GOBJENUMPROC lpFunc, LPARAM lParam
EnumPageFilesA;Calls the callback routine for each installed pagefile in the system.;PENUM_PAGE_FILE_CALLBACKA pCallBackRoutine, LPVOID pContext
EnumPageFilesW;Calls the callback routine for each installed pagefile in the system.;PENUM_PAGE_FILE_CALLBACKW pCallBackRoutine, LPVOID pContext
enumPendingRequest;Enumerates pending certificate requests and retrieves a specified property from each. This method was first defined in the ICEnroll4 interface.;LONG lIndex, LONG lDesiredProperty, VARIANT *pvarProperty
enumPendingRequestWStr;Enumerates pending certificate requests and retrieves a specified property from each.;LONG lIndex, LONG lDesiredProperty, LPVOID ppProperty
EnumProcesses;Retrieves the process identifier for each process object in the system.;DWORD *lpidProcess, DWORD cb, LPDWORD lpcbNeeded
EnumProcessModulesEx;Retrieves a handle for each module in the specified process that meets the specified filter criteria.;HANDLE hProcess, HMODULE *lphModule, DWORD cb, LPDWORD lpcbNeeded, DWORD dwFilterFlag
EnumProcessModules;Retrieves a handle for each module in the specified process.;HANDLE hProcess, HMODULE *lphModule, DWORD cb, LPDWORD lpcbNeeded
EnumPropsA;Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function. EnumProps continues until the last entry is enumerated or the callback function returns FALSE.;HWND hWnd, PROPENUMPROCA lpEnumFunc
EnumPropsExA;Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function. EnumPropsEx continues until the last entry is enumerated or the callback function returns FALSE.;HWND hWnd, PROPENUMPROCEXA lpEnumFunc, LPARAM lParam
EnumPropsExW;Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function. EnumPropsEx continues until the last entry is enumerated or the callback function returns FALSE.;HWND hWnd, PROPENUMPROCEXW lpEnumFunc, LPARAM lParam
EnumPropsW;Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function. EnumProps continues until the last entry is enumerated or the callback function returns FALSE.;HWND hWnd, PROPENUMPROCW lpEnumFunc
EnumProtocolsA;The EnumProtocols function retrieves information about a specified set of network protocols that are active on a local host.;LPINT lpiProtocols, LPVOID lpProtocolBuffer, LPDWORD lpdwBufferLength
EnumProtocolsW;The EnumProtocols function retrieves information about a specified set of network protocols that are active on a local host.;LPINT lpiProtocols, LPVOID lpProtocolBuffer, LPDWORD lpdwBufferLength
enumProviders;Retrieves the names of the available cryptographic service providers (CSPs) specified by the ProviderType property. This method was first defined in the ICEnroll interface.;LONG dwIndex, LONG dwFlags, BSTR *pbstrProvName
enumProvidersWStr;The IEnroll4::enumProvidersWStr method retrieves the names of the available cryptographic service providers (CSPs) specified by the ProviderType property.;LONG dwIndex, LONG dwFlags, LPWSTR *pbstrProvName
EnumResourceLanguagesA;Enumerates language-specific resources, of the specified type and name, associated with a binary module.;HMODULE hModule, LPCSTR lpType, LPCSTR lpName, ENUMRESLANGPROCA lpEnumFunc, LONG_PTR lParam
EnumResourceLanguagesExA;Enumerates language-specific resources, of the specified type and name, associated with a specified binary module. Extends EnumResourceLanguages by allowing more control over the enumeration.;HMODULE hModule, LPCSTR lpType, LPCSTR lpName, ENUMRESLANGPROCA lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId
EnumResourceLanguagesExW;Enumerates language-specific resources, of the specified type and name, associated with a specified binary module. Extends EnumResourceLanguages by allowing more control over the enumeration.;HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, ENUMRESLANGPROCW lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId
EnumResourceLanguagesW;Enumerates language-specific resources, of the specified type and name, associated with a binary module.;HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, ENUMRESLANGPROCW lpEnumFunc, LONG_PTR lParam
EnumResourceNamesA;Enumerates resources of a specified type within a binary module.;HMODULE hModule, LPCSTR lpType, ENUMRESNAMEPROCA lpEnumFunc, LONG_PTR lParam
EnumResourceNamesExA;Enumerates resources of a specified type that are associated with a specified binary module. The search can include both an LN file and its associated .mui files, or it can be limited in several ways.;HMODULE hModule, LPCSTR lpType, ENUMRESNAMEPROCA lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId
EnumResourceNamesExW;Enumerates resources of a specified type that are associated with a specified binary module. The search can include both an LN file and its associated .mui files, or it can be limited in several ways.;HMODULE hModule, LPCWSTR lpType, ENUMRESNAMEPROCW lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId
EnumResourceTypesA;Enumerates resource types within a binary module.;HMODULE hModule, ENUMRESTYPEPROCA lpEnumFunc, LONG_PTR lParam
EnumResourceTypesExA;Enumerates resource types associated with a specified binary module.;HMODULE hModule, ENUMRESTYPEPROCA lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId
EnumResourceTypesExW;Enumerates resource types associated with a specified binary module.;HMODULE hModule, ENUMRESTYPEPROCW lpEnumFunc, LONG_PTR lParam, DWORD dwFlags, LANGID LangId
EnumResourceTypesW;Enumerates resource types within a binary module.;HMODULE hModule, ENUMRESTYPEPROCW lpEnumFunc, LONG_PTR lParam
EnumServicesStatusA;Enumerates services in the specified service control manager database. The name and status of each service are provided.;SC_HANDLE hSCManager, DWORD dwServiceType, DWORD dwServiceState, LPENUM_SERVICE_STATUSA lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle
EnumServicesStatusExA;Enumerates services in the specified service control manager database. The name and status of each service are provided, along with additional data based on the specified information level.;SC_HANDLE hSCManager, SC_ENUM_TYPE InfoLevel, DWORD dwServiceType, DWORD dwServiceState, LPBYTE lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle, LPCSTR pszGroupName
EnumServicesStatusExW;Enumerates services in the specified service control manager database. The name and status of each service are provided, along with additional data based on the specified information level.;SC_HANDLE hSCManager, SC_ENUM_TYPE InfoLevel, DWORD dwServiceType, DWORD dwServiceState, LPBYTE lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle, LPCWSTR pszGroupName
EnumServicesStatusW;Enumerates services in the specified service control manager database. The name and status of each service are provided.;SC_HANDLE hSCManager, DWORD dwServiceType, DWORD dwServiceState, LPENUM_SERVICE_STATUSW lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle
EnumSystemCodePagesA;Enumerates the code pages that are either installed on or supported by an operating system.;CODEPAGE_ENUMPROCA lpCodePageEnumProc, DWORD dwFlags
EnumSystemCodePagesW;Enumerates the code pages that are either installed on or supported by an operating system.;CODEPAGE_ENUMPROCW lpCodePageEnumProc, DWORD dwFlags
EnumSystemFirmwareTables;Enumerates all system firmware tables of the specified type.;DWORD FirmwareTableProviderSignature, PVOID pFirmwareTableEnumBuffer, DWORD BufferSize
EnumSystemGeoID;Enumerates the geographical location identifiers (type GEOID) that are available on the operating system.;GEOCLASS GeoClass, GEOID ParentGeoId, GEO_ENUMPROC lpGeoEnumProc
EnumSystemGeoNames;Enumerates the two-letter International Organization for Standardization (ISO) 3166-1 codes or numeric United Nations (UN) Series M, Number 49 (M.49) codes for geographical locations that are available on the operating system.;GEOCLASS geoClass, GEO_ENUMNAMEPROC geoEnumProc, LPARAM data
EnumSystemLanguageGroupsA;Enumerates the language groups that are either installed on or supported by an operating system.;LANGUAGEGROUP_ENUMPROCA lpLanguageGroupEnumProc, DWORD dwFlags, LONG_PTR lParam
EnumSystemLanguageGroupsW;Enumerates the language groups that are either installed on or supported by an operating system.;LANGUAGEGROUP_ENUMPROCW lpLanguageGroupEnumProc, DWORD dwFlags, LONG_PTR lParam
EnumSystemLocalesA;Enumerates the locales that are either installed on or supported by an operating system.Note  For interoperability reasons, the application should prefer the EnumSystemLocalesEx function to EnumSystemLocales because Microsoft is migrating toward the use of locale names instead of locale identifiers for new locales. Any application that will be run only on Windows Vista and later should use EnumSystemLocalesEx.;LOCALE_ENUMPROCA lpLocaleEnumProc, DWORD dwFlags
EnumSystemLocalesEx;Enumerates the locales that are either installed on or supported by an operating system.Note  The application should call this function in preference to EnumSystemLocales if designed to run only on Windows Vista and later.;LOCALE_ENUMPROCEX lpLocaleEnumProcEx, DWORD dwFlags, LPARAM lParam, LPVOID lpReserved
EnumSystemLocalesW;Enumerates the locales that are either installed on or supported by an operating system.Note  For interoperability reasons, the application should prefer the EnumSystemLocalesEx function to EnumSystemLocales because Microsoft is migrating toward the use of locale names instead of locale identifiers for new locales. Any application that will be run only on Windows Vista and later should use EnumSystemLocalesEx.;LOCALE_ENUMPROCW lpLocaleEnumProc, DWORD dwFlags
EnumThreadWindows;Enumerates all nonchild windows associated with a thread by passing the handle to each window, in turn, to an application-defined callback function.;DWORD dwThreadId, WNDENUMPROC lpfn, LPARAM lParam
EnumTimeFormatsA;Enumerates the time formats that are available for a locale specified by identifier.Note  For interoperability reasons, the application should prefer the EnumTimeFormatsEx function to EnumTimeFormats because Microsoft is migrating toward the use of locale names instead of locale identifiers for new locales. Any application that runs only on Windows Vista and later should use EnumTimeFormatsEx.;TIMEFMT_ENUMPROCA lpTimeFmtEnumProc, LCID Locale, DWORD dwFlags
EnumTimeFormatsEx;Enumerates the time formats that are available for a locale specified by name.Note  The application should call this function in preference to EnumTimeFormats if designed to run only on Windows Vista and later. Note  This function can enumerate data that changes between releases, for example, due to a custom locale. If your application must persist or transmit data, see Using Persistent Locale Data.;TIMEFMT_ENUMPROCEX lpTimeFmtEnumProcEx, LPCWSTR lpLocaleName, DWORD dwFlags, LPARAM lParam
EnumTimeFormatsW;Enumerates the time formats that are available for a locale specified by identifier.Note  For interoperability reasons, the application should prefer the EnumTimeFormatsEx function to EnumTimeFormats because Microsoft is migrating toward the use of locale names instead of locale identifiers for new locales. Any application that runs only on Windows Vista and later should use EnumTimeFormatsEx.;TIMEFMT_ENUMPROCW lpTimeFmtEnumProc, LCID Locale, DWORD dwFlags
EnumUILanguagesA;Enumerates the user interface languages that are available on the operating system and calls the callback function with every language in the list.;UILANGUAGE_ENUMPROCA lpUILanguageEnumProc, DWORD dwFlags, LONG_PTR lParam
EnumUILanguagesW;Enumerates the user interface languages that are available on the operating system and calls the callback function with every language in the list.;UILANGUAGE_ENUMPROCW lpUILanguageEnumProc, DWORD dwFlags, LONG_PTR lParam
EnumWindows;Enumerates all top-level windows on the screen by passing the handle to each window, in turn, to an application-defined callback function. EnumWindows continues until the last top-level window is enumerated or the callback function returns FALSE.;WNDENUMPROC lpEnumFunc, LPARAM lParam
EnumWindowStationsA;Enumerates all window stations in the current session. The function passes the name of each window station, in turn, to an application-defined callback function.;WINSTAENUMPROCA lpEnumFunc, LPARAM lParam
EnumWindowStationsW;Enumerates all window stations in the current session. The function passes the name of each window station, in turn, to an application-defined callback function.;WINSTAENUMPROCW lpEnumFunc, LPARAM lParam
EqualDomainSid;Determines whether two SIDs are from the same domain.;PSID pSid1, PSID pSid2, BOOL *pfEqual
EqualPrefixSid;Tests two security-identifier (SID) prefix values for equality. A SID prefix is the entire SID except for the last subauthority value.;PSID pSid1, PSID pSid2
EqualRect;The EqualRect function determines whether the two specified rectangles are equal by comparing the coordinates of their upper-left and lower-right corners.;const RECT *lprc1, const RECT *lprc2
EqualRgn;The EqualRgn function checks the two specified regions to determine whether they are identical. The function considers two regions identical if they are equal in size and shape.;HRGN hrgn1, HRGN hrgn2
EqualSid;Tests two security identifier (SID) values for equality. Two SIDs must match exactly to be considered equal.;PSID pSid1, PSID pSid2
EraseTape;Erases all or part of a tape.;HANDLE hDevice, DWORD dwEraseType, BOOL bImmediate
EscapeCommFunction;Directs the specified communications device to perform an extended function.;HANDLE hFile, DWORD dwFunc
Escape;Enables an application to access the system-defined device capabilities that are not available through GDI.;HDC hdc, int iEscape, int cjIn, LPCSTR pvIn, LPVOID pvOut
EvaluateProximityToPolygon;Returns the score of a polygon as the probable touch target (compared to all other polygons that intersect the touch contact area) and an adjusted touch point within the polygon.;UINT32 numVertices, const POINT *controlPolygon, const TOUCH_HIT_TESTING_INPUT *pHitTestingInput, TOUCH_HIT_TESTING_PROXIMITY_EVALUATION *pProximityEval
EvaluateProximityToRect;Returns the score of a rectangle as the probable touch target, compared to all other rectangles that intersect the touch contact area, and an adjusted touch point within the rectangle.;const RECT *controlBoundingBox, const TOUCH_HIT_TESTING_INPUT *pHitTestingInput, TOUCH_HIT_TESTING_PROXIMITY_EVALUATION *pProximityEval
EvtArchiveExportedLog;Adds localized strings to the events in the specified log file.;EVT_HANDLE Session, LPCWSTR LogFilePath, LCID Locale, DWORD Flags
EvtCancel;Cancels all pending operations on a handle.;EVT_HANDLE Object
EvtClearLog;Removes all events from the specified channel and writes them to the target log file.;EVT_HANDLE Session, LPCWSTR ChannelPath, LPCWSTR TargetFilePath, DWORD Flags
EvtClose;Closes an open handle.;EVT_HANDLE Object
EvtCreateBookmark;Creates a bookmark that identifies an event in a channel.;LPCWSTR BookmarkXml
EvtCreateRenderContext;Creates a context that specifies the information in the event that you want to render.;DWORD ValuePathsCount, LPCWSTR *ValuePaths, DWORD Flags
EvtExportLog;Copies events from the specified channel or log file and writes them to the target log file.;EVT_HANDLE Session, LPCWSTR Path, LPCWSTR Query, LPCWSTR TargetFilePath, DWORD Flags
EvtFormatMessage;Formats a message string.;EVT_HANDLE PublisherMetadata, EVT_HANDLE Event, DWORD MessageId, DWORD ValueCount, PEVT_VARIANT Values, DWORD Flags, DWORD BufferSize, LPWSTR Buffer, PDWORD BufferUsed
EvtGetChannelConfigProperty;Gets the specified channel configuration property.;EVT_HANDLE ChannelConfig, EVT_CHANNEL_CONFIG_PROPERTY_ID PropertyId, DWORD Flags, DWORD PropertyValueBufferSize, PEVT_VARIANT PropertyValueBuffer, PDWORD PropertyValueBufferUsed
EvtGetEventInfo;Gets information that identifies the structured XML query that selected the event and the channel or log file that contained the event.;EVT_HANDLE Event, EVT_EVENT_PROPERTY_ID PropertyId, DWORD PropertyValueBufferSize, PEVT_VARIANT PropertyValueBuffer, PDWORD PropertyValueBufferUsed
EvtGetEventMetadataProperty;Gets the specified event metadata property.;EVT_HANDLE EventMetadata, EVT_EVENT_METADATA_PROPERTY_ID PropertyId, DWORD Flags, DWORD EventMetadataPropertyBufferSize, PEVT_VARIANT EventMetadataPropertyBuffer, PDWORD EventMetadataPropertyBufferUsed
EvtGetExtendedStatus;Gets a text message that contains the extended error information for the current error.;DWORD BufferSize, LPWSTR Buffer, PDWORD BufferUsed
EvtGetLogInfo;Gets information about a channel or log file.;EVT_HANDLE Log, EVT_LOG_PROPERTY_ID PropertyId, DWORD PropertyValueBufferSize, PEVT_VARIANT PropertyValueBuffer, PDWORD PropertyValueBufferUsed
EvtGetObjectArrayProperty;Gets a provider metadata property from the specified object in the array.;EVT_OBJECT_ARRAY_PROPERTY_HANDLE ObjectArray, DWORD PropertyId, DWORD ArrayIndex, DWORD Flags, DWORD PropertyValueBufferSize, PEVT_VARIANT PropertyValueBuffer, PDWORD PropertyValueBufferUsed
EvtGetObjectArraySize;Gets the number of elements in the array of objects.;EVT_OBJECT_ARRAY_PROPERTY_HANDLE ObjectArray, PDWORD ObjectArraySize
EvtGetPublisherMetadataProperty;Gets the specified provider metadata property.;EVT_HANDLE PublisherMetadata, EVT_PUBLISHER_METADATA_PROPERTY_ID PropertyId, DWORD Flags, DWORD PublisherMetadataPropertyBufferSize, PEVT_VARIANT PublisherMetadataPropertyBuffer, PDWORD PublisherMetadataPropertyBufferUsed
EvtGetQueryInfo;Gets information about a query that you ran that identifies the list of channels or log files that the query attempted to access. The function also gets a list of return codes that indicates the success or failure of each access.;EVT_HANDLE QueryOrSubscription, EVT_QUERY_PROPERTY_ID PropertyId, DWORD PropertyValueBufferSize, PEVT_VARIANT PropertyValueBuffer, PDWORD PropertyValueBufferUsed
EvtNextChannelPath;Gets a channel name from the enumerator.;EVT_HANDLE ChannelEnum, DWORD ChannelPathBufferSize, LPWSTR ChannelPathBuffer, PDWORD ChannelPathBufferUsed
EvtNextEventMetadata;Gets an event definition from the enumerator.;EVT_HANDLE EventMetadataEnum, DWORD Flags
EvtNext;Gets the next event from the query or subscription results.;EVT_HANDLE ResultSet, DWORD EventsSize, PEVT_HANDLE Events, DWORD Timeout, DWORD Flags, PDWORD Returned
EvtNextPublisherId;Gets the identifier of a provider from the enumerator.;EVT_HANDLE PublisherEnum, DWORD PublisherIdBufferSize, LPWSTR PublisherIdBuffer, PDWORD PublisherIdBufferUsed
EvtOpenChannelConfig;Gets a handle that you use to read or modify a channel's configuration property.;EVT_HANDLE Session, LPCWSTR ChannelPath, DWORD Flags
EvtOpenChannelEnum;Gets a handle that you use to enumerate the list of channels that are registered on the computer.;EVT_HANDLE Session, DWORD Flags
EvtOpenEventMetadataEnum;Gets a handle that you use to enumerate the list of events that the provider defines.;EVT_HANDLE PublisherMetadata, DWORD Flags
EvtOpenLog;Gets a handle to a channel or log file that you can then use to get information about the channel or log file.;EVT_HANDLE Session, LPCWSTR Path, DWORD Flags
EvtOpenPublisherEnum;Gets a handle that you use to enumerate the list of registered providers on the computer.;EVT_HANDLE Session, DWORD Flags
EvtOpenPublisherMetadata;Gets a handle that you use to read the specified provider's metadata.;EVT_HANDLE Session, LPCWSTR PublisherId, LPCWSTR LogFilePath, LCID Locale, DWORD Flags
EvtOpenSession;Establishes a connection to a remote computer that you can use when calling the other Windows Event Log functions.;EVT_LOGIN_CLASS LoginClass, PVOID Login, DWORD Timeout, DWORD Flags
EvtQuery;Runs a query to retrieve events from a channel or log file that match the specified query criteria.;EVT_HANDLE Session, LPCWSTR Path, LPCWSTR Query, DWORD Flags
EvtRender;Renders an XML fragment based on the rendering context that you specify.;EVT_HANDLE Context, EVT_HANDLE Fragment, DWORD Flags, DWORD BufferSize, PVOID Buffer, PDWORD BufferUsed, PDWORD PropertyCount
EvtSaveChannelConfig;Saves the changes made to a channel's configuration.;EVT_HANDLE ChannelConfig, DWORD Flags
EvtSeek;Seeks to a specific event in a query result set.;EVT_HANDLE ResultSet, LONGLONG Position, EVT_HANDLE Bookmark, DWORD Timeout, DWORD Flags
EvtSetChannelConfigProperty;Sets the specified configuration property of a channel.;EVT_HANDLE ChannelConfig, EVT_CHANNEL_CONFIG_PROPERTY_ID PropertyId, DWORD Flags, PEVT_VARIANT PropertyValue
EvtSubscribe;Creates a subscription that will receive current and future events from a channel or log file that match the specified query criteria.;EVT_HANDLE Session, HANDLE SignalEvent, LPCWSTR ChannelPath, LPCWSTR Query, EVT_HANDLE Bookmark, PVOID Context, EVT_SUBSCRIBE_CALLBACK Callback, DWORD Flags
EvtUpdateBookmark;Updates the bookmark with information that identifies the specified event.;EVT_HANDLE Bookmark, EVT_HANDLE Event
ExcludeClipRect;The ExcludeClipRect function creates a new clipping region that consists of the existing clipping region minus the specified rectangle.;HDC hdc, int left, int top, int right, int bottom
ExcludeUpdateRgn;The ExcludeUpdateRgn function prevents drawing within invalid areas of a window by excluding an updated region in the window from a clipping region.;HDC hDC, HWND hWnd
ExecuteUmsThread;Runs the specified UMS worker thread.;PUMS_CONTEXT UmsThread
ExitProcess;Ends the calling process and all its threads.;UINT uExitCode
ExitThread;Ends the calling thread.;DWORD dwExitCode
ExitWindows;Calls the ExitWindowsEx function to log off the interactive user.;dwReserved, Code
ExitWindowsEx;Logs off the interactive user, shuts down the system, or shuts down and restarts the system.;UINT uFlags, DWORD dwReason
Export;Copies the private key to a byte array.;BSTR strExportType, EncodingType Encoding, BSTR *pstrEncodedKey
Export;Exports templates and object identifiers associated with the certificate enrollment policy (CEP) server to a buffer.;X509EnrollmentPolicyExportFlags exportFlags, VARIANT *pVal
ExportNtmsDatabase;The ExportNtmsDatabase function creates a consistent set of database files in the RSM database directory.;HANDLE hSession
ExportPublicKey;Exports the endorsement public key.;IX509PublicKey **ppPublicKey
ExportPublicKey;Exports the public key portion of the asymmetric key pair.;IX509PublicKey **ppPublicKey
ExportRSoPData;The ExportRSoPData function exports a WMI namespace that contains RSoP information to a data file. The function writes the information to a data file that can be imported to a WMI namespace with a call to the ImportRSoPData function.;LPOLESTR lpNameSpace, LPOLESTR lpFileName
ExportSecurityContext;The ExportSecurityContext function creates a serialized representation of a security context that can later be imported into a different process by calling ImportSecurityContext.;PCtxtHandle phContext, ULONG fFlags, PSecBuffer pPackedContext, void **pToken
ExtCreatePen;The ExtCreatePen function creates a logical cosmetic or geometric pen that has the specified style, width, and brush attributes.;DWORD iPenStyle, DWORD cWidth, const LOGBRUSH *plbrush, DWORD cStyle, const DWORD *pstyle
ExtCreateRegion;The ExtCreateRegion function creates a region from the specified region and transformation data.;const XFORM *lpx, DWORD nCount, const RGNDATA *lpData
ExtEscape;The ExtEscape function enables an application to access device capabilities that are not available through GDI.;HDC hdc, int iEscape, int cjInput, LPCSTR lpInData, int cjOutput, LPSTR lpOutData
ExtFloodFill;The ExtFloodFill function fills an area of the display surface with the current brush.;HDC hdc, int x, int y, COLORREF color, UINT type
ExtractAssociatedIconA;Gets a handle to an icon stored as a resource in a file or an icon stored in a file's associated executable file.;HINSTANCE hInst, LPSTR pszIconPath, WORD *piIcon
ExtractAssociatedIconExA;ExtractAssociatedIconEx may be altered or unavailable.;HINSTANCE hInst, LPSTR pszIconPath, WORD *piIconIndex, WORD *piIconId
ExtractAssociatedIconExW;ExtractAssociatedIconEx may be altered or unavailable.;HINSTANCE hInst, LPWSTR pszIconPath, WORD *piIconIndex, WORD *piIconId
ExtractAssociatedIconW;Gets a handle to an icon stored as a resource in a file or an icon stored in a file's associated executable file.;HINSTANCE hInst, LPWSTR pszIconPath, WORD *piIcon
ExtractIconA;Gets a handle to an icon from the specified executable file, DLL, or icon file. To retrieve an array of handles to large or small icons, use the ExtractIconEx function.;HINSTANCE hInst, LPCSTR pszExeFileName, UINT nIconIndex
ExtractIconExA;The ExtractIconEx function creates an array of handles to large or small icons extracted from the specified executable file, DLL, or icon file.;LPCSTR lpszFile, int nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIcons
ExtractIconExW;The ExtractIconEx function creates an array of handles to large or small icons extracted from the specified executable file, DLL, or icon file.;LPCWSTR lpszFile, int nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIcons
ExtractIconW;Gets a handle to an icon from the specified executable file, DLL, or icon file. To retrieve an array of handles to large or small icons, use the ExtractIconEx function.;HINSTANCE hInst, LPCWSTR pszExeFileName, UINT nIconIndex
ExtSelectClipRgn;The ExtSelectClipRgn function combines the specified region with the current clipping region using the specified mode.;HDC hdc, HRGN hrgn, int mode
ExtTextOutA;The ExtTextOut function draws text using the currently selected font, background color, and text color. You can optionally provide dimensions to be used for clipping, opaquing, or both.;HDC hdc, int x, int y, UINT options, const RECT *lprect, LPCSTR lpString, UINT c, const INT *lpDx
ExtTextOutW;The ExtTextOut function draws text using the currently selected font, background color, and text color. You can optionally provide dimensions to be used for clipping, opaquing, or both.;HDC hdc, int x, int y, UINT options, const RECT *lprect, LPCWSTR lpString, UINT c, const INT *lpDx
FatalAppExitA;Displays a message box and terminates the application when the message box is closed.;UINT uAction, LPCSTR lpMessageText
FatalAppExitW;Displays a message box and terminates the application when the message box is closed.;UINT uAction, LPCWSTR lpMessageText
FatalExit;Transfers execution control to the debugger. The behavior of the debugger thereafter is specific to the type of debugger used.;int ExitCode
FaxRouteDeviceChangeNotification;The fax service calls the FaxRouteDeviceChangeNotification function to inform a fax routing extension DLL that a fax device has been removed from the fax server, or that a new fax device has been installed.;DWORD DeviceId, BOOL NewDevice
FaxRouteDeviceEnable;The FaxRouteDeviceEnable function allows a fax routing extension DLL to query, enable, or disable a fax routing method for a specific fax device. Each fax routing extension must export the FaxRouteDeviceEnable function.;LPCWSTR RoutingGuid, DWORD DeviceId, LONG Enabled
FaxRouteGetRoutingInfo;The FaxRouteGetRoutingInfo function queries the fax routing extension DLL to obtain routing configuration data for a specific fax device. Each fax routing extension DLL must export the FaxRouteGetRoutingInfo function.;LPCWSTR RoutingGuid, DWORD DeviceId, LPBYTE RoutingInfo, LPDWORD RoutingInfoSize
FaxRouteInitialize;The fax service calls the FaxRouteInitialize function once, each time the service starts, to initialize the fax routing extension DLL. Each fax routing extension DLL must export the FaxRouteInitialize function.;HANDLE HeapHandle, PFAX_ROUTE_CALLBACKROUTINES FaxRouteCallbackRoutines
FaxRouteSetRoutingInfo;The FaxRouteSetRoutingInfo function modifies routing configuration data for a specific fax device. Each fax routing extension DLL must export the FaxRouteSetRoutingInfo function.;LPCWSTR RoutingGuid, DWORD DeviceId, const BYTE *RoutingInfo, DWORD RoutingInfoSize
FD_SET;Fd_set structure is used by Windows Sockets (Winsock) functions and service providers to place sockets into a set.;fd, set
FileEncryptionStatusA;Retrieves the encryption status of the specified file.;LPCSTR lpFileName, LPDWORD lpStatus
FileEncryptionStatusW;Retrieves the encryption status of the specified file.;LPCWSTR lpFileName, LPDWORD lpStatus
FILEMUIINFO_GET_CULTURE;Gets the locale name associated with the language name offset information in the dwLanguageNameOffset member of a FILEMUIINFO structure.;pInfo
FILEMUIINFO_GET_MAIN_TYPEID;Gets the main module types array element associated with the type identifier size and offset in a FILEMUIINFO structure. The information is provided in the dwTypeIDMainSize and dwTypeIDMainOffset members of the structure.;pInfo, iType
FILEMUIINFO_GET_MAIN_TYPEIDS;Gets the main module types array associated with the type identifier offset information in the dwTypeIDMainOffset member of a FILEMUIINFO structure.;pInfo
FILEMUIINFO_GET_MAIN_TYPENAMES;Gets the main module names multistring array associated with the type name offset information in the dwTypeNameMainOffset member of a FILEMUIINFO structure.;pInfo
FILEMUIINFO_GET_MUI_TYPEID;Gets the MUI module types array element associated with the type identifier size and offset information in a FILEMUIINFO structure. The information is provided in the dwTypeIDMUISize and dwTypeIDMUIOffset members of the structure.;pInfo, iType
FILEMUIINFO_GET_MUI_TYPEIDS;Gets the MUI module types array associated with the type identifier offset information in the dwTypeIDMUIOffset member of a FILEMUIINFO structure.;pInfo
FILEMUIINFO_GET_MUI_TYPENAMES;Gets the MUI module names multistring array associated with the type name offset information in the dwTypeNameMUIOffset member of a FILEMUIINFO structure.;pInfo
FileTimeToDosDateTime;Converts a file time to MS-DOS date and time values.;const FILETIME *lpFileTime, LPWORD lpFatDate, LPWORD lpFatTime
FileTimeToLocalFileTime;Converts a file time to a local file time.;const FILETIME *lpFileTime, LPFILETIME lpLocalFileTime
FileTimeToSystemTime;Converts a file time to system time format. System time is based on Coordinated Universal Time (UTC).;const FILETIME *lpFileTime, LPSYSTEMTIME lpSystemTime
FillPath;The FillPath function closes any open figures in the current path and fills the path's interior by using the current brush and polygon-filling mode.;HDC hdc
FillRect;The FillRect function fills a rectangle by using the specified brush. This function includes the left and top borders, but excludes the right and bottom borders of the rectangle.;HDC hDC, const RECT *lprc, HBRUSH hbr
FillRgn;The FillRgn function fills a region by using the specified brush.;HDC hdc, HRGN hrgn, HBRUSH hbr
FindActCtxSectionGuid;The FindActCtxSectionGuid function retrieves information on a specific GUID in the current activation context and returns a ACTCTX_SECTION_KEYED_DATA structure.;DWORD dwFlags, const GUID *lpExtensionGuid, ULONG ulSectionId, const GUID *lpGuidToFind, PACTCTX_SECTION_KEYED_DATA ReturnedData
FindActCtxSectionStringA;The FindActCtxSectionString function retrieves information on a specific string in the current activation context and returns a ACTCTX_SECTION_KEYED_DATA structure.;DWORD dwFlags, const GUID *lpExtensionGuid, ULONG ulSectionId, LPCSTR lpStringToFind, PACTCTX_SECTION_KEYED_DATA ReturnedData
FindActCtxSectionStringW;The FindActCtxSectionString function retrieves information on a specific string in the current activation context and returns a ACTCTX_SECTION_KEYED_DATA structure.;DWORD dwFlags, const GUID *lpExtensionGuid, ULONG ulSectionId, LPCWSTR lpStringToFind, PACTCTX_SECTION_KEYED_DATA ReturnedData
FindAtomA;Searches the local atom table for the specified character string and retrieves the atom associated with that string.;LPCSTR lpString
FindAtomW;Searches the local atom table for the specified character string and retrieves the atom associated with that string.;LPCWSTR lpString
FindByUniqueID;Retrieves a pointer to the IPropertyStore interface instance associated with the specified identity.;LPCWSTR lpszUniqueID, IPropertyStore **ppPropertyStore
FindCloseChangeNotification;Stops change notification handle monitoring.;HANDLE hChangeHandle
FindClose;Closes a file search handle opened by the FindFirstFile, FindFirstFileEx, FindFirstFileNameW, FindFirstFileNameTransactedW, FindFirstFileTransacted, FindFirstStreamTransactedW, or FindFirstStreamW functions.;HANDLE hFindFile
FindCloseUrlCache;Closes the specified cache enumeration handle.;HANDLE hEnumHandle
FindExecutableA;Retrieves the name of and handle to the executable (.exe) file associated with a specific document file.;LPCSTR lpFile, LPCSTR lpDirectory, LPSTR lpResult
FindExecutableW;Retrieves the name of and handle to the executable (.exe) file associated with a specific document file.;LPCWSTR lpFile, LPCWSTR lpDirectory, LPWSTR lpResult
FindFirstChangeNotificationA;Creates a change notification handle and sets up initial change notification filter conditions.;LPCSTR lpPathName, BOOL bWatchSubtree, DWORD dwNotifyFilter
FindFirstChangeNotificationW;Creates a change notification handle and sets up initial change notification filter conditions.;LPCWSTR lpPathName, BOOL bWatchSubtree, DWORD dwNotifyFilter
FindFirstFileA;Searches a directory for a file or subdirectory with a name that matches a specific name (or partial name if wildcards are used).;LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData
FindFirstFileExA;Searches a directory for a file or subdirectory with a name and attributes that match those specified.;LPCSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags
FindFirstFileExW;Searches a directory for a file or subdirectory with a name and attributes that match those specified.;LPCWSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags
FindFirstFileNameTransactedW;Creates an enumeration of all the hard links to the specified file as a transacted operation. The function returns a handle to the enumeration that can be used on subsequent calls to the FindNextFileNameW function.;LPCWSTR lpFileName, DWORD dwFlags, LPDWORD StringLength, PWSTR LinkName, HANDLE hTransaction
FindFirstFileNameW;Creates an enumeration of all the hard links to the specified file. The FindFirstFileNameW function returns a handle to the enumeration that can be used on subsequent calls to the FindNextFileNameW function.;LPCWSTR lpFileName, DWORD dwFlags, LPDWORD StringLength, PWSTR LinkName
FindFirstFileTransactedA;Searches a directory for a file or subdirectory with a name that matches a specific name as a transacted operation.;LPCSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags, HANDLE hTransaction
FindFirstFileTransactedW;Searches a directory for a file or subdirectory with a name that matches a specific name as a transacted operation.;LPCWSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags, HANDLE hTransaction
FindFirstFileW;Searches a directory for a file or subdirectory with a name that matches a specific name (or partial name if wildcards are used).;LPCWSTR lpFileName, LPWIN32_FIND_DATAW lpFindFileData
FindFirstFreeAce;Retrieves a pointer to the first free byte in an access control list (ACL).;PACL pAcl, LPVOID *pAce
FindFirstStreamTransactedW;Enumerates the first stream in the specified file or directory as a transacted operation.;LPCWSTR lpFileName, STREAM_INFO_LEVELS InfoLevel, LPVOID lpFindStreamData, DWORD dwFlags, HANDLE hTransaction
FindFirstStreamW;Enumerates the first stream with a ::$DATA stream type in the specified file or directory.;LPCWSTR lpFileName, STREAM_INFO_LEVELS InfoLevel, LPVOID lpFindStreamData, DWORD dwFlags
FindFirstUrlCacheEntryA;Begins the enumeration of the Internet cache.;LPCSTR lpszUrlSearchPattern, LPINTERNET_CACHE_ENTRY_INFOA lpFirstCacheEntryInfo, LPDWORD lpcbCacheEntryInfo
FindFirstUrlCacheEntryExA;Starts a filtered enumeration of the Internet cache.;LPCSTR lpszUrlSearchPattern, DWORD dwFlags, DWORD dwFilter, GROUPID GroupId, LPINTERNET_CACHE_ENTRY_INFOA lpFirstCacheEntryInfo, LPDWORD lpcbCacheEntryInfo, LPVOID lpGroupAttributes, LPDWORD lpcbGroupAttributes, LPVOID lpReserved
FindFirstUrlCacheEntryExW;Starts a filtered enumeration of the Internet cache.;LPCWSTR lpszUrlSearchPattern, DWORD dwFlags, DWORD dwFilter, GROUPID GroupId, LPINTERNET_CACHE_ENTRY_INFOW lpFirstCacheEntryInfo, LPDWORD lpcbCacheEntryInfo, LPVOID lpGroupAttributes, LPDWORD lpcbGroupAttributes, LPVOID lpReserved
FindFirstUrlCacheEntryW;Begins the enumeration of the Internet cache.;LPCWSTR lpszUrlSearchPattern, LPINTERNET_CACHE_ENTRY_INFOW lpFirstCacheEntryInfo, LPDWORD lpcbCacheEntryInfo
FindFirstUrlCacheGroup;Initiates the enumeration of the cache groups in the Internet cache.;DWORD dwFlags, DWORD dwFilter, LPVOID lpSearchCondition, DWORD dwSearchCondition, GROUPID *lpGroupId, LPVOID lpReserved
FindFirstVolumeA;Retrieves the name of a volume on a computer.;LPSTR lpszVolumeName, DWORD cchBufferLength
FindFirstVolumeMountPointA;Retrieves the name of a mounted folder on the specified volume.;LPCSTR lpszRootPathName, LPSTR lpszVolumeMountPoint, DWORD cchBufferLength
FindFirstVolumeMountPointW;Retrieves the name of a mounted folder on the specified volume.;LPCWSTR lpszRootPathName, LPWSTR lpszVolumeMountPoint, DWORD cchBufferLength
FindFirstVolumeW;Retrieves the name of a volume on a computer.;LPWSTR lpszVolumeName, DWORD cchBufferLength
FindNextChangeNotification;Requests that the operating system signal a change notification handle the next time it detects an appropriate change.;HANDLE hChangeHandle
FindNextFileA;Continues a file search from a previous call to the FindFirstFile, FindFirstFileEx, or FindFirstFileTransacted functions.;HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData
FindNextFileNameW;Continues enumerating the hard links to a file using the handle returned by a successful call to the FindFirstFileNameW function.;HANDLE hFindStream, LPDWORD StringLength, PWSTR LinkName
FindNextFileW;Continues a file search from a previous call to the FindFirstFile, FindFirstFileEx, or FindFirstFileTransacted functions.;HANDLE hFindFile, LPWIN32_FIND_DATAW lpFindFileData
FindNextStreamW;Continues a stream search started by a previous call to the FindFirstStreamW function.;HANDLE hFindStream, LPVOID lpFindStreamData
FindNextUrlCacheEntryA;Retrieves the next entry in the Internet cache.;HANDLE hEnumHandle, LPINTERNET_CACHE_ENTRY_INFOA lpNextCacheEntryInfo, LPDWORD lpcbCacheEntryInfo
FindNextUrlCacheEntryExA;Finds the next cache entry in a cache enumeration started by the FindFirstUrlCacheEntryEx function.;HANDLE hEnumHandle, LPINTERNET_CACHE_ENTRY_INFOA lpNextCacheEntryInfo, LPDWORD lpcbCacheEntryInfo, LPVOID lpGroupAttributes, LPDWORD lpcbGroupAttributes, LPVOID lpReserved
FindNextUrlCacheEntryExW;Finds the next cache entry in a cache enumeration started by the FindFirstUrlCacheEntryEx function.;HANDLE hEnumHandle, LPINTERNET_CACHE_ENTRY_INFOW lpNextCacheEntryInfo, LPDWORD lpcbCacheEntryInfo, LPVOID lpGroupAttributes, LPDWORD lpcbGroupAttributes, LPVOID lpReserved
FindNextUrlCacheEntryW;Retrieves the next entry in the Internet cache.;HANDLE hEnumHandle, LPINTERNET_CACHE_ENTRY_INFOW lpNextCacheEntryInfo, LPDWORD lpcbCacheEntryInfo
FindNextUrlCacheGroup;Retrieves the next cache group in a cache group enumeration started by FindFirstUrlCacheGroup.;HANDLE hFind, GROUPID *lpGroupId, LPVOID lpReserved
FindNextVolumeA;Continues a volume search started by a call to the FindFirstVolume function.;HANDLE hFindVolume, LPSTR lpszVolumeName, DWORD cchBufferLength
FindNextVolumeMountPointA;Continues a mounted folder search started by a call to the FindFirstVolumeMountPoint function.;HANDLE hFindVolumeMountPoint, LPSTR lpszVolumeMountPoint, DWORD cchBufferLength
FindNextVolumeMountPointW;Continues a mounted folder search started by a call to the FindFirstVolumeMountPoint function.;HANDLE hFindVolumeMountPoint, LPWSTR lpszVolumeMountPoint, DWORD cchBufferLength
FindNextVolumeW;Continues a volume search started by a call to the FindFirstVolume function.;HANDLE hFindVolume, LPWSTR lpszVolumeName, DWORD cchBufferLength
FindNLSStringEx;Locates a Unicode string (wide characters) or its equivalent in another Unicode string for a locale specified by name.Caution  Because strings with very different binary representations can compare as identical, this function can raise certain security concerns. For more information, see the discussion of comparison functions in Security Considerations:_International Features.;LPCWSTR lpLocaleName, DWORD dwFindNLSStringFlags, LPCWSTR lpStringSource, int cchSource, LPCWSTR lpStringValue, int cchValue, LPINT pcchFound, LPNLSVERSIONINFO lpVersionInformation, LPVOID lpReserved, LPARAM sortHandle
FindNLSString;Locates a Unicode string (wide characters) or its equivalent in another Unicode string for a locale specified by identifier.Caution  Because strings with very different binary representations can compare as identical, this function can raise certain security concerns. For more information, see the discussion of comparison functions in Security Considerations:_International Features. Note  For interoperability reasons, the application should prefer the FindNLSStringEx function because Microsoft is migrating toward the use of locale names instead of locale identifiers for new locales. Although FindNLSString supports custom locales, most applications should use FindNLSStringEx for this type of support.;LCID Locale, DWORD dwFindNLSStringFlags, LPCWSTR lpStringSource, int cchSource, LPCWSTR lpStringValue, int cchValue, LPINT pcchFound
FindPackagesByPackageFamily;Finds the packages with the specified family name for the current user.;PCWSTR packageFamilyName, UINT32 packageFilters, UINT32 *count, PWSTR *packageFullNames, UINT32 *bufferLength, WCHAR *buffer, UINT32 *packageProperties
FindResourceA;Determines the location of a resource with the specified type and name in the specified module.;HMODULE hModule, LPCSTR lpName, LPCSTR lpType
FindResourceExA;Determines the location of the resource with the specified type, name, and language in the specified module.;HMODULE hModule, LPCSTR lpType, LPCSTR lpName, WORD wLanguage
Find;Retrieves the index number of an ISignerCertificate object.;ISignerCertificate *pSignerCert, LONG *piSignerCert
FindStringOrdinal;Locates a Unicode string (wide characters) in another Unicode string for a non-linguistic comparison.;DWORD dwFindStringOrdinalFlags, LPCWSTR lpStringSource, int cchSource, LPCWSTR lpStringValue, int cchValue, BOOL bIgnoreCase
FindVolumeClose;Closes the specified volume search handle.;HANDLE hFindVolume
FindVolumeMountPointClose;Closes the specified mounted folder search handle.;HANDLE hFindVolumeMountPoint
FindWindowA;Retrieves a handle to the top-level window whose class name and window name match the specified strings. This function does not search child windows. This function does not perform a case-sensitive search.;LPCSTR lpClassName, LPCSTR lpWindowName
FindWindowExA;Retrieves a handle to a window whose class name and window name match the specified strings. The function searches child windows, beginning with the one following the specified child window. This function does not perform a case-sensitive search.;HWND hWndParent, HWND hWndChildAfter, LPCSTR lpszClass, LPCSTR lpszWindow
FindWindowExW;Retrieves a handle to a window whose class name and window name match the specified strings. The function searches child windows, beginning with the one following the specified child window. This function does not perform a case-sensitive search.;HWND hWndParent, HWND hWndChildAfter, LPCWSTR lpszClass, LPCWSTR lpszWindow
FindWindowW;Retrieves a handle to the top-level window whose class name and window name match the specified strings. This function does not search child windows. This function does not perform a case-sensitive search.;LPCWSTR lpClassName, LPCWSTR lpWindowName
FlashWindowEx;Flashes the specified window. It does not change the active state of the window.;PFLASHWINFO pfwi
FlashWindow;Flashes the specified window one time. It does not change the active state of the window.;HWND hWnd, BOOL bInvert
FlattenPath;The FlattenPath function transforms any curves in the path that is selected into the current device context (DC), turning each curve into a sequence of lines.;HDC hdc
FloodFill;The FloodFill function fills an area of the display surface with the current brush. The area is assumed to be bounded as specified by the color parameter.;HDC hdc, int x, int y, COLORREF color
FlsAlloc;Allocates a fiber local storage (FLS) index.;PFLS_CALLBACK_FUNCTION lpCallback
FlsFree;Releases a fiber local storage (FLS) index, making it available for reuse.;DWORD dwFlsIndex
FlsGetValue;Retrieves the value in the calling fiber's fiber local storage (FLS) slot for the specified FLS index. Each fiber has its own slot for each FLS index.;DWORD dwFlsIndex
FlsSetValue;Stores a value in the calling fiber's fiber local storage (FLS) slot for the specified FLS index. Each fiber has its own slot for each FLS index.;DWORD dwFlsIndex, PVOID lpFlsData
FlushFileBuffers;Flushes the buffers of a specified file and causes all buffered data to be written to a file.;HANDLE hFile
FlushInstructionCache;Flushes the instruction cache for the specified process.;HANDLE hProcess, LPCVOID lpBaseAddress, SIZE_T dwSize
FlushIpNetTable2;The FlushIpNetTable2 function flushes the IP neighbor table on the local computer.;ADDRESS_FAMILY Family, NET_IFINDEX InterfaceIndex
FlushIpNetTable;The FlushIpNetTable function deletes all ARP entries for the specified interface from the ARP table on the local computer.;DWORD dwIfIndex
FlushIpPathTable;The FlushIpPathTable function flushes the IP path table on the local computer.;ADDRESS_FAMILY Family
FlushProcessWriteBuffers;Flushes the write queue of each processor that is running a thread of the current process.;
FlushViewOfFile;Writes to the disk a byte range within a mapped view of a file.;LPCVOID lpBaseAddress, SIZE_T dwNumberOfBytesToFlush
FmtIdToPropStgName;Converts a property set format identifier (FMTID) to its storage or stream name.;const FMTID *pfmtid, LPOLESTR oszName
FoldStringA;Maps one Unicode string to another, performing the specified transformation.;DWORD dwMapFlags, LPCSTR lpSrcStr, int cchSrc, LPSTR lpDestStr, int cchDest
FormatApplicationUserModelId;Constructs an application user model ID from the package family name and the package relative application ID (PRAID).;PCWSTR packageFamilyName, PCWSTR packageRelativeApplicationId, UINT32 *applicationUserModelIdLength, PWSTR applicationUserModelId
FormatMessageA;Formats a message string.;DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPSTR lpBuffer, DWORD nSize, va_list *Arguments
FormatMessage;Formats a message string.;DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPTSTR lpBuffer, DWORD nSize, va_list *Arguments
FormatMessageW;Formats a message string.;DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPWSTR lpBuffer, DWORD nSize, va_list *Arguments
FrameRect;The FrameRect function draws a border around the specified rectangle by using the specified brush. The width and height of the border are always one logical unit.;HDC hDC, const RECT *lprc, HBRUSH hbr
FrameRgn;The FrameRgn function draws a border around the specified region by using the specified brush.;HDC hdc, HRGN hrgn, HBRUSH hbr, int w, int h
FreeAddrInfoEx;Frees address information that the GetAddrInfoEx function dynamically allocates in addrinfoex structures.;PADDRINFOEXA pAddrInfoEx
FreeAddrInfoExW;Frees address information that the GetAddrInfoEx function dynamically allocates in addrinfoex structures.;PADDRINFOEXW pAddrInfoEx
freeaddrinfo;Frees address information that the getaddrinfo function dynamically allocates in addrinfo structures.;PADDRINFOA pAddrInfo
FreeAddrInfoW;Frees address information that the GetAddrInfoW function dynamically allocates in addrinfoW structures.;PADDRINFOW pAddrInfo
FreeADsMem;Frees the memory allocated by AllocADsMem or ReallocADsMem.;LPVOID pMem
FreeADsStr;Frees the memory of a string allocated by AllocADsStr or ReallocADsStr.;LPWSTR pStr
FreeBuffer;The FreeBuffer method frees memory allocated by the attachment snap-in extension.;PVOID pvData
FreeBuffer;The FreeBuffer method frees memory allocated by the Security Configuration snap-in.;PVOID pvData
FreeClusterCrypt;TBD.;PVOID pCryptInfo
FreeClusterHealthFaultArray;TBD.;CLUSTER_HEALTH_FAULT_ARRAY *clusterHealthFaultArray
FreeClusterHealthFault;TBD.;CLUSTER_HEALTH_FAULT *clusterHealthFault
FreeContextBuffer;Enables callers of security package functions to free memory buffers allocated by the security package.;PVOID pvContextBuffer
FreeCredentialsHandle;Notifies the security system that the credentials are no longer needed.;PCredHandle phCredential
FreeGPOListA;The FreeGPOList function frees the specified list of GPOs.;PGROUP_POLICY_OBJECTA pGPOList
FreeGPOListW;The FreeGPOList function frees the specified list of GPOs.;PGROUP_POLICY_OBJECTW pGPOList
FreeInheritedFromArray;Frees memory allocated by the GetInheritanceSource function.;PINHERITED_FROMW pInheritArray, USHORT AceCnt, PFN_OBJECT_MGR_FUNCTS pfnArray
FreeLibraryAndExitThread;Decrements the reference count of a loaded dynamic-link library (DLL) by one, then calls ExitThread to terminate the calling thread.;HMODULE hLibModule, DWORD dwExitCode
FreeLibrary;Frees the loaded dynamic-link library (DLL) module and, if necessary, decrements its reference count.;HMODULE hLibModule
FreeLibraryWhenCallbackReturns;Specifies the DLL that the thread pool will unload when the current callback completes.;PTP_CALLBACK_INSTANCE pci, HMODULE mod
FreeMibTable;Frees the buffer allocated by the functions that return tables of network interfaces, addresses, and routes (GetIfTable2 and GetAnycastIpAddressTable, for example).;PVOID Memory
FreePropVariantArray;The FreePropVariantArray function calls PropVariantClear on each of the PROPVARIANT structures in the rgvars array to make the value zero for each of the members of the array.;ULONG cVariants, PROPVARIANT *rgvars
freeRequestInfoBlob;The freeRequestInfoBlob method deletes a certificate context. This method was first defined in the IEnroll interface.;CRYPT_DATA_BLOB pkcs7OrPkcs10
freeRequestInfo;Releases session identifiers when they are no longer needed.;BSTR PKCS7OrPKCS10
FreeResource;Decrements (decreases by one) the reference count of a loaded resource. When the reference count reaches zero, the memory occupied by the resource is freed.;HGLOBAL hResData
FreeSid;Frees a security identifier (SID) previously allocated by using the AllocateAndInitializeSid function.;PSID pSid
FreeUrlCacheSpaceA;Frees space in the cache.;LPCSTR lpszCachePath, DWORD dwSize, DWORD dwFilter
FreeUrlCacheSpaceW;Frees space in the cache.;LPCWSTR lpszCachePath, DWORD dwSize, DWORD dwFilter
FreeUserPhysicalPages;Frees physical memory pages that are allocated previously by using AllocateUserPhysicalPages or AllocateUserPhysicalPagesNuma.;HANDLE hProcess, PULONG_PTR NumberOfPages, PULONG_PTR PageArray
FtpCommandA;Sends commands directly to an FTP server.;HINTERNET hConnect, BOOL fExpectResponse, DWORD dwFlags, LPCSTR lpszCommand, DWORD_PTR dwContext, HINTERNET *phFtpCommand
FtpCommandW;Sends commands directly to an FTP server.;HINTERNET hConnect, BOOL fExpectResponse, DWORD dwFlags, LPCWSTR lpszCommand, DWORD_PTR dwContext, HINTERNET *phFtpCommand
FtpCreateDirectoryA;Creates a new directory on the FTP server.;HINTERNET hConnect, LPCSTR lpszDirectory
FtpCreateDirectoryW;Creates a new directory on the FTP server.;HINTERNET hConnect, LPCWSTR lpszDirectory
FtpDeleteFileA;Deletes a file stored on the FTP server.;HINTERNET hConnect, LPCSTR lpszFileName
FtpDeleteFileW;Deletes a file stored on the FTP server.;HINTERNET hConnect, LPCWSTR lpszFileName
FtpFindFirstFileA;Searches the specified directory of the given FTP session. File and directory entries are returned to the application in the WIN32_FIND_DATA structure.;HINTERNET hConnect, LPCSTR lpszSearchFile, LPWIN32_FIND_DATAA lpFindFileData, DWORD dwFlags, DWORD_PTR dwContext
FtpFindFirstFileW;Searches the specified directory of the given FTP session. File and directory entries are returned to the application in the WIN32_FIND_DATA structure.;HINTERNET hConnect, LPCWSTR lpszSearchFile, LPWIN32_FIND_DATAW lpFindFileData, DWORD dwFlags, DWORD_PTR dwContext
FtpGetCurrentDirectoryA;Retrieves the current directory for the specified FTP session.;HINTERNET hConnect, LPSTR lpszCurrentDirectory, LPDWORD lpdwCurrentDirectory
FtpGetCurrentDirectoryW;Retrieves the current directory for the specified FTP session.;HINTERNET hConnect, LPWSTR lpszCurrentDirectory, LPDWORD lpdwCurrentDirectory
FtpGetFileA;Retrieves a file from the FTP server and stores it under the specified file name, creating a new local file in the process.;HINTERNET hConnect, LPCSTR lpszRemoteFile, LPCSTR lpszNewFile, BOOL fFailIfExists, DWORD dwFlagsAndAttributes, DWORD dwFlags, DWORD_PTR dwContext
FtpGetFileSize;Retrieves the file size of the requested FTP resource.;HINTERNET hFile, LPDWORD lpdwFileSizeHigh
FtpGetFileW;Retrieves a file from the FTP server and stores it under the specified file name, creating a new local file in the process.;HINTERNET hConnect, LPCWSTR lpszRemoteFile, LPCWSTR lpszNewFile, BOOL fFailIfExists, DWORD dwFlagsAndAttributes, DWORD dwFlags, DWORD_PTR dwContext
FtpOpenFileA;Initiates access to a remote file on an FTP server for reading or writing.;HINTERNET hConnect, LPCSTR lpszFileName, DWORD dwAccess, DWORD dwFlags, DWORD_PTR dwContext
FtpOpenFileW;Initiates access to a remote file on an FTP server for reading or writing.;HINTERNET hConnect, LPCWSTR lpszFileName, DWORD dwAccess, DWORD dwFlags, DWORD_PTR dwContext
FtpPutFileA;Stores a file on the FTP server.;HINTERNET hConnect, LPCSTR lpszLocalFile, LPCSTR lpszNewRemoteFile, DWORD dwFlags, DWORD_PTR dwContext
FtpPutFileW;Stores a file on the FTP server.;HINTERNET hConnect, LPCWSTR lpszLocalFile, LPCWSTR lpszNewRemoteFile, DWORD dwFlags, DWORD_PTR dwContext
FtpRemoveDirectoryA;Removes the specified directory on the FTP server.;HINTERNET hConnect, LPCSTR lpszDirectory
FtpRemoveDirectoryW;Removes the specified directory on the FTP server.;HINTERNET hConnect, LPCWSTR lpszDirectory
FtpRenameFileA;Renames a file stored on the FTP server.;HINTERNET hConnect, LPCSTR lpszExisting, LPCSTR lpszNew
FtpRenameFileW;Renames a file stored on the FTP server.;HINTERNET hConnect, LPCWSTR lpszExisting, LPCWSTR lpszNew
FtpSetCurrentDirectoryA;Changes to a different working directory on the FTP server.;HINTERNET hConnect, LPCSTR lpszDirectory
FtpSetCurrentDirectoryW;Changes to a different working directory on the FTP server.;HINTERNET hConnect, LPCWSTR lpszDirectory
gai_strerrorA;The gai_strerror function assists in printing error messages based on the EAI_* errors returned by the getaddrinfo function.;int ecode
gai_strerrorW;The gai_strerror function assists in printing error messages based on the EAI_* errors returned by the getaddrinfo function.;int ecode
GdiAlphaBlend;The GdiAlphaBlend function displays bitmaps that have transparent or semitransparent pixels.;HDC hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, HDC hdcSrc, int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, BLENDFUNCTION ftn
GdiComment;The GdiComment function copies a comment from a buffer into a specified enhanced-format metafile.;HDC hdc, UINT nSize, const BYTE *lpData
GdiFlush;The GdiFlush function flushes the calling thread's current batch.;
GdiGetBatchLimit;The GdiGetBatchLimit function returns the maximum number of function calls that can be accumulated in the calling thread's current batch. The system flushes the current batch whenever this limit is exceeded.;
GdiGradientFill;The GdiGradientFill function fills rectangle and triangle structures.;HDC hdc, PTRIVERTEX pVertex, ULONG nVertex, PVOID pMesh, ULONG nCount, ULONG ulMode
GdiSetBatchLimit;The GdiSetBatchLimit function sets the maximum number of function calls that can be accumulated in the calling thread's current batch. The system flushes the current batch whenever this limit is exceeded.;DWORD dw
GdiTransparentBlt;The GdiTransparentBlt function performs a bit-block transfer of the color data corresponding to a rectangle of pixels from the specified source device context into a destination device context.;HDC hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, HDC hdcSrc, int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, UINT crTransparent
GenerateChallenge;Performs the policy decision whether to issue a challenge password to the SCEP client.;PCWSTR pwszTemplate, PCWSTR pwszParams, PWSTR *ppwszResponse
GetAcceptExSockaddrs;Parses the data obtained from a call to the AcceptEx function and passes the local and remote addresses to a sockaddr structure.Note  This function is a Microsoft-specific extension to the Windows Sockets specification. .;PVOID lpOutputBuffer, DWORD dwReceiveDataLength, DWORD dwLocalAddressLength, DWORD dwRemoteAddressLength, sockaddr **LocalSockaddr, LPINT LocalSockaddrLength, sockaddr **RemoteSockaddr, LPINT RemoteSockaddrLength
GetAcceptLanguagesA;Retrieves a string used with websites when specifying language preferences.;LPSTR pszLanguages, DWORD *pcchLanguages
GetAcceptLanguagesW;Retrieves a string used with websites when specifying language preferences.;LPWSTR pszLanguages, DWORD *pcchLanguages
GetAccessRights;The GetAccessRights method requests information about the access rights that can be controlled for a securable object.;const GUID *pguidObjectType, DWORD dwFlags, PSI_ACCESS *ppAccess, ULONG *pcAccesses, ULONG *piDefaultAccess
GetAce;Obtains a pointer to an access control entry (ACE) in an access control list (ACL).;PACL pAcl, DWORD dwAceIndex, LPVOID *pAce
GetAclInformation;Retrieves information about an access control list (ACL).;PACL pAcl, LPVOID pAclInformation, DWORD nAclInformationLength, ACL_INFORMATION_CLASS dwAclInformationClass
GetACP;Retrieves the current Windows ANSI code page identifier for the operating system.Caution  The ANSI API functions, for example, the ANSI version of TextOut, implicitly use GetACP to translate text to or from Unicode.;
GetActivationFactory;Gets the activation factory for the specified runtime class.;HSTRING activatableClassId, T **factory
GetActiveProcessorCount;Returns the number of active processors in a processor group or in the system.;WORD GroupNumber
GetActiveProcessorGroupCount;Returns the number of active processor groups in the system.;
GetActiveWindow;Retrieves the window handle to the active window attached to the calling thread's message queue.;
GetAdapterIndex;The GetAdapterIndex function obtains the index of an adapter, given its name.;LPWSTR AdapterName, PULONG IfIndex
GetAdapterOrderMap;The GetAdapterOrderMap function obtains an adapter order map that indicates priority for interfaces on the local computer.;
GetAdaptersAddresses;Retrieves the addresses associated with the adapters on the local computer.;ULONG Family, ULONG Flags, PVOID Reserved, PIP_ADAPTER_ADDRESSES AdapterAddresses, PULONG SizePointer
GetAdaptersInfo;The GetAdaptersInfo function retrieves adapter information for the local computer.;PIP_ADAPTER_INFO AdapterInfo, PULONG SizePointer
GetAddressByNameA;GetAddressByName is no longer available for use as of Windows Sockets 2.;DWORD dwNameSpace, LPGUID lpServiceType, LPSTR lpServiceName, LPINT lpiProtocols, DWORD dwResolution, LPSERVICE_ASYNC_INFO lpServiceAsyncInfo, LPVOID lpCsaddrBuffer, LPDWORD lpdwBufferLength, LPSTR lpAliasBuffer, LPDWORD lpdwAliasBufferLength
GetAddressByNameW;GetAddressByName is no longer available for use as of Windows Sockets 2.;DWORD dwNameSpace, LPGUID lpServiceType, LPWSTR lpServiceName, LPINT lpiProtocols, DWORD dwResolution, LPSERVICE_ASYNC_INFO lpServiceAsyncInfo, LPVOID lpCsaddrBuffer, LPDWORD lpdwBufferLength, LPWSTR lpAliasBuffer, LPDWORD lpdwAliasBufferLength
GetAddrInfoExA;Provides protocol-independent name resolution with additional parameters to qualify which namespace providers should handle the request.;PCSTR pName, PCSTR pServiceName, DWORD dwNameSpace, LPGUID lpNspId, const ADDRINFOEXA *hints, PADDRINFOEXA *ppResult, timeval *timeout, LPOVERLAPPED lpOverlapped, LPLOOKUPSERVICE_COMPLETION_ROUTINE lpCompletionRoutine, LPHANDLE lpNameHandle
GetAddrInfoExCancel;Cancels an asynchronous operation by the GetAddrInfoEx function.;LPHANDLE lpHandle
GetAddrInfoExOverlappedResult;Gets the return code for an OVERLAPPED structure used by an asynchronous operation for the GetAddrInfoEx function.;LPOVERLAPPED lpOverlapped
GetAddrInfoExW;Provides protocol-independent name resolution with additional parameters to qualify which namespace providers should handle the request.;PCWSTR pName, PCWSTR pServiceName, DWORD dwNameSpace, LPGUID lpNspId, const ADDRINFOEXW *hints, PADDRINFOEXW *ppResult, timeval *timeout, LPOVERLAPPED lpOverlapped, LPLOOKUPSERVICE_COMPLETION_ROUTINE lpCompletionRoutine, LPHANDLE lpHandle
getaddrinfo;Provides protocol-independent translation from an ANSI host name to an address.;PCSTR pNodeName, PCSTR pServiceName, const ADDRINFOA *pHints, PADDRINFOA *ppResult
GetAddrInfoW;Provides protocol-independent translation from a Unicode host name to an address.;PCWSTR pNodeName, PCWSTR pServiceName, const ADDRINFOW *pHints, PADDRINFOW *ppResult
GetAlgName;Retrieves the name of a cryptographic algorithm given its ID. The values retrieved by this method depend on the current cryptographic service provider (CSP). This method was first defined in the ICEnroll3 interface.;LONG algID, BSTR *pbstr
GetAlgNameWStr;Retrieves the name of a cryptographic algorithm given its ID. The values retrieved by this method depend on the current cryptographic service provider (CSP).;LONG algID, LPWSTR *ppwsz
GetAlgorithmName;Retrieves the display name associated with an algorithm object identifier (OID).;ObjectIdGroupId GroupId, ObjectIdPublicKeyFlags KeyFlags, BSTR *pstrAlgorithmName
GetAlgorithmOid;Retrieves the algorithm object identifier (OID). This method is web enabled.;LONG Length, AlgorithmFlags AlgFlags, IObjectId **ppValue
get_Algorithm;Retrieves an object identifier (OID) for the public key algorithm.;IObjectId **ppValue
get_Algorithm;Specifies or retrieves an object identifier (OID) for the public key algorithm.;IObjectId **ppValue
GetAllowUnTrustedCA;Retrieves a value that specifies whether to allow an untrusted certification authority certificate.;VARIANT_BOOL *pValue
GetAllProperties;Gets all properties in a property set.;VARIANT *pVarProperties
GetAllRecognizers;Gets all recognizers.;CLSID **recognizerClsids, ULONG *count
get_AlternateSignatureAlgorithmSet;Retrieves a Boolean value that specifies whether the AlternateSignatureAlgorithm property has been explicitly set by a caller.;VARIANT_BOOL *pValue
get_AlternateSignatureAlgorithm;Specifies and retrieves a Boolean value that indicates whether the signature algorithm object identifier (OID) for a PKCS;VARIANT_BOOL *pValue
get_AlternateSignatureAlgorithm;Specifies and retrieves a Boolean value that specifies whether the GetSignatureAlgorithm method should retrieve a discrete or combined algorithm object identifier (OID) for a PKCS;VARIANT_BOOL *pValue
get_AlternativeNames;Retrieves a collection of subject alternative names.;IAlternativeNames **ppValue
GetAltTabInfoA;Retrieves status information for the specified window if it is the application-switching (ALT+TAB) window.;HWND hwnd, int iItem, PALTTABINFO pati, LPSTR pszItemText, UINT cchItemText
GetAltTabInfoW;Retrieves status information for the specified window if it is the application-switching (ALT+TAB) window.;HWND hwnd, int iItem, PALTTABINFO pati, LPWSTR pszItemText, UINT cchItemText
GetAncestor;Retrieves the handle to the ancestor of the specified window.;HWND hwnd, UINT gaFlags
GetAnycastIpAddressEntry;Retrieves information for an existing anycast IP address entry on the local computer.;PMIB_ANYCASTIPADDRESS_ROW Row
GetAnycastIpAddressTable;Retrieves the anycast IP address table on the local computer.;ADDRESS_FAMILY Family, PMIB_ANYCASTIPADDRESS_TABLE *Table
GET_APPCOMMAND_LPARAM;Retrieves the application command from the specified LPARAM value.;lParam
GetAppContainerNamedObjectPath;Retrieves the named object path for the app container.;HANDLE Token, PSID AppContainerSid, ULONG ObjectPathLength, LPWSTR ObjectPath, PULONG ReturnLength
get_ApplicationData;Sets or retrieves an opaque field that can be used by the application to store information.;BSTR *pbstrApplicationData
get_ApplicationData;The ApplicationData property of IAzOperation sets or retrieves an opaque field that can be used by the application to store information.;BSTR *pbstrApplicationData
get_ApplicationData;The ApplicationData property of IAzRole sets or retrieves an opaque field that can be used by the application to store information.;BSTR *pbstrApplicationData
get_ApplicationData;The ApplicationData property of IAzScope sets or retrieves an opaque field that can be used by the application to store information.;BSTR *pbstrApplicationData
get_ApplicationData;The ApplicationData property of IAzTask sets or retrieves an opaque field that can be used by the application to store information.;BSTR *pbstrApplicationData
get_ApplicationGroups;Retrieves an IAzApplicationGroups object that is used to enumerate IAzApplicationGroup objects from the policy data.;IAzApplicationGroups **ppGroupCollection
GetApplicationRecoveryCallback;Retrieves a pointer to the callback routine registered for the specified process. The address returned is in the virtual address space of the process.;HANDLE hProcess, APPLICATION_RECOVERY_CALLBACK *pRecoveryCallback, PVOID *ppvParameter, PDWORD pdwPingInterval, PDWORD pdwFlags
GetApplicationRestartSettings;Retrieves the restart information registered for the specified process.;HANDLE hProcess, PWSTR pwzCommandline, PDWORD pcchSize, PDWORD pdwFlags
get_Applications;Retrieves an IAzApplications object that is used to enumerate IAzApplication objects from the policy store.;IAzApplications **ppAppCollection
GetApplicationUserModelIdFromToken;Gets the application user model ID for the specified token.;HANDLE token, UINT32 *applicationUserModelIdLength, PWSTR applicationUserModelId
GetApplicationUserModelId;Gets the application user model ID for the specified process.;HANDLE hProcess, UINT32 *applicationUserModelIdLength, PWSTR applicationUserModelId
GetAppliedGPOListA;The GetAppliedGPOList function retrieves the list of GPOs applied for the specified user or computer.;DWORD dwFlags, LPCSTR pMachineName, PSID pSidUser, GUID *pGuidExtension, PGROUP_POLICY_OBJECTA *ppGPOList
GetAppliedGPOListW;The GetAppliedGPOList function retrieves the list of GPOs applied for the specified user or computer.;DWORD dwFlags, LPCWSTR pMachineName, PSID pSidUser, GUID *pGuidExtension, PGROUP_POLICY_OBJECTW *ppGPOList
get_ApplyStoreSacl;Sets or retrieves a value that indicates whether policy audits should be generated when the authorization store is modified.;BOOL *pbApplyStoreSacl
get_ApplyStoreSacl;Sets or retrieves a value that indicates whether policy audits should be generated when the authorization store is modified.;BOOL *pbProp
get_AppMembers;Retrieves the application groups that belong to the role.;VARIANT *pvarProp
get_AppMembers;Retrieves the application groups that belong to this application group.;VARIANT *pvarProp
get_AppNonMembers;Retrieves the application groups that are refused membership in this application group.;VARIANT *pvarProp
GetArcDirection;The GetArcDirection function retrieves the current arc direction for the specified device context. Arc and rectangle functions use the arc direction.;HDC hdc
get_ArchivedKeyHash;Retrieves a SHA-1 hash of the private key.;EncodingType Encoding, BSTR *pValue
GetArchivedKey;Retrieves an archived key recovery BLOB.;const BSTR strConfig, LONG RequestId, LONG Flags, BSTR *pstrArchivedKey
get_Archived;Retrieves a Boolean value that specifies whether the certificate has been archived.;VARIANT_BOOL *pValue
get_ArchivePrivateKey;Specifies or retrieves a Boolean value that indicates whether to archive a private key on the certification authority (CA).;VARIANT_BOOL *pValue
GetAspectRatioFilterEx;The GetAspectRatioFilterEx function retrieves the setting for the current aspect-ratio filter.;HDC hdc, LPSIZE lpsize
GetAssignedScopesPage;Retrieves a list of the scopes in which the client represented by the current IAzClientContext2 object is assigned to at least one role.;LONG lOptions, LONG PageSize, VARIANT *pvarCursor, VARIANT *pvarScopeNames
GetAsyncKeyState;Determines whether a key is up or down at the time the function is called, and whether the key was pressed after a previous call to GetAsyncKeyState.;int vKey
GetAtomNameA;Retrieves a copy of the character string associated with the specified local atom.;ATOM nAtom, LPSTR lpBuffer, int nSize
GetAtomNameW;Retrieves a copy of the character string associated with the specified local atom.;ATOM nAtom, LPWSTR lpBuffer, int nSize
GetAt;Retrieves an IIdentityProvider interface pointer for the specified identity provider.;const DWORD dwProvider, GUID *pProvGuid, IUnknown **ppIdentityProvider
get_AttestationEncryptionCertificate;The certificate used to encrypt the EKPUB and EKCERT values from the client. This property must be set to a valid certificate that chains to a trusted machine root.;EncodingType Encoding, BSTR *pValue
get_AttestPrivateKey;True if the created private key needs to be attested; otherwise false. If true, it is expected that the AttestationEncryptionCertificate property has been set.;VARIANT_BOOL *pValue
GetAuditedPermissionsFromAclA;Retrieves the audited access rights for a specified trustee.;PACL pacl, PTRUSTEE_A pTrustee, PACCESS_MASK pSuccessfulAuditedRights, PACCESS_MASK pFailedAuditRights
GetAuditedPermissionsFromAclW;Retrieves the audited access rights for a specified trustee.;PACL pacl, PTRUSTEE_W pTrustee, PACCESS_MASK pSuccessfulAuditedRights, PACCESS_MASK pFailedAuditRights
GetAuthentication;The GetAuthentication method retrieves a value that specifies the type of authentication used by the certificate enrollment policy (CEP) server to authenticate a client. This value is set by the Initialize method.;X509EnrollmentAuthFlags *pValue
GetAuthFlags;Retrieves a value that specifies the authentication type used by the client to authenticate itself to the certificate enrollment policy (CEP) server.;X509EnrollmentAuthFlags *pValue
get_AuthFlags;Specifies and retrieves a value that indicates the authentication type used by the client to authenticate itself to the certificate enrollment policy (CEP) server.;X509EnrollmentAuthFlags *pValue
get_AuthorityKeyIdentifier;Retrieves a byte array that contains the extension value.;EncodingType Encoding, BSTR *pValue
get_AuthzInterfaceClsid;Sets or retrieves the class identifier (CLSID) of the interface that the user interface (UI) uses to perform application-specific operations.;BSTR *pbstrProp
GetAutoRotationState;Retrieves an AR_STATE value containing the state of screen auto-rotation for the system, for example whether auto-rotation is supported, and whether it is enabled by the user.;PAR_STATE pState
GetAwarenessFromDpiAwarenessContext;Retrieves the DPI_AWARENESS value from a DPI_AWARENESS_CONTEXT.;DPI_AWARENESS_CONTEXT value
get_BackedUpTime;Retrieves the date and time at which the certificate was backed up.;DATE *pDate
get_BackedUpValue;Retrieves a Boolean value that identifies whether the certificate was backed up.;VARIANT_BOOL *pValue
GetBestInterfaceEx;The GetBestInterfaceEx function retrieves the index of the interface that has the best route to the specified IPv4 or IPv6 address.;sockaddr *pDestAddr, PDWORD pdwBestIfIndex
GetBestInterface;The GetBestInterface function retrieves the index of the interface that has the best route to the specified IPv4 address.;IPAddr dwDestAddr, PDWORD pdwBestIfIndex
GetBestResultString;Retrieves the best result string.;HRECOCONTEXT hrc, ULONG *pcSize, WCHAR *pwcBestResult
GetBestRoute2;Retrieves the IP route entry on the local computer for the best route to the specified destination IP address.;NET_LUID *InterfaceLuid, NET_IFINDEX InterfaceIndex, const SOCKADDR_INET *SourceAddress, const SOCKADDR_INET *DestinationAddress, ULONG AddressSortOptions, PMIB_IPFORWARD_ROW2 BestRoute, SOCKADDR_INET *BestSourceAddress
GetBestRoute;The GetBestRoute function retrieves the best route to the specified destination IP address.;DWORD dwDestAddr, DWORD dwSourceAddr, PMIB_IPFORWARDROW pBestRoute
GetBinaryTypeA;Determines whether a file is an executable (.exe) file, and if so, which subsystem runs the executable file.;LPCSTR lpApplicationName, LPDWORD lpBinaryType
GetBinaryTypeW;Determines whether a file is an executable (.exe) file, and if so, which subsystem runs the executable file.;LPCWSTR lpApplicationName, LPDWORD lpBinaryType
get_BitCount;Retrieves the length, in bits, of the encryption key.;LONG *pValue
GetBitCount;Returns the number of bits in a bit string that belongs to the CertEncodeBitString object and has been initialized by an earlier call to ICertEncodeBitString::Decode.;LONG *pBitCount
GetBitmapBits;The GetBitmapBits function copies the bitmap bits of a specified device-dependent bitmap into a buffer.;HBITMAP hbit, LONG cb, LPVOID lpvBits
GetBitmapDimensionEx;The GetBitmapDimensionEx function retrieves the dimensions of a compatible bitmap. The retrieved dimensions must have been set by the SetBitmapDimensionEx function.;HBITMAP hbit, LPSIZE lpsize
GetBitString;Returns the string of bits in the object's bit string.;BSTR *pstrBitString
get_BizRule;Gets or sets the script that determines membership for this application group.;BSTR *pbstrProp
get_BizRuleImportedPath;Gets or sets the path of the file that contains the business rule script associated with this application group.;BSTR *pbstrProp
get_BizRuleImportedPath;Sets or retrieves the path to the file from which the business rule (BizRule) is imported.;BSTR *pbstrProp
get_BizRuleInterfaces;Gets the collection of IDispatch interfaces that can be called by the business rule (BizRule) script associated with this client context.;IAzBizRuleInterfaces **ppBizRuleInterfaces
get_BizRuleLanguage;Gets or sets the programming language of the business rule script associated with this application group.;BSTR *pbstrProp
get_BizRuleLanguage;Sets or retrieves the scripting language in which the business rule (BizRule) is implemented.;BSTR *pbstrProp
get_BizRuleParameters;Gets the collection of parameters that can be passed by the business rule (BizRule) script associated with this client context.;IAzBizRuleParameters **ppBizRuleParam
get_BizRulesEnabled;Gets or sets a value that indicates whether business rules are enabled for this application.;VARIANT_BOOL *pbEnabled
get_BizRule;Sets or retrieves the text of the script that implements the business rule (BizRule).;BSTR *pbstrProp
get_BizrulesWritable;Retrieves a value that indicates whether a non-delegated scope is writable.;BOOL *pfProp
GetBkColor;The GetBkColor function returns the current background color for the specified device context.;HDC hdc
GetBkMode;The GetBkMode function returns the current background mix mode for a specified device context. The background mix mode of a device context affects text, hatched brushes, and pen styles that are not solid lines.;HDC hdc
GetBoundsRect;The GetBoundsRect function obtains the current accumulated bounding rectangle for a specified device context.;HDC hdc, LPRECT lprect, UINT flags
GetBrushOrgEx;The GetBrushOrgEx function retrieves the current brush origin for the specified device context. This function replaces the GetBrushOrg function.;HDC hdc, LPPOINT lppt
GetBusinessRuleString;Returns the application-specific string for the business rule (BizRule).;BSTR *pbstrBusinessRuleString
get_BusinessRuleString;Sets or retrieves an application-specific string for the Business Rule (BizRule).;BSTR *pbstrBusinessRuleString
GetBValue;The GetBValue macro retrieves an intensity value for the blue component of a red, green, blue (RGB) value.;rgb
get_CACertificate;Gets an X.509 certificate that has been encoded by using Distinguished Encoding Rules (DER) and that is for a certification authority (CA).;VARIANT *pVal
GetCACertificate;Returns the certification authority (CA) certificate for the Certificate Services server.;LONG fExchangeCertificate, const BSTR strConfig, LONG Flags, BSTR *pstrCertificate
GetCacheDir;Retrieves the name of the directory on the certificate enrollment policy (CEP) server that contains the policy cache file.;BSTR *pValue
GetCachePath;Retrieves the path of the policy cache file on the certificate enrollment policy (CEP) server.;BSTR *pValue
get_CAConfig;Gets or sets a certification authority (CA) name with which a signing certificate must be signed.;BSTR *pVal
get_CAConfigString;Retrieves the configuration string that identifies the certification authority (CA) to which the certificate request was submitted.;BSTR *pValue
get_CADnsName;Retrieves the Domain Naming System (DNS) name of the certification authority (CA).;BSTR *pValue
get_CAErrorId;Gets the ID for additional error information related to a failed certification authority (CA) specification.;LONG *pVal
get_CAErrorString;Gets the string data for additional error information related to a failed certification authority (CA) specification.;BSTR *pVal
GetCalendarInfoA;Retrieves information about a calendar for a locale specified by identifier.;LCID Locale, CALID Calendar, CALTYPE CalType, LPSTR lpCalData, int cchData, LPDWORD lpValue
GetCalendarInfoEx;Retrieves information about a calendar for a locale specified by name.Note  The application should call this function in preference to GetCalendarInfo if designed to run only on Windows Vista and later. Note  This function can retrieve data that changes between releases, for example, due to a custom locale. If your application must persist or transmit data, see Using Persistent Locale Data.;LPCWSTR lpLocaleName, CALID Calendar, LPCWSTR lpReserved, CALTYPE CalType, LPWSTR lpCalData, int cchData, LPDWORD lpValue
GetCalendarInfoW;Retrieves information about a calendar for a locale specified by identifier.;LCID Locale, CALID Calendar, CALTYPE CalType, LPWSTR lpCalData, int cchData, LPDWORD lpValue
get_CAName;Retrieves the common name (CN) of the certification authority (CA).;BSTR *pValue
get_CanBeDelegated;Retrieves a value that indicates whether the scope can be delegated.;BOOL *pfProp
GetCapabilitiesStringLength;Retrieves the length of a monitor's capabilities string.;HANDLE hMonitor, LPDWORD pdwCapabilitiesStringLengthInCharacters
GetCAPropertyDisplayName;Retrieves the property display name for a certification authority (CA) property.;const BSTR strConfig, LONG PropId, BSTR *pstrDisplayName
GetCAPropertyDisplayName;The ICertAdmin2::GetCAPropertyDisplayName method retrieves the property display name for a certification authority (CA) property.;const BSTR strConfig, LONG PropId, BSTR *pstrDisplayName
GetCAPropertyFlags;Retrieves the property flags for a certification authority (CA) property.;const BSTR strConfig, LONG PropId, LONG *pPropFlags
GetCAPropertyFlags;The ICertAdmin2::GetCAPropertyFlags method retrieves the property flags for a certification authority (CA) property.;const BSTR strConfig, LONG PropId, LONG *pPropFlags
GetCAProperty;Retrieves a property value for the certification authority (CA).;const BSTR strConfig, LONG PropId, LONG PropIndex, LONG PropType, LONG Flags, VARIANT *pvarPropertyValue
GetCapture;Retrieves a handle to the window (if any) that has captured the mouse. Only one window at a time can capture the mouse; this window receives mouse input whether or not the cursor is within its borders.;
GetCaretBlinkTime;Retrieves the time required to invert the caret's pixels. The user can set this value.;
GetCaretPos;Copies the caret's position to the specified POINT structure.;LPPOINT lpPoint
GetCASetupProperty;Gets a property value for a certification authority (CA) configuration.;CASetupProperty propertyId, VARIANT *pPropertyValue
GetCAsForTemplate;Retrieves a collection of certificate enrollment servers that support a specified template.;IX509CertificateTemplate *pTemplate, ICertificationAuthorities **ppCAs
GetCAs;Retrieves a collection of certification enrollment servers included in the policy.;ICertificationAuthorities **ppCAs
get_CAStoreFlags;Sets or retrieves a flag that controls the certification authority (CA) store when the store is opened.;LONG *pdwFlags
get_CAStoreFlags;The CAStoreFlags property of IEnroll4 sets or retrieves a flag that controls the certification authority (CA) store when the store is opened.;LONG *pdwFlags
get_CAStoreName;Sets or retrieves the name of the store where all non-&quot;ROOT&quot; and non-&quot;MY&quot; certificates are kept.;BSTR *pbstrName
get_CAStoreNameWStr;The CAStoreNameWStr property of IEnroll4 sets or retrieves the name of the store where all non-&quot;ROOT&quot; and non-&quot;MY&quot; certificates are kept.;LPWSTR *szwName
getCAStore;The getCAStore method is not implemented.;
get_CAStoreType;Sets or retrieves the type of store to use for the store specified by the CAStoreName property.;BSTR *pbstrType
get_CAStoreTypeWStr;Sets or retrieves the type of store to use for the store specified by the CAStoreNameWStr property.;LPWSTR *szwType
getCertContextFromFileResponseWStr;Retrieves the certificate from a file containing a response from a certification authority.;LPCWSTR pwszResponseFileName, PCCERT_CONTEXT *ppCertContext
getCertContextFromPKCS7;Retrieves a certificate context based on a PKCS;PCRYPT_DATA_BLOB pBlobPKCS7
getCertContextFromResponseBlob;Retrieves the certificate from a certification authority's response.;PCRYPT_DATA_BLOB pblobResponse, PCCERT_CONTEXT *ppCertContext
getCertFromFileResponse;Retrieves the certificate from a file containing a response from a certification authority. This method was first defined in the ICEnroll4 interface.;BSTR strResponseFileName, BSTR *pstrCert
getCertFromPKCS7;Retrieves the certificate, contained in a PKCS;BSTR wszPKCS7, BSTR *pbstrCert
getCertFromResponse;Retrieves the certificate from a certification authority's response. This method was first defined by the ICEnroll4 interface.;BSTR strResponse, BSTR *pstrCert
GetCertificateCount;Gets the count of the endorsement certificates in the key storage provider.;VARIANT_BOOL ManufacturerOnly, LONG *pCount
get_CertificateDescription;Specifies or retrieves a string that contains a description of the certificate.;BSTR *pValue
GetCertificateExtensionFlags;Gets the flags from the extension acquired by the most recent call to ICertServerExit::GetCertificateExtension.;LONG *pExtFlags
GetCertificateExtensionFlags;Retrieves the flags associated with the extension acquired by the most recent call to GetCertificateExtension.;LONG *pExtFlags
GetCertificateExtension;Gets a specified certificate extension.;const BSTR strExtensionName, LONG Type, VARIANT *pvarValue
GetCertificateExtension;Retrieves a specific certificate extension.;const BSTR strExtensionName, LONG Type, VARIANT *pvarValue
get_CertificateFriendlyName;Gets or sets the friendly name for the certificate.;BSTR *pValue
get_CertificateFriendlyName;Specifies or retrieves the display name of a certificate.;BSTR *pValue
get_Certificate;Gets the certificate for the request.;EncodingType Encoding, BSTR *pValue
GetCertificateProperty;Returns a named property from a certificate.;const BSTR strPropertyName, LONG PropertyType, VARIANT *pvarPropertyValue
get_Certificate;Retrieves a Distinguished Encoding Rules (DER) encoded byte array that contains the certificate.;EncodingType Encoding, BSTR *pValue
get_Certificate;Retrieves the installed certificate.;EncodingType Encoding, BSTR *pValue
GetCertificate;Returns the certificate issued for the request as an X.509 certificate, or optionally packaged in a Public Key Cryptography Standards (PKCS);LONG Flags, BSTR *pstrCertificate
get_Certificate;Specifies or retrieves a byte array that contains the certificate associated with the private key.;EncodingType Encoding, BSTR *pValue
get_ChallengePassword;The password to use when creating a request with a challenge. To create a request without a challenge, do not set the ChallengePassword property.;BSTR *pValue
GetCharABCWidthsA;The GetCharABCWidths function retrieves the widths, in logical units, of consecutive characters in a specified range from the current TrueType font. This function succeeds only with TrueType fonts.;HDC hdc, UINT wFirst, UINT wLast, LPABC lpABC
GetCharABCWidthsFloatA;The GetCharABCWidthsFloat function retrieves the widths, in logical units, of consecutive characters in a specified range from the current font.;HDC hdc, UINT iFirst, UINT iLast, LPABCFLOAT lpABC
GetCharABCWidthsFloatW;The GetCharABCWidthsFloat function retrieves the widths, in logical units, of consecutive characters in a specified range from the current font.;HDC hdc, UINT iFirst, UINT iLast, LPABCFLOAT lpABC
GetCharABCWidthsI;The GetCharABCWidthsI function retrieves the widths, in logical units, of consecutive glyph indices in a specified range from the current TrueType font. This function succeeds only with TrueType fonts.;HDC hdc, UINT giFirst, UINT cgi, LPWORD pgi, LPABC pabc
GetCharABCWidthsW;The GetCharABCWidths function retrieves the widths, in logical units, of consecutive characters in a specified range from the current TrueType font. This function succeeds only with TrueType fonts.;HDC hdc, UINT wFirst, UINT wLast, LPABC lpABC
GetCharacterPlacementA;The GetCharacterPlacement function retrieves information about a character string, such as character widths, caret positioning, ordering within the string, and glyph rendering.;HDC hdc, LPCSTR lpString, int nCount, int nMexExtent, LPGCP_RESULTSA lpResults, DWORD dwFlags
GetCharacterPlacementW;The GetCharacterPlacement function retrieves information about a character string, such as character widths, caret positioning, ordering within the string, and glyph rendering.;HDC hdc, LPCWSTR lpString, int nCount, int nMexExtent, LPGCP_RESULTSW lpResults, DWORD dwFlags
GetCharWidth32A;The GetCharWidth32 function retrieves the widths, in logical coordinates, of consecutive characters in a specified range from the current font.;HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer
GetCharWidth32W;The GetCharWidth32 function retrieves the widths, in logical coordinates, of consecutive characters in a specified range from the current font.;HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer
GetCharWidthA;The GetCharWidth function retrieves the widths, in logical coordinates, of consecutive characters in a specified range from the current font.;HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer
GetCharWidthFloatA;The GetCharWidthFloat function retrieves the fractional widths of consecutive characters in a specified range from the current font.;HDC hdc, UINT iFirst, UINT iLast, PFLOAT lpBuffer
GetCharWidthFloatW;The GetCharWidthFloat function retrieves the fractional widths of consecutive characters in a specified range from the current font.;HDC hdc, UINT iFirst, UINT iLast, PFLOAT lpBuffer
GetCharWidthI;The GetCharWidthI function retrieves the widths, in logical coordinates, of consecutive glyph indices in a specified range from the current font.;HDC hdc, UINT giFirst, UINT cgi, LPWORD pgi, LPINT piWidths
GetCharWidthW;The GetCharWidth function retrieves the widths, in logical coordinates, of consecutive characters in a specified range from the current font.;HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer
GetCIMSSM;Retrieves the source of the input message (GetCurrentInputMessageSourceInSendMessage).;INPUT_MESSAGE_SOURCE *inputMessageSource
GetClassInfoA;Retrieves information about a window class.;HINSTANCE hInstance, LPCSTR lpClassName, LPWNDCLASSA lpWndClass
GetClassInfoExA;Retrieves information about a window class, including a handle to the small icon associated with the window class. The GetClassInfo function does not retrieve a handle to the small icon.;HINSTANCE hInstance, LPCSTR lpszClass, LPWNDCLASSEXA lpwcx
GetClassInfoExW;Retrieves information about a window class, including a handle to the small icon associated with the window class. The GetClassInfo function does not retrieve a handle to the small icon.;HINSTANCE hInstance, LPCWSTR lpszClass, LPWNDCLASSEXW lpwcx
GetClassInfoW;Retrieves information about a window class.;HINSTANCE hInstance, LPCWSTR lpClassName, LPWNDCLASSW lpWndClass
GetClassLongA;Retrieves the specified 32-bit (DWORD) value from the WNDCLASSEX structure associated with the specified window.;HWND hWnd, int nIndex
GetClassLongPtrA;Retrieves the specified value from the WNDCLASSEX structure associated with the specified window.;HWND hWnd, int nIndex
GetClassLongPtrW;Retrieves the specified value from the WNDCLASSEX structure associated with the specified window.;HWND hWnd, int nIndex
GetClassLongW;Retrieves the specified 32-bit (DWORD) value from the WNDCLASSEX structure associated with the specified window.;HWND hWnd, int nIndex
GetClassNameA;Retrieves the name of the class to which the specified window belongs.;HWND hWnd, LPSTR lpClassName, int nMaxCount
GetClassName;Retrieves the name of the class to which the specified window belongs.;HWND hWnd, LPTSTR lpClassName, int nMaxCount
GetClassNameW;Retrieves the name of the class to which the specified window belongs.;HWND hWnd, LPWSTR lpClassName, int nMaxCount
GetClassWord;Retrieves the 16-bit (WORD) value at the specified offset into the extra class memory for the window class to which the specified window belongs.;HWND hWnd, int nIndex
get_ClientId;Retrieves the type of client application that generated the request.;RequestClientInfoClientId *pValue
get_ClientId;Sets or retrieves a client ID request attribute. The client ID request attribute indicates the source of the certificate request. This property was first defined in the ICEnroll4 interface.;LONG *plClientId
get_ClientId;Specifies and retrieves a value that identifies the executable that created the request.;RequestClientInfoClientId *pValue
get_ClientId;The ClientId property sets or retrieves a client ID request attribute. The client ID request attribute indicates the source of the certificate request. This property was first defined in the IEnroll4 interface.;LONG *plClientId
GetClientRect;Retrieves the coordinates of a window's client area.;HWND hWnd, LPRECT lpRect
GetClipboardData;Retrieves data from the clipboard in a specified format. The clipboard must have been opened previously.;UINT uFormat
GetClipboardFormatNameA;Retrieves from the clipboard the name of the specified registered format. The function copies the name to the specified buffer.;UINT format, LPSTR lpszFormatName, int cchMaxCount
GetClipboardFormatNameW;Retrieves from the clipboard the name of the specified registered format. The function copies the name to the specified buffer.;UINT format, LPWSTR lpszFormatName, int cchMaxCount
GetClipboardOwner;Retrieves the window handle of the current owner of the clipboard.;
GetClipboardSequenceNumber;Retrieves the clipboard sequence number for the current window station.;
GetClipboardViewer;Retrieves the handle to the first window in the clipboard viewer chain.;
GetClipBox;The GetClipBox function retrieves the dimensions of the tightest bounding rectangle that can be drawn around the current visible area on the device.;HDC hdc, LPRECT lprect
GetClipCursor;Retrieves the screen coordinates of the rectangular area to which the cursor is confined.;LPRECT lpRect
GetClipRgn;The GetClipRgn function retrieves a handle identifying the current application-defined clipping region for the specified device context.;HDC hdc, HRGN hrgn
GetColorAdjustment;The GetColorAdjustment function retrieves the color adjustment values for the specified device context (DC).;HDC hdc, LPCOLORADJUSTMENT lpca
GetColorSpace;The GetColorSpace function retrieves the handle to the input color space from a specified device context.;HDC hdc
GetColumnCount;Retrieves the number of columns in the view of the Certificate Services database.;LONG fResultColumn, LONG *pcColumn
GetComboBoxInfo;Retrieves information about the specified combo box.;HWND hwndCombo, PCOMBOBOXINFO pcbi
GetCommConfig;Retrieves the current configuration of a communications device.;HANDLE hCommDev, LPCOMMCONFIG lpCC, LPDWORD lpdwSize
GetCommMask;Retrieves the value of the event mask for a specified communications device.;HANDLE hFile, LPDWORD lpEvtMask
GetCommModemStatus;Retrieves the modem control-register values.;HANDLE hFile, LPDWORD lpModemStat
GetCommPorts;Gets an array that contains the well-formed COM ports.;PULONG lpPortNumbers, ULONG uPortNumbersCount, PULONG puPortNumbersFound
GetCommProperties;Retrieves information about the communications properties for a specified communications device.;HANDLE hFile, LPCOMMPROP lpCommProp
GetCommState;Retrieves the current control settings for a specified communications device.;HANDLE hFile, LPDCB lpDCB
GetCommTimeouts;Retrieves the time-out parameters for all read and write operations on a specified communications device.;HANDLE hFile, LPCOMMTIMEOUTS lpCommTimeouts
GetCompressedFileSizeA;Retrieves the actual number of bytes of disk storage used to store a specified file.;LPCSTR lpFileName, LPDWORD lpFileSizeHigh
GetCompressedFileSizeTransactedA;Retrieves the actual number of bytes of disk storage used to store a specified file as a transacted operation.;LPCSTR lpFileName, LPDWORD lpFileSizeHigh, HANDLE hTransaction
GetCompressedFileSizeTransactedW;Retrieves the actual number of bytes of disk storage used to store a specified file as a transacted operation.;LPCWSTR lpFileName, LPDWORD lpFileSizeHigh, HANDLE hTransaction
GetCompressedFileSizeW;Retrieves the actual number of bytes of disk storage used to store a specified file.;LPCWSTR lpFileName, LPDWORD lpFileSizeHigh
GetComputerNameA;Retrieves the NetBIOS name of the local computer. This name is established at system startup, when the system reads it from the registry.;LPSTR lpBuffer, LPDWORD nSize
GetComputerNameExA;Retrieves a NetBIOS or DNS name associated with the local computer. The names are established at system startup, when the system reads them from the registry.;COMPUTER_NAME_FORMAT NameType, LPSTR lpBuffer, LPDWORD nSize
GetComputerNameExW;Retrieves a NetBIOS or DNS name associated with the local computer. The names are established at system startup, when the system reads them from the registry.;COMPUTER_NAME_FORMAT NameType, LPWSTR lpBuffer, LPDWORD nSize
GetComputerNameW;Retrieves the NetBIOS name of the local computer. This name is established at system startup, when the system reads it from the registry.;LPWSTR lpBuffer, LPDWORD nSize
GetConfigEntry;Retrieves configuration information for a certification authority (CA).;const BSTR strConfig, const BSTR strNodePath, const BSTR strEntryName, VARIANT *pvarEntry
GetConfig;Retrieves the configuration string for a Certificate Services server. This method was first defined in the ICertConfig interface.;LONG Flags, BSTR *pstrOut
GetConfiguration;Connects to an Online Certificate Status Protocol (OCSP) responder server and initializes an OCSPAdmin object with the configuration information from the server.;const BSTR bstrServerName, VARIANT_BOOL bForce
get_ContainerName;Gets or sets the name used by the cryptographic service provider (CSP) to generate, store, or access the key.;BSTR *pVal
get_ContainerNamePrefix;Specifies or retrieves a prefix added to the name of the key container.;BSTR *pValue
get_ContainerName;Specifies or retrieves the name of the key container.;BSTR *pValue
get_ContainerName;The ContainerName property of ICEnroll4 sets or retrieves the name of the key container to use.;BSTR *pbstrContainer
get_ContainerNameWStr;Sets or retrieves the name of the key container to use.;LPWSTR *szwContainer
GetContextPreferenceFlags;Gets the context preference flags.;HRECOCONTEXT hrc, DWORD *pdwContextPreferenceFlags
GetContextPropertyList;Retrieves a list of properties the recognizer supports.;HRECOCONTEXT hrc, ULONG *pcProperties, GUID *pPropertyGUIDS
GetContextPropertyValue;Returns a specified property value from the recognizer context.;HRECOCONTEXT hrc, GUID *pGuid, ULONG *pcbSize, BYTE *pProperty
GetConvertStg;The GetConvertStg function returns the current value of the convert bit for the specified storage object.;LPSTORAGE pStg
get_Cost;Specifies and retrieves an arbitrary cost for contacting the certificate enrollment policy server.;DWORD *pValue
get_Count;Gets the number of certification authority (CA) configurations in the configuration set.;LONG *pVal
get_Count;Gets the number of ICertSrvSetupKeyInformation objects in the collection.;LONG *pVal
GetCount;Gets the number of identity providers registered on the system.;DWORD *pdwProviders
get_Count;Gets the number of parameters available to business rule (BizRule) scripts.;unsigned long *plCount
get_Count;Gets the number of properties in a property set.;LONG *pVal
get_Count;Retrieves the number of IAzApplicationGroup objects in the collection.;LONG *plCount
get_Count;Retrieves the number of IAzApplication objects in the collection.;long *plCount
get_Count;Retrieves the number of IAzOperation objects in the collection.;LONG *plCount
get_Count;Retrieves the number of IAzRoleAssignments objects in the collection.;LONG *plCount
get_Count;Retrieves the number of IAzRoleDefinitions objects in the collection.;LONG *plCount
get_Count;Retrieves the number of IAzRole objects in the collection.;LONG *plCount
get_Count;Retrieves the number of IAzScope objects in the collection.;LONG *plCount
get_Count;Retrieves the number of IAzTask objects in the collection.;LONG *plCount
get_Count;Retrieves the number of ICertificationAuthority objects in the collection.;long *pVal
get_Count;Retrieves the number of ICryptAttribute objects in the collection.;long *pVal
get_Count;Retrieves the number of ICspAlgorithm objects in the collection.;long *pVal
get_Count;Retrieves the number of ICspInformation objects in the collection.;long *pVal
get_Count;Retrieves the number of ICspStatus objects in the collection.;long *pVal
get_Count;Retrieves the number of ISignerCertificate objects in the collection.;long *pVal
get_Count;Retrieves the number of IX509Attribute objects in the collection.;long *pVal
get_Count;Retrieves the number of IX509CertificateTemplate objects in the collection.;long *pVal
get_Count;Retrieves the number of IX509Extension objects in the collection.;long *pVal
get_Count;Retrieves the number of IX509NameValuePair objects in the collection.;long *pVal
get_Count;Retrieves the number of IX509PolicyServerUrl objects in the collection.;long *pVal
get_Count;Retrieves the number of objects in the collection.;long *pVal
get_Count;Retrieves the number of properties in the collection.;long *pVal
GetCount;Returns the number of DATE values in the object's DATE array.;LONG *pCount
GetCount;Returns the number of Long values in the object's Long array.;LONG *pCount
GetCount;Returns the number of string values in the string array.;LONG *pCount
get_Count;Specifies the number of interfaces that can be called by business rule (BizRule) scripts.;unsigned long *plCount
GetCPInfoExA;Retrieves information about any valid installed or available code page.;UINT CodePage, DWORD dwFlags, LPCPINFOEXA lpCPInfoEx
GetCPInfoExW;Retrieves information about any valid installed or available code page.;UINT CodePage, DWORD dwFlags, LPCPINFOEXW lpCPInfoEx
GetCPInfo;Retrieves information about any valid installed or available code page.;UINT CodePage, LPCPINFO lpCPInfo
get_CriticalExtensions;Retrieves an IObjectIds collection that identifies the version 3 certificate extensions marked as critical.;IObjectIds **ppValue
get_Critical;Specifies and retrieves a Boolean value that identifies whether the certificate extension is critical.;VARIANT_BOOL *pValue
GetCRL;Retrieves the current certificate revocation list (CRL) for the Certificate Services certification authority (CA).;const BSTR strConfig, LONG Flags, BSTR *pstrCRL
get_CryptAttributes;Retrieves an ICryptAttributes collection of optional certificate attributes.;ICryptAttributes **ppValue
get_CspAlgorithm;Retrieves an ICspAlgorithm object that contains information about an algorithm supported by the provider.;ICspAlgorithm **ppValue
get_CspAlgorithms;Retrieves a collection of ICspAlgorithm interfaces that contain information about the algorithms supported by the provider.;ICspAlgorithms **ppValue
get_CspInformation;Retrieves an ICspInformation object that contains general information about the provider.;ICspInformation **ppValue
get_CspInformations;Specifies and retrieves a collection of cryptographic providers available for use by the request object.;ICspInformations **ppValue
get_CspInformations;Specifies or retrieves a collection of ICspInformation objects that contain information about the available cryptographic providers that support the public key algorithm associated with the private key.;ICspInformations **ppValue
get_CSPName;Gets a cryptographic service provider (CSP) or key storage provider (KSP) name.;BSTR *pVal
GetCspStatusesFromOperations;Retrieves an ICspStatuses collection by supported key operations and optional provider information.;AlgorithmOperationFlags Operations, ICspInformation *pCspInformation, ICspStatuses **ppValue
get_CspStatuses;Retrieves a collection of ICspStatus objects that matches the intended use of the private key associated with the certificate request.;ICspStatuses **ppValue
GetCspStatuses;Retrieves an ICspStatuses collection that contains all provider/algorithm pairs consistent with the intended use of the private key as specified by the caller.;X509KeySpec KeySpec, ICspStatuses **ppCspStatuses
GetCspStatusFromOperations;Creates an ICspStatus object for the first supported algorithm that is consistent with the specified signature, encryption, hashing, or cipher operation.;IObjectId *pAlgorithm, AlgorithmOperationFlags Operations, ICspStatus **ppValue
GetCspStatusFromProviderName;Retrieves an ICspStatus object for a legacy provider by provider name and supported key operations.;BSTR strProviderName, X509KeySpec LegacyKeySpec, ICspStatus **ppValue
get_CspStatus;Specifies or retrieves an ICspStatus object that contains information about the cryptographic provider and algorithm pair associated with the private key.;ICspStatus **ppValue
GetCurrencyFormatA;Formats a number string as a currency string for a locale specified by identifier.;LCID Locale, DWORD dwFlags, LPCSTR lpValue, const CURRENCYFMTA *lpFormat, LPSTR lpCurrencyStr, int cchCurrency
GetCurrencyFormatEx;Formats a number string as a currency string for a locale specified by name.Note  The application should call this function in preference to GetCurrencyFormat if designed to run only on Windows Vista and later. Note  This function can format data that changes between releases, for example, due to a custom locale. If your application must persist or transmit data, see Using Persistent Locale Data.;LPCWSTR lpLocaleName, DWORD dwFlags, LPCWSTR lpValue, const CURRENCYFMTW *lpFormat, LPWSTR lpCurrencyStr, int cchCurrency
GetCurrencyFormatW;Formats a number string as a currency string for a locale specified by identifier.;LCID Locale, DWORD dwFlags, LPCWSTR lpValue, const CURRENCYFMTW *lpFormat, LPWSTR lpCurrencyStr, int cchCurrency
GetCurrentActCtx;The GetCurrentActCtx function returns the handle to the active activation context of the calling thread.;HANDLE *lphActCtx
GetCurrentApplicationUserModelId;Gets the application user model ID for the current process.;UINT32 *applicationUserModelIdLength, PWSTR applicationUserModelId
GetCurrentDirectory;Retrieves the current directory for the current process.;DWORD nBufferLength, LPTSTR lpBuffer
GetCurrentHwProfileA;Retrieves information about the current hardware profile for the local computer.;LPHW_PROFILE_INFOA lpHwProfileInfo
GetCurrentHwProfileW;Retrieves information about the current hardware profile for the local computer.;LPHW_PROFILE_INFOW lpHwProfileInfo
GetCurrentInputMessageSource;Retrieves the source of the input message.;INPUT_MESSAGE_SOURCE *inputMessageSource
GetCurrentObject;The GetCurrentObject function retrieves a handle to an object of the specified type that has been selected into the specified device context (DC).;HDC hdc, UINT type
GetCurrentPackageFamilyName;Gets the package family name for the calling process.;UINT32 *packageFamilyNameLength, PWSTR packageFamilyName
GetCurrentPackageFullName;Gets the package full name for the calling process.;UINT32 *packageFullNameLength, PWSTR packageFullName
GetCurrentPackageId;Gets the package identifier (ID) for the calling process.;UINT32 *bufferLength, BYTE *buffer
GetCurrentPackageInfo2;Gets the package information for the calling process.;const UINT32 flags, PackagePathType packagePathType, UINT32 *bufferLength, BYTE *buffer, UINT32 *count
GetCurrentPackageInfo;Gets the package information for the calling process.;const UINT32 flags, UINT32 *bufferLength, BYTE *buffer, UINT32 *count
GetCurrentPackagePath2;Gets the package path for the calling process.;PackagePathType packagePathType, UINT32 *pathLength, PWSTR path
GetCurrentPackagePath;Gets the package path for the calling process.;UINT32 *pathLength, PWSTR path
GetCurrentPositionEx;The GetCurrentPositionEx function retrieves the current position in logical coordinates.;HDC hdc, LPPOINT lppt
GetCurrentProcessId;Retrieves the process identifier of the calling process.;
GetCurrentProcessorNumberEx;Retrieves the processor group and number of the logical processor in which the calling thread is running.;PPROCESSOR_NUMBER ProcNumber
GetCurrentProcessorNumber;Retrieves the number of the processor the current thread was running on during the call to this function.;
GetCurrentProcess;Retrieves a pseudo handle for the current process.;
GetCurrentProcessToken;Retrieves a pseudo-handle that you can use as a shorthand way to refer to the access token associated with a process.;
GetCurrentThreadCompartmentId;Reserved for future use. Do not use this function.;
GetCurrentThreadEffectiveToken;Retrieves a pseudo-handle that you can use as a shorthand way to refer to the token that is currently in effect for the thread, which is the thread token if one exists and the process token otherwise.;
GetCurrentThreadId;Retrieves the thread identifier of the calling thread.;
GetCurrentThread;Retrieves a pseudo handle for the calling thread.;
GetCurrentThreadStackLimits;Retrieves the boundaries of the stack that was allocated by the system for the current thread.;PULONG_PTR LowLimit, PULONG_PTR HighLimit
GetCurrentThreadToken;Retrieves a pseudo-handle that you can use as a shorthand way to refer to the impersonation token that was assigned to the current thread.;
GetCurrentUmsThread;Returns the user-mode scheduling (UMS) thread context of the calling UMS thread.;
GetCursorInfo;Retrieves information about the global cursor.;PCURSORINFO pci
GetCursorPos;Retrieves the position of the mouse cursor, in screen coordinates.;LPPOINT lpPoint
GetCursor;Retrieves a handle to the current cursor.;
GetCustomOids;Is not implemented.;IObjectIds **ppObjectIds
GetCValue;The GetCValue macro retrieves the cyan color value from a CMYK color value.;cmyk
GetData;The GetData method retrieves configuration information from the Security Configuration snap-in.;SCESVC_HANDLE scesvcHandle, SCESVC_INFO_TYPE sceType, PVOID *ppvData, PSCE_ENUMERATION_CONTEXT psceEnumHandle
GetDateFormatA;Formats a date as a date string for a locale specified by the locale identifier.;LCID Locale, DWORD dwFlags, const SYSTEMTIME *lpDate, LPCSTR lpFormat, LPSTR lpDateStr, int cchDate
GetDateFormatEx;Formats a date as a date string for a locale specified by name.;LPCWSTR lpLocaleName, DWORD dwFlags, const SYSTEMTIME *lpDate, LPCWSTR lpFormat, LPWSTR lpDateStr, int cchDate, LPCWSTR lpCalendar
GetDateFormatW;Formats a date as a date string for a locale specified by the locale identifier.;LCID Locale, DWORD dwFlags, const SYSTEMTIME *lpDate, LPCWSTR lpFormat, LPWSTR lpDateStr, int cchDate
GetDCBrushColor;The GetDCBrushColor function retrieves the current brush color for the specified device context (DC).;HDC hdc
GetDCEx;The GetDCEx function retrieves a handle to a device context (DC) for the client area of a specified window or for the entire screen.;HWND hWnd, HRGN hrgnClip, DWORD flags
GetDCOrgEx;The GetDCOrgEx function retrieves the final translation origin for a specified device context (DC).;HDC hdc, LPPOINT lppt
GetDCPenColor;The GetDCPenColor function retrieves the current pen color for the specified device context (DC).;HDC hdc
GetDC;The GetDC function retrieves a handle to a device context (DC) for the client area of a specified window or for the entire screen.;HWND hWnd
GetDefaultCommConfigA;Retrieves the default configuration for the specified communications device.;LPCSTR lpszName, LPCOMMCONFIG lpCC, LPDWORD lpdwSize
GetDefaultCommConfigW;Retrieves the default configuration for the specified communications device.;LPCWSTR lpszName, LPCOMMCONFIG lpCC, LPDWORD lpdwSize
GetDefaultCompartmentId;The GetDefaultCompartmentId function retrieves the default network routing compartment identifier for the local computer.;
get_DefaultContainer;Retrieves a Boolean value that specifies whether the private key represents the default key container.;VARIANT_BOOL *pValue
get_DefaultLength;Retrieves the default length of a key.;LONG *pValue
GetDefaultSecurityDescriptor;Retrieves the default private key security descriptor.;VARIANT_BOOL MachineContext, BSTR *pValue
get_Default;Specifies and retrieves a Boolean value that indicates whether this is the default certificate enrollment policy (CEP) server.;VARIANT_BOOL *pValue
get_DelegatedPolicyUsersName;Retrieves the account names of principals that act as delegated policy users.;VARIANT *pvarDelegatedPolicyUsers
get_DelegatedPolicyUsersName;The DelegatedPolicyUsersName property of IAzApplication retrieves the account names of principals that act as delegated policy users.;VARIANT *pvarDelegatedPolicyUsers
get_DelegatedPolicyUsers;Retrieves the security identifiers (SIDs), in text form, of principals that act as delegated policy users.;VARIANT *pvarDelegatedPolicyUsers
get_DelegatedPolicyUsers;Retrieves the security identifiers (SIDs) of principals that act as delegated policy users in text form.;VARIANT *pvarDelegatedPolicyUsers
get_DeleteRequestCert;Sets or retrieves a Boolean value that determines whether dummy certificates in the request store are deleted.;BOOL *fDelete
get_DeleteRequestCert;The DeleteRequestCert property of IEnroll4 sets or retrieves a Boolean value that determines whether dummy certificates in the request store are deleted.;BOOL *fDelete
get_Description;Retrieves a description of the certificate.;BSTR *pValue
GetDescription;Returns a human-readable description of the exit module and its function.;BSTR *pstrDescription
GetDescription;Returns a human-readable description of the policy module and its function.;BSTR *pstrDescription
get_Description;Sets or retrieves a comment that describes the application.;BSTR *pbstrDescription
get_Description;Sets or retrieves a comment that describes the application group.;BSTR *pbstrDescription
get_Description;Sets or retrieves a comment that describes the operation.;BSTR *pbstrDescription
get_Description;Sets or retrieves a comment that describes the role.;BSTR *pbstrDescription
get_Description;Sets or retrieves a comment that describes the scope.;BSTR *pbstrDescription
get_Description;Sets or retrieves a comment that describes the task.;BSTR *pbstrDescription
get_Description;Specifies or retrieves a string that contains a description of the private key.;BSTR *pValue
get_Description;The Description property of IAzOperation sets or retrieves a comment that describes the operation.;BSTR *pbstrDescription
GetDesktopWindow;Retrieves a handle to the desktop window. The desktop window covers the entire screen. The desktop window is the area on top of which other windows are painted.;
GetDeviceCaps;The GetDeviceCaps function retrieves device-specific information for the specified device.;HDC hdc, int index
GetDeviceDriverBaseNameA;Retrieves the base name of the specified device driver.;LPVOID ImageBase, LPSTR lpFilename, DWORD nSize
GetDeviceDriverBaseNameW;Retrieves the base name of the specified device driver.;LPVOID ImageBase, LPWSTR lpBaseName, DWORD nSize
GetDeviceDriverFileNameA;Retrieves the path available for the specified device driver.;LPVOID ImageBase, LPSTR lpFilename, DWORD nSize
GetDeviceDriverFileNameW;Retrieves the path available for the specified device driver.;LPVOID ImageBase, LPWSTR lpFilename, DWORD nSize
GetDeviceGammaRamp;The GetDeviceGammaRamp function gets the gamma ramp on direct color display boards having drivers that support downloadable gamma ramps in hardware.;HDC hdc, LPVOID lpRamp
GET_DEVICE_LPARAM;Retrieves the input device type from the specified LPARAM value.;lParam
GetDevicePowerState;Retrieves the current power state of the specified device.;HANDLE hDevice, BOOL *pfOn
GetDialogBaseUnits;Retrieves the system's dialog base units, which are the average width and height of characters in the system font.;
GetDialogControlDpiChangeBehavior;Retrieves and per-monitor DPI scaling behavior overrides of a child window in a dialog.;HWND hWnd
GetDialogDpiChangeBehavior;Returns the flags that might have been set on a given dialog by an earlier call to SetDialogDpiChangeBehavior.;HWND hDlg
GetDIBColorTable;The GetDIBColorTable function retrieves RGB (red, green, blue) color values from a range of entries in the color table of the DIB section bitmap that is currently selected into a specified device context.;HDC hdc, UINT iStart, UINT cEntries, RGBQUAD *prgbq
GetDIBits;The GetDIBits function retrieves the bits of the specified compatible bitmap and copies them into a buffer as a DIB using the specified format.;HDC hdc, HBITMAP hbm, UINT start, UINT cLines, LPVOID lpvBits, LPBITMAPINFO lpbmi, UINT usage
GetDiskFreeSpaceA;Retrieves information about the specified disk, including the amount of free space on the disk.;LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters
GetDiskFreeSpaceExA;Retrieves information about the amount of space that is available on a disk volume, which is the total amount of space, the total amount of free space, and the total amount of free space available to the user that is associated with the calling thread.;LPCSTR lpDirectoryName, PULARGE_INTEGER lpFreeBytesAvailableToCaller, PULARGE_INTEGER lpTotalNumberOfBytes, PULARGE_INTEGER lpTotalNumberOfFreeBytes
GetDiskFreeSpaceExW;Retrieves information about the amount of space that is available on a disk volume, which is the total amount of space, the total amount of free space, and the total amount of free space available to the user that is associated with the calling thread.;LPCWSTR lpDirectoryName, PULARGE_INTEGER lpFreeBytesAvailableToCaller, PULARGE_INTEGER lpTotalNumberOfBytes, PULARGE_INTEGER lpTotalNumberOfFreeBytes
GetDiskFreeSpaceW;Retrieves information about the specified disk, including the amount of free space on the disk.;LPCWSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters
GetDisplayAutoRotationPreferencesByProcessId;Retrieves the screen auto-rotation preferences for the process indicated by the dwProcessId parameter.;DWORD dwProcessId, ORIENTATION_PREFERENCE *pOrientation, BOOL *fRotateScreen
GetDisplayAutoRotationPreferences;Retrieves the screen auto-rotation preferences for the current process.;ORIENTATION_PREFERENCE *pOrientation
GetDisplayConfigBufferSizes;The GetDisplayConfigBufferSizes function retrieves the size of the buffers that are required to call the QueryDisplayConfig function.;UINT32 flags, UINT32 *numPathArrayElements, UINT32 *numModeInfoArrayElements
get_DisplayName;Retrieves a string that contains the name of the provider, the algorithm name, and the operations that can be performed by the algorithm.;BSTR *pValue
GetDisplayName;Retrieves the localized name of the current column in the column-enumeration sequence.;BSTR *pstrOut
GetDisplayName;The GetDisplayName method retrieves the display name for the GPO.;LPOLESTR pszName, int cchMaxLength
get_Display;Specifies or retrieves a value that indicates whether to display the status information in a user interface.;EnrollmentDisplayStatus *pValue
GetDispositionMessage;Gets a human-readable message that gives the current disposition of the certificate request.;BSTR *pstrDispositionMessage
GetDistPointCount;Returns the number of certificate revocation list (CRL) distribution points in a CRL distribution information array.;LONG *pDistPointCount
GetDlgCtrlID;Retrieves the identifier of the specified control.;HWND hWnd
GetDlgItemInt;Translates the text of a specified control in a dialog box into an integer value.;HWND hDlg, int nIDDlgItem, BOOL *lpTranslated, BOOL bSigned
GetDlgItem;Retrieves a handle to a control in the specified dialog box.;HWND hDlg, int nIDDlgItem
GetDlgItemTextA;Retrieves the title or text associated with a control in a dialog box.;HWND hDlg, int nIDDlgItem, LPSTR lpString, int cchMax
GetDlgItemTextW;Retrieves the title or text associated with a control in a dialog box.;HWND hDlg, int nIDDlgItem, LPWSTR lpString, int cchMax
GetDllDirectoryA;Retrieves the application-specific portion of the search path used to locate DLLs for the application.;DWORD nBufferLength, LPSTR lpBuffer
GetDllDirectoryW;Retrieves the application-specific portion of the search path used to locate DLLs for the application.;DWORD nBufferLength, LPWSTR lpBuffer
get_DomainTimeout;Sets or retrieves the time in milliseconds after which a domain is determined to be unreachable.;LONG *plProp
GetDoubleClickTime;Retrieves the current double-click time for the mouse.;
GetDpiForMonitor;Queries the dots per inch (dpi) of a display.;HMONITOR hmonitor, MONITOR_DPI_TYPE dpiType, UINT *dpiX, UINT *dpiY
GetDpiForShellUIComponent;Retrieves the dots per inch (dpi) occupied by a SHELL_UI_COMPONENT based on the current scale factor and PROCESS_DPI_AWARENESS.;SHELL_UI_COMPONENT Arg1
GetDpiForSystem;Returns the system DPI.;
GetDpiForWindow;Returns the dots per inch (dpi) value for the associated window.;HWND hwnd
GetDpiFromDpiAwarenessContext;Retrieves the DPI from a given DPI_AWARENESS_CONTEXT handle. This enables you to determine the DPI of a thread without needed to examine a window created within that thread.;DPI_AWARENESS_CONTEXT value
GetDriverModuleHandle;Retrieves the instance handle of the module that contains the installable driver.;HDRVR hDriver
GetDriveTypeA;Determines whether a disk drive is a removable, fixed, CD-ROM, RAM disk, or network drive.;LPCSTR lpRootPathName
GetDriveTypeW;Determines whether a disk drive is a removable, fixed, CD-ROM, RAM disk, or network drive.;LPCWSTR lpRootPathName
GetDSPath;The GetDSPath method retrieves the Active Directory path for the specified section of the GPO.;DWORD dwSection, LPOLESTR pszPath, int cchMaxPath
GetDSPath;The GetDSPath method retrieves the Active Directory path to the root of the specified GPO section.;DWORD dwSection, LPOLESTR pszPath, int cchMaxPath
GetDurationFormatEx;Formats a duration of time as a time string for a locale specified by name.;LPCWSTR lpLocaleName, DWORD dwFlags, const SYSTEMTIME *lpDuration, ULONGLONG ullDuration, LPCWSTR lpFormat, LPWSTR lpDurationStr, int cchDuration
GetDurationFormat;Formats a duration of time as a time string for a locale specified by identifier.;LCID Locale, DWORD dwFlags, const SYSTEMTIME *lpDuration, ULONGLONG ullDuration, LPCWSTR lpFormat, LPWSTR lpDurationStr, int cchDuration
GetDynamicTimeZoneInformationEffectiveYears;Gets a range, expressed in years, for which a DYNAMIC_TIME_ZONE_INFORMATION has valid entries.;const PDYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation, LPDWORD FirstYear, LPDWORD LastYear
GetDynamicTimeZoneInformation;Retrieves the current time zone and dynamic daylight saving time settings. These settings control the translations between Coordinated Universal Time (UTC) and local time.;PDYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation
GetEffectivePermission;Returns the effective permission for an object type.;const GUID *pguidObjectType, PSID pUserSid, LPCWSTR pszServerName, PSECURITY_DESCRIPTOR pSD, POBJECT_TYPE_LIST *ppObjectTypeList, ULONG *pcObjectTypeListLength, PACCESS_MASK *ppGrantedAccessList, ULONG *pcGrantedAccessListLength
GetEffectiveRightsFromAclA;Retrieves the effective access rights that an ACL structure grants to a specified trustee. The trustee's effective access rights are the access rights that the ACL grants to the trustee or to any groups of which the trustee is a member.;PACL pacl, PTRUSTEE_A pTrustee, PACCESS_MASK pAccessRights
GetEffectiveRightsFromAclW;Retrieves the effective access rights that an ACL structure grants to a specified trustee. The trustee's effective access rights are the access rights that the ACL grants to the trustee or to any groups of which the trustee is a member.;PACL pacl, PTRUSTEE_W pTrustee, PACCESS_MASK pAccessRights
GetEnabledUnicodeRanges;Retrieves a list of Unicode point ranges enabled on the context. If you do not call the SetEnabledUnicodeRanges function to specify the enabled ranges, this function returns the recognizer's default Unicode point ranges.;HRECOCONTEXT hrc, ULONG *pcRanges, CHARACTER_RANGE *pcr
GetEnabledXStateFeatures;Gets a mask of enabled XState features on x86 or x64 processors.;
get_EnableSMIMECapabilities;Controls whether the PKCS;BOOL *fEnableSMIMECapabilities
get_EnableSMIMECapabilities;The ICEnroll4::EnableSMIMECapabilities property controls whether the PKCS;BOOL *fEnableSMIMECapabilities
get_EnableT61DNEncoding;Sets or retrieves a Boolean value that determines whether the distinguished name in the request is encoded as a T61 string instead of as a Unicode string.;BOOL *fBool
get_EnableT61DNEncoding;The EnableT61DNEncoding property of ICEnroll4 sets or retrieves a Boolean value that determines whether the distinguished name in the request is encoded as a T61 string instead of as a Unicode string.;BOOL *fBool
get_EncodedKey;Retrieves a byte array that contains the public key.;EncodingType Encoding, BSTR *pValue
get_EncodedName;Retrieves a Unicode-encoded distinguished name.;EncodingType Encoding, BSTR *pValue
get_EncodedParameters;Retrieves a byte array that contains the parameters associated with the public key algorithm.;EncodingType Encoding, BSTR *pValue
get_EncryptedKeyBlob;Retrieves a byte array that contains the encrypted key.;EncodingType Encoding, BSTR *pValue
get_EncryptedKeyHashBlob;Retrieves a string that contains a hash of the encrypted private key.;EncodingType Encoding, BSTR *pValue
get_EncryptedKeyHash;Retrieves a hash of the private key to be archived.;EncodingType Encoding, BSTR *pValue
get_EncryptionAlgorithm;Retrieves the object identifier (OID) of the symmetric encryption algorithm used to encrypt the private key.;IObjectId **ppValue
get_EncryptionAlgorithm;Specifies or retrieves an object identifier (OID) of the algorithm used to encrypt the private key to be archived.;IObjectId **ppValue
get_EncryptionAlgorithm;The encryption algorithm used to encrypt the EKPUB and EKCERT values from the client.;IObjectId **ppValue
GetEncryptionCspAlgorithms;Retrieves the collection of encryption algorithms supported by a provider.;ICspInformation *pCspInformation, ICspAlgorithms **ppValue
get_EncryptionStrength;Identifies the bit length for the EncryptionAlgorithm to use for encryption. If the EncryptionAlgorithm only supports one bit length, then you do not need to specify a value for the EncryptionStrength property.;LONG *pValue
get_EncryptionStrength;Retrieves an integer that contains the encryption strength of the symmetric algorithm used to encrypt the key.;LONG *pValue
get_EncryptionStrength;Specifies or retrieves the relative encryption level applied to the private key to be archived.;LONG *pValue
GetEncSChannel;This function is unavailable.;BYTE **pData, DWORD *dwDecSize
get_EnhancedKeyUsage;Retrieves a collection of key usage object identifiers (OIDs).;IObjectIds **ppValue
GetEnhMetaFileA;The GetEnhMetaFile function creates a handle that identifies the enhanced-format metafile stored in the specified file.;LPCSTR lpName
GetEnhMetaFileBits;The GetEnhMetaFileBits function retrieves the contents of the specified enhanced-format metafile and copies them into a buffer.;HENHMETAFILE hEMF, UINT nSize, LPBYTE lpData
GetEnhMetaFileDescriptionA;The GetEnhMetaFileDescription function retrieves an optional text description from an enhanced-format metafile and copies the string to the specified buffer.;HENHMETAFILE hemf, UINT cchBuffer, LPSTR lpDescription
GetEnhMetaFileDescriptionW;The GetEnhMetaFileDescription function retrieves an optional text description from an enhanced-format metafile and copies the string to the specified buffer.;HENHMETAFILE hemf, UINT cchBuffer, LPWSTR lpDescription
GetEnhMetaFileHeader;The GetEnhMetaFileHeader function retrieves the record containing the header for the specified enhanced-format metafile.;HENHMETAFILE hemf, UINT nSize, LPENHMETAHEADER lpEnhMetaHeader
GetEnhMetaFilePaletteEntries;The GetEnhMetaFilePaletteEntries function retrieves optional palette entries from the specified enhanced metafile.;HENHMETAFILE hemf, UINT nNumEntries, LPPALETTEENTRY lpPaletteEntries
GetEnhMetaFilePixelFormat;The GetEnhMetaFilePixelFormat function retrieves pixel format information for an enhanced metafile.;HENHMETAFILE hemf, UINT cbBuffer, PIXELFORMATDESCRIPTOR *ppfd
GetEnhMetaFileW;The GetEnhMetaFile function creates a handle that identifies the enhanced-format metafile stored in the specified file.;LPCWSTR lpName
get_EnrollmentContext;Retrieves an enrollment context that identifies whether the certificate is intended for a computer or an end-user.;X509CertificateEnrollmentContext *pValue
get_EnrollmentContext;Retrieves a value that specifies whether the certificate is intended for a computer or a user.;X509CertificateEnrollmentContext *pValue
GetEnrollmentServerAuthentication;The GetEnrollmentServerAuthentication method retrieves a value that specifies the type of authentication used by the certificate enrollment server (CES) to authenticate a client. This value is set by the Initialize method.;X509EnrollmentAuthFlags *pValue
GetEnrollmentServerUrl;Retrieves a string that contains the URL for the certificate enrollment server.;BSTR *pValue
get_EnrollmentStatus;Retrieves an IX509EnrollmentStatus object that contains information about the certificate enrollment.;IX509EnrollmentStatus **ppValue
GetEnvironmentVariable;Retrieves the contents of the specified variable from the environment block of the calling process.;LPCTSTR lpName, LPTSTR lpBuffer, DWORD nSize
get_ErrorCode;Gets a code that identifies an error condition in a CA configuration.;ULONG *pVal
GetErrorMessageText;Retrieves the error message text for an HRESULT error code.;LONG hrMessage, LONG Flags, BSTR *pstrErrorMessageText
GetErrorMode;Retrieves the error mode for the current process.;
get_Error;Specifies and retrieves a value that identifies the error status of the certificate enrollment process.;HRESULT *pValue
get_ErrorString;Retrieves a string that contains additional information about Certificate Enrollment Policy (CEP) Web Service setup failure.;BSTR *pVal
get_ErrorString;Retrieves a string that contains additional information about Certificate Enrollment Web Service (CES) setup failure.;BSTR *pVal
get_ErrorText;Retrieves a string that contains the message associated with the error result code returned by the Error property.;BSTR *pValue
GetEventLogEntryText;The GetEventLogEntryText method returns the text for a specific entry in the event log.;LPOLESTR pszEventSource, LPOLESTR pszEventLogName, LPOLESTR pszEventTime, DWORD dwEventID, LPOLESTR *ppszText
GetEventLogInformation;Retrieves information about the specified event log.;HANDLE hEventLog, DWORD dwInfoLevel, LPVOID lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded
get_ExistingCACertificate;Gets or sets the binary value that has been encoded by using Distinguished Encoding Rules (DER) and that is the binary value of the certification authority (CA) certificate that corresponds to an existing key.;VARIANT *pVal
GetExistingCACertificates;Gets the collection of CertSrvSetupKeyInformation objects that represent valid certification authority (CA) certificates currently installed on the computer.;ICertSrvSetupKeyInformationCollection **ppVal
get_Existing;Gets or sets a value that indicates whether the private key already exists.;VARIANT_BOOL *pVal
get_Existing;Specifies or retrieves a Boolean value that indicates whether the private key has been created or imported.;VARIANT_BOOL *pValue
GetExitCodeProcess;Retrieves the termination status of the specified process.;HANDLE hProcess, LPDWORD lpExitCode
GetExitCodeThread;Retrieves the termination status of the specified thread.;HANDLE hThread, LPDWORD lpExitCode
GetExplicitEntriesFromAclA;Retrieves an array of structures that describe the access control entries (ACEs) in an access control list (ACL).;PACL pacl, PULONG pcCountOfExplicitEntries, PEXPLICIT_ACCESS_A *pListOfExplicitEntries
GetExplicitEntriesFromAclW;Retrieves an array of structures that describe the access control entries (ACEs) in an access control list (ACL).;PACL pacl, PULONG pcCountOfExplicitEntries, PEXPLICIT_ACCESS_W *pListOfExplicitEntries
get_ExportPolicy;Specifies or retrieves export constraints for a private key.;X509PrivateKeyExportFlags *pValue
GetExtendedTcpTable;Retrieves a table that contains a list of TCP endpoints available to the application.;PVOID pTcpTable, PDWORD pdwSize, BOOL bOrder, ULONG ulAf, TCP_TABLE_CLASS TableClass, ULONG Reserved
GetExtendedUdpTable;Retrieves a table that contains a list of UDP endpoints available to the application.;PVOID pUdpTable, PDWORD pdwSize, BOOL bOrder, ULONG ulAf, UDP_TABLE_CLASS TableClass, ULONG Reserved
get_FailInfo;Gets information when the ProcessResponseMessage method detects a failed environment.;X509SCEPFailInfo *pValue
GetFeatureEnabledState;This function is intended for infrastructure use only.;UINT32 featureId, FEATURE_CHANGE_TIME changeTime
GetFeatureVariant;This function is intended for infrastructure use only.;UINT32 featureId, FEATURE_CHANGE_TIME changeTime, UINT32 *payloadId, BOOL *hasNotification
GetField;Gets a specific field from the current record of the configuration database. This method was first defined in the ICertConfig interface.;const BSTR strFieldName, BSTR *pstrOut
GetFileAttributesA;Retrieves file system attributes for a specified file or directory.;LPCSTR lpFileName
GetFileAttributesExA;Retrieves attributes for a specified file or directory.;LPCSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation
GetFileAttributesExW;Retrieves attributes for a specified file or directory.;LPCWSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation
GetFileAttributesTransactedA;Retrieves file system attributes for a specified file or directory as a transacted operation.;LPCSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation, HANDLE hTransaction
GetFileAttributesTransactedW;Retrieves file system attributes for a specified file or directory as a transacted operation.;LPCWSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation, HANDLE hTransaction
GetFileAttributesW;Retrieves file system attributes for a specified file or directory.;LPCWSTR lpFileName
GetFileBandwidthReservation;Retrieves the bandwidth reservation properties of the volume on which the specified file resides.;HANDLE hFile, LPDWORD lpPeriodMilliseconds, LPDWORD lpBytesPerPeriod, LPBOOL pDiscardable, LPDWORD lpTransferSize, LPDWORD lpNumOutstandingRequests
GetFileInformationByHandleEx;Retrieves file information for the specified file.;HANDLE hFile, FILE_INFO_BY_HANDLE_CLASS FileInformationClass, LPVOID lpFileInformation, DWORD dwBufferSize
GetFileInformationByHandle;Retrieves file information for the specified file.;HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation
GetFileMUIInfo;Retrieves resource-related information about a file.;DWORD dwFlags, PCWSTR pcwszFilePath, PFILEMUIINFO pFileMUIInfo, DWORD *pcbFileMUIInfo
GetFileMUIPath;Retrieves the path to all language-specific resource files associated with the supplied LN file. The application must call this function repeatedly to get the path for each resource file.;DWORD dwFlags, PCWSTR pcwszFilePath, PWSTR pwszLanguage, PULONG pcchLanguage, PWSTR pwszFileMUIPath, PULONG pcchFileMUIPath, PULONGLONG pululEnumerator
GetFileSecurityA;Obtains specified information about the security of a file or directory. The information obtained is constrained by the caller's access rights and privileges.;LPCSTR lpFileName, SECURITY_INFORMATION RequestedInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD nLength, LPDWORD lpnLengthNeeded
GetFileSizeEx;Retrieves the size of the specified file.;HANDLE hFile, PLARGE_INTEGER lpFileSize
GetFileSize;Retrieves the size of the specified file, in bytes.;HANDLE hFile, LPDWORD lpFileSizeHigh
GetFileSysPath;The GetFileSysPath method retrieves the file system path to the root of the specified GPO section. The path is in UNC format.;DWORD dwSection, LPOLESTR pszPath, int cchMaxPath
GetFileSysPath;The GetFileSysPath method returns the file system path for the specified section of the GPO. The path is in UNC format.;DWORD dwSection, LPOLESTR pszPath, int cchMaxPath
GetFileTime;Retrieves the date and time that a file or directory was created, last accessed, and last modified.;HANDLE hFile, LPFILETIME lpCreationTime, LPFILETIME lpLastAccessTime, LPFILETIME lpLastWriteTime
GetFileType;Retrieves the file type of the specified file.;HANDLE hFile
GetFileVersionInfoA;Retrieves version information for the specified file.;LPCSTR lptstrFilename, DWORD dwHandle, DWORD dwLen, LPVOID lpData
GetFileVersionInfoExA;Retrieves version information for the specified file.;DWORD dwFlags, LPCSTR lpwstrFilename, DWORD dwHandle, DWORD dwLen, LPVOID lpData
GetFileVersionInfoExW;Retrieves version information for the specified file.;DWORD dwFlags, LPCWSTR lpwstrFilename, DWORD dwHandle, DWORD dwLen, LPVOID lpData
GetFileVersionInfoSizeA;Determines whether the operating system can retrieve version information for a specified file. If version information is available, GetFileVersionInfoSize returns the size, in bytes, of that information.;LPCSTR lptstrFilename, LPDWORD lpdwHandle
GetFileVersionInfoSizeExA;Determines whether the operating system can retrieve version information for a specified file. If version information is available, GetFileVersionInfoSizeEx returns the size, in bytes, of that information.;DWORD dwFlags, LPCSTR lpwstrFilename, LPDWORD lpdwHandle
GetFileVersionInfoSizeExW;Determines whether the operating system can retrieve version information for a specified file. If version information is available, GetFileVersionInfoSizeEx returns the size, in bytes, of that information.;DWORD dwFlags, LPCWSTR lpwstrFilename, LPDWORD lpdwHandle
GetFileVersionInfoSizeW;Determines whether the operating system can retrieve version information for a specified file. If version information is available, GetFileVersionInfoSize returns the size, in bytes, of that information.;LPCWSTR lptstrFilename, LPDWORD lpdwHandle
GetFileVersionInfoW;Retrieves version information for the specified file.;LPCWSTR lptstrFilename, DWORD dwHandle, DWORD dwLen, LPVOID lpData
GetFinalPathNameByHandleA;Retrieves the final path for the specified file.;HANDLE hFile, LPSTR lpszFilePath, DWORD cchFilePath, DWORD dwFlags
GetFinalPathNameByHandleW;Retrieves the final path for the specified file.;HANDLE hFile, LPWSTR lpszFilePath, DWORD cchFilePath, DWORD dwFlags
GetFirmwareEnvironmentVariableA;Retrieves the value of the specified firmware environment variable.;LPCSTR lpName, LPCSTR lpGuid, PVOID pBuffer, DWORD nSize
GetFirmwareEnvironmentVariableExA;Retrieves the value of the specified firmware environment variable and its attributes.;LPCSTR lpName, LPCSTR lpGuid, PVOID pBuffer, DWORD nSize, PDWORD pdwAttribubutes
GetFirmwareEnvironmentVariableExW;Retrieves the value of the specified firmware environment variable and its attributes.;LPCWSTR lpName, LPCWSTR lpGuid, PVOID pBuffer, DWORD nSize, PDWORD pdwAttribubutes
GetFirmwareEnvironmentVariableW;Retrieves the value of the specified firmware environment variable.;LPCWSTR lpName, LPCWSTR lpGuid, PVOID pBuffer, DWORD nSize
GetFirmwareType;Retrieves the firmware type of the local computer.;PFIRMWARE_TYPE FirmwareType
GET_FLAGS_LPARAM;Retrieves the state of certain virtual keys from the specified LPARAM value.;lParam
GetFlags;Retrieves the policy and origin flags of the current extension in the extension-enumeration sequence.;LONG *pFlags
get_Flags;Specifies or retrieves a value that indicates whether the certificate enrollment policy (CEP) server policy information can be loaded from group policy, from the registry, or both.;PolicyServerUrlFlags *pValue
GetFlags;The GetFlags method retrieves information about the RSoP user interface session.;DWORD *pdwFlags
GetFocus;Retrieves the handle to the window that has the keyboard focus, if the window is attached to the calling thread's message queue.;
GetFontData;The GetFontData function retrieves font metric data for a TrueType font.;HDC hdc, DWORD dwTable, DWORD dwOffset, PVOID pvBuffer, DWORD cjBuffer
GetFontLanguageInfo;The GetFontLanguageInfo function returns information about the currently selected font for the specified display context. Applications typically use this information and the GetCharacterPlacement function to prepare a character string for display.;HDC hdc
GetFontUnicodeRanges;The GetFontUnicodeRanges function returns information about which Unicode characters are supported by a font. The information is returned as a GLYPHSET structure.;HDC hdc, LPGLYPHSET lpgs
GetForegroundWindow;Retrieves a handle to the foreground window (the window with which the user is currently working). The system assigns a slightly higher priority to the thread that creates the foreground window than it does to other threads.;
GetFriendlyIfIndex;Takes an interface index and returns a backward-compatible interface index, that is, an index that uses only the lower 24 bits.;DWORD IfIndex
GetFriendlyNameOfCertA;Retrieves the display name for a certificate.;PCCERT_CONTEXT pccert, LPSTR pch, DWORD cch
GetFriendlyNameOfCertW;Retrieves the display name for a certificate.;PCCERT_CONTEXT pccert, LPWSTR pwch, DWORD cwch
GetFriendlyName;Retrieves a display name for the certificate enrollment policy (CEP) server.;BSTR *pValue
get_FriendlyName;Retrieves the display name of the certificate.;BSTR *pValue
get_FriendlyName;Specifies and retrieves a display name for the object identifier.;BSTR *pValue
get_FriendlyName;Specifies or retrieves a display name for the private key.;BSTR *pValue
GetFullPathNameA;Retrieves the full path and file name of the specified file.;LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart
GetFullPathNameTransactedA;Retrieves the full path and file name of the specified file as a transacted operation.;LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart, HANDLE hTransaction
GetFullPathNameTransactedW;Retrieves the full path and file name of the specified file as a transacted operation.;LPCWSTR lpFileName, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR *lpFilePart, HANDLE hTransaction
GetFullPathNameW;Retrieves the full path and file name of the specified file.;LPCWSTR lpFileName, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR *lpFilePart
GetFullResourceName;Retrieves the full path and file name of the object associated with the access control editor that is displayed by calling the OpenElevatedEditor method.;LPWSTR *ppszResourceName
GetFullResponseProperty;Retrieves the cached response data returned by the server.;LONG PropId, LONG PropIndex, LONG PropType, LONG Flags, VARIANT *pvarPropertyValue
get_GenerateAudits;Sets or retrieves a value that indicates whether run-time audits should be generated.;BOOL *pbProp
get_GenerateAudits;The GenerateAudits property of IAzApplication sets or retrieves a value that indicates whether run-time audits should be generated.;BOOL *pbProp
get_GenKeyFlags;Sets or retrieves the values passed to CryptGenKey when the certificate request is generated.;LONG *pdwFlags
get_GenKeyFlags;Sets or retrieves the values passed to the CryptGenKey function when the certificate request is generated.;LONG *pdwFlags
GetGeoInfoA;Retrieves information about a specified geographical location.;GEOID Location, GEOTYPE GeoType, LPSTR lpGeoData, int cchData, LANGID LangId
GetGeoInfoEx;Retrieves information about a geographic location that you specify by using a two-letter International Organization for Standardization (ISO) 3166-1 code or numeric United Nations (UN) Series M, Number 49 (M.49) code.;PWSTR location, GEOTYPE geoType, PWSTR geoData, int geoDataCount
GetGeoInfoW;Retrieves information about a specified geographical location.;GEOID Location, GEOTYPE GeoType, LPWSTR lpGeoData, int cchData, LANGID LangId
GetGestureConfig;Retrieves the configuration for which Windows Touch gesture messages are sent from a window.;HWND hwnd, DWORD dwReserved, DWORD dwFlags, PUINT pcIDs, PGESTURECONFIG pGestureConfig, UINT cbSize
GetGestureExtraArgs;Retrieves additional information about a gesture from its GESTUREINFO handle.;HGESTUREINFO hGestureInfo, UINT cbExtraArgs, PBYTE pExtraArgs
GetGestureInfo;Retrieves a GESTUREINFO structure given a handle to the gesture information.;HGESTUREINFO hGestureInfo, PGESTUREINFO pGestureInfo
GetGlyphIndicesA;The GetGlyphIndices function translates a string into an array of glyph indices. The function can be used to determine whether a glyph exists in a font.;HDC hdc, LPCSTR lpstr, int c, LPWORD pgi, DWORD fl
GetGlyphIndicesW;The GetGlyphIndices function translates a string into an array of glyph indices. The function can be used to determine whether a glyph exists in a font.;HDC hdc, LPCWSTR lpstr, int c, LPWORD pgi, DWORD fl
GetGlyphOutlineA;The GetGlyphOutline function retrieves the outline or bitmap for a character in the TrueType font that is selected into the specified device context.;HDC hdc, UINT uChar, UINT fuFormat, LPGLYPHMETRICS lpgm, DWORD cjBuffer, LPVOID pvBuffer, const MAT2 *lpmat2
GetGlyphOutlineW;The GetGlyphOutline function retrieves the outline or bitmap for a character in the TrueType font that is selected into the specified device context.;HDC hdc, UINT uChar, UINT fuFormat, LPGLYPHMETRICS lpgm, DWORD cjBuffer, LPVOID pvBuffer, const MAT2 *lpmat2
GetGPOListA;The GetGPOList function retrieves the list of GPOs for the specified user or computer.;HANDLE hToken, LPCSTR lpName, LPCSTR lpHostName, LPCSTR lpComputerName, DWORD dwFlags, PGROUP_POLICY_OBJECTA *pGPOList
GetGPOListW;The GetGPOList function retrieves the list of GPOs for the specified user or computer.;HANDLE hToken, LPCWSTR lpName, LPCWSTR lpHostName, LPCWSTR lpComputerName, DWORD dwFlags, PGROUP_POLICY_OBJECTW *pGPOList
GetGraphicsMode;The GetGraphicsMode function retrieves the current graphics mode for the specified device context.;HDC hdc
GetGroups;Returns an array of the application groups associated with this client context.;BSTR bstrScopeName, ULONG ulOptions, VARIANT *pGroupArray
GetGuide;Retrieves the guide used for boxed, lined, or freeform input.;HRECOCONTEXT hrc, RECO_GUIDE *pGuide, ULONG *piIndex
GetGuiResources;Retrieves the count of handles to graphical user interface (GUI) objects in use by the specified process.;HANDLE hProcess, DWORD uiFlags
GetGUIThreadInfo;Retrieves information about the active window or a specified GUI thread.;DWORD idThread, PGUITHREADINFO pgui
GetGValue;The GetGValue macro retrieves an intensity value for the green component of a red, green, blue (RGB) value.;rgb
get_HashAlgID;Sets or retrieves the hash algorithm used when signing a PKCS;LONG *hashAlgID
get_HashAlgID;The HashAlgID property of IEnroll4 sets or retrieves the hash algorithm used when signing a PKCS;LONG *hashAlgID
get_HashAlgorithm;Gets or sets an identifier for the hash algorithm used to sign a certificate.;BSTR *pVal
get_HashAlgorithm;Gets or sets the name of the hashing algorithm used to sign or verify the certification authority (CA) certificate for the key.;BSTR *pVal
GetHashAlgorithmList;Gets the list of hash algorithms supported by the specified cryptographic service provider (CSP) for an asymmetric signature key algorithm.;const BSTR bstrProviderName, VARIANT *pVal
get_HashAlgorithm;Sets or retrieves only the signature hashing algorithm used to sign the PKCS;BSTR *pbstr
GetHashAlgorithms;Gets a list of hash-algorithm names. The Online Certificate Status Protocol (OCSP) responder server uses these names to sign OCSP responses for a given certification authority (CA) configuration.;const BSTR bstrServerName, const BSTR bstrCAId, VARIANT *pVal
get_HashAlgorithm;Specifies and retrieves an object identifier (OID) for the hashing algorithm used in the GetSignatureAlgorithm method.;IObjectId **ppValue
get_HashAlgorithm;Specifies and retrieves the object identifier (OID) of the hash algorithm used to sign the certificate request.;IObjectId **ppValue
GetHashAlgorithms;Retrieves the collection of hash algorithms supported by a provider.;ICspInformation *pCspInformation, IObjectIds **ppValue
get_HashAlgorithmWStr;Sets or retrieves only the signature hashing algorithm used to sign the PKCS;LPWSTR *szw
get_HasHardwareRandomNumberGenerator;Retrieves a Boolean value that specifies whether the provider supports a hardware random number generator that can be used to create random bytes for cryptographic operations.;VARIANT_BOOL *pValue
GetHGlobalFromILockBytes;The GetHGlobalFromILockBytes function retrieves a global memory handle to a byte array object created using the CreateILockBytesOnHGlobal function.;LPLOCKBYTES plkbyt, HGLOBAL *phglobal
GetHGlobalFromStream;The GetHGlobalFromStream function retrieves the global memory handle to a stream that was created through a call to the CreateStreamOnHGlobal function.;LPSTREAM pstm, HGLOBAL *phglobal
GetHint;The GetHint method retrieves the type of Active Directory object to which this GPO can be linked.;GROUP_POLICY_HINT_TYPE *gpHint
gethostbyaddr;gethostbyaddr is no longer recommended for use as of Windows Sockets 2.;a, b, c
gethostbyaddr;gethostbyaddr is no longer recommended for use as of Windows Sockets 2.;const char *addr, int len, int type
gethostbyname;The gethostbyname function retrieves host information corresponding to a host name from a host database.;a
gethostbyname;The gethostbyname function retrieves host information corresponding to a host name from a host database.;const char *name
gethostname;The gethostname function retrieves the standard host name for the local computer.;char *name, int namelen
GetHostNameW;The GetHostNameW function retrieves the standard host name for the local computer as a Unicode string.;PWSTR name, int namelen
GetICMProfileA;The GetICMProfile function retrieves the file name of the current output color profile for a specified device context.;HDC hdc, LPDWORD pBufSize, LPSTR pszFilename
GetICMProfileW;The GetICMProfile function retrieves the file name of the current output color profile for a specified device context.;HDC hdc, LPDWORD pBufSize, LPWSTR pszFilename
GetIcmpStatisticsEx;The GetIcmpStatisticsEx function retrieves Internet Control Message Protocol (ICMP) statistics for the local computer. The GetIcmpStatisticsEx function is capable of retrieving IPv6 ICMP statistics.;PMIB_ICMP_EX Statistics, ULONG Family
GetIcmpStatistics;The GetIcmpStatistics function retrieves the Internet Control Message Protocol (ICMP) for IPv4 statistics for the local computer.;PMIB_ICMP Statistics
GetIconInfoExA;Retrieves information about the specified icon or cursor. GetIconInfoEx extends GetIconInfo by using the newer ICONINFOEX structure.;HICON hicon, PICONINFOEXA piconinfo
GetIconInfoExW;Retrieves information about the specified icon or cursor. GetIconInfoEx extends GetIconInfo by using the newer ICONINFOEX structure.;HICON hicon, PICONINFOEXW piconinfo
GetIconInfo;Retrieves information about the specified icon or cursor.;HICON hIcon, PICONINFO piconinfo
get_Identifier;Gets a name for the certification authority (CA) configuration.;BSTR *pVal
GetIdentityEnum;Retrieves an IEnumUnknown interface pointer that can be used to enumerate identities.;const IDENTITY_TYPE eIdentityType, const PROPERTYKEY *pFilterkey, const PROPVARIANT *pFilterPropVarValue, IEnumUnknown **ppIdentityEnum
GetIfEntry2Ex;Retrieves the specified level of information for the specified interface on the local computer.;MIB_IF_ENTRY_LEVEL Level, PMIB_IF_ROW2 Row
GetIfEntry2;Retrieves information for the specified interface on the local computer.;PMIB_IF_ROW2 Row
GetIfEntry;The GetIfEntry function retrieves information for the specified interface on the local computer.;PMIB_IFROW pIfRow
GetIfStackTable;Retrieves a table of network interface stack row entries that specify the relationship of the network interfaces on an interface stack.;PMIB_IFSTACK_TABLE *Table
GetIfTable2Ex;Retrieves the MIB-II interface table.;MIB_IF_TABLE_LEVEL Level, PMIB_IF_TABLE2 *Table
GetIfTable2;Retrieves the MIB-II interface table.;PMIB_IF_TABLE2 *Table
GetIfTable;The GetIfTable function retrieves the MIB-II interface table.;PMIB_IFTABLE pIfTable, PULONG pdwSize, BOOL bOrder
get_IncludeSubjectKeyID;Determines whether the subject key ID extension is added to the certificate request that is generated.;BOOL *pfInclude
get_IncludeSubjectKeyID;The IncludeSubjectKeyID property of IEnroll4 determines whether the subject key ID extension is added to the certificate request that is generated.;BOOL *pfInclude
get_IncrementLength;Retrieves a value, in bits, that can be used to determine valid incremental key lengths for algorithms that support multiple key sizes.;LONG *pValue
get_IndexByObjectId;Retrieves the index of an attribute by object identifier (OID).;IObjectId *pObjectId, LONG *pIndex
get_IndexByObjectId;Retrieves the index of an extension in the collection by object identifier (OID).;IObjectId *pObjectId, LONG *pIndex
get_IndexByObjectId;Retrieves the index of an ICspAlgorithm object by object identifier (OID).;IObjectId *pObjectId, LONG *pIndex
GetInheritanceSourceA;Returns information about the source of inherited access control entries (ACEs) in an access control list (ACL).;LPSTR pObjectName, SE_OBJECT_TYPE ObjectType, SECURITY_INFORMATION SecurityInfo, BOOL Container, GUID **pObjectClassGuids, DWORD GuidCount, PACL pAcl, PFN_OBJECT_MGR_FUNCTS pfnArray, PGENERIC_MAPPING pGenericMapping, PINHERITED_FROMA pInheritArray
GetInheritanceSourceW;Returns information about the source of inherited access control entries (ACEs) in an access control list (ACL).;LPWSTR pObjectName, SE_OBJECT_TYPE ObjectType, SECURITY_INFORMATION SecurityInfo, BOOL Container, GUID **pObjectClassGuids, DWORD GuidCount, PACL pAcl, PFN_OBJECT_MGR_FUNCTS pfnArray, PGENERIC_MAPPING pGenericMapping, PINHERITED_FROMW pInheritArray
GetInheritSource;The ISecurityObjectTypeInfo::GetInheritSource method provides a means of determining the source of inherited access control entries in discretionary access control lists and system access control lists.;SECURITY_INFORMATION si, PACL pACL, PINHERITED_FROM *ppInheritArray
GetInheritTypes;The GetInheritTypes method requests information about how ACEs can be inherited by child objects. For more information, see ACE Inheritance.;PSI_INHERIT_TYPE *ppInheritTypes, ULONG *pcInheritTypes
GetInnerRequest;Retrieves a nested request object.;InnerRequestLevel Level, IX509CertificateRequest **ppValue
GetInputState;Determines whether there are mouse-button or keyboard messages in the calling thread's message queue.;
GetIntegratedDisplaySize;Retrieves the best estimate of the diagonal size of the built-in screen, in inches.;double *sizeInInches
GetInterfaceCurrentTimestampCapabilities;This function is reserved for system use, and you should not call it from your code.;const NET_LUID *InterfaceLuid, PINTERFACE_TIMESTAMP_CAPABILITIES TimestampCapabilites
GetInterfaceHardwareTimestampCapabilities;This function is reserved for system use, and you should not call it from your code.;const NET_LUID *InterfaceLuid, PINTERFACE_TIMESTAMP_CAPABILITIES TimestampCapabilites
GetInterfaceInfo;The GetInterfaceInfo function obtains the list of the network interface adapters with IPv4 enabled on the local system.;PIP_INTERFACE_INFO pIfTable, PULONG dwOutBufLen
GetInterfaceValue;Gets the ID and flags of the interface that corresponds to the specified interface name.;BSTR bstrInterfaceName, LONG *lInterfaceFlag, VARIANT *varInterface
GetInvertedIfStackTable;Retrieves a table of inverted network interface stack row entries that specify the relationship of the network interfaces on an interface stack.;PMIB_INVERTEDIFSTACK_TABLE *Table
GetIpAddrTable;The GetIpAddrTable function retrieves the interface�to�IPv4 address mapping table.;PMIB_IPADDRTABLE pIpAddrTable, PULONG pdwSize, BOOL bOrder
GetIpErrorString;The GetIpErrorString function retrieves an IP Helper error string.;IP_STATUS ErrorCode, PWSTR Buffer, PDWORD Size
GetIpForwardEntry2;Retrieves information for an IP route entry on the local computer.;PMIB_IPFORWARD_ROW2 Row
GetIpForwardTable2;The GetIpForwardTable2 function retrieves the IP route entries on the local computer.;ADDRESS_FAMILY Family, PMIB_IPFORWARD_TABLE2 *Table
GetIpForwardTable;The GetIpForwardTable function retrieves the IPv4 routing table.;PMIB_IPFORWARDTABLE pIpForwardTable, PULONG pdwSize, BOOL bOrder
GetIpInterfaceEntry;Retrieves IP information for the specified interface on the local computer.;PMIB_IPINTERFACE_ROW Row
GetIpInterfaceTable;Retrieves the IP interface entries on the local computer.;ADDRESS_FAMILY Family, PMIB_IPINTERFACE_TABLE *Table
GetIpNetEntry2;Retrieves information for a neighbor IP address entry on the local computer.;PMIB_IPNET_ROW2 Row
GetIpNetTable2;The GetIpNetTable2 function retrieves the IP neighbor table on the local computer.;ADDRESS_FAMILY Family, PMIB_IPNET_TABLE2 *Table
GetIpNetTable;The GetIpNetTable function retrieves the IPv4 to physical address mapping table.;PMIB_IPNETTABLE IpNetTable, PULONG SizePointer, BOOL Order
GetIpNetworkConnectionBandwidthEstimates;Retrieves historical bandwidth estimates for a network connection on the specified interface.;NET_IFINDEX InterfaceIndex, ADDRESS_FAMILY AddressFamily, PMIB_IP_NETWORK_CONNECTION_BANDWIDTH_ESTIMATES BandwidthEstimates
GetIpPathEntry;Retrieves information for a IP path entry on the local computer.;PMIB_IPPATH_ROW Row
GetIpPathTable;The GetIpPathTable function retrieves the IP path table on the local computer.;ADDRESS_FAMILY Family, PMIB_IPPATH_TABLE *Table
GetIpStatisticsEx;The GetIpStatisticsEx function retrieves the Internet Protocol (IP) statistics for the current computer.;PMIB_IPSTATS Statistics, ULONG Family
GetIpStatistics;The GetIpStatistics function retrieves the IP statistics for the current computer.;PMIB_IPSTATS Statistics
getipv4sourcefilter;Retrieves the multicast filter state for an IPv4 socket.;SOCKET Socket, IN_ADDR Interface, IN_ADDR Group, MULTICAST_MODE_TYPE *FilterMode, ULONG *SourceCount, IN_ADDR *SourceList
get_IsCA;Retrieves a Boolean value that identifies whether the subject of the certificate is a certification authority (CA).;VARIANT_BOOL *pValue
GetIsDefaultCEP;Retrieves a Boolean value that specifies whether this is the default certificate enrollment policy (CEP) server.;VARIANT_BOOL *pValue
get_IsHardwareDevice;Retrieves a Boolean value that determines whether the provider is implemented in a hardware device.;VARIANT_BOOL *pValue
get_IsRemovable;Retrieves a Boolean value that specifies whether the token that contains the key can be removed.;VARIANT_BOOL *pValue
get_IsRoleDefinition;Sets or retrieves a value that indicates whether the task is a role definition.;BOOL *pfProp
get_IsSmartCard;Retrieves a Boolean value that specifies whether the provider is a smart card provider.;VARIANT_BOOL *pValue
get_IsSoftwareDevice;Retrieves a Boolean value that specifies whether the provider is implemented in software.;VARIANT_BOOL *pValue
GetIssuedCertificate2;Retrieves a certificate's disposition by specifying either the request ID string or the certificate serial number.;BSTR strConfig, BSTR strRequestId, BSTR strSerialNumber, LONG *pDisposition
GetIssuedCertificate;Retrieves a certificate's disposition by specifying either the request ID or the certificate serial number.;const BSTR strConfig, LONG RequestId, const BSTR strSerialNumber, LONG *pDisposition
get_Issuer;Specifies or retrieves the name of the certificate issuer.;IX500DistinguishedName **ppValue
get_ItemByName;Gets a certification authority (CA) configuration identified by name in the configuration set.;const BSTR bstrIdentifier, VARIANT *pVal
get_ItemByName;Gets the property identified by name in a property set.;const BSTR bstrPropName, VARIANT *pVal
get_ItemByName;Retrieves an ICertificationAuthority object from the collection by certification authority name.;BSTR strName, ICertificationAuthority **ppValue
get_ItemByName;Retrieves an ICspAlgorithm object from the collection by name.;BSTR strName, ICspAlgorithm **ppValue
get_ItemByName;Retrieves an ICspInformation object from the collection by name.;BSTR strName, ICspInformation **ppCspInformation
get_ItemByName;Retrieves an ICspStatus object from the collection by provider and algorithm name.;BSTR strCspName, BSTR strAlgorithmName, ICspStatus **ppValue
get_ItemByName;Retrieves an IX509CertificateTemplate object from the collection by name.;BSTR bstrName, IX509CertificateTemplate **ppValue
get_ItemByOid;Retrieves an IX509CertificateTemplate object from the collection by object identifier.;IObjectId *pOid, IX509CertificateTemplate **ppValue
get_ItemByOperations;Retrieves an ICspStatus object that has the same name as the provider specified on input and the same algorithm but identifies a different cryptographic operation.;BSTR strCspName, BSTR strAlgorithmName, AlgorithmOperationFlags Operations, ICspStatus **ppValue
get_ItemByOrdinal;Retrieves an ICspStatus object from the collection by ordinal number.;LONG Ordinal, ICspStatus **ppValue
get_ItemByProvider;Retrieves an ICspStatus object that has the same name as the provider specified on input but identifies an algorithm that supports a different intended key use.;ICspStatus *pCspStatus, ICspStatus **ppValue
get_Item;Gets a certification authority (CA) configuration identified by index in the configuration set.;LONG Index, VARIANT *pVal
get_Item;Gets an ICertSrvSetupKeyInformation object that is identified by index in the collection.;LONG Index, VARIANT *pVal
get_Item;Gets the property identified by index in a property set.;LONG Index, VARIANT *pVal
get_Item;Retrieves the IAzApplicationGroup object at the specified index into the IAzApplicationGroups collection.;LONG Index, VARIANT *pvarObtPtr
get_Item;Retrieves the IAzApplication object at the specified index into the IAzApplications collection.;long Index, VARIANT *pvarObtPtr
get_Item;Retrieves the IAzOperation object at the specified index into the IAzOperations collection.;LONG Index, VARIANT *pvarObtPtr
get_Item;Retrieves the IAzRoleAssignment object at the specified index in the IAzRoleAssignments collection.;LONG Index, VARIANT *pvarObtPtr
get_Item;Retrieves the IAzRoleDefinition object at the specified index in the IAzRoleDefinitions collection.;LONG Index, VARIANT *pvarObtPtr
get_Item;Retrieves the IAzRole object at the specified index into the IAzRoles collection.;LONG Index, VARIANT *pvarObtPtr
get_Item;Retrieves the IAzScope object at the specified index into the IAzScopes collection.;LONG Index, VARIANT *pvarObtPtr
get_Item;Retrieves the IAzTask object at the specified index into the IAzTasks collection.;LONG Index, VARIANT *pvarObtPtr
GetKBCodePage;Retrieves the current code page.;
GetKernelObjectSecurity;Retrieves a copy of the security descriptor that protects a kernel object.;HANDLE Handle, SECURITY_INFORMATION RequestedInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD nLength, LPDWORD lpnLengthNeeded
GetKerningPairsA;The GetKerningPairs function retrieves the character-kerning pairs for the currently selected font for the specified device context.;HDC hdc, DWORD nPairs, LPKERNINGPAIR lpKernPair
GetKerningPairsW;The GetKerningPairs function retrieves the character-kerning pairs for the currently selected font for the specified device context.;HDC hdc, DWORD nPairs, LPKERNINGPAIR lpKernPair
get_KeyArchivalCertificate;Specifies or retrieves a certification authority (CA) encryption certificate.;EncodingType Encoding, BSTR *pValue
GetKeyboardLayoutList;Retrieves the input locale identifiers (formerly called keyboard layout handles) corresponding to the current set of input locales in the system. The function copies the identifiers to the specified buffer.;int nBuff, HKL *lpList
GetKeyboardLayoutNameA;Retrieves the name of the active input locale identifier (formerly called the keyboard layout) for the system.;LPSTR pwszKLID
GetKeyboardLayoutNameW;Retrieves the name of the active input locale identifier (formerly called the keyboard layout) for the system.;LPWSTR pwszKLID
GetKeyboardLayout;Retrieves the active input locale identifier (formerly called the keyboard layout).;DWORD idThread
GetKeyboardState;Copies the status of the 256 virtual keys to the specified buffer.;PBYTE lpKeyState
GetKeyboardType;Retrieves information about the current keyboard.;int nTypeFlag
get_KeyContainerNamePrefix;Specifies or retrieves a prefix used to create the container name for a new private key.;BSTR *pValue
GetKeyLenEx;Retrieves size information for the signature and exchange keys.;LONG lSizeSpec, LONG lKeySpec, LONG *pdwKeySize
GetKeyLenEx;Retrieves size information for the signature and exchange keys. This method was first defined in the ICEnroll4 interface.;LONG lSizeSpec, LONG lKeySpec, LONG *pdwKeySize
GetKeyLengthList;Gets the list of key lengths supported by the specified cryptographic service provider (CSP).;const BSTR bstrProviderName, VARIANT *pVal
GetKeyLengthList;Gets the list of key lengths supported by the specified cryptographic service provider (CSP).;VARIANT_BOOL bExchange, const BSTR bstrProviderName, VARIANT *pVal
GetKeyLen;Retrieves the minimum and maximum key lengths for the signature and exchange keys.;BOOL fMin, BOOL fExchange, LONG *pdwKeySize
GetKeyLen;The IEnroll4::GetKeyLen method retrieves the minimum and maximum key lengths for the signature and exchange keys.;BOOL fMin, BOOL fExchange, LONG *pdwKeySize
GetKeyNameTextA;Retrieves a string that represents the name of a key.;LONG lParam, LPSTR lpString, int cchSize
GetKeyNameTextW;Retrieves a string that represents the name of a key.;LONG lParam, LPWSTR lpString, int cchSize
get_KeyProtection;Specifies or retrieves a value that indicates how a private key is protected before use.;X509PrivateKeyProtection *pValue
get_KeySpec;Gets a value that indicates whether the key bound to the configuration is used for encryption or for signing content.;ULONG *pVal
get_KeySpec;Retrieves a value that identifies whether the key pair stored by the provider or key container is used for encryption or for signing content.;X509KeySpec *pValue
get_KeySpec;Retrieves a value that specifies the intended use of the algorithms supported by the provider.;X509KeySpec *pValue
get_KeySpec;Sets or retrieves the type of key generated.;LONG *pdw
get_KeySpec;Specifies or retrieves a value that identifies whether a private key can be used for signing, or encryption, or both.;X509KeySpec *pValue
get_KeySpec;The KeySpec property of ICEnroll4 sets or retrieves the type of key generated.;LONG *pdw
GET_KEYSTATE_LPARAM;Retrieves the state of certain virtual keys from the specified LPARAM value.;lParam
GetKeyState;Retrieves the status of the specified virtual key. The status specifies whether the key is up, down, or toggled (on, off�alternating each time the key is pressed).;int nVirtKey
GET_KEYSTATE_WPARAM;Retrieves the state of certain virtual keys from the specified WPARAM value.;wParam
get_KeyUsage;Retrieves the restrictions placed on the public key.;X509KeyUsageFlags *pValue
get_KeyUsage;Specifies or retrieves a value that identifies the specific purpose for which a private key can be used.;X509PrivateKeyUsageFlags *pValue
GetKValue;The GetKValue macro retrieves the black color value from a CMYK color value.;cmyk
GetLargePageMinimum;Retrieves the minimum size of a large page.;
GetLastActivePopup;Determines which pop-up window owned by the specified window was most recently active.;HWND hWnd
GetLastError;Retrieves the calling thread's last-error code value.;
GetLastInputInfo;Retrieves the time of the last input event.;PLASTINPUTINFO plii
GetLastStatus;Gets the last return code for this request. This returns the error code information, rather than the disposition of the request.;LONG *pStatus
GetLastUpdateTime;Retrieves the date and time at which the policy was last downloaded.;DATE *pDate
GetLatticePtr;Retrieves a pointer to the lattice for the current results.;HRECOCONTEXT hrc, RECO_LATTICE **ppLattice
GetLayeredWindowAttributes;Retrieves the opacity and transparency color key of a layered window.;HWND hwnd, COLORREF *pcrKey, BYTE *pbAlpha, DWORD *pdwFlags
GetLayout;The GetLayout function returns the layout of a device context (DC).;HDC hdc
get_LDAPQueryDN;Retrieves or sets the domain name of the directory object to be used during evaluation of LDAP query groups.;BSTR *pbstrLDAPQueryDN
get_LdapQuery;Sets or retrieves the Lightweight Directory Access Protocol (LDAP) query used to define membership for an LDAP query application group.;BSTR *pbstrProp
GetLeftSeparator;Gets the left separator for the recognizer context.;HRECOCONTEXT hrc, ULONG *pcSize, WCHAR *pwcLeftSeparator
get_LegacyCsp;Retrieves a Boolean value that specifies whether the provider is a Cryptography API:_Next Generation (CNG) provider or a CryptoAPI (legacy) CSP.;VARIANT_BOOL *pValue
get_LegacyCsp;Specifies or retrieves a Boolean value that indicates whether the provider is a CryptoAPI (legacy) cryptographic service provider (CSP).;VARIANT_BOOL *pValue
get_Length;Gets or sets the strength of the key to one of the values supported by the cryptographic service provider (CSP).;LONG *pVal
get_Length;Retrieves the length of the public key.;LONG *pValue
GetLengthSid;Returns the length, in bytes, of a valid security identifier (SID).;PSID pSid
get_Length;Specifies or retrieves the length, in bits, of the private key.;LONG *pValue
get_Length;The bit length of the endorsement key. You can only access this property after the Open method has been called.;LONG *pValue
get_LimitExchangeKeyToEncipherment;Sets or retrieves a Boolean value that determines whether an AT_KEYEXCHANGE request contains digital signature and nonrepudiation key usages.;BOOL *fLimitExchangeKeyToEncipherment
get_LimitExchangeKeyToEncipherment;The LimitExchangeKeyToEncipherment property of IEnroll4 sets or retrieves a Boolean value that determines whether an AT_KEYEXCHANGE request contains digital signature and nonrepudiation key usages.;BOOL *fLimitExchangeKeyToEncipherment
GetListBoxInfo;Retrieves the number of items per column in a specified list box.;HWND hwnd
GetLocaleInfoA;Retrieves information about a locale specified by identifier.;LCID Locale, LCTYPE LCType, LPSTR lpLCData, int cchData
GetLocaleInfoEx;Retrieves information about a locale specified by name.Note  The application should call this function in preference to GetLocaleInfo if designed to run only on Windows Vista and later. Note  This function can retrieve data that changes between releases, for example, due to a custom locale. If your application must persist or transmit data, see Using Persistent Locale Data.;LPCWSTR lpLocaleName, LCTYPE LCType, LPWSTR lpLCData, int cchData
GetLocaleInfoW;Retrieves information about a locale specified by identifier.;LCID Locale, LCTYPE LCType, LPWSTR lpLCData, int cchData
GetLocalManagedApplications;The GetLocalManagedApplications function can be run on the target computer to get a list of managed applications on that computer.;BOOL bUserApps, LPDWORD pdwApps, PLOCALMANAGEDAPPLICATION *prgLocalApps
get_LocalRevocationInformation;Gets or sets the certificate revocation list (CRL) of the local machine.;VARIANT *pVal
GetLocalTime;Retrieves the current local date and time.;LPSYSTEMTIME lpSystemTime
GetLogColorSpaceA;The GetLogColorSpace function retrieves the color space definition identified by a specified handle.;HCOLORSPACE hColorSpace, LPLOGCOLORSPACEA lpBuffer, DWORD nSize
GetLogColorSpaceW;The GetLogColorSpace function retrieves the color space definition identified by a specified handle.;HCOLORSPACE hColorSpace, LPLOGCOLORSPACEW lpBuffer, DWORD nSize
GetLogicalDrives;Retrieves a bitmask representing the currently available disk drives.;
GetLogicalDriveStringsA;Fills a buffer with strings that specify valid drives in the system.;DWORD nBufferLength, LPSTR lpBuffer
GetLogicalDriveStringsW;Fills a buffer with strings that specify valid drives in the system.;DWORD nBufferLength, LPWSTR lpBuffer
GetLogicalProcessorInformationEx;Retrieves information about the relationships of logical processors and related hardware.;LOGICAL_PROCESSOR_RELATIONSHIP RelationshipType, PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX Buffer, PDWORD ReturnedLength
GetLogicalProcessorInformation;Retrieves information about logical processors and related hardware.;PSYSTEM_LOGICAL_PROCESSOR_INFORMATION Buffer, PDWORD ReturnedLength
get_LongName;Retrieves the full name of the algorithm.;BSTR *pValue
GetLongPathNameA;Converts the specified path to its long form.;LPCSTR lpszShortPath, LPSTR lpszLongPath, DWORD cchBuffer
GetLongPathNameTransactedA;Converts the specified path to its long form as a transacted operation.;LPCSTR lpszShortPath, LPSTR lpszLongPath, DWORD cchBuffer, HANDLE hTransaction
GetLongPathNameTransactedW;Converts the specified path to its long form as a transacted operation.;LPCWSTR lpszShortPath, LPWSTR lpszLongPath, DWORD cchBuffer, HANDLE hTransaction
GetLongPathNameW;Converts the specified path to its long form.;LPCWSTR lpszShortPath, LPWSTR lpszLongPath, DWORD cchBuffer
get_MachineContext;Specifies or retrieves a Boolean value that identifies the local certificate store context.;VARIANT_BOOL *pValue
get_MachineDnsName;Retrieves the Domain Name System (DNS) name of the computer that generated the request.;BSTR *pValue
GetMachineName;The GetMachineName method retrieves the computer name of the remote GPO. This is the name specified by the OpenRemoteMachineGPO method.;LPOLESTR pszName, int cchMaxLength
GetMailslotInfo;Retrieves information about the specified mailslot.;HANDLE hMailslot, LPDWORD lpMaxMessageSize, LPDWORD lpNextSize, LPDWORD lpMessageCount, LPDWORD lpReadTimeout
get_MajorVersion;Retrieves the minimum major version number of the certificate template.;LONG *pValue
GetManagedApplicationCategories;The GetManagedApplicationCategories function gets a list of application categories for a domain. The list is the same for all users in the domain.;DWORD dwReserved, APPCATEGORYINFOLIST *pAppCategory
GetManagedApplications;The GetManagedApplications function gets a list of applications that are displayed in the Add pane of Add/Remove Programs (ARP) for a specified user context.;GUID *pCategory, DWORD dwQueryFlags, DWORD dwInfoLevel, LPDWORD pdwApps, PMANAGEDAPPLICATION *prgManagedApps
GetManageModule;Retrieves the ICertManageModule interface associated with the ICertExit2 interface by calling GetManageModule and passing in the address of a pointer to an ICertManageModule.;ICertManageModule **ppManageModule
GetManageModule;Retrieves the ICertManageModule interface associated with the ICertPolicy2 interface by calling GetManageModule and passing in the address of a pointer to an ICertManageModule.;ICertManageModule **ppManageModule
GetMapMode;The GetMapMode function retrieves the current mapping mode.;HDC hdc
GetMappedFileNameA;Checks whether the specified address is within a memory-mapped file in the address space of the specified process. If so, the function returns the name of the memory-mapped file.;HANDLE hProcess, LPVOID lpv, LPSTR lpFilename, DWORD nSize
GetMappedFileNameW;Checks whether the specified address is within a memory-mapped file in the address space of the specified process. If so, the function returns the name of the memory-mapped file.;HANDLE hProcess, LPVOID lpv, LPWSTR lpFilename, DWORD nSize
GetMaximumProcessorCount;Returns the maximum number of logical processors that a processor group or the system can have.;WORD GroupNumber
GetMaximumProcessorGroupCount;Returns the maximum number of processor groups that the system can have.;
get_MaxKeyContainerNameLength;Retrieves the maximum supported length for the name of the private key container associated with the provider.;LONG *pValue
GetMaxLength;Retrieves the maximum allowable length, in bytes, for the column data.;LONG *pMaxLength
get_MaxLength;Retrieves the maximum permitted length for a key.;LONG *pValue
get_MaxScriptEngines;Sets or retrieves the maximum number of Business Rule (BizRule) script engines that will be cached.;LONG *plProp
get_MembersName;Retrieves the account names of accounts that belong to the application group.;VARIANT *pvarProp
get_MembersName;Retrieves the account names of accounts that belong to the role.;VARIANT *pvarProp
get_Members;Retrieves the security identifiers (SIDs), in text form, of accounts that belong to the application group.;VARIANT *pvarProp
get_Members;Retrieves the security identifiers (SIDs), in text form, of Windows accounts that belong to the role.;VARIANT *pvarProp
GetMemoryErrorHandlingCapabilities;Gets the memory error handling capabilities of the system.;PULONG Capabilities
GetMenuBarInfo;Retrieves information about the specified menu bar.;HWND hwnd, LONG idObject, LONG idItem, PMENUBARINFO pmbi
GetMenuCheckMarkDimensions;Retrieves the dimensions of the default check-mark bitmap.;
GetMenuContextHelpId;Retrieves the Help context identifier associated with the specified menu.;HMENU Arg1
GetMenuDefaultItem;Determines the default menu item on the specified menu.;HMENU hMenu, UINT fByPos, UINT gmdiFlags
GetMenuInfo;Retrieves information about a specified menu.;HMENU , LPMENUINFO
GetMenuItemCount;Determines the number of items in the specified menu.;HMENU hMenu
GetMenuItemID;Retrieves the menu item identifier of a menu item located at the specified position in a menu.;HMENU hMenu, int nPos
GetMenuItemInfoA;Retrieves information about a menu item.;HMENU hmenu, UINT item, BOOL fByPosition, LPMENUITEMINFOA lpmii
GetMenuItemInfoW;Retrieves information about a menu item.;HMENU hmenu, UINT item, BOOL fByPosition, LPMENUITEMINFOW lpmii
GetMenuItemRect;Retrieves the bounding rectangle for the specified menu item.;HWND hWnd, HMENU hMenu, UINT uItem, LPRECT lprcItem
GetMenuPosFromID;GetMenuPosFromID may be altered or unavailable.;HMENU hmenu, UINT id
GetMenu;Retrieves a handle to the menu assigned to the specified window.;HWND hWnd
GetMenuState;Retrieves the menu flags associated with the specified menu item.;HMENU hMenu, UINT uId, UINT uFlags
GetMenuStringA;Copies the text string of the specified menu item into the specified buffer.;HMENU hMenu, UINT uIDItem, LPSTR lpString, int cchMax, UINT flags
GetMenuStringW;Copies the text string of the specified menu item into the specified buffer.;HMENU hMenu, UINT uIDItem, LPWSTR lpString, int cchMax, UINT flags
GetMessageA;Retrieves a message from the calling thread's message queue. The function dispatches incoming sent messages until a posted message is available for retrieval.;LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax
GetMessageExtraInfo;Retrieves the extra message information for the current thread. Extra message information is an application- or driver-defined value associated with the current thread's message queue.;
GetMessagePos;Retrieves the cursor position for the last message retrieved by the GetMessage function.;
GetMessage;Retrieves a message from the calling thread's message queue. The function dispatches incoming sent messages until a posted message is available for retrieval.;LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax
GetMessageTime;Retrieves the message time for the last message retrieved by the GetMessage function.;
GetMessageW;Retrieves a message from the calling thread's message queue. The function dispatches incoming sent messages until a posted message is available for retrieval.;LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax
GetMetaFileA;The GetMetaFile function creates a handle that identifies the metafile stored in the specified file.;LPCSTR lpName
GetMetaFileBitsEx;The GetMetaFileBitsEx function retrieves the contents of a Windows-format metafile and copies them into the specified buffer.;HMETAFILE hMF, UINT cbBuffer, LPVOID lpData
GetMetaFileW;The GetMetaFile function creates a handle that identifies the metafile stored in the specified file.;LPCWSTR lpName
GetMetaRgn;The GetMetaRgn function retrieves the current metaregion for the specified device context.;HDC hdc, HRGN hrgn
get_MinLength;Retrieves the minimum permitted length for a key.;LONG *pValue
get_MinorVersion;Retrieves the minimum minor version number of the certificate template.;LONG *pValue
GetMiterLimit;The GetMiterLimit function retrieves the miter limit for the specified device context.;HDC hdc, PFLOAT plimit
get_Modified;Gets a value that indicates whether an OCSPCAConfiguration object has been modified since it was created.;VARIANT_BOOL *pVal
get_Modified;Gets a value that indicates whether an OCSPProperty object has been modified since it was instantiated.;VARIANT_BOOL *pVal
GetModuleBaseNameA;Retrieves the base name of the specified module.;HANDLE hProcess, HMODULE hModule, LPSTR lpBaseName, DWORD nSize
GetModuleBaseNameW;Retrieves the base name of the specified module.;HANDLE hProcess, HMODULE hModule, LPWSTR lpBaseName, DWORD nSize
GetModuleFileNameA;Retrieves the fully qualified path for the file that contains the specified module. The module must have been loaded by the current process.;HMODULE hModule, LPSTR lpFilename, DWORD nSize
GetModuleFileNameExA;Retrieves the fully qualified path for the file containing the specified module.;HANDLE hProcess, HMODULE hModule, LPSTR lpFilename, DWORD nSize
GetModuleFileNameExW;Retrieves the fully qualified path for the file containing the specified module.;HANDLE hProcess, HMODULE hModule, LPWSTR lpFilename, DWORD nSize
GetModuleFileNameW;Retrieves the fully qualified path for the file that contains the specified module. The module must have been loaded by the current process.;HMODULE hModule, LPWSTR lpFilename, DWORD nSize
GetModuleHandleA;Retrieves a module handle for the specified module. The module must have been loaded by the calling process.;LPCSTR lpModuleName
GetModuleHandleExA;Retrieves a module handle for the specified module and increments the module's reference count unless GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT is specified. The module must have been loaded by the calling process.;DWORD dwFlags, LPCSTR lpModuleName, HMODULE *phModule
GetModuleHandleExW;Retrieves a module handle for the specified module and increments the module's reference count unless GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT is specified. The module must have been loaded by the calling process.;DWORD dwFlags, LPCWSTR lpModuleName, HMODULE *phModule
GetModuleHandleW;Retrieves a module handle for the specified module. The module must have been loaded by the calling process.;LPCWSTR lpModuleName
GetModuleInformation;Retrieves information about the specified module in the MODULEINFO structure.;HANDLE hProcess, HMODULE hModule, LPMODULEINFO lpmodinfo, DWORD cb
GetMonitorBrightness;Retrieves a monitor's minimum, maximum, and current brightness settings.;HANDLE hMonitor, LPDWORD pdwMinimumBrightness, LPDWORD pdwCurrentBrightness, LPDWORD pdwMaximumBrightness
GetMonitorCapabilities;Retrieves the configuration capabilities of a monitor. Call this function to find out which high-level monitor configuration functions are supported by the monitor.;HANDLE hMonitor, LPDWORD pdwMonitorCapabilities, LPDWORD pdwSupportedColorTemperatures
GetMonitorColorTemperature;Retrieves a monitor's current color temperature.;HANDLE hMonitor, LPMC_COLOR_TEMPERATURE pctCurrentColorTemperature
GetMonitorContrast;Retrieves a monitor's minimum, maximum, and current contrast settings.;HANDLE hMonitor, LPDWORD pdwMinimumContrast, LPDWORD pdwCurrentContrast, LPDWORD pdwMaximumContrast
GetMonitorDisplayAreaPosition;Retrieves a monitor's minimum, maximum, and current horizontal or vertical position.;HANDLE hMonitor, MC_POSITION_TYPE ptPositionType, LPDWORD pdwMinimumPosition, LPDWORD pdwCurrentPosition, LPDWORD pdwMaximumPosition
GetMonitorDisplayAreaSize;Retrieves a monitor's minimum, maximum, and current width or height.;HANDLE hMonitor, MC_SIZE_TYPE stSizeType, LPDWORD pdwMinimumWidthOrHeight, LPDWORD pdwCurrentWidthOrHeight, LPDWORD pdwMaximumWidthOrHeight
GetMonitorInfoA;The GetMonitorInfo function retrieves information about a display monitor.;HMONITOR hMonitor, LPMONITORINFO lpmi
GetMonitorInfoW;The GetMonitorInfo function retrieves information about a display monitor.;HMONITOR hMonitor, LPMONITORINFO lpmi
GetMonitorRedGreenOrBlueDrive;Retrieves a monitor's red, green, or blue drive value.;HANDLE hMonitor, MC_DRIVE_TYPE dtDriveType, LPDWORD pdwMinimumDrive, LPDWORD pdwCurrentDrive, LPDWORD pdwMaximumDrive
GetMonitorRedGreenOrBlueGain;Retrieves a monitor's red, green, or blue gain value.;HANDLE hMonitor, MC_GAIN_TYPE gtGainType, LPDWORD pdwMinimumGain, LPDWORD pdwCurrentGain, LPDWORD pdwMaximumGain
GetMonitorTechnologyType;Retrieves the type of technology used by a monitor.;HANDLE hMonitor, LPMC_DISPLAY_TECHNOLOGY_TYPE pdtyDisplayTechnologyType
GetMouseMovePointsEx;Retrieves a history of up to 64 previous coordinates of the mouse or pen.;UINT cbSize, LPMOUSEMOVEPOINT lppt, LPMOUSEMOVEPOINT lpptBuf, int nBufPoints, DWORD resolution
get_MSCEPErrorId;Gets the ID for additional error information related to a failed Network Device Enrollment Service (NDES) specification. Any method call on the parent object resets this property.;LONG *pVal
get_MSCEPErrorString;Contains the string data for additional error information related to a failed Network Device Enrollment Service (NDES) specification. Any method call on the parent object resets this property.;BSTR *pVal
GetMSCEPSetupProperty;Gets a property value for a Network Device Enrollment Service (NDES) configuration.;MSCEPSetupProperty propertyId, VARIANT *pVal
GetMulticastIpAddressEntry;Retrieves information for an existing multicast IP address entry on the local computer.;PMIB_MULTICASTIPADDRESS_ROW Row
GetMulticastIpAddressTable;Retrieves the multicast IP address table on the local computer.;ADDRESS_FAMILY Family, PMIB_MULTICASTIPADDRESS_TABLE *Table
GetMValue;The GetMValue macro retrieves the magenta color value from a CMYK color value.;cmyk
GetMyRoles;Gets the access mask of privilege roles for a user on a given Online Certificate Status Protocol (OCSP) responder server.;const BSTR bstrServerName, LONG *pRoles
GetMyRoles;Retrieves the certification authority (CA) roles of the caller.;const BSTR strConfig, LONG *pRoles
get_MyStoreFlags;Sets or retrieves the registry location used for MY store.;LONG *pdwFlags
get_MyStoreFlags;Sets or retrieves the registry location used for the MY store.;LONG *pdwFlags
get_MyStoreName;Sets or retrieves the name of the store where certificates with linked private keys are kept.;BSTR *pbstrName
get_MyStoreNameWStr;The MyStoreNameWStr property of IEnroll4 sets or retrieves the name of the store where certificates with linked private keys are kept.;LPWSTR *szwName
getMyStore;The getMyStore method is not implemented.;
get_MyStoreType;Sets or retrieves the type of store specified by the MyStoreName property.;BSTR *pbstrType
get_MyStoreTypeWStr;Sets or retrieves the type of store specified by the MyStoreTypeWStr property.;LPWSTR *szwType
GetNameByTypeA;The GetNameByType function retrieves the name of a network service for the specified service type.;LPGUID lpServiceType, LPSTR lpServiceName, DWORD dwNameLength
GetNameByTypeW;The GetNameByType function retrieves the name of a network service for the specified service type.;LPGUID lpServiceType, LPWSTR lpServiceName, DWORD dwNameLength
GetNameChoice;Returns the name choice at a specified index of a certificate revocation list (CRL) distribution information point.;LONG DistPointIndex, LONG NameIndex, LONG *pNameChoice
GetNameChoice;Returns the name choice at a specified index of an alternate name array.;LONG NameIndex, LONG *pNameChoice
GetNameCount;Returns the number of names in a certificate revocation list (CRL) distribution point.;LONG DistPointIndex, LONG *pNameCount
GetNameCount;Returns the number of names in the alternate name array.;LONG *pNameCount
GetNamedPipeClientComputerNameA;Retrieves the client computer name for the specified named pipe.;HANDLE Pipe, LPSTR ClientComputerName, ULONG ClientComputerNameLength
GetNamedPipeClientProcessId;Retrieves the client process identifier for the specified named pipe.;HANDLE Pipe, PULONG ClientProcessId
GetNamedPipeClientSessionId;Retrieves the client session identifier for the specified named pipe.;HANDLE Pipe, PULONG ClientSessionId
GetNamedPipeHandleStateA;Retrieves information about a specified named pipe.;HANDLE hNamedPipe, LPDWORD lpState, LPDWORD lpCurInstances, LPDWORD lpMaxCollectionCount, LPDWORD lpCollectDataTimeout, LPSTR lpUserName, DWORD nMaxUserNameSize
GetNamedPipeInfo;Retrieves information about the specified named pipe.;HANDLE hNamedPipe, LPDWORD lpFlags, LPDWORD lpOutBufferSize, LPDWORD lpInBufferSize, LPDWORD lpMaxInstances
GetNamedPipeServerProcessId;Retrieves the server process identifier for the specified named pipe.;HANDLE Pipe, PULONG ServerProcessId
GetNamedPipeServerSessionId;Retrieves the server session identifier for the specified named pipe.;HANDLE Pipe, PULONG ServerSessionId
GetNamedSecurityInfoA;Retrieves a copy of the security descriptor for an object specified by name.;LPCSTR pObjectName, SE_OBJECT_TYPE ObjectType, SECURITY_INFORMATION SecurityInfo, PSID *ppsidOwner, PSID *ppsidGroup, PACL *ppDacl, PACL *ppSacl, PSECURITY_DESCRIPTOR *ppSecurityDescriptor
GetNamedSecurityInfoW;Retrieves a copy of the security descriptor for an object specified by name.;LPCWSTR pObjectName, SE_OBJECT_TYPE ObjectType, SECURITY_INFORMATION SecurityInfo, PSID *ppsidOwner, PSID *ppsidGroup, PACL *ppDacl, PACL *ppSacl, PSECURITY_DESCRIPTOR *ppSecurityDescriptor
get_Name;Gets the identifier part of the name-value pair represented by an OCSPProperty object.;BSTR *pVal
get_Name;Gets the name of the IAzObjectPicker object.;BSTR *pbstrName
getnameinfo;Provides protocol-independent name resolution from an address to an ANSI host name and from a port number to the ANSI service name.;const SOCKADDR *pSockaddr, socklen_t SockaddrLength, PCHAR pNodeBuffer, DWORD NodeBufferSize, PCHAR pServiceBuffer, DWORD ServiceBufferSize, INT Flags
GetNameInfoW;Provides protocol-independent name resolution from an address to a Unicode host name and from a port number to the Unicode service name.;const SOCKADDR *pSockaddr, socklen_t SockaddrLength, PWCHAR pNodeBuffer, DWORD NodeBufferSize, PWCHAR pServiceBuffer, DWORD ServiceBufferSize, INT Flags
get_NameResolver;Gets a pointer to the IAzNameResolver interface associated with this IAzPrincipalLocator object.;IAzNameResolver **ppNameResolver
get_Name;Retrieves a CERTENROLL_OBJECTID value that contains an object identifier.;CERTENROLL_OBJECTID *pValue
get_Name;Retrieves a distinguished name.;BSTR *pValue
get_Name;Retrieves the abbreviated algorithm name.;BSTR *pValue
get_Name;Retrieves the name.;BSTR *pValue
GetName;Retrieves the name of the current attribute in the attribute-enumeration sequence.;BSTR *pstrOut
GetName;Retrieves the name of the current extension in the extension-enumeration sequence.;BSTR *pstrOut
get_Name;Retrieves the name portion of the name-value pair.;BSTR *pValue
GetName;Retrieves the nonlocalized name of the current column in the column-enumeration sequence.;BSTR *pstrOut
GetName;Returns the name at a specified index of a certificate revocation list (CRL) distribution information point.;LONG DistPointIndex, LONG NameIndex, BSTR *pstrName
GetName;Returns the specified name from the alternate name array.;LONG NameIndex, BSTR *pstrName
get_Name;Sets or retrieves the name of the application.;BSTR *pbstrName
get_Name;Sets or retrieves the name of the application group.;BSTR *pbstrName
get_Name;Sets or retrieves the name of the operation.;BSTR *pbstrName
get_Name;Sets or retrieves the name of the role.;BSTR *pbstrName
get_Name;Sets or retrieves the name of the scope.;BSTR *pbstrName
get_Name;Sets or retrieves the name of the task.;BSTR *pbstrName
GetNamespace;The GetNameSpace method retrieves the namespace from which the RSoP data is being displayed.;DWORD dwSection, LPOLESTR pszName, int cchMaxLength
GetName;The GetName method retrieves the unique GPO name.;LPOLESTR pszName, int cchMaxLength
GetName;The GetName method retrieves the unique name for the GPO. This value is usually a GUID.;LPOLESTR pszName, int cchMaxLength
get_NameValuePairs;A collection of name/value pairs of additional certificate property values.;IX509NameValuePairs **ppValue
get_NameValuePairs;Retrieves a collection of name-value pairs associated with the enrollment object.;IX509NameValuePairs **ppValue
get_NameValuePairs;Retrieves an IX509NameValuePairs collection associated with a certificate request.;IX509NameValuePairs **ppValue
GetNativeSystemInfo;Retrieves information about the current system to an application running under WOW64.;LPSYSTEM_INFO lpSystemInfo
GET_NCHITTEST_WPARAM;Retrieves the hit-test value from the specified WPARAM value.;wParam
GetNearestColor;The GetNearestColor function retrieves a color value identifying a color from the system palette that will be displayed when the specified color value is used.;HDC hdc, COLORREF color
GetNearestPaletteIndex;The GetNearestPaletteIndex function retrieves the index for the entry in the specified logical palette most closely matching a specified color value.;HPALETTE h, COLORREF color
GetNetScheduleAccountInformation;The GetNetScheduleAccountInformation function retrieves the AT Service account name.;LPCWSTR pwszServerName, DWORD ccAccount, WCHAR [] wszAccount
GetNetworkConnectivityHintForInterface;Retrieves the level and cost of network connectivity for the specified interface.;NET_IFINDEX InterfaceIndex, NL_NETWORK_CONNECTIVITY_HINT *ConnectivityHint
GetNetworkConnectivityHint;Retrieves the aggregate level and cost of network connectivity that an application or service is likely to experience.;NL_NETWORK_CONNECTIVITY_HINT *ConnectivityHint
GetNetworkInformation;Reserved for future use. Do not use this function.;const NET_IF_NETWORK_GUID *NetworkGuid, PNET_IF_COMPARTMENT_ID CompartmentId, PULONG SiteId, PWCHAR NetworkName, ULONG Length
GetNetworkParams;The GetNetworkParams function retrieves network parameters for the local computer.;PFIXED_INFO pFixedInfo, PULONG pOutBufLen
get__NewEnum;Gets an enumerator for a property set.;IUnknown **ppVal
get__NewEnum;Gets an enumerator for the configuration set.;IUnknown **pVal
get__NewEnum;Gets an enumerator for the information set.;IUnknown **ppVal
get__NewEnum;Retrieves an IEnumVARIANT interface on an object that can be used to enumerate the collection. This property is hidden within Visual Basic and Visual Basic Scripting Edition (VBScript).;LPUNKNOWN *ppEnumPtr
get__NewEnum;Retrieves an IEnumVARIANT interface on an object that can be used to enumerate the IAzRoleAssignments collection. This property is hidden within Visual Basic and Visual Basic Scripting Edition (VBScript).;LPUNKNOWN *ppEnumPtr
get__NewEnum;Retrieves an IEnumVARIANT interface on an object that can be used to enumerate the IAzRoleDefinitions collection. This property is hidden within Visual Basic and Visual Basic Scripting Edition (VBScript).;LPUNKNOWN *ppEnumPtr
get__NewEnum;Retrieves the enumerator for the collection.;LPUNKNOWN *pVal
get__NewEnum;The _NewEnum property of IAzOperations retrieves an IEnumVARIANT interface on an object that can be used to enumerate the collection. This property is hidden within Visual Basic and Visual Basic Scripting Edition (VBScript).;LPUNKNOWN *ppEnumPtr
get__NewEnum;The _NewEnum property of IAzRoles retrieves an IEnumVARIANT interface on an object that can be used to enumerate the collection. This property is hidden within Visual Basic and Visual Basic Scripting Edition (VBScript).;LPUNKNOWN *ppEnumPtr
get__NewEnum;The _NewEnum property of IAzScopes retrieves an IEnumVARIANT interface on an object that can be used to enumerate the collection. This property is hidden within Visual Basic and Visual Basic Scripting Edition (VBScript).;LPUNKNOWN *ppEnumPtr
get__NewEnum;The _NewEnum property of IAzTasks retrieves an IEnumVARIANT interface on an object that can be used to enumerate the collection. This property is hidden within Visual Basic and Visual Basic Scripting Edition (VBScript).;LPUNKNOWN *ppEnumPtr
GetNextDlgGroupItem;Retrieves a handle to the first control in a group of controls that precedes (or follows) the specified control in a dialog box.;HWND hDlg, HWND hCtl, BOOL bPrevious
GetNextDlgTabItem;Retrieves a handle to the first control that has the WS_TABSTOP style that precedes (or follows) the specified control.;HWND hDlg, HWND hCtl, BOOL bPrevious
GetNextUmsListItem;Returns the next user-mode scheduling (UMS) thread context in a list of thread contexts.;PUMS_CONTEXT UmsContext
GetNextUpdateTime;Retrieves the date and time at which the policy expires and should be refreshed.;DATE *pDate
GetNextWindow;Retrieves a handle to the next or previous window in the Z-Order. The next window is below the specified window; the previous window is above.;hWnd, wCmd
GetNLSVersionEx;Retrieves information about the current version of a specified NLS capability for a locale specified by name.Note  The application should call this function in preference to GetNLSVersion if designed to run only on Windows Vista and later.;NLS_FUNCTION function, LPCWSTR lpLocaleName, LPNLSVERSIONINFOEX lpVersionInformation
GetNLSVersion;Retrieves information about the current version of a specified NLS capability for a locale specified by identifier.Note  For interoperability reasons, the application should prefer the GetNLSVersionEx function to GetNLSVersion because Microsoft is migrating toward the use of locale names instead of locale identifiers for new locales. This recommendation applies especially to custom locales, for which GetNLSVersionEx retrieves enough information to determine if sort behavior has changed. Any application that runs only on Windows Vista and later should use GetNLSVersionEx or at least pass the NLSVERSIONINFOEX structure when calling GetNLSVersion to obtain additional sorting versioning data.;NLS_FUNCTION Function, LCID Locale, LPNLSVERSIONINFO lpVersionInformation
get_NonMembersName;Retrieves the account names of accounts that are refused membership in the application group.;VARIANT *pvarProp
get_NonMembers;Retrieves the security identifiers (SIDs), in text form, of accounts that are refused membership in the application group.;VARIANT *pvarProp
get_NotAfter;Specifies or retrieves the date and time after which the certificate is no longer valid.;DATE *pValue
get_NotBefore;Specifies or retrieves the date and time before which the certificate is not valid.;DATE *pValue
GetNtmsMediaPoolNameA;The GetNtmsMediaPoolName function retrieves the specified media pool's full name hierarchy.;HANDLE hSession, LPNTMS_GUID lpPoolId, LPSTR lpNameBuf, LPDWORD lpdwBufSize
GetNtmsMediaPoolNameW;The GetNtmsMediaPoolName function retrieves the specified media pool's full name hierarchy.;HANDLE hSession, LPNTMS_GUID lpPoolId, LPWSTR lpNameBuf, LPDWORD lpdwBufSize
GetNtmsObjectAttributeA;The GetNtmsObjectAttribute function retrieves the extended attribute (named private data) from the specified RSM object.;HANDLE hSession, LPNTMS_GUID lpObjectId, DWORD dwType, LPCSTR lpAttributeName, LPVOID lpAttributeData, LPDWORD lpAttributeSize
GetNtmsObjectAttributeW;The GetNtmsObjectAttribute function retrieves the extended attribute (named private data) from the specified RSM object.;HANDLE hSession, LPNTMS_GUID lpObjectId, DWORD dwType, LPCWSTR lpAttributeName, LPVOID lpAttributeData, LPDWORD lpAttributeSize
GetNtmsObjectInformationA;The GetNtmsObjectInformation function returns an object's information structure for the specified object.;HANDLE hSession, LPNTMS_GUID lpObjectId, LPNTMS_OBJECTINFORMATIONA lpInfo
GetNtmsObjectInformation;The GetNtmsObjectInformation function returns an object's information structure for the specified object.;HANDLE hSession, LPNTMS_GUID lpObjectId, LPNTMS_OBJECTINFORMATION lpInfo
GetNtmsObjectInformationW;The GetNtmsObjectInformation function returns an object's information structure for the specified object.;HANDLE hSession, LPNTMS_GUID lpObjectId, LPNTMS_OBJECTINFORMATIONW lpInfo
GetNtmsObjectSecurity;The GetNtmsObjectSecurity function reads the security descriptor for the specified RSM object.;HANDLE hSession, LPNTMS_GUID lpObjectId, DWORD dwType, SECURITY_INFORMATION RequestedInformation, PSECURITY_DESCRIPTOR lpSecurityDescriptor, DWORD nLength, LPDWORD lpnLengthNeeded
GetNtmsRequestOrder;The GetNtmsRequestOrder function gets the order that the specified request will be processed in the library queue.;HANDLE hSession, LPNTMS_GUID lpRequestId, LPDWORD lpdwOrderNumber
GetNtmsUIOptionsA;The GetNtmsUIOptions function obtains the list of computer names to which the specified type of user interface is being directed for the given object.;HANDLE hSession, const LPNTMS_GUID lpObjectId, DWORD dwType, LPSTR lpszDestination, LPDWORD lpdwBufSize
GetNtmsUIOptionsW;The GetNtmsUIOptions function obtains the list of computer names to which the specified type of user interface is being directed for the given object.;HANDLE hSession, const LPNTMS_GUID lpObjectId, DWORD dwType, LPWSTR lpszDestination, LPDWORD lpdwBufSize
get_NullSigned;Retrieves a Boolean value that indicates whether the certificate request is null-signed.;VARIANT_BOOL *pValue
get_NullSigned;Retrieves a Boolean value that specifies whether the primary signature on the certificate request is null-signed.;VARIANT_BOOL *pValue
get_NullSigned;Specifies and retrieves a Boolean value that indicates whether the certificate request is null-signed.;VARIANT_BOOL *pValue
GetNumaAvailableMemoryNodeEx;Retrieves the amount of memory that is available in a node specified as a USHORT value.;USHORT Node, PULONGLONG AvailableBytes
GetNumaAvailableMemoryNode;Retrieves the amount of memory available in the specified node.;UCHAR Node, PULONGLONG AvailableBytes
GetNumaHighestNodeNumber;Retrieves the node that currently has the highest number.;PULONG HighestNodeNumber
GetNumaNodeNumberFromHandle;Retrieves the NUMA node associated with the file or I/O device represented by the specified file handle.;HANDLE hFile, PUSHORT NodeNumber
GetNumaNodeProcessorMaskEx;Retrieves the processor mask for a node regardless of the processor group the node belongs to.;USHORT Node, PGROUP_AFFINITY ProcessorMask
GetNumaNodeProcessorMask;Retrieves the processor mask for the specified node.;UCHAR Node, PULONGLONG ProcessorMask
GetNumaProcessorNodeEx;Retrieves the node number as a USHORT value for the specified logical processor.;PPROCESSOR_NUMBER Processor, PUSHORT NodeNumber
GetNumaProcessorNode;Retrieves the node number for the specified processor.;UCHAR Processor, PUCHAR NodeNumber
GetNumaProximityNodeEx;Retrieves the NUMA node number that corresponds to the specified proximity identifier as a USHORT value.;ULONG ProximityId, PUSHORT NodeNumber
GetNumaProximityNode;Retrieves the NUMA node number that corresponds to the specified proximity domain identifier.;ULONG ProximityId, PUCHAR NodeNumber
GetNumberFormatA;Formats a number string as a number string customized for a locale specified by identifier.;LCID Locale, DWORD dwFlags, LPCSTR lpValue, const NUMBERFMTA *lpFormat, LPSTR lpNumberStr, int cchNumber
GetNumberFormatEx;Formats a number string as a number string customized for a locale specified by name.Note  The application should call this function in preference to GetNumberFormat if designed to run only on Windows Vista and later. Note  This function can format data that changes between releases, for example, due to a custom locale. If your application must persist or transmit data, see Using Persistent Locale Data.;LPCWSTR lpLocaleName, DWORD dwFlags, LPCWSTR lpValue, const NUMBERFMTW *lpFormat, LPWSTR lpNumberStr, int cchNumber
GetNumberFormatW;Formats a number string as a number string customized for a locale specified by identifier.;LCID Locale, DWORD dwFlags, LPCWSTR lpValue, const NUMBERFMTW *lpFormat, LPWSTR lpNumberStr, int cchNumber
GetNumberOfEventLogRecords;Retrieves the number of records in the specified event log.;HANDLE hEventLog, PDWORD NumberOfRecords
GetNumberOfInterfaces;The GetNumberOfInterfaces functions retrieves the number of interfaces on the local computer.;PDWORD pdwNumIf
GetNumberOfPhysicalMonitorsFromHMONITOR;Retrieves the number of physical monitors associated with an HMONITOR monitor handle.;HMONITOR hMonitor, LPDWORD pdwNumberOfPhysicalMonitors
GetNumberOfPhysicalMonitorsFromIDirect3DDevice9;Retrieves the number of physical monitors associated with a Direct3D device.;IDirect3DDevice9 *pDirect3DDevice9, LPDWORD pdwNumberOfPhysicalMonitors
GetObjectA;The GetObject function retrieves information for the specified graphics object.;HANDLE h, int c, LPVOID pv
get_ObjectId;Retrieves an object identifier (OID) for the policy object.;IObjectId **ppValue
get_ObjectId;Retrieves the object identifier (OID) for the attribute.;IObjectId **ppValue
get_ObjectId;Retrieves the object identifier (OID) for the extension.;IObjectId **ppValue
get_ObjectId;Retrieves the object identifier (OID) for the qualifier.;IObjectId **ppValue
get_ObjectId;Retrieves the object identifier (OID), if any, associated with the name.;IObjectId **ppValue
get_ObjectId;Retrieves the object identifier (OID) of the symmetric encryption algorithm.;IObjectId **ppValue
GetObjectInformation;The GetObjectInformation method requests information that the access control editor uses to initialize its pages and to determine the editing options available to the user.;PSI_OBJECT_INFO pObjectInfo
get_ObjectPicker;Gets a pointer to the IAzObjectPicker interface associated with this IAzPrincipalLocator object.;IAzObjectPicker **ppObjectPicker
GetObject;The GetObject function retrieves information for the specified graphics object.;HANDLE h, int c, LPVOID pv
GetObjectType;The GetObjectType retrieves the type of the specified object.;HGDIOBJ h
GetObjectW;The GetObject function retrieves information for the specified graphics object.;HANDLE h, int c, LPVOID pv
get_OCSPCAConfigurationCollection;Gets an instance of an OCSPCAConfigurationCollection object. This object represents the set of certification authority (CA) certificates for which an Online Certificate Status Protocol (OCSP) responder service can handle status requests.;IOCSPCAConfigurationCollection **pVal
get_OCSPServiceProperties;Gets an instance of an OCSPPropertyCollection object. This object represents the attributes of an Online Certificate Status Protocol (OCSP) responder service.;IOCSPPropertyCollection **ppVal
GetOEMCP;Returns the current original equipment manufacturer (OEM) code page identifier for the operating system.;
get_OldCertificate;Gets or sets an old certificate that a request is intended to replace.;ISignerCertificate **ppValue
get_OldCertificate;Retrieves the certificate passed to the InitializeFromCertificate method.;EncodingType Encoding, BSTR *pValue
GetOldestEventLogRecord;Retrieves the absolute record number of the oldest record in the specified event log.;HANDLE hEventLog, PDWORD OldestRecord
GetOpenCardNameA;The GetOpenCardName function displays the smart card &quot;select card&quot; dialog box.;LPOPENCARDNAMEA Arg1
GetOpenCardNameW;The GetOpenCardName function displays the smart card &quot;select card&quot; dialog box.;LPOPENCARDNAMEW Arg1
GetOpenClipboardWindow;Retrieves the handle to the window that currently has the clipboard open.;
get_Opened;Indicates whether the Open method has been successfully called.;VARIANT_BOOL *pValue
get_Opened;Retrieves a Boolean value that specifies whether the private key is open.;VARIANT_BOOL *pValue
get_OperationID;Sets or retrieves an application-specific value that uniquely identifies the operation within the application.;LONG *plProp
get_Operations;Retrieves an IAzOperations object that is used to enumerate IAzOperation objects from the policy data.;IAzOperations **ppOperationCollection
get_Operations;Retrieves the operations associated with the role.;VARIANT *pvarProp
get_Operations;Retrieves the operations associated with the task.;VARIANT *pvarProp
get_Operations;Retrieves the operations that can be performed by the algorithm.;AlgorithmOperationFlags *pValue
GetOperations;Returns a collection of the operations, within the specified scope, that the principal represented by the current client context has permission to perform.;BSTR bstrScopeName, IAzOperations **ppOperationCollection
GetOptions;The GetOptions method retrieves the options for the GPO.;DWORD *dwOptions
GetOptions;The GetOptions method retrieves the options the user has selected for the Group Policy Object Editor.;DWORD *dwOptions
get_Ordinal;Specifies or retrieves the position of the ICspStatus object in the ICspStatuses collection.;LONG *pValue
get_OSVersion;Retrieves the client operating system version information.;BSTR *pValue
GetOutlineTextMetricsA;The GetOutlineTextMetrics function retrieves text metrics for TrueType fonts.;HDC hdc, UINT cjCopy, LPOUTLINETEXTMETRICA potm
GetOutlineTextMetricsW;The GetOutlineTextMetrics function retrieves text metrics for TrueType fonts.;HDC hdc, UINT cjCopy, LPOUTLINETEXTMETRICW potm
GetOwnerModuleFromTcp6Entry;Retrieves data about the module that issued the context bind for a specific IPv6 TCP endpoint in a MIB table row.;PMIB_TCP6ROW_OWNER_MODULE pTcpEntry, TCPIP_OWNER_MODULE_INFO_CLASS Class, PVOID pBuffer, PDWORD pdwSize
GetOwnerModuleFromTcpEntry;Retrieves data about the module that issued the context bind for a specific IPv4 TCP endpoint in a MIB table row.;PMIB_TCPROW_OWNER_MODULE pTcpEntry, TCPIP_OWNER_MODULE_INFO_CLASS Class, PVOID pBuffer, PDWORD pdwSize
GetOwnerModuleFromUdp6Entry;Retrieves data about the module that issued the context bind for a specific IPv6 UDP endpoint in a MIB table row.;PMIB_UDP6ROW_OWNER_MODULE pUdpEntry, TCPIP_OWNER_MODULE_INFO_CLASS Class, PVOID pBuffer, PDWORD pdwSize
GetOwnerModuleFromUdpEntry;Retrieves data about the module that issued the context bind for a specific IPv4 UDP endpoint in a MIB table row.;PMIB_UDPROW_OWNER_MODULE pUdpEntry, TCPIP_OWNER_MODULE_INFO_CLASS Class, PVOID pBuffer, PDWORD pdwSize
GetPackageApplicationIds;Gets the IDs of apps in the specified package.;PACKAGE_INFO_REFERENCE packageInfoReference, UINT32 *bufferLength, BYTE *buffer, UINT32 *count
GetPackageFamilyNameFromToken;Gets the package family name for the specified token.;HANDLE token, UINT32 *packageFamilyNameLength, PWSTR packageFamilyName
GetPackageFamilyName;Gets the package family name for the specified process.;HANDLE hProcess, UINT32 *packageFamilyNameLength, PWSTR packageFamilyName
GetPackageFullNameFromToken;Gets the package full name for the specified token.;HANDLE token, UINT32 *packageFullNameLength, PWSTR packageFullName
GetPackageFullName;Gets the package full name for the specified process.;HANDLE hProcess, UINT32 *packageFullNameLength, PWSTR packageFullName
GetPackageId;Gets the package identifier (ID) for the specified process.;HANDLE hProcess, UINT32 *bufferLength, BYTE *buffer
GetPackageInfo2;Gets the package information for the specified package.;PACKAGE_INFO_REFERENCE packageInfoReference, const UINT32 flags, PackagePathType packagePathType, UINT32 *bufferLength, BYTE *buffer, UINT32 *count
GetPackageInfo;Gets the package information for the specified package.;PACKAGE_INFO_REFERENCE packageInfoReference, const UINT32 flags, UINT32 *bufferLength, BYTE *buffer, UINT32 *count
GetPackagePathByFullName2;Gets the path of the specified package.;PCWSTR packageFullName, PackagePathType packagePathType, UINT32 *pathLength, PWSTR path
GetPackagePathByFullName;Gets the path of the specified package.;PCWSTR packageFullName, UINT32 *pathLength, PWSTR path
GetPackagePath;Gets the path for the specified package.;const PACKAGE_ID *packageId, const UINT32 reserved, UINT32 *pathLength, PWSTR path
GetPackagesByPackageFamily;Gets the packages with the specified family name for the current user.;PCWSTR packageFamilyName, UINT32 *count, PWSTR *packageFullNames, UINT32 *bufferLength, WCHAR *buffer
GetPaletteEntries;The GetPaletteEntries function retrieves a specified range of palette entries from the given logical palette.;HPALETTE hpal, UINT iStart, UINT cEntries, LPPALETTEENTRY pPalEntries
GetParameter;Gets the specified value from the varParameterValues parameter of the IAzClientContext::AccessCheck method.;BSTR bstrParameterName, VARIANT *pvarParameterValue
get_Parameters;Retrieves a byte array that contains the parameters associated with the signature algorithm.;EncodingType Encoding, BSTR *pValue
GetParameterValue;Gets the value type of the business rule (BizRule) parameter with the specified name.;BSTR bstrParameterName, VARIANT *pvarParameterValue
GetParent;Retrieves a handle to the specified window's parent or owner.;HWND hWnd
get_ParentWindow;Specifies and retrieves the ID of the window used by key-related user interface dialogs.;LONG *pValue
get_ParentWindow;Specifies or retrieves the ID of the window used to display key information.;LONG *pValue
get_ParentWindow;Specifies or retrieves the ID of the window used to display signing certificate information.;LONG *pValue
get_ParentWindow;Specifies or retrieves the ID of the window used to display the enrollment information.;LONG *pValue
get_PathLenConstraint;Retrieves the depth of the subordinate certification authority chain.;LONG *pValue
GetPath;The GetPath function retrieves the coordinates defining the endpoints of lines and the control points of curves found in the path that is selected into the specified device context.;HDC hdc, LPPOINT apt, LPBYTE aj, int cpt
GetPath;The GetPath method retrieves the path to the GPO.;LPOLESTR pszPath, int cchMaxLength
getpeername;The getpeername function retrieves the address of the peer to which a socket is connected.;SOCKET s, sockaddr *name, int *namelen
GetPerAdapterInfo;The GetPerAdapterInfo function retrieves information about the adapter corresponding to the specified interface.;ULONG IfIndex, PIP_PER_ADAPTER_INFO pPerAdapterInfo, PULONG pOutBufLen
GetPerformanceInfo;Retrieves the performance values contained in the PERFORMANCE_INFORMATION structure.;PPERFORMANCE_INFORMATION pPerformanceInformation, DWORD cb
GetPerTcp6ConnectionEStats;Retrieves extended statistics for an IPv6 TCP connection.;PMIB_TCP6ROW Row, TCP_ESTATS_TYPE EstatsType, PUCHAR Rw, ULONG RwVersion, ULONG RwSize, PUCHAR Ros, ULONG RosVersion, ULONG RosSize, PUCHAR Rod, ULONG RodVersion, ULONG RodSize
GetPerTcpConnectionEStats;Retrieves extended statistics for an IPv4 TCP connection.;PMIB_TCPROW Row, TCP_ESTATS_TYPE EstatsType, PUCHAR Rw, ULONG RwVersion, ULONG RwSize, PUCHAR Ros, ULONG RosVersion, ULONG RosSize, PUCHAR Rod, ULONG RodVersion, ULONG RodSize
GetPhysicalCursorPos;Retrieves the position of the cursor in physical coordinates.;LPPOINT lpPoint
GetPhysicallyInstalledSystemMemory;Retrieves the amount of RAM that is physically installed on the computer.;PULONGLONG TotalMemoryInKilobytes
GetPhysicalMonitorsFromHMONITOR;Retrieves the physical monitors associated with an HMONITOR monitor handle.;HMONITOR hMonitor, DWORD dwPhysicalMonitorArraySize, LPPHYSICAL_MONITOR pPhysicalMonitorArray
GetPhysicalMonitorsFromIDirect3DDevice9;Retrieves the physical monitors associated with a Direct3D device.;IDirect3DDevice9 *pDirect3DDevice9, DWORD dwPhysicalMonitorArraySize, LPPHYSICAL_MONITOR pPhysicalMonitorArray
GetPixelFormat;The GetPixelFormat function obtains the index of the currently selected pixel format of the specified device context.;HDC hdc
GetPixel;The GetPixel function retrieves the red, green, blue (RGB) color value of the pixel at the specified coordinates.;HDC hdc, int x, int y
GetPointerCursorId;Retrieves the cursor identifier associated with the specified pointer.;UINT32 pointerId, UINT32 *cursorId
GetPointerDeviceCursors;Gets the cursor IDs that are mapped to the cursors associated with a pointer device.;HANDLE device, UINT32 *cursorCount, POINTER_DEVICE_CURSOR_INFO *deviceCursors
GetPointerDevice;Gets information about the pointer device.;HANDLE device, POINTER_DEVICE_INFO *pointerDevice
GetPointerDeviceProperties;Gets device properties that aren't included in the POINTER_DEVICE_INFO structure.;HANDLE device, UINT32 *propertyCount, POINTER_DEVICE_PROPERTY *pointerProperties
GetPointerDeviceRects;Gets the x and y range for the pointer device (in himetric) and the x and y range (current resolution) for the display that the pointer device is mapped to.;HANDLE device, RECT *pointerDeviceRect, RECT *displayRect
GetPointerDevices;Gets information about the pointer devices attached to the system.;UINT32 *deviceCount, POINTER_DEVICE_INFO *pointerDevices
GetPointerFrameInfo;Gets the entire frame of information for the specified pointers associated with the current message.;UINT32 pointerId, UINT32 *pointerCount, POINTER_INFO *pointerInfo
GetPointerFrameInfoHistory;Gets the entire frame of information (including coalesced input frames) for the specified pointers associated with the current message.;UINT32 pointerId, UINT32 *entriesCount, UINT32 *pointerCount, POINTER_INFO *pointerInfo
GetPointerFramePenInfo;Gets the entire frame of pen-based information for the specified pointers (of type PT_PEN) associated with the current message.;UINT32 pointerId, UINT32 *pointerCount, POINTER_PEN_INFO *penInfo
GetPointerFramePenInfoHistory;Gets the entire frame of pen-based information (including coalesced input frames) for the specified pointers (of type PT_PEN) associated with the current message.;UINT32 pointerId, UINT32 *entriesCount, UINT32 *pointerCount, POINTER_PEN_INFO *penInfo
GetPointerFrameTouchInfo;Gets the entire frame of touch-based information for the specified pointers (of type PT_TOUCH) associated with the current message.;UINT32 pointerId, UINT32 *pointerCount, POINTER_TOUCH_INFO *touchInfo
GetPointerFrameTouchInfoHistory;Gets the entire frame of touch-based information (including coalesced input frames) for the specified pointers (of type PT_TOUCH) associated with the current message.;UINT32 pointerId, UINT32 *entriesCount, UINT32 *pointerCount, POINTER_TOUCH_INFO *touchInfo
GET_POINTERID_WPARAM;Retrieves the pointer ID using the specified value.;wParam
GetPointerInfo;Gets the information for the specified pointer associated with the current message.;UINT32 pointerId, POINTER_INFO *pointerInfo
GetPointerInfoHistory;Gets the information associated with the individual inputs, if any, that were coalesced into the current message for the specified pointer.;UINT32 pointerId, UINT32 *entriesCount, POINTER_INFO *pointerInfo
GetPointerInputTransform;Gets one or more transforms for the pointer information coordinates associated with the current message.;UINT32 pointerId, UINT32 historyCount, INPUT_TRANSFORM *inputTransform
GetPointerPenInfo;Gets the pen-based information for the specified pointer (of type PT_PEN) associated with the current message.;UINT32 pointerId, POINTER_PEN_INFO *penInfo
GetPointerPenInfoHistory;Gets the pen-based information associated with the individual inputs, if any, that were coalesced into the current message for the specified pointer (of type PT_PEN).;UINT32 pointerId, UINT32 *entriesCount, POINTER_PEN_INFO *penInfo
GetPointerTouchInfo;Gets the touch-based information for the specified pointer (of type PT_TOUCH) associated with the current message.;UINT32 pointerId, POINTER_TOUCH_INFO *touchInfo
GetPointerTouchInfoHistory;Gets the touch-based information associated with the individual inputs, if any, that were coalesced into the current message for the specified pointer (of type PT_TOUCH).;UINT32 pointerId, UINT32 *entriesCount, POINTER_TOUCH_INFO *touchInfo
GetPointerType;Retrieves the pointer type for a specified pointer.;UINT32 pointerId, POINTER_INPUT_TYPE *pointerType
get_Policies;Retrieves a collection of application policies.;ICertificatePolicies **ppValue
get_Policies;Retrieves a collection of certificate policies.;ICertificatePolicies **ppValue
get_PolicyAdministratorsName;Retrieves the account names of principals that act as policy administrators.;VARIANT *pvarAdmins
get_PolicyAdministratorsName;The IAzApplication::PolicyAdministratorsName property retrieves the account names of principals that act as policy administrators.;VARIANT *pvarAdmins
get_PolicyAdministrators;Retrieves the security identifiers (SIDs), in text form, of principals that act as policy administrators.;VARIANT *pvarAdmins
get_PolicyAdministrators;Retrieves the security identifiers (SIDs) of principals that act as policy administrators in text form.;VARIANT *pvarAdmins
get_PolicyAdministrators;The PolicyAdministrators property of IAzScope retrieves the security identifiers (SIDs), in text form, of principals that act as policy administrators.;VARIANT *pvarAdmins
get_PolicyQualifiers;Retrieves a collection of optional policy qualifiers that can be applied to a certificate policy.;IPolicyQualifiers **ppValue
get_PolicyReadersName;Retrieves the account names of principals that act as policy readers.;VARIANT *pvarReaders
get_PolicyReadersName;The IAzApplication::PolicyReadersName property retrieves the account names of principals that act as policy readers.;VARIANT *pvarReaders
get_PolicyReaders;Retrieves the security identifiers (SIDs), in text form, of principals that act as policy readers.;VARIANT *pvarReaders
get_PolicyReaders;Retrieves the security identifiers (SIDs) of principals that act as policy readers in text form.;VARIANT *pvarReaders
get_PolicyReaders;The PolicyReaders property of IAzScope retrieves the security identifiers (SIDs), in text form, of principals that act as policy readers.;VARIANT *pvarReaders
GetPolicyServerId;Retrieves a string that uniquely identifies the certificate enrollment policy (CEP) server.;BSTR *pValue
GetPolicyServerId;Retrieves a string value that uniquely identifies the certificate enrollment policy (CEP) server.;BSTR *pValue
get_PolicyServer;Retrieves the certificate enrollment policy (CEP) server that contains the template used during initialization.;IX509EnrollmentPolicyServer **ppPolicyServer
GetPolicyServerUrl;Retrieves a string that contains the URL for the certificate enrollment policy (CEP) server.;BSTR *pValue
GetPolicyServerUrl;Retrieves a string value that contains the URL for the certificate enrollment policy (CEP) server.;BSTR *pValue
GetPolyFillMode;The GetPolyFillMode function retrieves the current polygon fill mode.;HDC hdc
GetPreferredPacketDescription;Retrieves a packet description that contains the packet properties the recognizer uses.;HRECOGNIZER hrec, PACKET_DESCRIPTION *pPacketDescription
GetPrincipals;Displays a dialog box from which users can choose one or more principals, and then returns the chosen list of principals and their corresponding security identifiers (SIDs).;HWND hParentWnd, BSTR bstrTitle, VARIANT *pvSidTypes, VARIANT *pvNames, VARIANT *pvSids
GetPriorityClass;Retrieves the priority class for the specified process. This value, together with the priority value of each thread of the process, determines each thread's base priority level.;HANDLE hProcess
GetPriorityClipboardFormat;Retrieves the first available clipboard format in the specified list.;UINT *paFormatPriorityList, int cFormats
get_PrivateKeyArchiveCertificate;Sets or retrieves the certificate that is used to archive a private key with a PKCS;BSTR *pbstrCert
GetPrivateKeyArchiveCertificate;The GetPrivateKeyArchiveCertificate method retrieves the certificate used to archive the private key. This method was first defined in the IEnroll4 interface.;
GetPrivateKeyContainerList;Gets the list of key container names stored by the specified cryptographic service provider (CSP) for asymmetric signature key algorithms.;const BSTR bstrProviderName, VARIANT *pVal
get_PrivateKey;Retrieves an IX509PrivateKey object that contains the private key used to sign the certificate request.;IX509PrivateKey **ppValue
get_PrivateKey;Retrieves the private key associated with the certificate.;IX509PrivateKey **ppValue
get_PrivateKey;Retrieves the private key associated with the ISignerCertificate object.;IX509PrivateKey **ppValue
GetPrivateObjectSecurity;Retrieves information from a private object's security descriptor.;PSECURITY_DESCRIPTOR ObjectDescriptor, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR ResultantDescriptor, DWORD DescriptorLength, PDWORD ReturnLength
GetPrivateProfileIntA;Retrieves an integer associated with a key in the specified section of an initialization file.;LPCSTR lpAppName, LPCSTR lpKeyName, INT nDefault, LPCSTR lpFileName
GetPrivateProfileInt;Retrieves an integer associated with a key in the specified section of an initialization file.;LPCTSTR lpAppName, LPCTSTR lpKeyName, INT nDefault, LPCTSTR lpFileName
GetPrivateProfileIntW;Retrieves an integer associated with a key in the specified section of an initialization file.;LPCWSTR lpAppName, LPCWSTR lpKeyName, INT nDefault, LPCWSTR lpFileName
GetPrivateProfileSectionA;Retrieves all the keys and values for the specified section of an initialization file.;LPCSTR lpAppName, LPSTR lpReturnedString, DWORD nSize, LPCSTR lpFileName
GetPrivateProfileSectionNamesA;Retrieves the names of all sections in an initialization file.;LPSTR lpszReturnBuffer, DWORD nSize, LPCSTR lpFileName
GetPrivateProfileSectionNames;Retrieves the names of all sections in an initialization file.;LPTSTR lpszReturnBuffer, DWORD nSize, LPCTSTR lpFileName
GetPrivateProfileSectionNamesW;Retrieves the names of all sections in an initialization file.;LPWSTR lpszReturnBuffer, DWORD nSize, LPCWSTR lpFileName
GetPrivateProfileSection;Retrieves all the keys and values for the specified section of an initialization file.;LPCTSTR lpAppName, LPTSTR lpReturnedString, DWORD nSize, LPCTSTR lpFileName
GetPrivateProfileSectionW;Retrieves all the keys and values for the specified section of an initialization file.;LPCWSTR lpAppName, LPWSTR lpReturnedString, DWORD nSize, LPCWSTR lpFileName
GetPrivateProfileStringA;Retrieves a string from the specified section in an initialization file.;LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpDefault, LPSTR lpReturnedString, DWORD nSize, LPCSTR lpFileName
GetPrivateProfileString;Retrieves a string from the specified section in an initialization file.;LPCTSTR lpAppName, LPCTSTR lpKeyName, LPCTSTR lpDefault, LPTSTR lpReturnedString, DWORD nSize, LPCTSTR lpFileName
GetPrivateProfileStringW;Retrieves a string from the specified section in an initialization file.;LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpDefault, LPWSTR lpReturnedString, DWORD nSize, LPCWSTR lpFileName
GetPrivateProfileStructA;Retrieves the data associated with a key in the specified section of an initialization file.;LPCSTR lpszSection, LPCSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCSTR szFile
GetPrivateProfileStruct;Retrieves the data associated with a key in the specified section of an initialization file.;LPCTSTR lpszSection, LPCTSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCTSTR szFile
GetPrivateProfileStructW;Retrieves the data associated with a key in the specified section of an initialization file.;LPCWSTR lpszSection, LPCWSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCWSTR szFile
GetProcAddress;Retrieves the address of an exported function or variable from the specified dynamic-link library (DLL).;HMODULE hModule, LPCSTR lpProcName
GetProcessAffinityMask;Retrieves the process affinity mask for the specified process and the system affinity mask for the system.;HANDLE hProcess, PDWORD_PTR lpProcessAffinityMask, PDWORD_PTR lpSystemAffinityMask
GetProcessDefaultLayout;Retrieves the default layout that is used when windows are created with no parent or owner.;DWORD *pdwDefaultLayout
GetProcessDEPPolicy;Gets the data execution prevention (DEP) and DEP-ATL thunk emulation settings for the specified 32-bit process.Windows XP with SP3:  Gets the DEP and DEP-ATL thunk emulation settings for the current process.;HANDLE hProcess, LPDWORD lpFlags, PBOOL lpPermanent
GetProcessDpiAwareness;Retrieves the dots per inch (dpi) awareness of the specified process.;HANDLE hprocess, PROCESS_DPI_AWARENESS *value
GetProcessGroupAffinity;Retrieves the processor group affinity of the specified process.;HANDLE hProcess, PUSHORT GroupCount, PUSHORT GroupArray
GetProcessHandleCount;Retrieves the number of open handles that belong to the specified process.;HANDLE hProcess, PDWORD pdwHandleCount
GetProcessHeap;Retrieves a handle to the default heap of the calling process.;
GetProcessHeaps;Returns the number of active heaps and retrieves handles to all of the active heaps for the calling process.;DWORD NumberOfHeaps, PHANDLE ProcessHeaps
GetProcessIdOfThread;Retrieves the process identifier of the process associated with the specified thread.;HANDLE Thread
GetProcessId;Retrieves the process identifier of the specified process.;HANDLE Process
GetProcessImageFileNameA;Retrieves the name of the executable file for the specified process.;HANDLE hProcess, LPSTR lpImageFileName, DWORD nSize
GetProcessImageFileNameW;Retrieves the name of the executable file for the specified process.;HANDLE hProcess, LPWSTR lpImageFileName, DWORD nSize
GetProcessInformation;Retrieves information about the specified process.;HANDLE hProcess, PROCESS_INFORMATION_CLASS ProcessInformationClass, LPVOID ProcessInformation, DWORD ProcessInformationSize
GetProcessIoCounters;Retrieves accounting information for all I/O operations performed by the specified process.;HANDLE hProcess, PIO_COUNTERS lpIoCounters
GetProcessMemoryInfo;Retrieves information about the memory usage of the specified process.;HANDLE Process, PPROCESS_MEMORY_COUNTERS ppsmemCounters, DWORD cb
GetProcessMitigationPolicy;Retrieves mitigation policy settings for the calling process.;HANDLE hProcess, PROCESS_MITIGATION_POLICY MitigationPolicy, PVOID lpBuffer, SIZE_T dwLength
get_ProcessName;Retrieves the name of the application that generated the request.;BSTR *pValue
GetProcessorSystemCycleTime;Retrieves the cycle time each processor in the specified processor group spent executing deferred procedure calls (DPCs) and interrupt service routines (ISRs) since the processor became active.;USHORT Group, PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION Buffer, PDWORD ReturnedLength
GetProcessPreferredUILanguages;Retrieves the process preferred UI languages. For more information, see User Interface Language Management.;DWORD dwFlags, PULONG pulNumLanguages, PZZWSTR pwszLanguagesBuffer, PULONG pcchLanguagesBuffer
GetProcessPriorityBoost;Retrieves the priority boost control state of the specified process.;HANDLE hProcess, PBOOL pDisablePriorityBoost
GetProcessReference;Retrieves the process-specific object supplied by SetProcessReference, incrementing the reference count to keep the process alive.;IUnknown **punk
GetProcessShutdownParameters;Retrieves the shutdown parameters for the currently calling process.;LPDWORD lpdwLevel, LPDWORD lpdwFlags
GetProcessTimes;Retrieves timing information for the specified process.;HANDLE hProcess, LPFILETIME lpCreationTime, LPFILETIME lpExitTime, LPFILETIME lpKernelTime, LPFILETIME lpUserTime
GetProcessVersion;Retrieves the major and minor version numbers of the system on which the specified process expects to run.;DWORD ProcessId
GetProcessWindowStation;Retrieves a handle to the current window station for the calling process.;
GetProcessWorkingSetSizeEx;Retrieves the minimum and maximum working set sizes of the specified process.;HANDLE hProcess, PSIZE_T lpMinimumWorkingSetSize, PSIZE_T lpMaximumWorkingSetSize, PDWORD Flags
GetProcessWorkingSetSize;Retrieves the minimum and maximum working set sizes of the specified process.;HANDLE hProcess, PSIZE_T lpMinimumWorkingSetSize, PSIZE_T lpMaximumWorkingSetSize
GetProductInfo;Retrieves the product type for the operating system on the local computer, and maps the type to the product types supported by the specified operating system.;DWORD dwOSMajorVersion, DWORD dwOSMinorVersion, DWORD dwSpMajorVersion, DWORD dwSpMinorVersion, PDWORD pdwReturnedProductType
GetProfileIntA;Retrieves an integer from a key in the specified section of the Win.ini file.;LPCSTR lpAppName, LPCSTR lpKeyName, INT nDefault
GetProfileIntW;Retrieves an integer from a key in the specified section of the Win.ini file.;LPCWSTR lpAppName, LPCWSTR lpKeyName, INT nDefault
GetProfileSectionA;Retrieves all the keys and values for the specified section of the Win.ini file.;LPCSTR lpAppName, LPSTR lpReturnedString, DWORD nSize
GetProfileSectionW;Retrieves all the keys and values for the specified section of the Win.ini file.;LPCWSTR lpAppName, LPWSTR lpReturnedString, DWORD nSize
GetProfileStringA;Retrieves the string associated with a key in the specified section of the Win.ini file.;LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpDefault, LPSTR lpReturnedString, DWORD nSize
GetProfileStringW;Retrieves the string associated with a key in the specified section of the Win.ini file.;LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpDefault, LPWSTR lpReturnedString, DWORD nSize
GetPropA;Retrieves a data handle from the property list of the specified window. The character string identifies the handle to be retrieved. The string and handle must have been added to the property list by a previous call to the SetProp function.;HWND hWnd, LPCSTR lpString
GetPropertyFlags;Retrieves a value that specifies the default policy server URL.;EnrollmentPolicyServerPropertyFlags *pValue
get_PropertyId;Specifies or retrieves a value of the CERTENROLL_PROPERTYID enumeration that identifies an external certificate property.;CERTENROLL_PROPERTYID *pValue
GetProperty;Retrieves a CEPSetupProperty enumeration value for the Certificate Enrollment Policy (CEP) Web Service configuration.;CEPSetupProperty propertyId, VARIANT *pPropertyValue
get_Property;Retrieves a certification authority property value.;EnrollmentCAProperty property , VARIANT *pValue
GetProperty;Retrieves a CESSetupProperty enumeration value for the Certificate Enrollment Web Service (CES) configuration.;CESSetupProperty propertyId, VARIANT *pPropertyValue
GetProperty;Retrieves a module's property value.;const BSTR strConfig, BSTR strStorageLocation, BSTR strPropertyName, LONG Flags, VARIANT *pvarProperty
get_Property;Retrieves a template property value.;EnrollmentTemplateProperty property , VARIANT *pValue
GetProperty;Returns the AzAuthorizationStore object property with the specified property ID.;LONG lPropId, VARIANT varReserved, VARIANT *pvarProp
GetProperty;Returns the IAzApplicationGroup object property with the specified property ID.;LONG lPropId, VARIANT varReserved, VARIANT *pvarProp
GetProperty;Returns the IAzApplication object property with the specified property ID.;LONG lPropId, VARIANT varReserved, VARIANT *pvarProp
GetProperty;Returns the IAzClientContext object property with the specified property ID.;LONG lPropId, VARIANT varReserved, VARIANT *pvarProp
GetProperty;Returns the IAzOperation object property with the specified property ID.;LONG lPropId, VARIANT varReserved, VARIANT *pvarProp
GetProperty;Returns the IAzRole object property with the specified property ID.;LONG lPropId, VARIANT varReserved, VARIANT *pvarProp
GetProperty;Returns the IAzScope object property with the specified property ID.;LONG lPropId, VARIANT varReserved, VARIANT *pvarProp
GetProperty;Returns the IAzTask object property with the specified property ID.;LONG lPropId, VARIANT varReserved, VARIANT *pvarProp
GetPropertySheetPages;The GetPropertySheetPages method retrieves the property sheet pages associated with the GPO.;HPROPSHEETPAGE **hPages, UINT *uPageCount
get_Property;Specifies or retrieves a property value for the IX509CertificateTemplateWritable object.;EnrollmentTemplateProperty property , VARIANT *pValue
GetPropW;Retrieves a data handle from the property list of the specified window. The character string identifies the handle to be retrieved. The string and handle must have been added to the property list by a previous call to the SetProp function.;HWND hWnd, LPCWSTR lpString
getprotobyname;The getprotobyname function retrieves the protocol information corresponding to a protocol name.;const char *name
getprotobynumber;The getprotobynumber function retrieves protocol information corresponding to a protocol number.;int number
getprotobynumber;The getprotobynumber function retrieves protocol information corresponding to a protocol number.;int proto
get_ProviderCLSID;Gets or sets the CLSID of the revocation information provider used by the CA configuration.;BSTR *pVal
get_ProviderFlags;Sets or retrieves the provider type.;LONG *pdwFlags
get_ProviderFlags;The ProviderFlags property of IEnroll4 sets or retrieves the provider type.;LONG *pdwFlags
get_ProviderName;Gets or sets the name of the cryptographic service provider (CSP) or key storage provider (KSP) that is used to generate or store the private key.;BSTR *pVal
GetProviderNameList;Gets the list of cryptographic service providers (CSPs) that provide asymmetric key signature algorithms on the computer.;VARIANT *pVal
GetProviderNameList;Gets the list of cryptographic service providers (CSPs) that provide asymmetric key signature and exchange algorithms on the computer.;VARIANT_BOOL bExchange, VARIANT *pVal
get_ProviderName;Retrieves the provider name.;BSTR *pValue
get_ProviderName;Specifies or retrieves the name of the cryptographic provider.;BSTR *pValue
get_ProviderName;The name of the encryption provider. The default is the Microsoft Platform Crypto Provider. You must set the ProviderName property before you call the Open method. You cannot change the ProviderName property after you have called the Open method.;BSTR *pValue
get_ProviderName;The ProviderName property of ICEnroll4 sets or retrieves the name of the cryptographic service provider (CSP) to use.;BSTR *pbstrProvider
get_ProviderNameWStr;Sets or retrieves the name of the cryptographic service provider (CSP) to use.;LPWSTR *szwProvider
get_ProviderProperties;Gets or sets information that provides certificate status responses.;VARIANT *pVal
GetProviderPropertyStore;Retrieves a pointer to the IPropertyStore interface associated with the identity provider.;IPropertyStore **ppPropertyStore
getProviderType;Retrieves the type of the specified cryptographic service provider (CSP). This method was first defined in the ICEnroll4 interface.;BSTR strProvName, LONG *plProvType
get_ProviderType;Sets or retrieves the type of provider.;LONG *pdwType
get_ProviderType;Specifies or retrieves the type of cryptographic provider associated with the private key.;X509ProviderType *pValue
get_ProviderType;The ProviderType property of ICEnroll4 sets or retrieves the type of provider.;LONG *pdwType
getProviderTypeWStr;Retrieves the type of the specified cryptographic service provider (CSP).;LPCWSTR pwszProvName, LONG *plProvType
get_PublicKeyAlgorithm;Specifies and retrieves an object identifier (OID) for the public key algorithm used in the GetSignatureAlgorithm method.;IObjectId **ppValue
get_PublicKey;Retrieves the IX509PublicKey object that contains the public key included in the certificate request.;IX509PublicKey **ppValue
get_PVKFileName;The PVKFileName property of ICEnroll4 sets or retrieves the name of the file that will contain exported keys.;BSTR *pbstr
get_PVKFileNameWStr;Sets or retrieves the name of the file that will contain exported keys.;LPWSTR *szw
get_Qualifier;Retrieves a string that contains the qualifier used to initialize the object.;BSTR *pValue
GetQueueStatus;Retrieves the type of messages found in the calling thread's message queue.;UINT flags
GetRandomRgn;The GetRandomRgn function copies the system clipping region of a specified device context to a specific region.;HDC hdc, HRGN hrgn, INT i
GetRasterizerCaps;The GetRasterizerCaps function returns flags indicating whether TrueType fonts are installed in the system.;LPRASTERIZER_STATUS lpraststat, UINT cjBytes
get_RawData;Retrieves a byte array that contains the extension value.;EncodingType Encoding, BSTR *pValue
get_RawData;Retrieves a byte array that contains the signed, Distinguished Encoding Rules (DER) encoded certificate request.;EncodingType Encoding, BSTR *pValue
get_RawData;Retrieves the attribute value.;EncodingType Encoding, BSTR *pValue
get_RawData;Retrieves the Distinguished Encoding Rules (DER) encoded byte array that contains the name.;EncodingType Encoding, BSTR *pValue
get_RawData;Retrieves the Distinguished Encoding Rules (DER) encoded qualifier object.;EncodingType Encoding, BSTR *pValue
get_RawData;Retrieves the value of the certificate property.;EncodingType Encoding, BSTR *pValue
get_RawDataToBeSigned;Retrieves the unsigned certificate request created by the Encode method.;EncodingType Encoding, BSTR *pValue
GetRawInputBuffer;Performs a buffered read of the raw input data.;PRAWINPUT pData, PUINT pcbSize, UINT cbSizeHeader
GET_RAWINPUT_CODE_WPARAM;Retrieves the input code from wParam in WM_INPUT.;wParam
GetRawInputData;Retrieves the raw input from the specified device.;HRAWINPUT hRawInput, UINT uiCommand, LPVOID pData, PUINT pcbSize, UINT cbSizeHeader
GetRawInputDeviceInfoA;Retrieves information about the raw input device.;HANDLE hDevice, UINT uiCommand, LPVOID pData, PUINT pcbSize
GetRawInputDeviceInfoW;Retrieves information about the raw input device.;HANDLE hDevice, UINT uiCommand, LPVOID pData, PUINT pcbSize
GetRawInputDeviceList;Enumerates the raw input devices attached to the system.;PRAWINPUTDEVICELIST pRawInputDeviceList, PUINT puiNumDevices, UINT cbSize
GetRawPointerDeviceData;Gets the raw input data from the pointer device.;UINT32 pointerId, UINT32 historyCount, UINT32 propertiesCount, POINTER_DEVICE_PROPERTY *pProperties, LONG *pValues
get_ReaderName;Specifies or retrieves the name of a smart card reader.;BSTR *pValue
GetRecoAttributes;Retrieves the attributes of the recognizer.;HRECOGNIZER hrec, RECO_ATTRS *pRecoAttrs
GetRefreshPolicy;Returns a value that indicates whether a client's cached certificate enrollment policy is out of date and needs to be refreshed.;VARIANT_BOOL *pValue
GetRegionData;The GetRegionData function fills the specified buffer with data describing a region. This data includes the dimensions of the rectangles that make up the region.;HRGN hrgn, DWORD nCount, LPRGNDATA lpRgnData
GetRegisteredRawInputDevices;Retrieves the information about the raw input devices for the current application.;PRAWINPUTDEVICE pRawInputDevices, PUINT puiNumDevices, UINT cbSize
GetRegistryKey;The GetRegistryKey method retrieves a handle to the root of the registry key for the specified GPO section.;DWORD dwSection, HKEY *hKey
GetRegistryKey;The GetRegistryKey method retrieves a handle to the root of the registry key for the specified section of the GPO.;DWORD dwSection, HKEY *hKey
get_ReminderDuration;Gets or sets the percentage of a signing certificate lifetime after which a warning event is logged.;ULONG *pVal
get_RenewalCertificate;Retrieves the certificate to be renewed.;EncodingType Encoding, BSTR *pValue
get_RenewalCertificate;Specifies or retrieves a byte array that contains the Distinguished Encoding Rules (DER) encoded certificate that is being renewed.;EncodingType Encoding, BSTR *pValue
get_RenewalCertificate;Specifies the certificate context for the renewal certificate.;PCCERT_CONTEXT *ppCertContext
get_Renewal;Retrieves the SHA-1 hash of the new certificate.;EncodingType Encoding, BSTR *pValue
GetRequestAttribute;Returns a named attribute from a request.;const BSTR strAttributeName, BSTR *pstrAttributeValue
GetRequestAttribute;Returns a named attribute value from a request.;const BSTR strAttributeName, BSTR *pstrAttributeValue
get_RequesterName;Specifies or retrieves a string that contains the Security Account Manager (SAM) name of the end-entity requesting the certificate.;BSTR *pValue
get_Request;Gets the inner PKCS10 request.;IX509CertificateRequestPkcs10 **ppValue
GetRequestId;Gets the current internal request number for the request and subsequent certificate.;LONG *pRequestId
get_RequestID;Gets the request ID from the Certificate Management over CMS (CMC) response.;BSTR *pstrRequestID
get_RequestId;Retrieves a unique certificate request identifier.;LONG *pValue
get_RequestId;Retrieves a unique identifier for the certificate request sent to the certification authority by the Enroll method.;LONG *pValue
GetRequestIdString;Gets the current internal request number, formatted as a string, for the request and subsequent certificate.;BSTR *pstrRequestId
get_RequestIdString;Retrieves a string that contains a unique identifier for the certificate request sent to the certification enrollment server (CES).;BSTR *pValue
GetRequestIdString;Retrieves a unique string identifier for the certificate request sent to the certification authority during enrollment.;BSTR *pValue
get_RequestOriginator;Retrieves a string that contains the DNS name of the originating computer.;BSTR *pValue
GetRequestProperty;Retrieves a specific property from a request.;const BSTR strPropertyName, LONG PropertyType, VARIANT *pvarPropertyValue
GetRequestProperty;Returns a named property from a request.;const BSTR strPropertyName, LONG PropertyType, VARIANT *pvarPropertyValue
get_Request;Retrieves the certificate request associated with the enrollment object.;IX509CertificateRequest **pValue
get_RequestStoreFlags;Sets or retrieves the registry location used for the request store.;LONG *pdwFlags
get_RequestStoreFlags;The RequestStoreFlags property of IEnroll4 sets or retrieves the registry location used for the request store.;LONG *pdwFlags
get_RequestStoreName;Sets or retrievesICEnroll the name of the store that contains the dummy certificate.;BSTR *pbstrName
get_RequestStoreNameWStr;The RequestStoreNameWStr property of IEnroll4 sets or retrieves the name of the store that contains the dummy certificate.;LPWSTR *szwName
get_RequestStoreType;Sets or retrieves the type of store to use for the store specified by the RequestStoreName property. This store type is passed directly to the CertOpenStore function.;BSTR *pbstrType
get_RequestStoreTypeWStr;Sets or retrieves the type of store to use for the store specified by the RequestStoreNameWStr property. This store type is passed directly to the CertOpenStore function.;LPWSTR *szwType
get_Response;Retrieves the certificate response returned from a certification authority.;EncodingType Encoding, BSTR *pValue
GetRestrictedErrorInfo;Gets the restricted error information object set by a previous call to SetRestrictedErrorInfo in the current logical thread.;IRestrictedErrorInfo **ppRestrictedErrorInfo
GetResultPropertyList;Retrieves a list of properties the recognizer can return for a result range.;HRECOGNIZER hrec, ULONG *pPropertyCount, GUID *pPropertyGuid
get_ReuseHardwareKeyIfUnableToGenNew;Sets or retrieves a Boolean value that determines the action taken by the certificate enrollment control object if an error is encountered when generating a new key.;BOOL *fReuseHardwareKeyIfUnableToGenNew
get_ReuseHardwareKeyIfUnableToGenNew;The ReuseHardwareKeyIfUnableToGenNew property of IEnroll4 sets or retrieves a Boolean value that determines the action taken by the certificate enrollment control object if an error is encountered when generating a new key.;BOOL *fReuseHardwareKeyIfUnableToGenNew
get_ReuseKey;Retrieves a Boolean value that indicates whether an existing private key was used to sign the request.;VARIANT_BOOL *pValue
GetRevocationReason;Returns the reason a certificate was revoked. This method was first defined in the ICertAdmin interface.;LONG *pReason
GetRgnBox;The GetRgnBox function retrieves the bounding rectangle of the specified region.;HRGN hrgn, LPRECT lprc
GetRightSeparator;Gets the right separator for the recognizer context.;HRECOCONTEXT hrc, ULONG *pcSize, WCHAR *pwcRightSeparator
get_RoleAssignments;Gets an IAzRoleAssignments object that represents the collection of IAzRoleAssignment objects associated with the current IAzApplication3 object.;IAzRoleAssignments **ppRoleAssignments
get_RoleAssignments;Retrieves an IAzRoleAssignments object that represents the collection of IAzRoleAssignment objects associated with this scope.;IAzRoleAssignments **ppRoleAssignments
get_RoleDefinitions;Gets an IAzRoleDefinitions object that represents the collection of IAzRoleDefinition objects associated with the current IAzApplication3 object.;IAzRoleDefinitions **ppRoleDefinitions
get_RoleDefinitions;Retrieves a collection of the IAzRoleDefinition objects associated with this IAzRoleAssignment object.;IAzRoleDefinitions **ppRoleDefinitions
get_RoleDefinitions;Retrieves a collection of the IAzRoleDefinition objects associated with this IAzRoleDefinition object.;IAzRoleDefinitions **ppRoleDefinitions
get_RoleDefinitions;Retrieves an IAzRoleDefinitions object that represents the collection of IAzRoleDefinition objects associated with this scope.;IAzRoleDefinitions **ppRoleDefinitions
get_RoleForAccessCheck;Sets or retrieves the role that is used to perform the access check.;BSTR *pbstrProp
get_Roles;Retrieves an IAzRoles object that is used to enumerate IAzRole objects from the policy data.;IAzRoles **ppRoleCollection
GetRoles;Returns the roles for the client context.;BSTR bstrScopeName, VARIANT *pvarRoleNames
get_Roles;The Roles property of IAzApplication retrieves an IAzRoles object that is used to enumerate IAzRole objects from the policy data.;IAzRoles **ppRoleCollection
getROOTHStore;The getROOTHStore method is not implemented.;
get_RootStoreFlags;Sets or retrieves the registry location used for the root store.;LONG *pdwFlags
get_RootStoreFlags;The RootStoreFlags property of ICEnroll4 sets or retrieves the registry location used for the root store.;LONG *pdwFlags
get_RootStoreName;Sets or retrieves the name of the root store where all intrinsically trusted, self-signed root certificates are kept.;BSTR *pbstrName
get_RootStoreNameWStr;The RootStoreNameWStr property of IEnroll4 sets or retrieves the name of the root store where all intrinsically trusted, self-signed root certificates are kept.;LPWSTR *szwName
get_RootStoreType;Sets or retrieves the type of store to use for the store specified by the RootStoreName property.;BSTR *pbstrType
get_RootStoreTypeWStr;Sets or retrieves the type of store to use for the store specified by the RootStoreNameWStr property.;LPWSTR *szwType
GetROP2;The GetROP2 function retrieves the foreground mix mode of the specified device context. The mix mode specifies how the pen or interior color and the color already on the screen are combined to yield a new color.;HDC hdc
GetRTTAndHopCount;The GetRTTAndHopCount function determines the round-trip time (RTT) and hop count to the specified destination.;IPAddr DestIpAddress, PULONG HopCount, ULONG MaxHops, PULONG RTT
GetRValue;The GetRValue macro retrieves an intensity value for the red component of a red, green, blue (RGB) value.;rgb
GetScaleFactorForDevice;Gets the preferred scale factor for a display device.;DISPLAY_DEVICE_TYPE deviceType
GetScaleFactorForMonitor;Gets the scale factor of a specific monitor. This function replaces GetScaleFactorForDevice.;HMONITOR hMon, DEVICE_SCALE_FACTOR *pScale
GetSchemaVersion;Gets the version number of this authorization store.;LONG *plMajorVersion, LONG *plMinorVersion
get_Scope;Retrieves the IAzScope object that represents the scope in which this IAzRoleAssignment object is defined.;IAzScope **ppScope
get_Scopes;Retrieves an IAzScopes object that is used to enumerate IAzScope objects from the policy data.;IAzScopes **ppScopeCollection
get_ScriptEngineTimeout;Sets or retrieves the time in milliseconds that the IAzClientContext::AccessCheck method will wait for a Business Rule (BizRule) to complete execution before canceling it.;LONG *plProp
GetScrollBarInfo;The GetScrollBarInfo function retrieves information about the specified scroll bar.;HWND hwnd, LONG idObject, PSCROLLBARINFO psbi
GetScrollInfo;The GetScrollInfo function retrieves the parameters of a scroll bar, including the minimum and maximum scrolling positions, the page size, and the position of the scroll box (thumb).;HWND hwnd, int nBar, LPSCROLLINFO lpsi
GetScrollPos;The GetScrollPos function retrieves the current position of the scroll box (thumb) in the specified scroll bar.;HWND hWnd, int nBar
GetScrollRange;The GetScrollRange function retrieves the current minimum and maximum scroll box (thumb) positions for the specified scroll bar.;HWND hWnd, int nBar, LPINT lpMinPos, LPINT lpMaxPos
GetSecondarySecurity;Returns additional security contexts that may impact access to the resource.;PSECURITY_OBJECT *pSecurityObjects, PULONG pSecurityObjectCount
GetSecurityDescriptorControl;Retrieves a security descriptor control and revision information.;PSECURITY_DESCRIPTOR pSecurityDescriptor, PSECURITY_DESCRIPTOR_CONTROL pControl, LPDWORD lpdwRevision
GetSecurityDescriptorDacl;Retrieves a pointer to the discretionary access control list (DACL) in a specified security descriptor.;PSECURITY_DESCRIPTOR pSecurityDescriptor, LPBOOL lpbDaclPresent, PACL *pDacl, LPBOOL lpbDaclDefaulted
GetSecurityDescriptorGroup;Retrieves the primary group information from a security descriptor.;PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID *pGroup, LPBOOL lpbGroupDefaulted
GetSecurityDescriptorLength;Returns the length, in bytes, of a structurally valid security descriptor. The length includes the length of all associated structures.;PSECURITY_DESCRIPTOR pSecurityDescriptor
GetSecurityDescriptorOwner;Retrieves the owner information from a security descriptor.;PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID *pOwner, LPBOOL lpbOwnerDefaulted
GetSecurityDescriptorRMControl;Retrieves the resource manager control bits.;PSECURITY_DESCRIPTOR SecurityDescriptor, PUCHAR RMControl
GetSecurityDescriptorSacl;Retrieves a pointer to the system access control list (SACL) in a specified security descriptor.;PSECURITY_DESCRIPTOR pSecurityDescriptor, LPBOOL lpbSaclPresent, PACL *pSacl, LPBOOL lpbSaclDefaulted
get_SecurityDescriptor;Specifies or retrieves the security descriptor for the private key.;BSTR *pValue
GetSecurity;Gets security descriptor information for an Online Certificate Status Protocol (OCSP) responder server.;const BSTR bstrServerName, BSTR *pVal
GetSecurityInfo;Retrieves a copy of the security descriptor for an object specified by a handle.;HANDLE handle, SE_OBJECT_TYPE ObjectType, SECURITY_INFORMATION SecurityInfo, PSID *ppsidOwner, PSID *ppsidGroup, PACL *ppDacl, PACL *ppSacl, PSECURITY_DESCRIPTOR *ppSecurityDescriptor
GetSecurity;The GetSecurity method requests a security descriptor for the securable object whose security descriptor is being edited. The access control editor calls this method to retrieve the object's current or default security descriptor.;SECURITY_INFORMATION RequestedInformation, PSECURITY_DESCRIPTOR *ppSecurityDescriptor, BOOL fDefault
get_Selected;Specifies or retrieves a value that indicates whether an item can be used during the enrollment process.;EnrollmentSelectionStatus *pValue
get_SenderNonce;Specifies or retrieves a byte array that contains a nonce.;EncodingType Encoding, BSTR *pValue
get_SerialNumber;Specifies and retrieves the certificate serial number.;EncodingType Encoding, BSTR *pValue
getservbyname;The getservbyname function retrieves service information corresponding to a service name and protocol.;const char *name, const char *proto
getservbyport;The getservbyport function retrieves service information corresponding to a port and protocol.;int port, const char *proto
GetServiceA;The GetService function retrieves information about a network service in the context of a set of default namespaces or a specified namespace.;DWORD dwNameSpace, LPGUID lpGuid, LPSTR lpServiceName, DWORD dwProperties, LPVOID lpBuffer, LPDWORD lpdwBufferSize, LPSERVICE_ASYNC_INFO lpServiceAsyncInfo
GetServiceDirectory;Returns a path for a per-service filesystem location for a service to read and/or write state to.;SERVICE_STATUS_HANDLE hServiceStatus, SERVICE_DIRECTORY_TYPE eDirectoryType, PWCHAR lpPathBuffer, DWORD cchPathBufferLength, DWORD *lpcchRequiredBufferLength
GetServiceDisplayNameA;Retrieves the display name of the specified service.;SC_HANDLE hSCManager, LPCSTR lpServiceName, LPSTR lpDisplayName, LPDWORD lpcchBuffer
GetServiceDisplayNameW;Retrieves the display name of the specified service.;SC_HANDLE hSCManager, LPCWSTR lpServiceName, LPWSTR lpDisplayName, LPDWORD lpcchBuffer
GetServiceKeyNameA;Retrieves the service name of the specified service.;SC_HANDLE hSCManager, LPCSTR lpDisplayName, LPSTR lpServiceName, LPDWORD lpcchBuffer
GetServiceKeyNameW;Retrieves the service name of the specified service.;SC_HANDLE hSCManager, LPCWSTR lpDisplayName, LPWSTR lpServiceName, LPDWORD lpcchBuffer
GetServiceRegistryStateKey;Returns a handle for a registry key for a service to read and/or write state to.;SERVICE_STATUS_HANDLE ServiceStatusHandle, SERVICE_REGISTRY_STATE_TYPE StateType, DWORD AccessMask, HKEY *ServiceStateKey
GetServiceW;The GetService function retrieves information about a network service in the context of a set of default namespaces or a specified namespace.;DWORD dwNameSpace, LPGUID lpGuid, LPWSTR lpServiceName, DWORD dwProperties, LPVOID lpBuffer, LPDWORD lpdwBufferSize, LPSERVICE_ASYNC_INFO lpServiceAsyncInfo
GetSessionCompartmentId;Reserved for future use. Do not use this function.;ULONG SessionId
get_SHA1Hash;Retrieves the SHA-1 hash of a certificate.;EncodingType Encoding, BSTR *pValue
GetShellWindow;Retrieves a handle to the Shell's desktop window.;
GetShortPathNameA;Retrieves the short path form of the specified path.;LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer
GetShortPathNameW;Retrieves the short path form of the specified path.;LPCWSTR lpszLongPath, LPWSTR lpszShortPath, DWORD cchBuffer
GetSidIdentifierAuthority;Returns a pointer to the SID_IDENTIFIER_AUTHORITY structure in a specified security identifier (SID).;PSID pSid
GetSidLengthRequired;Returns the length, in bytes, of the buffer required to store a SID with a specified number of subauthorities.;UCHAR nSubAuthorityCount
get_Sids;Gets an array of the security identifiers (SIDs) associated with this client context.;VARIANT *pStringSidArray
GetSidSubAuthorityCount;Returns a pointer to the member in a security identifier (SID) structure that contains the subauthority count.;PSID pSid
GetSidSubAuthority;Returns a pointer to a specified subauthority in a security identifier (SID). The subauthority value is a relative identifier (RID).;PSID pSid, DWORD nSubAuthority
GetSignatureAlgorithm;Retrieves the signing algorithm object identifier (OID).;VARIANT_BOOL Pkcs7Signature, VARIANT_BOOL SignatureKey, IObjectId **ppValue
get_SignatureInformation;Retrieves an IX509SignatureInformation object that contains information about the certificate signature.;IX509SignatureInformation **ppValue
get_SignatureInformation;Retrieves the IX509SignatureInformation object that contains information about the certificate request signature.;IX509SignatureInformation **ppValue
get_SignatureInformation;Retrieves the IX509SignatureInformation object that contains information about the primary signature used to sign the certificate request.;IX509SignatureInformation **ppValue
get_Signature;Retrieves the digital signature on the provider.;EncodingType Encoding, BSTR *pValue
get_Signature;Retrieves the request signature created by the Encode method.;EncodingType Encoding, BSTR *pValue
get_SignerCertificate;Gets or sets the signer certificate for the request.;ISignerCertificate **ppValue
get_SignerCertificate;Specifies or retrieves a certificate used to sign the certificate request.;ISignerCertificate **ppValue
get_SignerCertificate;Specifies or retrieves the ISignerCertificate object used to sign the certificate.;ISignerCertificate **ppValue
get_SignerCertificates;Retrieves a collection of certificates used to sign the request.;ISignerCertificates **ppValue
get_SigningCertificate;Gets or sets a signing certificate that has been encoded by using Distinguished Encoding Rules (DER). An Online Certificate Status Protocol (OCSP) responder service uses this certificate to sign its responses to certificate status requests.;VARIANT *pVal
GetSigningCertificates;Gets the signing certificates that are available on a responder server for a given certification authority (CA) certificate.;const BSTR bstrServerName, const VARIANT *pCACertVar, VARIANT *pVal
get_SigningCertificateTemplate;Gets or sets the template name for a signing certificate.;BSTR *pVal
get_SigningFlags;Gets or sets a combination of flag values. These values specify the management of signing certificates that belong to a certification authority (CA) configuration.;ULONG *pVal
get_Silent;Specifies or retrieves a Boolean value that indicates whether any of the key-related modal dialogs are displayed during the certificate enrollment process.;VARIANT_BOOL *pValue
get_Silent;Specifies or retrieves a Boolean value that indicates whether a user interface is displayed during the certificate enrollment process.;VARIANT_BOOL *pValue
get_Silent;Specifies or retrieves a Boolean value that indicates whether the Certificate Enrollment Control is allowed to display a dialog box when the private key is accessed.;VARIANT_BOOL *pValue
get_Silent;Specifies or retrieves a Boolean value that indicates whether the user is notified when the private key is used to sign a certificate request.;VARIANT_BOOL *pValue
get_SmimeCapabilities;Retrieves a collection of ISmimeCapability objects.;ISmimeCapabilities **ppValue
get_SmimeCapabilities;Specifies or retrieves a Boolean value that tells the Encode method whether to create an IX509ExtensionSmimeCapabilities collection that identifies the encryption capabilities supported by the computer.;VARIANT_BOOL *pValue
getsockname;The getsockname function retrieves the local name for a socket.;SOCKET s, sockaddr *name, int *namelen
getsockopt;The getsockopt function retrieves a socket option.;SOCKET s, int level, int optname, char *optval, int *optlen
get_SPCFileName;Sets or retrieves the name of the file to which to write the base64-encoded PKCS;BSTR *pbstr
get_SPCFileNameWStr;The SPCFileNameWStr property of IEnroll4 sets or retrieves the name of the file to which to write the base64-encoded PKCS;LPWSTR *szw
GetStagedPackageOrigin;Gets the origin of the specified package.;PCWSTR packageFullName, PackageOrigin *origin
GetStagedPackagePathByFullName2;Gets the path of the specified staged package.;PCWSTR packageFullName, PackagePathType packagePathType, UINT32 *pathLength, PWSTR path
GetStagedPackagePathByFullName;Gets the path of the specified staged package.;PCWSTR packageFullName, UINT32 *pathLength, PWSTR path
GetStartupInfoW;Retrieves the contents of the STARTUPINFO structure that was specified when the calling process was created.;LPSTARTUPINFOW lpStartupInfo
get_Status;Gets the status of the request.;IX509EnrollmentStatus **ppValue
get_Status;Retrieves an IX509EnrollmentStatus object that can be used to monitor the status of the enrollment process and retrieve error information.;IX509EnrollmentStatus **ppValue
get_Status;Specifies or retrieves a value that indicates the status of the enrollment process.;EnrollmentEnrollStatus *pValue
GetStockObject;The GetStockObject function retrieves a handle to one of the stock pens, brushes, fonts, or palettes.;int i
GetStretchBltMode;The GetStretchBltMode function retrieves the current stretching mode. The stretching mode defines how color data is added to or removed from bitmaps that are stretched or compressed when the StretchBlt function is called.;HDC hdc
GetStringProperty;Retrieves the certificate enrollment policy (CEP) server ID or the display name of the CEP server.;PolicyServerUrlPropertyID propertyId, BSTR *ppValue
GetStringScripts;Provides a list of scripts used in the specified Unicode string.;DWORD dwFlags, LPCWSTR lpString, int cchString, LPWSTR lpScripts, int cchScripts
GetStringTypeA;Deprecated.;LCID Locale, DWORD dwInfoType, LPCSTR lpSrcStr, int cchSrc, LPWORD lpCharType
GetStringType;Returns the type of string values that the string array contains.;LONG *pStringType
get_StrValue;Retrieves a string that contains an email address, a Domain Name System (DNS) name, a URL, a registered object identifier (OID), or a user principal name (UPN).;BSTR *pValue
get_SubjectKeyIdentifier;Retrieves a byte array that contains the key identifier.;EncodingType Encoding, BSTR *pValue
get_Subject;Specifies or retrieves the X.500 distinguished name of the entity requesting the certificate.;IX500DistinguishedName **ppValue
GetSubMenu;Retrieves a handle to the drop-down menu or submenu activated by the specified menu item.;HMENU hMenu, int nPos
GetSupportedCATypes;Gets the types of certification authorities (CAs) that can be installed on a computer under the caller context.;VARIANT *pCATypes
GetSupportedKeySpec;Retrieves information regarding the current cryptographic service provider (CSP) support for signature and/or exchange operations.;LONG *pdwKeySpec
GetSupportedKeySpec;Retrieves information regarding the current cryptographic service provider (CSP) support for signature and/or exchange operations. This method was first defined in the ICEnroll3 interface.;LONG *pdwKeySpec
get_SuppressDefaults;Specifies or retrieves a Boolean value that indicates whether the default extensions and attributes are included in the request.;VARIANT_BOOL *pValue
get_SuppressOids;Retrieves a collection of extension or attribute object identifiers (OIDs) to be suppressed from the certificate during the encoding process.;IObjectIds **ppValue
get_SuppressOids;Retrieves a collection of the default extension and attribute object identifiers (OIDs) that were not added to the request when the request was encoded.;IObjectIds **ppValue
GetSysColorBrush;The GetSysColorBrush function retrieves a handle identifying a logical brush that corresponds to the specified color index.;int nIndex
GetSysColor;Retrieves the current color of the specified display element.;int nIndex
GetSystemDefaultLangID;Returns the language identifier for the system locale.;
GetSystemDefaultLCID;Returns the locale identifier for the system locale.Note  Any application that runs only on Windows Vista and later should use GetSystemDefaultLocaleName in preference to this function.;
GetSystemDefaultLocaleName;Retrieves the system default locale name.Note  It is recommended that applications call GetUserDefaultLocaleName in preference over this function.;LPWSTR lpLocaleName, int cchLocaleName
GetSystemDefaultUILanguage;Retrieves the language identifier for the system default UI language of the operating system, also known as the &quot;install language&quot; on Windows Vista and later. For more information, see User Interface Language Management.;
GetSystemDEPPolicy;Gets the data execution prevention (DEP) policy setting for the system.;
GetSystemDirectoryA;Retrieves the path of the system directory.;LPSTR lpBuffer, UINT uSize
GetSystemDirectoryW;Retrieves the path of the system directory.;LPWSTR lpBuffer, UINT uSize
GetSystemDpiForProcess;Retrieves the system DPI associated with a given process. This is useful for avoiding compatibility issues that arise from sharing DPI-sensitive information between multiple system-aware processes with different system DPI values.;HANDLE hProcess
GetSystemFileCacheSize;Retrieves the current size limits for the working set of the system cache.;PSIZE_T lpMinimumFileCacheSize, PSIZE_T lpMaximumFileCacheSize, PDWORD lpFlags
GetSystemFirmwareTable;Retrieves the specified firmware table from the firmware table provider.;DWORD FirmwareTableProviderSignature, DWORD FirmwareTableID, PVOID pFirmwareTableBuffer, DWORD BufferSize
GetSystemInfo;Retrieves information about the current system.;LPSYSTEM_INFO lpSystemInfo
GetSystemMenu;Enables the application to access the window menu (also known as the system menu or the control menu) for copying and modifying.;HWND hWnd, BOOL bRevert
GetSystemMetricsForDpi;Retrieves the specified system metric or system configuration setting taking into account a provided DPI.;int nIndex, UINT dpi
GetSystemMetrics;Retrieves the specified system metric or system configuration setting.;int nIndex
GetSystemPaletteEntries;The GetSystemPaletteEntries function retrieves a range of palette entries from the system palette that is associated with the specified device context (DC).;HDC hdc, UINT iStart, UINT cEntries, LPPALETTEENTRY pPalEntries
GetSystemPaletteUse;The GetSystemPaletteUse function retrieves the current state of the system (physical) palette for the specified device context (DC).;HDC hdc
GetSystemPowerStatus;Retrieves the power status of the system. The status indicates whether the system is running on AC or DC power, whether the battery is currently charging, how much battery life remains, and if battery saver is on or off.;LPSYSTEM_POWER_STATUS lpSystemPowerStatus
GetSystemPreferredUILanguages;Retrieves the system preferred UI languages. For more information, see User Interface Language Management.;DWORD dwFlags, PULONG pulNumLanguages, PZZWSTR pwszLanguagesBuffer, PULONG pcchLanguagesBuffer
GetSystemRegistryQuota;Retrieves the current size of the registry and the maximum size that the registry is allowed to attain on the system.;PDWORD pdwQuotaAllowed, PDWORD pdwQuotaUsed
GetSystemTimeAdjustment;Determines whether the system is applying periodic time adjustments to its time-of-day clock, and obtains the value and period of any such adjustments.;PDWORD lpTimeAdjustment, PDWORD lpTimeIncrement, PBOOL lpTimeAdjustmentDisabled
GetSystemTimeAdjustmentPrecise;Determines whether the system is applying periodic, programmed time adjustments to its time-of-day clock, and obtains the value and period of any such adjustments.;PDWORD64 lpTimeAdjustment, PDWORD64 lpTimeIncrement, PBOOL lpTimeAdjustmentDisabled
GetSystemTimeAsFileTime;Retrieves the current system date and time. The information is in Coordinated Universal Time (UTC) format.;LPFILETIME lpSystemTimeAsFileTime
GetSystemTimePreciseAsFileTime;GetSystemTimePreciseAsFileTime function retrieves the current system date and time with the highest possible level of precision (&lt;1us). The retrieved information is in Coordinated Universal Time (UTC) format.;LPFILETIME lpSystemTimeAsFileTime
GetSystemTime;Retrieves the current system date and time in Coordinated Universal Time (UTC) format.;LPSYSTEMTIME lpSystemTime
GetSystemTimes;Retrieves system timing information. On a multiprocessor system, the values returned are the sum of the designated times across all processors.;PFILETIME lpIdleTime, PFILETIME lpKernelTime, PFILETIME lpUserTime
GetSystemWindowsDirectoryA;Retrieves the path of the shared Windows directory on a multi-user system.;LPSTR lpBuffer, UINT uSize
GetSystemWindowsDirectoryW;Retrieves the path of the shared Windows directory on a multi-user system.;LPWSTR lpBuffer, UINT uSize
GetSystemWow64Directory2A;Retrieves the path of the system directory used by WOW64, using the specified image file machine type.;LPSTR lpBuffer, UINT uSize, WORD ImageFileMachineType
GetSystemWow64Directory2W;Retrieves the path of the system directory used by WOW64, using the specified image file machine type.;LPWSTR lpBuffer, UINT uSize, WORD ImageFileMachineType
GetSystemWow64DirectoryA;Retrieves the path of the system directory used by WOW64.;LPSTR lpBuffer, UINT uSize
GetSystemWow64DirectoryW;Retrieves the path of the system directory used by WOW64.;LPWSTR lpBuffer, UINT uSize
GetTabbedTextExtentA;The GetTabbedTextExtent function computes the width and height of a character string.;HDC hdc, LPCSTR lpString, int chCount, int nTabPositions, const INT *lpnTabStopPositions
GetTabbedTextExtentW;The GetTabbedTextExtent function computes the width and height of a character string.;HDC hdc, LPCWSTR lpString, int chCount, int nTabPositions, const INT *lpnTabStopPositions
GetTapeParameters;Retrieves information that describes the tape or the tape drive.;HANDLE hDevice, DWORD dwOperation, LPDWORD lpdwSize, LPVOID lpTapeInformation
GetTapePosition;Retrieves the current address of the tape, in logical or absolute blocks.;HANDLE hDevice, DWORD dwPositionType, LPDWORD lpdwPartition, LPDWORD lpdwOffsetLow, LPDWORD lpdwOffsetHigh
GetTapeStatus;Determines whether the tape device is ready to process tape commands.;HANDLE hDevice
get_TargetMachine;Retrieves the name of the computer on which account resolution should occur.;BSTR *pbstrTargetMachine
get_Tasks;Retrieves an IAzTasks object that is used to enumerate IAzTask objects from the policy data.;IAzTasks **ppTaskCollection
get_Tasks;Retrieves the tasks associated with the role.;VARIANT *pvarProp
get_Tasks;Retrieves the tasks associated with the task.;VARIANT *pvarProp
GetTasks;Returns a collection of the tasks, within the specified scope, that the principal represented by the current client context has permission to perform.;BSTR bstrScopeName, IAzTasks **ppTaskCollection
get_Tasks;The Tasks property of IAzApplication retrieves an IAzTasks object that is used to enumerate IAzTask objects from the policy data.;IAzTasks **ppTaskCollection
GetTcp6Table2;Retrieves the TCP connection table for IPv6.;PMIB_TCP6TABLE2 TcpTable, PULONG SizePointer, BOOL Order
GetTcp6Table;Retrieves the TCP connection table for IPv6.;PMIB_TCP6TABLE TcpTable, PULONG SizePointer, BOOL Order
GetTcpStatisticsEx2;The GetTcpStatisticsEx2 function retrieves the Transmission Control Protocol (TCP) statistics for the current computer.;PMIB_TCPSTATS2 Statistics, ULONG Family
GetTcpStatisticsEx;The GetTcpStatisticsEx function retrieves the Transmission Control Protocol (TCP) statistics for the current computer.;PMIB_TCPSTATS Statistics, ULONG Family
GetTcpStatistics;The GetTcpStatistics function retrieves the TCP statistics for the local computer.;PMIB_TCPSTATS Statistics
GetTcpTable2;Retrieves the IPv4 TCP connection table.;PMIB_TCPTABLE2 TcpTable, PULONG SizePointer, BOOL Order
GetTcpTable;Retrieves the IPv4 TCP connection table.;PMIB_TCPTABLE TcpTable, PULONG SizePointer, BOOL Order
GetTempFileNameA;Creates a name for a temporary file. If a unique file name is generated, an empty file is created and the handle to it is released; otherwise, only a file name is generated.;LPCSTR lpPathName, LPCSTR lpPrefixString, UINT uUnique, LPSTR lpTempFileName
GetTempFileName;Creates a name for a temporary file. If a unique file name is generated, an empty file is created and the handle to it is released; otherwise, only a file name is generated.;LPCTSTR lpPathName, LPCTSTR lpPrefixString, UINT uUnique, LPTSTR lpTempFileName
GetTempFileNameW;Creates a name for a temporary file. If a unique file name is generated, an empty file is created and the handle to it is released; otherwise, only a file name is generated.;LPCWSTR lpPathName, LPCWSTR lpPrefixString, UINT uUnique, LPWSTR lpTempFileName
get_TemplateName;Retrieves a string that contains the name of the template that the certificate can use for autoenrollment.;BSTR *pValue
get_TemplateName;Retrieves the name of the template.;BSTR *pValue
get_TemplateObjectId;Retrieves the object identifier (OID) of the template used to create the certificate request.;IObjectId **ppValue
get_TemplateOid;Retrieves the template object identifier (OID).;IObjectId **ppValue
get_Template;Retrieves a copy of the IX509CertificateTemplate object that was used to initialize this IX509CertificateTemplateWritable instance.;IX509CertificateTemplate **ppValue
get_Template;Retrieves the certificate request template used during initialization.;IX509CertificateTemplate **ppTemplate
GetTemplates;Retrieves a collection of the templates supported by the certificate enrollment policy (CEP) server.;IX509CertificateTemplates **pTemplates
GetTempPathA;Retrieves the path of the directory designated for temporary files.;DWORD nBufferLength, LPSTR lpBuffer
GetTempPathW;Retrieves the path of the directory designated for temporary files.;DWORD nBufferLength, LPWSTR lpBuffer
GetTeredoPort;Retrieves the dynamic UDP port number used by the Teredo client on the local computer.;USHORT *Port
GetTextAlign;The GetTextAlign function retrieves the text-alignment setting for the specified device context.;HDC hdc
GetTextCharacterExtra;The GetTextCharacterExtra function retrieves the current intercharacter spacing for the specified device context.;HDC hdc
GetTextCharsetInfo;Retrieves information about the character set of the font that is currently selected into a specified device context.;HDC hdc, LPFONTSIGNATURE lpSig, DWORD dwFlags
GetTextCharset;Retrieves a character set identifier for the font that is currently selected into a specified device context.;HDC hdc
GetTextColor;The GetTextColor function retrieves the current text color for the specified device context.;HDC hdc
GetTextExtentExPointA;The GetTextExtentExPoint function retrieves the number of characters in a specified string that will fit within a specified space and fills an array with the text extent for each of those characters.;HDC hdc, LPCSTR lpszString, int cchString, int nMaxExtent, LPINT lpnFit, LPINT lpnDx, LPSIZE lpSize
GetTextExtentExPointI;The GetTextExtentExPointI function retrieves the number of characters in a specified string that will fit within a specified space and fills an array with the text extent for each of those characters.;HDC hdc, LPWORD lpwszString, int cwchString, int nMaxExtent, LPINT lpnFit, LPINT lpnDx, LPSIZE lpSize
GetTextExtentExPointW;The GetTextExtentExPoint function retrieves the number of characters in a specified string that will fit within a specified space and fills an array with the text extent for each of those characters.;HDC hdc, LPCWSTR lpszString, int cchString, int nMaxExtent, LPINT lpnFit, LPINT lpnDx, LPSIZE lpSize
GetTextExtentPoint32A;The GetTextExtentPoint32 function computes the width and height of the specified string of text.;HDC hdc, LPCSTR lpString, int c, LPSIZE psizl
GetTextExtentPoint32W;The GetTextExtentPoint32 function computes the width and height of the specified string of text.;HDC hdc, LPCWSTR lpString, int c, LPSIZE psizl
GetTextExtentPointA;The GetTextExtentPoint function computes the width and height of the specified string of text.;HDC hdc, LPCSTR lpString, int c, LPSIZE lpsz
GetTextExtentPointI;The GetTextExtentPointI function computes the width and height of the specified array of glyph indices.;HDC hdc, LPWORD pgiIn, int cgi, LPSIZE psize
GetTextExtentPointW;The GetTextExtentPoint function computes the width and height of the specified string of text.;HDC hdc, LPCWSTR lpString, int c, LPSIZE lpsz
GetTextFaceA;The GetTextFace function retrieves the typeface name of the font that is selected into the specified device context.;HDC hdc, int c, LPSTR lpName
GetTextFaceW;The GetTextFace function retrieves the typeface name of the font that is selected into the specified device context.;HDC hdc, int c, LPWSTR lpName
GetTextMetricsA;The GetTextMetrics function fills the specified buffer with the metrics for the currently selected font.;HDC hdc, LPTEXTMETRICA lptm
GetTextMetrics;The GetTextMetrics function fills the specified buffer with the metrics for the currently selected font.;HDC hdc, LPTEXTMETRIC lptm
GetTextMetricsW;The GetTextMetrics function fills the specified buffer with the metrics for the currently selected font.;HDC hdc, LPTEXTMETRICW lptm
get_Text;Specifies or retrieves a string that contains a message associated with the status of the enrollment process.;BSTR *pValue
GetThreadContext;Retrieves the context of the specified thread.;HANDLE hThread, LPCONTEXT lpContext
GetThreadDescription;Retrieves the description that was assigned to a thread by calling SetThreadDescription.;HANDLE hThread, PWSTR *ppszThreadDescription
GetThreadDesktop;Retrieves a handle to the desktop assigned to the specified thread.;DWORD dwThreadId
GetThreadDpiAwarenessContext;Gets the DPI_AWARENESS_CONTEXT for the current thread.;
GetThreadDpiHostingBehavior;Retrieves the DPI_HOSTING_BEHAVIOR from the current thread.;
GetThreadErrorMode;Retrieves the error mode for the calling thread.;
GetThreadGroupAffinity;Retrieves the processor group affinity of the specified thread.;HANDLE hThread, PGROUP_AFFINITY GroupAffinity
GetThreadIdealProcessorEx;Retrieves the processor number of the ideal processor for the specified thread.;HANDLE hThread, PPROCESSOR_NUMBER lpIdealProcessor
GetThreadId;Retrieves the thread identifier of the specified thread.;HANDLE Thread
GetThreadInformation;Retrieves information about the specified thread.;HANDLE hThread, THREAD_INFORMATION_CLASS ThreadInformationClass, LPVOID ThreadInformation, DWORD ThreadInformationSize
GetThreadIOPendingFlag;Determines whether a specified thread has any I/O requests pending.;HANDLE hThread, PBOOL lpIOIsPending
GetThreadLocale;Returns the locale identifier of the current locale for the calling thread.Note  This function can retrieve data that changes between releases, for example, due to a custom locale.;
GetThreadPreferredUILanguages;Retrieves the thread preferred UI languages for the current thread. For more information, see User Interface Language Management.;DWORD dwFlags, PULONG pulNumLanguages, PZZWSTR pwszLanguagesBuffer, PULONG pcchLanguagesBuffer
GetThreadPriorityBoost;Retrieves the priority boost control state of the specified thread.;HANDLE hThread, PBOOL pDisablePriorityBoost
GetThreadPriority;Retrieves the priority value for the specified thread. This value, together with the priority class of the thread's process, determines the thread's base-priority level.;HANDLE hThread
GetThreadSelectorEntry;Retrieves a descriptor table entry for the specified selector and thread.;HANDLE hThread, DWORD dwSelector, LPLDT_ENTRY lpSelectorEntry
GetThreadTimes;Retrieves timing information for the specified thread.;HANDLE hThread, LPFILETIME lpCreationTime, LPFILETIME lpExitTime, LPFILETIME lpKernelTime, LPFILETIME lpUserTime
GetThreadUILanguage;Returns the language identifier of the first user interface language for the current thread.;
get_ThumbPrint;Sets or retrieves a hash of the certificate data.;BSTR *pbstrThumbPrint
get_ThumbPrintWStr;Sets or retrieves a hash of the certificate data. The thumbprint is used to point to the pending certificate.;PCRYPT_DATA_BLOB thumbPrintBlob
GetTickCount64;Retrieves the number of milliseconds that have elapsed since the system was started.;
GetTickCount;Retrieves the number of milliseconds that have elapsed since the system was started, up to 49.7 days.;
GetTimeFormatA;Formats time as a time string for a locale specified by identifier. The function formats either a specified time or the local system time.;LCID Locale, DWORD dwFlags, const SYSTEMTIME *lpTime, LPCSTR lpFormat, LPSTR lpTimeStr, int cchTime
GetTimeFormatEx;Formats time as a time string for a locale specified by name.;LPCWSTR lpLocaleName, DWORD dwFlags, const SYSTEMTIME *lpTime, LPCWSTR lpFormat, LPWSTR lpTimeStr, int cchTime
GetTimeFormatW;Formats time as a time string for a locale specified by identifier. The function formats either a specified time or the local system time.;LCID Locale, DWORD dwFlags, const SYSTEMTIME *lpTime, LPCWSTR lpFormat, LPWSTR lpTimeStr, int cchTime
GetTimeZoneInformationForYear;Retrieves the time zone settings for the specified year and time zone. These settings control the translations between Coordinated Universal Time (UTC) and local time.;USHORT wYear, PDYNAMIC_TIME_ZONE_INFORMATION pdtzi, LPTIME_ZONE_INFORMATION ptzi
GetTimeZoneInformation;Retrieves the current time zone settings. These settings control the translations between Coordinated Universal Time (UTC) and local time.;LPTIME_ZONE_INFORMATION lpTimeZoneInformation
GetTimingReport;Retrieves a monitor's horizontal and vertical synchronization frequencies.;HANDLE hMonitor, LPMC_TIMING_REPORT pmtrMonitorTimingReport
GetTitleBarInfo;Retrieves information about the specified title bar.;HWND hwnd, PTITLEBARINFO pti
GetTokenInformation;Retrieves a specified type of information about an access token. The calling process must have appropriate access rights to obtain the information.;HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, LPVOID TokenInformation, DWORD TokenInformationLength, PDWORD ReturnLength
GetTopWindow;Examines the Z order of the child windows associated with the specified parent window and retrieves a handle to the child window at the top of the Z order.;HWND hWnd
GetTouchInputInfo;Retrieves detailed information about touch inputs associated with a particular touch input handle.;HTOUCHINPUT hTouchInput, UINT cInputs, PTOUCHINPUT pInputs, int cbSize
get_TransactionId;Gets or sets the transaction id for the request.;EncodingType Encoding, BSTR *pValue
get_TransactionId;Specifies or retrieves a transaction identifier that can be used to track a certificate request or response.;LONG *pValue
GetTrusteeFormA;Retrieves the trustee name from the specified TRUSTEE structure. This value indicates whether the structure uses a name string or a security identifier (SID) to identify the trustee.;PTRUSTEE_A pTrustee
GetTrusteeFormW;Retrieves the trustee name from the specified TRUSTEE structure. This value indicates whether the structure uses a name string or a security identifier (SID) to identify the trustee.;PTRUSTEE_W pTrustee
GetTrusteeNameA;Retrieves the trustee name from the specified TRUSTEE structure.;PTRUSTEE_A pTrustee
GetTrusteeNameW;Retrieves the trustee name from the specified TRUSTEE structure.;PTRUSTEE_W pTrustee
GetTrusteeTypeA;Retrieves the trustee type from the specified TRUSTEE structure. This value indicates whether the trustee is a user, a group, or the trustee type is unknown.;PTRUSTEE_A pTrustee
GetTrusteeTypeW;Retrieves the trustee type from the specified TRUSTEE structure. This value indicates whether the trustee is a user, a group, or the trustee type is unknown.;PTRUSTEE_W pTrustee
GetTypeByNameA;The GetTypeByName function retrieves a service type GUID for a network service specified by name.;LPSTR lpServiceName, LPGUID lpServiceType
GetTypeByNameW;The GetTypeByName function retrieves a service type GUID for a network service specified by name.;LPWSTR lpServiceName, LPGUID lpServiceType
get_Type;Retrieves a value that specifies the type of the request object.;X509RequestType *pValue
get_Type;Retrieves the algorithm type.;AlgorithmType *pValue
get_Type;Retrieves the alternative name type.;AlternativeNameType *pValue
GetType;Retrieves the data type of the current column in the column-enumeration sequence.;LONG *pType
get_Type;Retrieves the qualifier type.;PolicyQualifierType *pValue
get_Type;Retrieves the type of the provider.;X509ProviderType *pValue
get_Type;Sets or retrieves the group type of the application group.;LONG *plProp
GetType;The GetType method retrieves type information for the GPO being edited.;GROUP_POLICY_OBJECT_TYPE *gpoType
GetUdp6Table;Retrieves the IPv6 User Datagram Protocol (UDP) listener table.;PMIB_UDP6TABLE Udp6Table, PULONG SizePointer, BOOL Order
GetUdpStatisticsEx2;The GetUdpStatisticsEx2 function retrieves the User Datagram Protocol (UDP) statistics for the current computer.;PMIB_UDPSTATS2 Statistics, ULONG Family
GetUdpStatisticsEx;The GetUdpStatisticsEx function retrieves the User Datagram Protocol (UDP) statistics for the current computer.;PMIB_UDPSTATS Statistics, ULONG Family
GetUdpStatistics;The GetUdpStatistics function retrieves the User Datagram Protocol (UDP) statistics for the local computer.;PMIB_UDPSTATS Stats
GetUdpTable;Retrieves the IPv4 User Datagram Protocol (UDP) listener table.;PMIB_UDPTABLE UdpTable, PULONG SizePointer, BOOL Order
get_UIContextMessage;Specifies or retrieves a context string to display in the user interface.;BSTR *pValue
get_UIContextMessage;Specifies or retrieves a string that contains user interface text associated with the private key.;BSTR *pValue
get_UIContextMessage;Specifies or retrieves a string that contains user interface text associated with the signing certificate.;BSTR *pValue
GetUILanguageInfo;Retrieves a variety of information about an installed UI language;DWORD dwFlags, PCZZWSTR pwmszLanguage, PZZWSTR pwszFallbackLanguages, PDWORD pcchFallbackLanguages, PDWORD pAttributes
GetUmsCompletionListEvent;Retrieves a handle to the event associated with the specified user-mode scheduling (UMS) completion list.;PUMS_COMPLETION_LIST UmsCompletionList, PHANDLE UmsCompletionEvent
GetUmsSystemThreadInformation;Queries whether the specified thread is a UMS scheduler thread, a UMS worker thread, or a non-UMS thread.;HANDLE ThreadHandle, PUMS_SYSTEM_THREAD_INFORMATION SystemThreadInfo
GetUnicastIpAddressEntry;Retrieves information for an existing unicast IP address entry on the local computer.;PMIB_UNICASTIPADDRESS_ROW Row
GetUnicastIpAddressTable;Retrieves the unicast IP address table on the local computer.;ADDRESS_FAMILY Family, PMIB_UNICASTIPADDRESS_TABLE *Table
GetUnicodeRanges;Returns the ranges of Unicode points that the recognizer supports.;HRECOGNIZER hrec, ULONG *pcRanges, CHARACTER_RANGE *pcr
GetUniDirectionalAdapterInfo;The GetUniDirectionalAdapterInfo function retrieves information about the unidirectional adapters installed on the local computer. A unidirectional adapter is an adapter that can receive datagrams, but not transmit them.;PIP_UNIDIRECTIONAL_ADAPTER_ADDRESS pIPIfInfo, PULONG dwOutBufLen
get_UniqueContainerName;Retrieves a unique name for the key container.;BSTR *pValue
GetUnpredictedMessagePos;Gets pointer data before it has gone through touch prediction processing.;
GetUpdatedClipboardFormats;Retrieves the currently supported clipboard formats.;PUINT lpuiFormats, UINT cFormats, PUINT pcFormatsOut
GetUpdateRect;The GetUpdateRect function retrieves the coordinates of the smallest rectangle that completely encloses the update region of the specified window.;HWND hWnd, LPRECT lpRect, BOOL bErase
GetUpdateRgn;The GetUpdateRgn function retrieves the update region of a window by copying it into the specified region. The coordinates of the update region are relative to the upper-left corner of the window (that is, they are client coordinates).;HWND hWnd, HRGN hRgn, BOOL bErase
GetUrlCacheConfigInfoA;Retrieves information about cache configuration.;LPINTERNET_CACHE_CONFIG_INFOA lpCacheConfigInfo, LPDWORD lpcbCacheConfigInfo, DWORD dwFieldControl
GetUrlCacheConfigInfoW;Retrieves information about cache configuration.;LPINTERNET_CACHE_CONFIG_INFOW lpCacheConfigInfo, LPDWORD lpcbCacheConfigInfo, DWORD dwFieldControl
GetUrlCacheEntryInfoA;Retrieves information about a cache entry.;LPCSTR lpszUrlName, LPINTERNET_CACHE_ENTRY_INFOA lpCacheEntryInfo, LPDWORD lpcbCacheEntryInfo
GetUrlCacheEntryInfoExA;Retrieves information on the cache entry associated with the specified URL, taking into account any redirections that are applied in offline mode by the HttpSendRequest function.;LPCSTR lpszUrl, LPINTERNET_CACHE_ENTRY_INFOA lpCacheEntryInfo, LPDWORD lpcbCacheEntryInfo, LPSTR lpszRedirectUrl, LPDWORD lpcbRedirectUrl, LPVOID lpReserved, DWORD dwFlags
GetUrlCacheEntryInfoExW;Retrieves information on the cache entry associated with the specified URL, taking into account any redirections that are applied in offline mode by the HttpSendRequest function.;LPCWSTR lpszUrl, LPINTERNET_CACHE_ENTRY_INFOW lpCacheEntryInfo, LPDWORD lpcbCacheEntryInfo, LPWSTR lpszRedirectUrl, LPDWORD lpcbRedirectUrl, LPVOID lpReserved, DWORD dwFlags
GetUrlCacheEntryInfoW;Retrieves information about a cache entry.;LPCWSTR lpszUrlName, LPINTERNET_CACHE_ENTRY_INFOW lpCacheEntryInfo, LPDWORD lpcbCacheEntryInfo
GetUrlCacheGroupAttributeA;Retrieves the attribute information of the specified cache group.;GROUPID gid, DWORD dwFlags, DWORD dwAttributes, LPINTERNET_CACHE_GROUP_INFOA lpGroupInfo, LPDWORD lpcbGroupInfo, LPVOID lpReserved
GetUrlCacheGroupAttributeW;Retrieves the attribute information of the specified cache group.;GROUPID gid, DWORD dwFlags, DWORD dwAttributes, LPINTERNET_CACHE_GROUP_INFOW lpGroupInfo, LPDWORD lpcbGroupInfo, LPVOID lpReserved
GetUrlFlags;Retrieves a set of flags that contain miscellaneous policy information about the certificate enrollment policy (CEP) server.;PolicyServerUrlFlags *pValue
GetUrl;Returns the URL string for the specified wizard or webpage.;IDENTITY_URL Identifier, IBindCtx *Context, VARIANT *PostData, LPWSTR *Url
get_Url;Specifies or retrieves the URL for the certificate enrollment policy (CEP) server.;BSTR *ppValue
GetUseClientId;Retrieves a value that specifies whether the ClientId attribute is set in the policy server flags of the certificate enrollment policy (CEP) server.;VARIANT_BOOL *pValue
get_UseExistingKeySet;Sets or retrieves a Boolean value that determines whether the existing keys should be used.;BOOL *fUseExistingKeys
get_UseExistingKeySet;The UseExistingKeySet property of IEnroll4 sets or retrieves a Boolean value that determines whether the existing keys should be used.;BOOL *fUseExistingKeys
get_UserCanonical;Retrieves the name of the current client in canonical format.;BSTR *pbstrProp
GetUserDefaultGeoName;Retrieves the two-letter International Organization for Standardization (ISO) 3166-1 code or numeric United Nations (UN) Series M, Number 49 (M.49) code for the default geographical location of the user.;LPWSTR geoName, int geoNameCount
GetUserDefaultLangID;Returns the language identifier of the Region Format setting for the current user.;
GetUserDefaultLCID;Returns the locale identifier for the user default locale.Caution  If the user default locale is a custom locale, an application cannot accurately tag data with the value or exchange it.;
GetUserDefaultLocaleName;Retrieves the user default locale name.Note  The application should call this function in preference to GetUserDefaultLCID if designed to run only on Windows Vista and later.;LPWSTR lpLocaleName, int cchLocaleName
GetUserDefaultUILanguage;Returns the language identifier for the user UI language for the current user.;
get_UserDisplay;Retrieves the name of the current client in user display name format.;BSTR *pbstrProp
get_UserDn;Retrieves the name of the current client in distinguished name (DN) format.;BSTR *pbstrProp
get_UserDnsSamCompat;Retrieves the name of the current client in a DNS format compatible with Windows�Security�Account�Manager (SAM).;BSTR *pbstrProp
GetUserGeoID;Retrieves information about the geographical location of the user. For more information, see Table of Geographical Locations.;GEOCLASS GeoClass
get_UserGuid;Retrieves the name of the current client in GUID format.;BSTR *pbstrProp
GetUserNameA;Retrieves the name of the user associated with the current thread.;LPSTR lpBuffer, LPDWORD pcbBuffer
GetUserNameW;Retrieves the name of the user associated with the current thread.;LPWSTR lpBuffer, LPDWORD pcbBuffer
GetUserObjectInformationA;Retrieves information about the specified window station or desktop object.;HANDLE hObj, int nIndex, PVOID pvInfo, DWORD nLength, LPDWORD lpnLengthNeeded
GetUserObjectInformationW;Retrieves information about the specified window station or desktop object.;HANDLE hObj, int nIndex, PVOID pvInfo, DWORD nLength, LPDWORD lpnLengthNeeded
GetUserObjectSecurity;Retrieves security information for the specified user object.;HANDLE hObj, PSECURITY_INFORMATION pSIRequested, PSECURITY_DESCRIPTOR pSID, DWORD nLength, LPDWORD lpnLengthNeeded
GetUserPreferredUILanguages;Retrieves information about the user preferred UI languages. For more information, see User Interface Language Management.;DWORD dwFlags, PULONG pulNumLanguages, PZZWSTR pwszLanguagesBuffer, PULONG pcchLanguagesBuffer
get_UserSamCompat;Retrieves the name of the current client in a format compatible with Windows�Security�Account�Manager (SAM).;BSTR *pbstrProp
get_UserSamName;Retrieves the Security Accounts Manager (SAM) name of the user.;BSTR *pValue
get_UserUpn;Retrieves the name of the current client in user principal name (UPN) format.;BSTR *pbstrProp
get_Valid;Retrieves a Boolean value that specifies whether the algorithm object is valid.;VARIANT_BOOL *pValue
get_Valid;Retrieves a Boolean value that specifies whether the provider is installed on the client computer.;VARIANT_BOOL *pValue
get_Value;Gets or sets the data part of the name-value pair represented by an OCSPProperty object.;VARIANT *pVal
get_Value;Retrieves a string that contains the dotted decimal object identifier (OID).;BSTR *pValue
GetValue;Retrieves the data value contained in the current column in the column-enumeration sequence.;LONG Flags, VARIANT *pvarValue
GetValue;Retrieves the value of the current attribute in the attribute-enumeration sequence.;BSTR *pstrOut
GetValue;Retrieves the value of the current extension in the extension-enumeration sequence.;LONG Type, LONG Flags, VARIANT *pvarValue
get_Value;Retrieves the value portion of the name-value pair.;BSTR *pValue
GetValue;Returns the specified date from the DATE array.;LONG Index, DATE *pValue
GetValue;Returns the specified Long value from the Long array.;LONG Index, LONG *pValue
GetValue;Returns the specified string from the string array.;LONG Index, BSTR *pstr
get_Values;Retrieves an IX509Attributes object that contains a collection of attributes.;IX509Attributes **ppValue
GetVCPFeatureAndVCPFeatureReply;Retrieves the current value, maximum value, and code type of a Virtual Control Panel (VCP) code for a monitor.;HANDLE hMonitor, BYTE bVCPCode, LPMC_VCP_CODE_TYPE pvct, LPDWORD pdwCurrentValue, LPDWORD pdwMaximumValue
GetVersionExA;With the release of Windows 8.1, the behavior of the GetVersionEx API has changed in the value it will return for the operating system version. The value returned by the GetVersionEx function now depends on how the application is manifested.;LPOSVERSIONINFOA lpVersionInformation
GetVersionExW;With the release of Windows 8.1, the behavior of the GetVersionEx API has changed in the value it will return for the operating system version. The value returned by the GetVersionEx function now depends on how the application is manifested.;LPOSVERSIONINFOW lpVersionInformation
get_Version;Retrieves the version number of the provider.;LONG *pValue
get_Version;Sets or retrieves the version of the application.;BSTR *pbstrProp
GetVersion;With the release of Windows 8.1, the behavior of the GetVersion API has changed in the value it will return for the operating system version. The value returned by the GetVersion function now depends on how the application is manifested.;
GetViewportExtEx;The GetViewportExtEx function retrieves the x-extent and y-extent of the current viewport for the specified device context.;HDC hdc, LPSIZE lpsize
GetViewportOrgEx;The GetViewportOrgEx function retrieves the x-coordinates and y-coordinates of the viewport origin for the specified device context.;HDC hdc, LPPOINT lppoint
GetVolumeInformationA;Retrieves information about the file system and volume associated with the specified root directory.;LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize
GetVolumeInformationByHandleW;Retrieves information about the file system and volume associated with the specified file.;HANDLE hFile, LPWSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPWSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize
GetVolumeInformationW;Retrieves information about the file system and volume associated with the specified root directory.;LPCWSTR lpRootPathName, LPWSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPWSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize
GetVolumeNameForVolumeMountPointA;Retrieves a volume GUID path for the volume that is associated with the specified volume mount point ( drive letter, volume GUID path, or mounted folder).;LPCSTR lpszVolumeMountPoint, LPSTR lpszVolumeName, DWORD cchBufferLength
GetVolumeNameForVolumeMountPointW;Retrieves a volume GUID path for the volume that is associated with the specified volume mount point ( drive letter, volume GUID path, or mounted folder).;LPCWSTR lpszVolumeMountPoint, LPWSTR lpszVolumeName, DWORD cchBufferLength
GetVolumePathNameA;Retrieves the volume mount point where the specified path is mounted.;LPCSTR lpszFileName, LPSTR lpszVolumePathName, DWORD cchBufferLength
GetVolumePathNamesForVolumeNameA;Retrieves a list of drive letters and mounted folder paths for the specified volume.;LPCSTR lpszVolumeName, LPCH lpszVolumePathNames, DWORD cchBufferLength, PDWORD lpcchReturnLength
GetVolumePathNamesForVolumeNameW;Retrieves a list of drive letters and mounted folder paths for the specified volume.;LPCWSTR lpszVolumeName, LPWCH lpszVolumePathNames, DWORD cchBufferLength, PDWORD lpcchReturnLength
GetVolumePathNameW;Retrieves the volume mount point where the specified path is mounted.;LPCWSTR lpszFileName, LPWSTR lpszVolumePathName, DWORD cchBufferLength
GetVolumesFromDriveA;The GetVolumesFromDrive function retrieves the volume and drive letter for a given removable storage media drive.;LPSTR pszDriveName, LPSTR *VolumeNameBufferPtr, LPSTR *DriveLetterBufferPtr
GetVolumesFromDriveW;The GetVolumesFromDrive function retrieves the volume and drive letter for a given removable storage media drive.;LPWSTR pszDriveName, LPWSTR *VolumeNameBufferPtr, LPWSTR *DriveLetterBufferPtr
GET_WHEEL_DELTA_WPARAM;Retrieves the wheel-delta value from the specified WPARAM value.;wParam
GetWindowContextHelpId;Retrieves the Help context identifier, if any, associated with the specified window.;HWND Arg1
GetWindowDC;The GetWindowDC function retrieves the device context (DC) for the entire window, including title bar, menus, and scroll bars.;HWND hWnd
GetWindowDisplayAffinity;Retrieves the current display affinity setting, from any process, for a given window.;HWND hWnd, DWORD *pdwAffinity
GetWindowDpiAwarenessContext;Returns the DPI_AWARENESS_CONTEXT associated with a window.;HWND hwnd
GetWindowDpiHostingBehavior;Returns the DPI_HOSTING_BEHAVIOR of the specified window.;HWND hwnd
GetWindowExtEx;This function retrieves the x-extent and y-extent of the window for the specified device context.;HDC hdc, LPSIZE lpsize
GetWindowFeedbackSetting;Retrieves the feedback configuration for a window.;HWND hwnd, FEEDBACK_TYPE feedback, DWORD dwFlags, UINT32 *pSize, VOID *config
GetWindowInfo;Retrieves information about the specified window.;HWND hwnd, PWINDOWINFO pwi
GetWindowLongA;Retrieves information about the specified window.;HWND hWnd, int nIndex
GetWindowLongPtrA;Retrieves information about the specified window. The function also retrieves the value at a specified offset into the extra window memory.;HWND hWnd, int nIndex
GetWindowLongPtrW;Retrieves information about the specified window. The function also retrieves the value at a specified offset into the extra window memory.;HWND hWnd, int nIndex
GetWindowLongW;Retrieves information about the specified window.;HWND hWnd, int nIndex
GetWindowModuleFileNameA;Retrieves the full path and file name of the module associated with the specified window handle.;HWND hwnd, LPSTR pszFileName, UINT cchFileNameMax
GetWindowModuleFileNameW;Retrieves the full path and file name of the module associated with the specified window handle.;HWND hwnd, LPWSTR pszFileName, UINT cchFileNameMax
GetWindowOrgEx;The GetWindowOrgEx function retrieves the x-coordinates and y-coordinates of the window origin for the specified device context.;HDC hdc, LPPOINT lppoint
GetWindowPlacement;Retrieves the show state and the restored, minimized, and maximized positions of the specified window.;HWND hWnd, WINDOWPLACEMENT *lpwndpl
GetWindowRect;Retrieves the dimensions of the bounding rectangle of the specified window. The dimensions are given in screen coordinates that are relative to the upper-left corner of the screen.;HWND hWnd, LPRECT lpRect
GetWindow;Retrieves a handle to a window that has the specified relationship (Z-Order or owner) to the specified window.;HWND hWnd, UINT uCmd
GetWindowRgnBox;The GetWindowRgnBox function retrieves the dimensions of the tightest bounding rectangle for the window region of a window.;HWND hWnd, LPRECT lprc
GetWindowRgn;The GetWindowRgn function obtains a copy of the window region of a window.;HWND hWnd, HRGN hRgn
GetWindowsAccountDomainSid;Receives a security identifier (SID) and returns a SID representing the domain of that SID.;PSID pSid, PSID pDomainSid, DWORD *cbDomainSid
GetWindowsDirectoryA;Retrieves the path of the Windows directory.;LPSTR lpBuffer, UINT uSize
GetWindowsDirectoryW;Retrieves the path of the Windows directory.;LPWSTR lpBuffer, UINT uSize
GetWindowTextA;Copies the text of the specified window's title bar (if it has one) into a buffer. If the specified window is a control, the text of the control is copied. However, GetWindowText cannot retrieve the text of a control in another application.;HWND hWnd, LPSTR lpString, int nMaxCount
GetWindowTextLengthA;Retrieves the length, in characters, of the specified window's title bar text (if the window has a title bar).;HWND hWnd
GetWindowTextLengthW;Retrieves the length, in characters, of the specified window's title bar text (if the window has a title bar).;HWND hWnd
GetWindowTextW;Copies the text of the specified window's title bar (if it has one) into a buffer. If the specified window is a control, the text of the control is copied. However, GetWindowText cannot retrieve the text of a control in another application.;HWND hWnd, LPWSTR lpString, int nMaxCount
GetWindowThreadProcessId;Retrieves the identifier of the thread that created the specified window and, optionally, the identifier of the process that created the window.;HWND hWnd, LPDWORD lpdwProcessId
GetWinMetaFileBits;The GetWinMetaFileBits function converts the enhanced-format records from a metafile into Windows-format records and stores the converted records in the specified buffer.;HENHMETAFILE hemf, UINT cbData16, LPBYTE pData16, INT iMapMode, HDC hdcRef
GetWorldTransform;The GetWorldTransform function retrieves the current world-space to page-space transformation.;HDC hdc, LPXFORM lpxf
get_Writable;Retrieves a value that indicates whether the application group can be modified by the user context that initialized it.;BOOL *pfProp
get_Writable;Retrieves a value that indicates whether the object can be modified by the user context that called the Initialize method.;BOOL *pfProp
get_Writable;Retrieves a value that indicates whether the object can be modified by the user context that initialized it.;BOOL *pfProp
get_Writable;Retrieves a value that indicates whether the operation can be modified by the user context that initialized it.;BOOL *pfProp
get_Writable;Retrieves a value that indicates whether the role can be modified by the user context that initialized it.;BOOL *pfProp
get_Writable;Retrieves a value that indicates whether the scope can be modified by the user context that initialized it.;BOOL *pfProp
get_Writable;Retrieves a value that indicates whether the task can be modified by the user context that initialized it.;BOOL *pfProp
get_WriteCertToCSP;Sets or retrieves a Boolean value that determines whether a certificate should be written to the cryptographic service provider (CSP).;BOOL *fBool
get_WriteCertToCSP;The WriteCertToCSP property of ICEnroll4 sets or retrieves a Boolean value that determines whether a certificate should be written to the cryptographic service provider (CSP).;BOOL *fBool
get_WriteCertToUserDS;Sets or retrieves a Boolean value that determines whether the certificate is written to the user's Active Directory store.;BOOL *fBool
get_WriteCertToUserDS;The WriteCertToUserDS property of IEnroll4 sets or retrieves a Boolean value that determines whether the certificate is written to the user's Active Directory store.;BOOL *fBool
GetWriteWatch;Retrieves the addresses of the pages that are written to in a region of virtual memory.;DWORD dwFlags, PVOID lpBaseAddress, SIZE_T dwRegionSize, PVOID *lpAddresses, ULONG_PTR *lpdwCount, LPDWORD lpdwGranularity
GetWsChangesEx;Retrieves extended information about the pages that have been added to the working set of the specified process since the last time this function or the InitializeProcessForWsWatch function was called.;HANDLE hProcess, PPSAPI_WS_WATCH_INFORMATION_EX lpWatchInfoEx, PDWORD cb
GetWsChanges;Retrieves information about the pages that have been added to the working set of the specified process since the last time this function or the InitializeProcessForWsWatch function was called.;HANDLE hProcess, PPSAPI_WS_WATCH_INFORMATION lpWatchInfo, DWORD cb
get_X509Extensions;Retrieves a collection of the extensions included in the certificate request.;IX509Extensions **ppValue
get_X509Extensions;Retrieves the certificate extensions.;IX509Extensions **ppValue
GET_XBUTTON_WPARAM;Retrieves the state of certain buttons from the specified WPARAM value.;wParam
GET_X_LPARAM;Retrieves the signed x-coordinate from the specified LPARAM value.;lp
GetXStateFeaturesMask;Returns the mask of XState features set within a CONTEXT structure.;PCONTEXT Context, PDWORD64 FeatureMask
GET_Y_LPARAM;Retrieves the signed y-coordinate from the given LPARAM value.;lp
GetYValue;The GetYValue macro retrieves the yellow color value from a CMYK color value.;cmyk
GID_ROTATE_ANGLE_FROM_ARGUMENT;The GID_ROTATE_ANGLE_FROM_ARGUMENT macro is used to interpret the GID_ROTATE ullArgument value when receiving the value in the WM_GESTURE structure.;_arg_
GID_ROTATE_ANGLE_TO_ARGUMENT;Converts a radian value to an argument for rotation gesture messages.;_arg_
GlobalAddAtomA;Adds a character string to the global atom table and returns a unique value (an atom) identifying the string.;LPCSTR lpString
GlobalAddAtomExA;Adds a character string to the global atom table and returns a unique value (an atom) identifying the string.;LPCSTR lpString, DWORD Flags
GlobalAddAtomExW;Adds a character string to the global atom table and returns a unique value (an atom) identifying the string.;LPCWSTR lpString, DWORD Flags
GlobalAddAtomW;Adds a character string to the global atom table and returns a unique value (an atom) identifying the string.;LPCWSTR lpString
GlobalAlloc;Allocates the specified number of bytes from the heap.;UINT uFlags, SIZE_T dwBytes
GlobalDeleteAtom;Decrements the reference count of a global string atom. If the atom's reference count reaches zero, GlobalDeleteAtom removes the string associated with the atom from the global atom table.;ATOM nAtom
GlobalDiscard;Discards the specified global memory block.;h
GlobalFindAtomA;Searches the global atom table for the specified character string and retrieves the global atom associated with that string.;LPCSTR lpString
GlobalFindAtomW;Searches the global atom table for the specified character string and retrieves the global atom associated with that string.;LPCWSTR lpString
GlobalFlags;Retrieves information about the specified global memory object.;HGLOBAL hMem
GlobalFree;Frees the specified global memory object and invalidates its handle.;_Frees_ptr_opt_ HGLOBAL hMem
GlobalGetAtomNameA;Retrieves a copy of the character string associated with the specified global atom.;ATOM nAtom, LPSTR lpBuffer, int nSize
GlobalGetAtomNameW;Retrieves a copy of the character string associated with the specified global atom.;ATOM nAtom, LPWSTR lpBuffer, int nSize
GlobalHandle;Retrieves the handle associated with the specified pointer to a global memory block.;LPCVOID pMem
GlobalLock;Locks a global memory object and returns a pointer to the first byte of the object's memory block.;HGLOBAL hMem
GlobalMemoryStatusEx;Retrieves information about the system's current usage of both physical and virtual memory.;LPMEMORYSTATUSEX lpBuffer
GlobalMemoryStatus;Retrieves information about the system's current usage of both physical and virtual memory.;LPMEMORYSTATUS lpBuffer
GlobalReAlloc;Changes the size or attributes of a specified global memory object. The size can increase or decrease.;_Frees_ptr_ HGLOBAL hMem, SIZE_T dwBytes, UINT uFlags
GlobalSize;Retrieves the current size of the specified global memory object, in bytes.;HGLOBAL hMem
GlobalUnlock;Decrements the lock count associated with a memory object that was allocated with GMEM_MOVEABLE.;HGLOBAL hMem
GopherCreateLocatorA;Creates a Gopher or Gopher+ locator string from the selector string's component parts.;LPCSTR lpszHost, INTERNET_PORT nServerPort, LPCSTR lpszDisplayString, LPCSTR lpszSelectorString, DWORD dwGopherType, LPSTR lpszLocator, LPDWORD lpdwBufferLength
GopherCreateLocatorW;Creates a Gopher or Gopher+ locator string from the selector string's component parts.;LPCWSTR lpszHost, INTERNET_PORT nServerPort, LPCWSTR lpszDisplayString, LPCWSTR lpszSelectorString, DWORD dwGopherType, LPWSTR lpszLocator, LPDWORD lpdwBufferLength
GopherFindFirstFileA;Uses a Gopher locator and search criteria to create a session with the server and locate the requested documents, binary files, index servers, or directory trees.;HINTERNET hConnect, LPCSTR lpszLocator, LPCSTR lpszSearchString, LPGOPHER_FIND_DATAA lpFindData, DWORD dwFlags, DWORD_PTR dwContext
GopherFindFirstFileW;Uses a Gopher locator and search criteria to create a session with the server and locate the requested documents, binary files, index servers, or directory trees.;HINTERNET hConnect, LPCWSTR lpszLocator, LPCWSTR lpszSearchString, LPGOPHER_FIND_DATAW lpFindData, DWORD dwFlags, DWORD_PTR dwContext
GopherGetAttributeA;Retrieves the specific attribute information from the server.;HINTERNET hConnect, LPCSTR lpszLocator, LPCSTR lpszAttributeName, LPBYTE lpBuffer, DWORD dwBufferLength, LPDWORD lpdwCharactersReturned, GOPHER_ATTRIBUTE_ENUMERATOR lpfnEnumerator, DWORD_PTR dwContext
GopherGetAttributeW;Retrieves the specific attribute information from the server.;HINTERNET hConnect, LPCWSTR lpszLocator, LPCWSTR lpszAttributeName, LPBYTE lpBuffer, DWORD dwBufferLength, LPDWORD lpdwCharactersReturned, GOPHER_ATTRIBUTE_ENUMERATOR lpfnEnumerator, DWORD_PTR dwContext
GopherGetLocatorTypeA;Parses a Gopher locator and determines its attributes.;LPCSTR lpszLocator, LPDWORD lpdwGopherType
GopherGetLocatorTypeW;Parses a Gopher locator and determines its attributes.;LPCWSTR lpszLocator, LPDWORD lpdwGopherType
GopherOpenFileA;Begins reading a Gopher data file from a Gopher server.;HINTERNET hConnect, LPCSTR lpszLocator, LPCSTR lpszView, DWORD dwFlags, DWORD_PTR dwContext
GopherOpenFileW;Begins reading a Gopher data file from a Gopher server.;HINTERNET hConnect, LPCWSTR lpszLocator, LPCWSTR lpszView, DWORD dwFlags, DWORD_PTR dwContext
GradientFill;The GradientFill function fills rectangle and triangle structures.;HDC hdc, PTRIVERTEX pVertex, ULONG nVertex, PVOID pMesh, ULONG nMesh, ULONG ulMode
GrayStringA;The GrayString function draws gray text at the specified location.;HDC hDC, HBRUSH hBrush, GRAYSTRINGPROC lpOutputFunc, LPARAM lpData, int nCount, int X, int Y, int nWidth, int nHeight
GrayStringW;The GrayString function draws gray text at the specified location.;HDC hDC, HBRUSH hBrush, GRAYSTRINGPROC lpOutputFunc, LPARAM lpData, int nCount, int X, int Y, int nWidth, int nHeight
HashData;Hashes an array of data.;BYTE *pbData, DWORD cbData, BYTE *pbHash, DWORD cbHash
HasOverlappedIoCompleted;Provides a high performance test operation that can be used to poll for the completion of an outstanding I/O operation.;lpOverlapped
HAS_POINTER_CONFIDENCE_WPARAM;Checks whether the specified pointer message is considered intentional rather than accidental.;wParam
HeapAlloc;Allocates a block of memory from a heap. The allocated memory is not movable.;HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes
HeapCompact;Returns the size of the largest committed free block in the specified heap. If the Disable heap coalesce on free global flag is set, this function also coalesces adjacent free blocks of memory in the heap.;HANDLE hHeap, DWORD dwFlags
HeapCreate;Creates a private heap object that can be used by the calling process. The function reserves space in the virtual address space of the process and allocates physical storage for a specified initial portion of this block.;DWORD flOptions, SIZE_T dwInitialSize, SIZE_T dwMaximumSize
HeapDestroy;Destroys the specified heap object. It decommits and releases all the pages of a private heap object, and it invalidates the handle to the heap.;HANDLE hHeap
HeapFree;Frees a memory block allocated from a heap by the HeapAlloc or HeapReAlloc function.;HANDLE hHeap, DWORD dwFlags, _Frees_ptr_opt_ LPVOID lpMem
HeapLock;Attempts to acquire the critical section object, or lock, that is associated with a specified heap.;HANDLE hHeap
HeapQueryInformation;Retrieves information about the specified heap.;HANDLE HeapHandle, HEAP_INFORMATION_CLASS HeapInformationClass, PVOID HeapInformation, SIZE_T HeapInformationLength, PSIZE_T ReturnLength
HeapReAlloc;Reallocates a block of memory from a heap. This function enables you to resize a memory block and change other memory block properties.;HANDLE hHeap, DWORD dwFlags, _Frees_ptr_opt_ LPVOID lpMem, SIZE_T dwBytes
HeapSetInformation;Enables features for a specified heap.;HANDLE HeapHandle, HEAP_INFORMATION_CLASS HeapInformationClass, PVOID HeapInformation, SIZE_T HeapInformationLength
HeapSize;Retrieves the size of a memory block allocated from a heap by the HeapAlloc or HeapReAlloc function.;HANDLE hHeap, DWORD dwFlags, LPCVOID lpMem
HeapSummary;;HANDLE hHeap, DWORD dwFlags, LPHEAP_SUMMARY lpSummary
HeapUnlock;Releases ownership of the critical section object, or lock, that is associated with a specified heap.;HANDLE hHeap
HeapValidate;Validates the specified heap. The function scans all the memory blocks in the heap and verifies that the heap control structures maintained by the heap manager are in a consistent state.;HANDLE hHeap, DWORD dwFlags, LPCVOID lpMem
HeapWalk;Enumerates the memory blocks in the specified heap.;HANDLE hHeap, LPPROCESS_HEAP_ENTRY lpEntry
HideCaret;Removes the caret from the screen. Hiding a caret does not destroy its current shape or invalidate the insertion point.;HWND hWnd
HiliteMenuItem;Adds or removes highlighting from an item in a menu bar.;HWND hWnd, HMENU hMenu, UINT uIDHiliteItem, UINT uHilite
HOOKPROC;An application-defined or library-defined callback function used with the SetWindowsHookEx function. The system calls this function after the SendMessage function is called. The hook procedure can examine the message; it cannot modify it.;int code, WPARAM wParam, LPARAM lParam ) {...}
HSTRING_UserFree;Frees resources on the server side when called by RPC stub files.;ULONG *pFlags, HSTRING *ppidl
HSTRING_UserMarshal;Marshals an HSTRING object into the RPC buffer.;ULONG *pFlags, UCHAR *pBuffer, HSTRING *ppidl
HSTRING_UserSize;Calculates the wire size of the HSTRING object, and gets its handle and data.;ULONG *pFlags, ULONG StartingSize, HSTRING *ppidl
HSTRING_UserUnmarshal;Unmarshals an HSTRING object from the RPC buffer.;ULONG *pFlags, UCHAR *pBuffer, HSTRING *ppidl
htond;Converts a double from host to TCP/IP network byte order (which is big-endian).;double Value
htonf;Converts a float from host to TCP/IP network byte order (which is big-endian).;float Value
htonll;Converts an unsigned __int64 from host to TCP/IP network byte order (which is big-endian).;unsigned __int64 Value
htonl;The htonl function converts a u_long from host to TCP/IP network byte order (which is big-endian).;u_long hostlong
htons;The htons function converts a u_short from host to TCP/IP network byte order (which is big-endian).;u_short hostshort
HttpAddFragmentToCache;The HttpAddFragmentToCache function caches a data fragment with a specified name by which it can be retrieved, or updates data cached under a specified name.;HANDLE RequestQueueHandle, PCWSTR UrlPrefix, PHTTP_DATA_CHUNK DataChunk, PHTTP_CACHE_POLICY CachePolicy, LPOVERLAPPED Overlapped
HttpAddRequestHeadersA;Adds one or more HTTP request headers to the HTTP request handle.;HINTERNET hRequest, LPCSTR lpszHeaders, DWORD dwHeadersLength, DWORD dwModifiers
HttpAddRequestHeadersW;Adds one or more HTTP request headers to the HTTP request handle.;HINTERNET hRequest, LPCWSTR lpszHeaders, DWORD dwHeadersLength, DWORD dwModifiers
HttpAddUrl;Registers a given URL so that requests that match it are routed to a specified HTTP Server API request queue.;HANDLE RequestQueueHandle, PCWSTR FullyQualifiedUrl, PVOID Reserved
HttpAddUrlToUrlGroup;Adds the specified URL to the URL Group identified by the URL Group ID.;HTTP_URL_GROUP_ID UrlGroupId, PCWSTR pFullyQualifiedUrl, HTTP_URL_CONTEXT UrlContext, ULONG Reserved
HTTPAPI_EQUAL_VERSION;Returns a non-zero value if an HTTPAPI_VERSION structure is exactly equal to a specified major/minor version combination, or zero otherwise.;version, major, minor
HTTPAPI_GREATER_VERSION;Returns a non-zero value if an HTTPAPI_VERSION structure is greater than a specified major/minor version combination, or zero otherwise.;version, major, minor
HTTPAPI_LESS_VERSION;Returns a non-zero value if an HTTPAPI_VERSION structure is less than a specified major/minor version combination, or zero otherwise.;version, major, minor
HTTPAPI_VERSION_GREATER_OR_EQUAL;The HTTPAPI_VERSION_GREATER_OR_EQUAL returns a non-zero value if an HTTPAPI_VERSION structure is greater than or equal to a specified major/minor version combination, or zero otherwise.;version, major, minor
HttpCancelHttpRequest;The HttpCancelHttpRequest function cancels a specified reqest.;HANDLE RequestQueueHandle, HTTP_REQUEST_ID RequestId, LPOVERLAPPED Overlapped
HttpCloseRequestQueue;Closes the handle to the specified request queue created by HttpCreateRequestQueue.;HANDLE RequestQueueHandle
HttpCloseServerSession;Deletes the server session identified by the server session ID.;HTTP_SERVER_SESSION_ID ServerSessionId
HttpCloseUrlGroup;Closes the URL Group identified by the URL Group ID.;HTTP_URL_GROUP_ID UrlGroupId
HttpCreateHttpHandle;Creates an HTTP request queue for the calling application and returns a handle to it.;PHANDLE RequestQueueHandle, ULONG Reserved
HttpCreateRequestQueue;Creates a new request queue or opens an existing request queue.;HTTPAPI_VERSION Version, PCWSTR Name, PSECURITY_ATTRIBUTES SecurityAttributes, ULONG Flags, PHANDLE RequestQueueHandle
HttpCreateServerSession;Creates a server session for the specified version.;HTTPAPI_VERSION Version, PHTTP_SERVER_SESSION_ID ServerSessionId, ULONG Reserved
HttpCreateUrlGroup;Creates a URL Group under the specified server session.;HTTP_SERVER_SESSION_ID ServerSessionId, PHTTP_URL_GROUP_ID pUrlGroupId, ULONG Reserved
HttpDeclarePush;Declares a resource-to-subresource relationship to use for an HTTP server push. HTTP.sys then performs an HTTP 2.0 server push for the given resource, if the underlying protocol, connection, client, and policies allow the push operation.;HANDLE RequestQueueHandle, HTTP_REQUEST_ID RequestId, HTTP_VERB Verb, PCWSTR Path, PCSTR Query, PHTTP_REQUEST_HEADERS Headers
HttpDeleteServiceConfiguration;Deletes specified data, such as IP addresses or SSL Certificates, from the HTTP Server API configuration store, one record at a time.;HANDLE ServiceHandle, HTTP_SERVICE_CONFIG_ID ConfigId, PVOID pConfigInformation, ULONG ConfigInformationLength, LPOVERLAPPED pOverlapped
HttpEndRequestA;Ends an HTTP request that was initiated by HttpSendRequestEx.;HINTERNET hRequest, LPINTERNET_BUFFERSA lpBuffersOut, DWORD dwFlags, DWORD_PTR dwContext
HttpEndRequestW;Ends an HTTP request that was initiated by HttpSendRequestEx.;HINTERNET hRequest, LPINTERNET_BUFFERSW lpBuffersOut, DWORD dwFlags, DWORD_PTR dwContext
HTTP_EQUAL_VERSION;Returns a non-zero value if an HTTP_VERSION structure is equal to a specified major/minor version combination, or zero otherwise.;version, major, minor
HttpFlushResponseCache;Removes from the HTTP Server API cache associated with a given request queue all response fragments that have a name whose site portion matches a specified UrlPrefix.;HANDLE RequestQueueHandle, PCWSTR UrlPrefix, ULONG Flags, LPOVERLAPPED Overlapped
HTTP_GREATER_EQUAL_VERSION;The HTTP_GREATER_EQUAL_VERSION macro returns a non-zero value if an HTTP_VERSION structure is greater than or equal to a specified major/minor version combination, or zero otherwise.;version, major, minor
HTTP_GREATER_VERSION;Returns a non-zero value if an HTTP_VERSION structure is greater than a specified major/minor version combination, or zero otherwise.;version, major, minor
HttpInitialize;The HttpInitialize function initializes the HTTP Server API driver, starts it, if it has not already been started, and allocates data structures for the calling application to support response-queue creation and other operations.;HTTPAPI_VERSION Version, ULONG Flags, PVOID pReserved
HTTP_IS_NULL_ID;Determines if the HTTP_OPAQUE_ID is NULL.;pid
HTTP_LESS_EQUAL_VERSION;Returns a non-zero value if an HTTP_VERSION structure is less than or equal to a specified major/minor version combination, or zero otherwise.;version, major, minor
HTTP_LESS_VERSION;Returns a non-zero value if an HTTP_VERSION structure is less than a specified major/minor version combination, or zero otherwise.;version, major, minor
HTTP_NOT_EQUAL_VERSION;Returns a non-zero value if an HTTP_VERSION structure is greater or less than a specified major/minor version combination, or zero if it is equal.;version, major, minor
HttpOpenRequestA;Creates an HTTP request handle.;HINTERNET hConnect, LPCSTR lpszVerb, LPCSTR lpszObjectName, LPCSTR lpszVersion, LPCSTR lpszReferrer, LPCSTR *lplpszAcceptTypes, DWORD dwFlags, DWORD_PTR dwContext
HttpOpenRequestW;Creates an HTTP request handle.;HINTERNET hConnect, LPCWSTR lpszVerb, LPCWSTR lpszObjectName, LPCWSTR lpszVersion, LPCWSTR lpszReferrer, LPCWSTR *lplpszAcceptTypes, DWORD dwFlags, DWORD_PTR dwContext
HttpPrepareUrl;Parses, analyzes, and normalizes a non-normalized Unicode or punycode URL so it is safe and valid to use in other HTTP functions.;PVOID Reserved, ULONG Flags, PCWSTR Url, PWSTR *PreparedUrl
HttpQueryInfoA;Retrieves header information associated with an HTTP request.;HINTERNET hRequest, DWORD dwInfoLevel, LPVOID lpBuffer, LPDWORD lpdwBufferLength, LPDWORD lpdwIndex
HttpQueryInfoW;Retrieves header information associated with an HTTP request.;HINTERNET hRequest, DWORD dwInfoLevel, LPVOID lpBuffer, LPDWORD lpdwBufferLength, LPDWORD lpdwIndex
HttpQueryRequestQueueProperty;Queries a property of the request queue identified by the specified handle.;HANDLE RequestQueueHandle, HTTP_SERVER_PROPERTY Property, PVOID PropertyInformation, ULONG PropertyInformationLength, ULONG Reserved1, PULONG ReturnLength, PVOID Reserved2
HttpQueryServerSessionProperty;Queries a server property on the specified server session.;HTTP_SERVER_SESSION_ID ServerSessionId, HTTP_SERVER_PROPERTY Property, PVOID PropertyInformation, ULONG PropertyInformationLength, PULONG ReturnLength
HttpQueryServiceConfiguration;Retrieves one or more HTTP Server API configuration records.;HANDLE ServiceHandle, HTTP_SERVICE_CONFIG_ID ConfigId, PVOID pInput, ULONG InputLength, PVOID pOutput, ULONG OutputLength, PULONG pReturnLength, LPOVERLAPPED pOverlapped
HttpQueryUrlGroupProperty;Queries a property on the specified URL Group.;HTTP_URL_GROUP_ID UrlGroupId, HTTP_SERVER_PROPERTY Property, PVOID PropertyInformation, ULONG PropertyInformationLength, PULONG ReturnLength
HttpReadFragmentFromCache;The HttpReadFragmentFromCache function retrieves a response fragment having a specified name from the HTTP Server API cache.;HANDLE RequestQueueHandle, PCWSTR UrlPrefix, PHTTP_BYTE_RANGE ByteRange, PVOID Buffer, ULONG BufferLength, PULONG BytesRead, LPOVERLAPPED Overlapped
HttpReceiveClientCertificate;The HttpReceiveClientCertificate function is used by a server application to retrieve a client SSL certificate or channel binding token (CBT).;HANDLE RequestQueueHandle, HTTP_CONNECTION_ID ConnectionId, ULONG Flags, PHTTP_SSL_CLIENT_CERT_INFO SslClientCertInfo, ULONG SslClientCertInfoSize, PULONG BytesReceived, LPOVERLAPPED Overlapped
HttpReceiveHttpRequest;Retrieves the next available HTTP request from the specified request queue either synchronously or asynchronously.;HANDLE RequestQueueHandle, HTTP_REQUEST_ID RequestId, ULONG Flags, PHTTP_REQUEST RequestBuffer, ULONG RequestBufferLength, PULONG BytesReturned, LPOVERLAPPED Overlapped
HttpReceiveRequestEntityBody;Receives additional entity body data for a specified HTTP request.;HANDLE RequestQueueHandle, HTTP_REQUEST_ID RequestId, ULONG Flags, PVOID EntityBuffer, ULONG EntityBufferLength, PULONG BytesReturned, LPOVERLAPPED Overlapped
HttpRemoveUrl;Causes the system to stop routing requests that match a specified UrlPrefix string to a specified request queue.;HANDLE RequestQueueHandle, PCWSTR FullyQualifiedUrl
HttpRemoveUrlFromUrlGroup;Removes the specified URL from the group identified by the URL Group ID.;HTTP_URL_GROUP_ID UrlGroupId, PCWSTR pFullyQualifiedUrl, ULONG Flags
HttpSendHttpResponse;Sends an HTTP response to the specified HTTP request.;HANDLE RequestQueueHandle, HTTP_REQUEST_ID RequestId, ULONG Flags, PHTTP_RESPONSE HttpResponse, PHTTP_CACHE_POLICY CachePolicy, PULONG BytesSent, PVOID Reserved1, ULONG Reserved2, LPOVERLAPPED Overlapped, PHTTP_LOG_DATA LogData
HttpSendRequestA;Sends the specified request to the HTTP server, allowing callers to send extra data beyond what is normally passed to HttpSendRequestEx.;HINTERNET hRequest, LPCSTR lpszHeaders, DWORD dwHeadersLength, LPVOID lpOptional, DWORD dwOptionalLength
HttpSendRequestExA;Sends the specified request to the HTTP server.;HINTERNET hRequest, LPINTERNET_BUFFERSA lpBuffersIn, LPINTERNET_BUFFERSA lpBuffersOut, DWORD dwFlags, DWORD_PTR dwContext
HttpSendRequestExW;Sends the specified request to the HTTP server.;HINTERNET hRequest, LPINTERNET_BUFFERSW lpBuffersIn, LPINTERNET_BUFFERSW lpBuffersOut, DWORD dwFlags, DWORD_PTR dwContext
HttpSendRequestW;Sends the specified request to the HTTP server, allowing callers to send extra data beyond what is normally passed to HttpSendRequestEx.;HINTERNET hRequest, LPCWSTR lpszHeaders, DWORD dwHeadersLength, LPVOID lpOptional, DWORD dwOptionalLength
HttpSendResponseEntityBody;Sends entity-body data associated with an HTTP response.;HANDLE RequestQueueHandle, HTTP_REQUEST_ID RequestId, ULONG Flags, USHORT EntityChunkCount, PHTTP_DATA_CHUNK EntityChunks, PULONG BytesSent, PVOID Reserved1, ULONG Reserved2, LPOVERLAPPED Overlapped, PHTTP_LOG_DATA LogData
HTTP_SET_NULL_ID;The HTTP_SET_NULL_ID macro sets the HTTP_OPAQUE_ID to NULL.;pid
HttpSetRequestQueueProperty;Sets a new property or modifies an existing property on the request queue identified by the specified handle.;HANDLE RequestQueueHandle, HTTP_SERVER_PROPERTY Property, PVOID PropertyInformation, ULONG PropertyInformationLength, ULONG Reserved1, PVOID Reserved2
HttpSetServerSessionProperty;Sets a new server session property or modifies an existing property on the specified server session.;HTTP_SERVER_SESSION_ID ServerSessionId, HTTP_SERVER_PROPERTY Property, PVOID PropertyInformation, ULONG PropertyInformationLength
HttpSetServiceConfiguration;Creates and sets a configuration record for the HTTP Server API configuration store.;HANDLE ServiceHandle, HTTP_SERVICE_CONFIG_ID ConfigId, PVOID pConfigInformation, ULONG ConfigInformationLength, LPOVERLAPPED pOverlapped
HttpSetUrlGroupProperty;Sets a new property or modifies an existing property on the specified URL Group.;HTTP_URL_GROUP_ID UrlGroupId, HTTP_SERVER_PROPERTY Property, PVOID PropertyInformation, ULONG PropertyInformationLength
HTTP_SET_VERSION;Sets a specified HTTP_VERSION structure to a specified major/minor version combination.;version, major, minor
HttpShutdownRequestQueue;Stops queuing requests for the specified request queue process.;HANDLE RequestQueueHandle
HttpTerminate;Cleans up resources used by the HTTP Server API to process calls by an application.;ULONG Flags, PVOID pReserved
HttpUpdateServiceConfiguration;Updates atomically a service configuration parameter that specifies a Transport Layer Security (TLS) certificate in a configuration record within the HTTP Server API configuration store.;HANDLE Handle, HTTP_SERVICE_CONFIG_ID ConfigId, PVOID ConfigInfo, ULONG ConfigInfoLength, LPOVERLAPPED Overlapped
HttpWaitForDemandStart;Waits for the arrival of a new request that can be served by a new request queue process.;HANDLE RequestQueueHandle, LPOVERLAPPED Overlapped
HttpWaitForDisconnectEx;This function is an extension to HttpWaitForDisconnect.;HANDLE RequestQueueHandle, HTTP_CONNECTION_ID ConnectionId, ULONG Reserved, LPOVERLAPPED Overlapped
HttpWaitForDisconnect;Notifies the application when the connection to an HTTP client is broken for any reason.;HANDLE RequestQueueHandle, HTTP_CONNECTION_ID ConnectionId, LPOVERLAPPED Overlapped
Icmp6CreateFile;The Icmp6CreateFile function opens a handle on which IPv6 ICMP echo requests can be issued.;
Icmp6ParseReplies;The Icmp6ParseReplies function parses the reply buffer provided and returns an IPv6 ICMPv6 echo response reply if found.;LPVOID ReplyBuffer, DWORD ReplySize
Icmp6SendEcho2;The Icmp6SendEcho2 function sends an IPv6 ICMPv6 echo request and returns either immediately (if Event or ApcRoutine is non-NULL) or returns after the specified time-out. The ReplyBuffer contains the IPv6 ICMPv6 echo response, if any.;HANDLE IcmpHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, sockaddr_in6 *SourceAddress, sockaddr_in6 *DestinationAddress, LPVOID RequestData, WORD RequestSize, PIP_OPTION_INFORMATION RequestOptions, LPVOID ReplyBuffer, DWORD ReplySize, DWORD Timeout
IcmpCloseHandle;The IcmpCloseHandle function closes a handle opened by a call to the IcmpCreateFile or Icmp6CreateFile functions.;HANDLE IcmpHandle
IcmpCreateFile;The IcmpCreateFile function opens a handle on which IPv4 ICMP echo requests can be issued.;
IcmpParseReplies;Parses the reply buffer provided and returns the number of ICMP echo request responses found.;LPVOID ReplyBuffer, DWORD ReplySize
IcmpSendEcho2Ex;Sends an IPv4 ICMP echo request and returns either immediately (if Event or ApcRoutine is non-NULL) or returns after the specified time-out. The ReplyBuffer contains the ICMP responses, if any.;HANDLE IcmpHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, IPAddr SourceAddress, IPAddr DestinationAddress, LPVOID RequestData, WORD RequestSize, PIP_OPTION_INFORMATION RequestOptions, LPVOID ReplyBuffer, DWORD ReplySize, DWORD Timeout
IcmpSendEcho2;The IcmpSendEcho2 function sends an IPv4 ICMP echo request and returns either immediately (if Event or ApcRoutine is non-NULL) or returns after the specified time-out. The ReplyBuffer contains the ICMP echo responses, if any.;HANDLE IcmpHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, IPAddr DestinationAddress, LPVOID RequestData, WORD RequestSize, PIP_OPTION_INFORMATION RequestOptions, LPVOID ReplyBuffer, DWORD ReplySize, DWORD Timeout
IcmpSendEcho;The IcmpSendEcho function sends an IPv4 ICMP echo request and returns any echo response replies. The call returns when the time-out has expired or the reply buffer is filled.;HANDLE IcmpHandle, IPAddr DestinationAddress, LPVOID RequestData, WORD RequestSize, PIP_OPTION_INFORMATION RequestOptions, LPVOID ReplyBuffer, DWORD ReplySize, DWORD Timeout
IdentifyNtmsSlot;The IdentifyNtmsSlot function identifies the media in the specified slot in a library. The command returns when the identification is complete.;HANDLE hSession, LPNTMS_GUID lpSlotId, DWORD dwOption
IdentityUpdated;Is called by an identity provider to notify a calling application that an identity event occurred.;DWORD dwIdentityUpdateEvents, LPCWSTR lpszUniqueID
IdnToAscii;Converts an internationalized domain name (IDN) or another internationalized label to a Unicode (wide character) representation of the ASCII string that represents the name in the Punycode transfer encoding syntax.;DWORD dwFlags, LPCWSTR lpUnicodeCharStr, int cchUnicodeChar, LPWSTR lpASCIICharStr, int cchASCIIChar
IdnToNameprepUnicode;Converts an internationalized domain name (IDN) or another internationalized label to the NamePrep form specified by Network Working Group RFC 3491, but does not perform the additional conversion to Punycode.;DWORD dwFlags, LPCWSTR lpUnicodeCharStr, int cchUnicodeChar, LPWSTR lpNameprepCharStr, int cchNameprepChar
IdnToUnicode;Converts the Punycode form of an internationalized domain name (IDN) or another internationalized label to the normal Unicode UTF-16 encoding syntax.;DWORD dwFlags, LPCWSTR lpASCIICharStr, int cchASCIIChar, LPWSTR lpUnicodeCharStr, int cchUnicodeChar
if_indextoname;Converts the local index for a network interface to the ANSI interface name.;NET_IFINDEX InterfaceIndex, PCHAR InterfaceName
if_nametoindex;Converts the ANSI interface name for a network interface to the local index for the interface.;PCSTR InterfaceName
IIDFromString;Converts a string generated by the StringFromIID function back into the original interface identifier (IID).;LPCOLESTR lpsz, LPIID lpiid
IID_PPV_ARGS;Used to retrieve an interface pointer, supplying the IID value of the requested interface automatically based on the type of the interface pointer used. This avoids a common coding error by checking the type of the value passed at compile time.;ppType
ImpersonateAnonymousToken;Enables the specified thread to impersonate the system's anonymous logon token.;HANDLE ThreadHandle
ImpersonateLoggedOnUser;Lets the calling thread impersonate the security context of a logged-on user. The user is represented by a token handle.;HANDLE hToken
ImpersonateNamedPipeClient;Impersonates a named-pipe client application.;HANDLE hNamedPipe
ImpersonateSecurityContext;Allows a server to impersonate a client by using a token previously obtained by a call to AcceptSecurityContext (General) or QuerySecurityContextToken.;PCtxtHandle phContext
ImpersonateSelf;Obtains an access token that impersonates the security context of the calling process. The token is assigned to the calling thread.;SECURITY_IMPERSONATION_LEVEL ImpersonationLevel
ImportCertificate;Takes a previously issued certificate and imports it to the certification authority's (CA) database. This method was first defined in the ICertAdmin interface.;const BSTR strConfig, const BSTR strCertificate, LONG Flags, LONG *pRequestId
Import;Imports an existing private key into a key container within a cryptographic provider.;BSTR strExportType, BSTR strEncodedKey, EncodingType Encoding
Import;Imports an identity to the system.;IPropertyStore *pPropertyStore
ImportKey;Adds an encrypted key set to an item in the Certificate Services database. The key set is encrypted to one or several key recovery agent (KRA) certificates.;const BSTR strConfig, LONG RequestId, const BSTR strCertHash, LONG Flags, const BSTR strKey
ImportNtmsDatabase;The ImportNtmsDatabase function causes RSM to import the database files from the database Export directory at the next restart of the RSM.;HANDLE hSession
ImportPFXToProviderFreeData;Frees PFX certificate context(s).;DWORD cCert, PCCERT_CONTEXT *rgpCert ) {...}
ImportPFXToProvider;Imports a PFX certificate.;HWND hWndParent, BYTE const *pbPFX, DWORD cbPFX, ImportPFXFlags ImportFlags, PCWSTR pwszPassword, PCWSTR pwszProviderName, PCWSTR pwszReaderName, PCWSTR pwszContainerNamePrefix, PCWSTR pwszPin, PCWSTR pwszFriendlyName, DWORD *pcCertOut, PCCERT_CONTEXT **prgpCertOut ) {...}
ImportRSoPData;The ImportRSoPData function imports a data file containing RSoP data to a WMI namespace. The file must be one generated by a call to the ExportRSoPData function.;LPOLESTR lpNameSpace, LPOLESTR lpFileName
ImportSecurityContextA;Imports a security context. The security context must have been exported to the process calling ImportSecurityContext by a previous call to ExportSecurityContext.;LPSTR pszPackage, PSecBuffer pPackedContext, VOID *Token, PCtxtHandle phContext
ImportSecurityContextW;Imports a security context. The security context must have been exported to the process calling ImportSecurityContext by a previous call to ExportSecurityContext.;PSECURITY_STRING pszPackage, PSecBuffer pPackedContext, void *Token, PCtxtHandle phContext
inet_addr;The inet_addr function converts a string containing an IPv4 dotted-decimal address into a proper address for the IN_ADDR structure.;const char *cp
inet_ntoa;The inet_ntoa function converts an (Ipv4) Internet network address into an ASCII string in Internet standard dotted-decimal format.;in_addr in
InflateRect;The InflateRect function increases or decreases the width and height of the specified rectangle.;LPRECT lprc, int dx, int dy
InitAtomTable;Initializes the local atom table and sets the number of hash buckets to the specified size.;DWORD nSize
InitializeAcl;Initializes a new ACL structure.;PACL pAcl, DWORD nAclLength, DWORD dwAclRevision
Initialize;Called by the server engine to allow the policy module to perform initialization tasks.;const BSTR strConfig
Initialize;Called by the server engine when it initializes itself.;const BSTR strConfig, LONG *pEventMask
InitializeClientContext2;Retrieves an IAzClientContext2 object pointer.;BSTR IdentifyingString, VARIANT varReserved, IAzClientContext2 **ppClientContext
InitializeClientContextFromName;Gets an IAzClientContext object pointer from the client identity as a (domain name, client name) pair.;BSTR ClientName, BSTR DomainName, VARIANT varReserved, IAzClientContext **ppClientContext
InitializeClientContextFromStringSid;Gets an IAzClientContext object pointer from the specified security identifier (SID) in text form.;BSTR SidString, LONG lOptions, VARIANT varReserved, IAzClientContext **ppClientContext
InitializeClientContextFromToken2;Retrieves an IAzClientContext2 object pointer from the specified client token.;ULONG ulTokenHandleLowPart, ULONG ulTokenHandleHighPart, VARIANT varReserved, IAzClientContext2 **ppClientContext
InitializeClientContextFromToken;Gets an IAzClientContext object pointer from the specified client token.;ULONGLONG ullTokenHandle, VARIANT varReserved, IAzClientContext **ppClientContext
InitializeClusterHealthFaultArray;TBD.;CLUSTER_HEALTH_FAULT_ARRAY *clusterHealthFaultArray
InitializeClusterHealthFault;TBD.;CLUSTER_HEALTH_FAULT *clusterHealthFault
InitializeConditionVariable;Initializes a condition variable.;PCONDITION_VARIABLE ConditionVariable
InitializeContext2;Initializes a CONTEXT structure inside a buffer with the necessary size and alignment, with the option to specify an XSTATE compaction mask.;PVOID Buffer, DWORD ContextFlags, PCONTEXT *Context, PDWORD ContextLength, ULONG64 XStateCompactionMask
InitializeContext;Initializes a CONTEXT structure inside a buffer with the necessary size and alignment.;PVOID Buffer, DWORD ContextFlags, PCONTEXT *Context, PDWORD ContextLength
InitializeCriticalSectionAndSpinCount;Initializes a critical section object and sets the spin count for the critical section.;LPCRITICAL_SECTION lpCriticalSection, DWORD dwSpinCount
InitializeCriticalSectionEx;Initializes a critical section object with a spin count and optional flags.;LPCRITICAL_SECTION lpCriticalSection, DWORD dwSpinCount, DWORD Flags
InitializeCriticalSection;Initializes a critical section object.;LPCRITICAL_SECTION lpCriticalSection
InitializeDecode;Decodes an existing signed or unsigned PKCS;BSTR strEncodedData, EncodingType Encoding
InitializeDecode;Initializes the extension from a DER-encoded byte array that contains the extension value.;EncodingType Encoding, BSTR strEncodedData
InitializeDecode;Initializes the extension from a Distinguished Encoding Rules (DER) encoded byte array that contains the extension value.;EncodingType Encoding, BSTR strEncodedData
InitializeDecode;Initializes the object from a byte array that contains the property value.;EncodingType Encoding, BSTR strEncodedData
InitializeDecode;Initializes the object from a Distinguished Encoding Rules (DER) encoded byte array that contains a SHA-1 hash of the encrypted private key.;EncodingType Encoding, BSTR strEncodedData
InitializeDecode;Initializes the object from a Distinguished Encoding Rules (DER) encoded byte array that contains information about the provider.;EncodingType Encoding, BSTR strEncodedData
InitializeDecode;Initializes the object from a Distinguished Encoding Rules (DER) encoded byte array that contains the attribute value.;EncodingType Encoding, BSTR strEncodedData
InitializeDecode;Initializes the object from a Distinguished Encoding Rules (DER) encoded byte array that contains the certificate to be renewed.;EncodingType Encoding, BSTR strEncodedData
InitializeDecode;Initializes the object from a Distinguished Encoding Rules (DER) encoded byte array that contains the encrypted private key.;EncodingType Encoding, BSTR strEncodedData
InitializeDecode;Initializes the object from a Distinguished Encoding Rules (DER) encoded byte array that contains the extension value.;EncodingType Encoding, BSTR strEncodedData
InitializeDecode;Initializes the object from a Distinguished Encoding Rules (DER) encoded byte array that contains the operating system version information.;EncodingType Encoding, BSTR strEncodedData
InitializeDefaults;Initializes a CCertSrvSetup object with default values to enable installation of the Certification Authority role.;VARIANT_BOOL bServer, VARIANT_BOOL bClient
InitializeDefaults;Initializes a CMSCEPSetup object with default values to enable installation of a Network Device Enrollment Service (NDES) role.;
InitializeEnclave;Initializes an enclave that you created and loaded with data.;HANDLE hProcess, LPVOID lpAddress, LPCVOID lpEnclaveInformation, DWORD dwInfoLength, LPDWORD lpEnclaveError
InitializeEncodeFromEncryptedKeyBlob;Initializes the attribute from an encrypted private key.;EncodingType Encoding, BSTR strEncryptedKeyBlob
InitializeEncode;Initializes the attribute by using the certificate to be renewed.;EncodingType Encoding, BSTR strCert
InitializeEncode;Initializes the attribute from an IX509PrivateKey object, the certification authority encryption certificate, and the symmetric encryption algorithm object identifier (OID).;IX509PrivateKey *pKey, EncodingType Encoding, BSTR strCAXCert, IObjectId *pAlgorithm, LONG EncryptionStrength
InitializeEncode;Initializes the attribute from information about the provider.;X509KeySpec KeySpec, BSTR strProviderName, EncodingType Encoding, BSTR strSignature
InitializeEncode;Initializes the attribute from information about the user, client computer, and application that submitted the certificate request.;RequestClientInfoClientId ClientId, BSTR strMachineDnsName, BSTR strUserSamName, BSTR strProcessName
InitializeEncode;Initializes the attribute from operating system version information.;BSTR strOSVersion
InitializeEncode;Initializes the extension by using the X509KeyUsageFlags enumeration.;X509KeyUsageFlags UsageFlags
InitializeEncode;Initializes the extension from a Boolean value that indicates whether the certificate subject is a certification authority (CA) and an integer that contains the depth of the subordinate CA chain.;VARIANT_BOOL IsCA, LONG PathLenConstraint
InitializeEncode;Initializes the extension from a byte array.;EncodingType Encoding, BSTR strKeyIdentifier
InitializeEncode;Initializes the extension from a byte array that contains the key identifier.;EncodingType Encoding, BSTR strKeyIdentifier
InitializeEncode;Initializes the extension from a collection of IObjectId object identifiers (OIDs) that specify the intended uses of the public key.;IObjectIds *pValue
InitializeEncode;Initializes the extension from an IAlternativeNames collection.;IAlternativeNames *pValue
InitializeEncode;Initializes the extension from an ICertificatePolicies collection.;ICertificatePolicies *pValue
InitializeEncode;Initializes the extension from an ISmimeCapabilities collection.;ISmimeCapabilities *pValue
InitializeEncode;Initializes the extension from a string that contains the template name.;BSTR strTemplateName
InitializeEncode;Initializes the extension from a template object identifier (OID) and from major and minor version numbers.;IObjectId *pTemplateOid, LONG MajorVersion, LONG MinorVersion
InitializeEncode;Initializes the object from an ICertificatePolicies collection.;ICertificatePolicies *pValue
InitializeEncode;Initializes the object from an IX509Extensions collection.;IX509Extensions *pExtensions
InitializeEncode;Initializes the object from a string and a value that identifies the qualifier type.;BSTR strQualifier, PolicyQualifierType Type
InitializeForPending;Initialize the instance to prepare to generate a message to either retrieve an issued certificate, or install a response for a previous request by the issuer.;X509CertificateEnrollmentContext Context
InitializeFromAlgorithmName;Initializes the object from an algorithm name or an object identifier.;ObjectIdGroupId GroupId, ObjectIdPublicKeyFlags KeyFlags, AlgorithmFlags AlgFlags, BSTR strAlgorithmName
InitializeFromCertificateHash;Initializes the object from the new certificate.;VARIANT_BOOL MachineContext, EncodingType Encoding, BSTR strCertificate
InitializeFromCertificate;Initializes the certificate request by using an existing certificate.;X509CertificateEnrollmentContext Context, BSTR strCertificate, EncodingType Encoding, X509RequestInheritOptions InheritOptions
InitializeFromCertificate;Initializes the certificate request by using an existing certificate.;X509CertificateEnrollmentContext Context, VARIANT_BOOL RenewalRequest, BSTR strCertificate, EncodingType Encoding, X509RequestInheritOptions InheritOptions
InitializeFromCertificate;Initializes the collection from the properties contained in a certificate.;VARIANT_BOOL MachineContext, EncodingType Encoding, BSTR strCertificate
InitializeFromCertificate;Initializes the object by using a property value associated with an existing certificate.;VARIANT_BOOL MachineContext, EncodingType Encoding, BSTR strCertificate
InitializeFromCurrentTime;Initializes the property from a Boolean value and the current system date and time.;VARIANT_BOOL BackedUpValue
InitializeFromEncodedPublicKeyInfo;Initializes the object from a byte array that contains a public key.;BSTR strEncodedPublicKeyInfo, EncodingType Encoding
InitializeFromInnerRequest;Initializes the certificate request from the inner PKCS;IX509CertificateRequest *pInnerRequest
InitializeFromInnerRequestTemplate;Initializes the certificate request from an inner request object and a template.;IX509CertificateRequest *pInnerRequest, IX509EnrollmentPolicyServer *pPolicyServer, IX509CertificateTemplate *pTemplate
InitializeFromInnerRequestTemplateName;The InitializeFromInnerRequestTemplateName method initializes the certificate request from an inner request object and a template.;IX509CertificateRequest *pInnerRequest, BSTR strTemplateName
InitializeFromLocalRequestOriginator;Initializes the object from the DNS name of the local computer.;
InitializeFromName;Initializes the object from a CERTENROLL_OBJECTID enumeration value.;CERTENROLL_OBJECTID Name
InitializeFromName;Initializes the object from a string that contains a provider name.;BSTR strName
InitializeFromObjectId;Initializes a cryptographic attribute by using an object identifier.;IObjectId *pObjectId
InitializeFromOtherName;Initializes the object from an object identifier (OID) and the associated raw data (byte array).;IObjectId *pObjectId, EncodingType Encoding, BSTR strRawData, VARIANT_BOOL ToBeWrapped
InitializeFromPrivateKey;Initializes the certificate request by using an IX509PrivateKey object and, optionally, a template.;X509CertificateEnrollmentContext Context, IX509PrivateKey *pPrivateKey, BSTR strTemplateName
InitializeFromPrivateKeyTemplate;Initializes the certificate request by using an IX509PrivateKey object and a certificate template.;X509CertificateEnrollmentContext Context, IX509PrivateKey *pPrivateKey, IX509EnrollmentPolicyServer *pPolicyServer, IX509CertificateTemplate *pTemplate
InitializeFromProperties;Creates a property set from the properties contained in an existing server configuration.;const VARIANT *pVarProperties
InitializeFromPublicKey;Initializes a null-signed certificate request by using an IX509PublicKey object and, optionally, a template.;X509CertificateEnrollmentContext Context, IX509PublicKey *pPublicKey, BSTR strTemplateName
InitializeFromPublicKeyTemplate;Initializes a null-signed certificate request by using an IX509PublicKey object and a template.;X509CertificateEnrollmentContext Context, IX509PublicKey *pPublicKey, IX509EnrollmentPolicyServer *pPolicyServer, IX509CertificateTemplate *pTemplate
InitializeFromRawData;Initializes the object from a Digital Signature Algorithm (DSA) GUID, an X.500 directory name, or an Internet Protocol (IP) address contained in a Distinguished Encoding Rules (DER) encoded byte array.;AlternativeNameType Type, EncodingType Encoding, BSTR strRawData
InitializeFromRequest;Initializes the enrollment object from an existing IX509CertificateRequest object.;IX509CertificateRequest *pRequest
InitializeFromString;Initializes the object from a string that contains an email address, a Domain Name System (DNS) name, a URL, a registered object identifier (OID), or a user principal name (UPN).;AlternativeNameType Type, BSTR strValue
InitializeFromTemplate;Initializes the certificate request by using a template.;X509CertificateEnrollmentContext context, IX509EnrollmentPolicyServer *pPolicyServer, IX509CertificateTemplate *pTemplate
InitializeFromTemplate;Initializes the enrollment object by using a template.;X509CertificateEnrollmentContext context, IX509EnrollmentPolicyServer *pPolicyServer, IX509CertificateTemplate *pTemplate
InitializeFromTemplateName;Initializes the certificate request by using a template.;X509CertificateEnrollmentContext Context, BSTR strTemplateName
InitializeFromTemplateName;Initializes the enrollment object from a template common name (CN).;X509CertificateEnrollmentContext Context, BSTR strTemplateName
InitializeFromTemplateName;.;X509CertificateEnrollmentContext Context, BSTR strTemplateName
InitializeFromType;Initializes the object from the default cryptographic provider.;X509ProviderType Type, IObjectId *pAlgorithm, VARIANT_BOOL MachineContext
InitializeFromValue;Initializes the object from a string that contains a dotted decimal object identifier (OID).;BSTR strValue
InitializeFromValues;Initializes a cryptographic attribute by using an IX509Attributes object.;IX509Attributes *pAttributes
InitializeImport;Initializes the certificate enrollment policy (CEP) server from a collection of templates and object identifiers.;VARIANT val
Initialize;Initializes an ICertPropertyEnrollmentPolicyServer object.;EnrollmentPolicyServerPropertyFlags PropertyFlags, X509EnrollmentAuthFlags AuthFlags, X509EnrollmentAuthFlags EnrollmentServerAuthFlags, PolicyServerUrlFlags UrlFlags, BSTR strRequestId, BSTR strUrl, BSTR strId, BSTR strEnrollmentServerUrl
Initialize;Initializes an IX509CertificateTemplateWritable object from a template.;IX509CertificateTemplate *pValue
Initialize;Initializes an IX509EnrollmentHelper object.;X509CertificateEnrollmentContext Context
Initialize;Initializes an IX509EnrollmentPolicyServer object.;BSTR bstrPolicyServerUrl, BSTR bstrPolicyServerId, X509EnrollmentAuthFlags authFlags, VARIANT_BOOL fIsUnTrusted, X509CertificateEnrollmentContext context
Initialize;Initializes an IX509Extension object by using an object identifier (OID) and a byte array that contains the Distinguished Encoding Rules (DER) encoded extension.;IObjectId *pObjectId, EncodingType Encoding, BSTR strEncodedData
Initialize;Initializes an IX509PolicyServerListManager object.;X509CertificateEnrollmentContext context, PolicyServerUrlFlags Flags
Initialize;Initializes an IX509PolicyServerUrl object for a computer or user context.;X509CertificateEnrollmentContext context
Initialize;Initializes a thread to use Windows Runtime APIs.;RO_INIT_TYPE initType
Initialize;Initializes the authorization manager.;LONG lFlags, BSTR bstrPolicyURL, VARIANT varReserved
Initialize;Initializes the enrollment object and creates a default PKCS;X509CertificateEnrollmentContext Context
Initialize;Initializes the NDES policy module.;
Initialize;Initializes the object by specifying the name of the template to be used for autoenrollment.;BSTR strTemplateName
Initialize;Initializes the object from a Boolean value and a date.;VARIANT_BOOL BackedUpValue, DATE Date
Initialize;Initializes the object from a Boolean value that specifies whether the certificate has been archived.;VARIANT_BOOL ArchivedValue
Initialize;Initializes the object from a byte array that contains the hash.;EncodingType Encoding, BSTR strArchivedKeyHashValue
Initialize;Initializes the object from a cryptographic provider and an associated algorithm.;ICspInformation *pCsp, ICspAlgorithm *pAlgorithm
Initialize;Initializes the object from an object identifier (OID) and a value.;IObjectId *pObjectId, EncodingType Encoding, BSTR strEncodedData
Initialize;Initializes the object from an object identifier (OID).;IObjectId *pValue
Initialize;Initializes the object from a private key.;IX509PrivateKey *pValue
Initialize;Initializes the object from a public key algorithm object identifier (OID) and from byte arrays that contain a public key and the associated parameters, if any.;IObjectId *pObjectId, BSTR strEncodedKey, BSTR strEncodedParameters, EncodingType Encoding
Initialize;Initializes the object from a SHA-1 hash of the new certificate.;EncodingType Encoding, BSTR strRenewalValue
Initialize;Initializes the object from a signing certificate.;VARIANT_BOOL MachineContext, X509PrivateKeyVerify VerifyType, EncodingType Encoding, BSTR strCertificate
Initialize;Initializes the object from a string that contains descriptive information about the certificate.;BSTR strDescription
Initialize;Initializes the object from a string that contains the DNS name of the originating computer.;BSTR strRequestOriginator
Initialize;Initializes the object from a symmetric encryption algorithm object identifier (OID) and an optional key length.;IObjectId *pObjectId, LONG BitCount
Initialize;Initializes the object from strings that contain the name and associated value.;BSTR strName, BSTR strValue
Initialize;Initializes the object from the certificate display name.;BSTR strFriendlyName
Initialize;Initializes the object from the SHA-1 hash of a certificate.;EncodingType Encoding, BSTR strRenewalValue
Initialize;Initializes the property from the certificate request ID, the certification authority (CA) configuration string, and an optional certificate display name.;LONG RequestId, BSTR strCADnsName, BSTR strCAName, BSTR strFriendlyName
Initialize;Initializes the request object for a user or a computer.;X509CertificateEnrollmentContext Context
Initialize;Initialize the instance in preparation for a new request.;IX509CertificateRequestPkcs10 *pRequest, BSTR strThumbprint, EncodingType ThumprintEncoding, BSTR strServerCertificates, EncodingType Encoding
Initialize;Initialize using the full Certificate Management over CMS (CMC) response returned from the CA.;EncodingType Encoding, BSTR strPendingFullCmcResponseWithChallenge
InitializeInstallDefaults;Initializes the ICertificateEnrollmentPolicyServerSetup object with a default configuration.;
InitializeInstallDefaults;Initializes the ICertificateEnrollmentServerSetup object with a default configuration.;
InitializeIpForwardEntry;Initializes a MIB_IPFORWARD_ROW2 structure with default values for an IP route entry on the local computer.;PMIB_IPFORWARD_ROW2 Row
InitializeIpInterfaceEntry;Initializes the members of an MIB_IPINTERFACE_ROW entry with default values.;PMIB_IPINTERFACE_ROW Row
InitializeProcessForWsWatch;Initiates monitoring of the working set of the specified process.;HANDLE hProcess
InitializeProcThreadAttributeList;Initializes the specified list of attributes for process and thread creation.;LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList, DWORD dwAttributeCount, DWORD dwFlags, PSIZE_T lpSize
InitializeSecurityContextA;Initiates the client side, outbound security context from a credential handle.;PCredHandle phCredential, PCtxtHandle phContext, SEC_CHAR *pszTargetName, unsigned long fContextReq, unsigned long Reserved1, unsigned long TargetDataRep, PSecBufferDesc pInput, unsigned long Reserved2, PCtxtHandle phNewContext, PSecBufferDesc pOutput, unsigned long *pfContextAttr, PTimeStamp ptsExpiry
InitializeSecurityContextW;Initiates the client side, outbound security context from a credential handle.;PCredHandle phCredential, PCtxtHandle phContext, PSECURITY_STRING pTargetName, unsigned long fContextReq, unsigned long Reserved1, unsigned long TargetDataRep, PSecBufferDesc pInput, unsigned long Reserved2, PCtxtHandle phNewContext, PSecBufferDesc pOutput, unsigned long *pfContextAttr, PTimeStamp ptsExpiry
InitializeSecurityDescriptor;Initializes a new security descriptor.;PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD dwRevision
InitializeSid;Initializes a security identifier (SID).;PSID Sid, PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority, BYTE nSubAuthorityCount
InitializeSListHead;Initializes the head of a singly linked list.;PSLIST_HEADER ListHead
InitializeSRWLock;Initialize a slim reader/writer (SRW) lock.;PSRWLOCK SRWLock
InitializeSynchronizationBarrier;Initializes a new synchronization barrier.;LPSYNCHRONIZATION_BARRIER lpBarrier, LONG lTotalThreads, LONG lSpinCount
Initialize;The Initialize method informs the Security Configuration snap-in that the snap-in extension is loaded, and it establishes a context for communications.;LPCTSTR lpServiceName, LPCTSTR lpTemplateName, LPSCESVCATTACHMENTPERSISTINFO lpSceSvcPersistInfo, SCESVC_HANDLE *pscesvcHandle
InitializeThreadpoolEnvironment;Initializes a callback environment.;PTP_CALLBACK_ENVIRON pcbe
InitializeTouchInjection;Configures the touch injection context for the calling application and initializes the maximum number of simultaneous contacts that the app can inject.;UINT32 maxCount, DWORD dwMode
InitializeUnicastIpAddressEntry;Initializes a MIB_UNICASTIPADDRESS_ROW structure with default values for a unicast IP address entry on the local computer.;PMIB_UNICASTIPADDRESS_ROW Row
InitiateShutdownA;Initiates a shutdown and restart of the specified computer, and restarts any applications that have been registered for restart.;LPSTR lpMachineName, LPSTR lpMessage, DWORD dwGracePeriod, DWORD dwShutdownFlags, DWORD dwReason
InitiateShutdownW;Initiates a shutdown and restart of the specified computer, and restarts any applications that have been registered for restart.;LPWSTR lpMachineName, LPWSTR lpMessage, DWORD dwGracePeriod, DWORD dwShutdownFlags, DWORD dwReason
InitiateSystemShutdownA;Initiates a shutdown and optional restart of the specified computer.;LPSTR lpMachineName, LPSTR lpMessage, DWORD dwTimeout, BOOL bForceAppsClosed, BOOL bRebootAfterShutdown
InitiateSystemShutdownExA;Initiates a shutdown and optional restart of the specified computer, and optionally records the reason for the shutdown.;LPSTR lpMachineName, LPSTR lpMessage, DWORD dwTimeout, BOOL bForceAppsClosed, BOOL bRebootAfterShutdown, DWORD dwReason
InitiateSystemShutdownExW;Initiates a shutdown and optional restart of the specified computer, and optionally records the reason for the shutdown.;LPWSTR lpMachineName, LPWSTR lpMessage, DWORD dwTimeout, BOOL bForceAppsClosed, BOOL bRebootAfterShutdown, DWORD dwReason
InitiateSystemShutdownW;Initiates a shutdown and optional restart of the specified computer.;LPWSTR lpMachineName, LPWSTR lpMessage, DWORD dwTimeout, BOOL bForceAppsClosed, BOOL bRebootAfterShutdown
InitNetworkAddressControl;Initializes the network address control window class.;
InitOnceBeginInitialize;Begins one-time initialization.;LPINIT_ONCE lpInitOnce, DWORD dwFlags, PBOOL fPending, LPVOID *lpContext
InitOnceComplete;Completes one-time initialization started with the InitOnceBeginInitialize function.;LPINIT_ONCE lpInitOnce, DWORD dwFlags, LPVOID lpContext
InitOnceExecuteOnce;Executes the specified function successfully one time. No other threads that specify the same one-time initialization structure can execute the specified function while it is being executed by the current thread.;PINIT_ONCE InitOnce, PINIT_ONCE_FN InitFn, PVOID Parameter, LPVOID *Context
InitOnceInitialize;Initializes a one-time initialization structure.;PINIT_ONCE InitOnce
InitSecurityInterfaceA;The InitSecurityInterface function returns a pointer to an SSPI dispatch table. This function enables clients to use SSPI without binding directly to an implementation of the interface.;
InitSecurityInterfaceW;The InitSecurityInterface function returns a pointer to an SSPI dispatch table. This function enables clients to use SSPI without binding directly to an implementation of the interface.;
InjectNtmsCleaner;The InjectNtmsCleaner function allows a cleaner cartridge to be inserted into the specified library unit.;HANDLE hSession, LPNTMS_GUID lpLibrary, LPNTMS_GUID lpInjectOperation, DWORD dwNumberOfCleansLeft, DWORD dwAction
InjectNtmsMedia;The InjectNtmsMedia function allows media to be inserted into the port of the specified library. If the library is busy, RSM queues InjectNtmsMedia and returns success.;HANDLE hSession, LPNTMS_GUID lpLibraryId, LPNTMS_GUID lpInjectOperation, DWORD dwAction
InjectSyntheticPointerInput;Simulates pointer input (pen or touch).;HSYNTHETICPOINTERDEVICE device, const POINTER_TYPE_INFO *pointerInfo, UINT32 count
InjectTouchInput;Simulates touch input.;UINT32 count, const POINTER_TOUCH_INFO *contacts
InSendMessage;Determines whether the current window procedure is processing a message that was sent from another thread (in the same process or a different process) by a call to the SendMessage function.;
InSendMessageEx;Determines whether the current window procedure is processing a message that was sent from another thread (in the same process or a different process).;LPVOID lpReserved
InsertMenuA;Inserts a new menu item into a menu, moving other items down the menu.;HMENU hMenu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCSTR lpNewItem
InsertMenuItemA;Inserts a new menu item at the specified position in a menu.;HMENU hmenu, UINT item, BOOL fByPosition, LPCMENUITEMINFOA lpmi
InsertMenuItemW;Inserts a new menu item at the specified position in a menu.;HMENU hmenu, UINT item, BOOL fByPosition, LPCMENUITEMINFOW lpmi
InsertMenuW;Inserts a new menu item into a menu, moving other items down the menu.;HMENU hMenu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCWSTR lpNewItem
InstallApplication;The InstallApplication function can install applications that have been deployed to target users that belong to a domain.;PINSTALLDATA pInstallInfo
InstallELAMCertificateInfo;Installs the certificate information specified in the resource file, which is linked into the ELAM driver at build time.;HANDLE ELAMFile
InstallHinfSectionA;InstallHinfSection is an entry-point function exported by Setupapi.dll that you can use to execute a section of an .inf file. InstallHinfSection can be invoked by calling the Rundll32.exe utility as described in the Remarks section.;HWND Window, HINSTANCE ModuleHandle, PCSTR CommandLine, INT ShowCommand
InstallHinfSectionW;InstallHinfSection is an entry-point function exported by Setupapi.dll that you can use to execute a section of an .inf file. InstallHinfSection can be invoked by calling the Rundll32.exe utility as described in the Remarks section.;HWND Window, HINSTANCE ModuleHandle, PCWSTR CommandLine, INT ShowCommand
Install;Installs a Network Device Enrollment Service (NDES) role as configured in a CMSCEPSetup object.;
Install;Installs a role as configured in the CCertSrvSetup object.;
Install;Installs the Certificate Enrollment Policy (CEP) Web Service configured by the ICertificateEnrollmentPolicyServerSetup object.;
Install;Installs the Certificate Enrollment Web Service (CES) configured by the ICertificateEnrollmentServerSetup object.;
InstallPKCS7BlobEx;The same as InstallPKCS7Blob except that it returns the number of certificates actually installed in local stores.;PCRYPT_DATA_BLOB pBlobPKCS7, LONG *plCertInstalled
InstallPKCS7Blob;Processes a certificate or chain of certificates, placing them into the appropriate certificate stores. This method differs from the acceptPKCS7Blob method in that InstallPKCS7Blob does not receive a request certificate.;PCRYPT_DATA_BLOB pBlobPKCS7
InstallPKCS7Ex;Processes a certificate or chain of certificates, placing them into the appropriate certificate stores.InstallPKCS7 except that it returns the number of certificates actually installed in local stores.;BSTR PKCS7, LONG *plCertInstalled
InstallPKCS7;Processes a certificate or chain of certificates, placing them into the appropriate certificate stores. This method differs from the acceptPKCS7 method in that InstallPKCS7 does not receive a request certificate.;BSTR PKCS7
InstallResponse2;Installs a certificate chain on the end-entity computer.;InstallResponseRestrictionFlags Restrictions, BSTR strResponse, EncodingType Encoding, BSTR strPassword, BSTR strEnrollmentPolicyServerUrl, BSTR strEnrollmentPolicyServerID, PolicyServerUrlFlags EnrollmentPolicyServerFlags, X509EnrollmentAuthFlags authFlags
InstallResponse;Installs a certificate chain on the end-entity computer.;InstallResponseRestrictionFlags Restrictions, BSTR strResponse, EncodingType Encoding, BSTR strPassword
INTERFACE_TIMESTAMP_CONFIG_CHANGE_CALLBACK;This callback is reserved for system use, and you should not use it in your code.;PVOID CallerContext ) {...}
InterlockedExchangeSubtract;Performs an atomic subtraction of two values.;unsigned volatile *Addend, unsigned Value
InterlockedFlushSList;Removes all items from a singly linked list. Access to the list is synchronized on a multiprocessor system.;PSLIST_HEADER ListHead
InterlockedPopEntrySList;Removes an item from the front of a singly linked list. Access to the list is synchronized on a multiprocessor system.;PSLIST_HEADER ListHead
InterlockedPushEntrySList;Inserts an item at the front of a singly linked list. Access to the list is synchronized on a multiprocessor system.;PSLIST_HEADER ListHead, __drv_aliasesMem PSLIST_ENTRY ListEntry
InterlockedPushListSListEx;Inserts a singly-linked list at the front of another singly linked list. Access to the lists is synchronized on a multiprocessor system. This version of the method does not use the __fastcall calling convention.;PSLIST_HEADER ListHead, PSLIST_ENTRY List, PSLIST_ENTRY ListEnd, ULONG Count
InternalGetWindowText;Copies the text of the specified window's title bar (if it has one) into a buffer.;HWND hWnd, LPWSTR pString, int cchMaxCount
InternetAttemptConnect;Attempts to make a connection to the Internet.;DWORD dwReserved
InternetAutodial;Causes the modem to automatically dial the default Internet connection.;DWORD dwFlags, HWND hwndParent
InternetAutodialHangup;Disconnects an automatic dial-up connection.;DWORD dwReserved
InternetCanonicalizeUrlA;Canonicalizes a URL, which includes converting unsafe characters and spaces into escape sequences.;LPCSTR lpszUrl, LPSTR lpszBuffer, LPDWORD lpdwBufferLength, DWORD dwFlags
InternetCanonicalizeUrlW;Canonicalizes a URL, which includes converting unsafe characters and spaces into escape sequences.;LPCWSTR lpszUrl, LPWSTR lpszBuffer, LPDWORD lpdwBufferLength, DWORD dwFlags
InternetCheckConnectionA;Allows an application to check if a connection to the Internet can be established.;LPCSTR lpszUrl, DWORD dwFlags, DWORD dwReserved
InternetCheckConnectionW;Allows an application to check if a connection to the Internet can be established.;LPCWSTR lpszUrl, DWORD dwFlags, DWORD dwReserved
InternetClearAllPerSiteCookieDecisions;Clears all decisions that were made about cookies on a site by site basis.;
InternetCloseHandle;Closes a single Internet handle.;HINTERNET hInternet
InternetCombineUrlA;Combines a base and relative URL into a single URL. The resultant URL is canonicalized (see InternetCanonicalizeUrl).;LPCSTR lpszBaseUrl, LPCSTR lpszRelativeUrl, LPSTR lpszBuffer, LPDWORD lpdwBufferLength, DWORD dwFlags
InternetCombineUrlW;Combines a base and relative URL into a single URL. The resultant URL is canonicalized (see InternetCanonicalizeUrl).;LPCWSTR lpszBaseUrl, LPCWSTR lpszRelativeUrl, LPWSTR lpszBuffer, LPDWORD lpdwBufferLength, DWORD dwFlags
InternetConfirmZoneCrossingA;Checks for changes between secure and nonsecure URLs. Always inform the user when a change occurs in security between two URLs. Typically, an application should allow the user to acknowledge the change through interaction with a dialog box.;HWND hWnd, LPSTR szUrlPrev, LPSTR szUrlNew, BOOL bPost
InternetConfirmZoneCrossing;Checks for changes between secure and nonsecure URLs. Always inform the user when a change occurs in security between two URLs. Typically, an application should allow the user to acknowledge the change through interaction with a dialog box.;HWND hWnd, LPSTR szUrlPrev, LPSTR szUrlNew, BOOL bPost
InternetConfirmZoneCrossingW;Checks for changes between secure and nonsecure URLs. Always inform the user when a change occurs in security between two URLs. Typically, an application should allow the user to acknowledge the change through interaction with a dialog box.;HWND hWnd, LPWSTR szUrlPrev, LPWSTR szUrlNew, BOOL bPost
InternetConnectA;Opens an File Transfer Protocol (FTP) or HTTP session for a given site.;HINTERNET hInternet, LPCSTR lpszServerName, INTERNET_PORT nServerPort, LPCSTR lpszUserName, LPCSTR lpszPassword, DWORD dwService, DWORD dwFlags, DWORD_PTR dwContext
InternetConnectW;Opens an File Transfer Protocol (FTP) or HTTP session for a given site.;HINTERNET hInternet, LPCWSTR lpszServerName, INTERNET_PORT nServerPort, LPCWSTR lpszUserName, LPCWSTR lpszPassword, DWORD dwService, DWORD dwFlags, DWORD_PTR dwContext
InternetCrackUrlA;Cracks a URL into its component parts.;LPCSTR lpszUrl, DWORD dwUrlLength, DWORD dwFlags, LPURL_COMPONENTSA lpUrlComponents
InternetCrackUrlW;Cracks a URL into its component parts.;LPCWSTR lpszUrl, DWORD dwUrlLength, DWORD dwFlags, LPURL_COMPONENTSW lpUrlComponents
InternetCreateUrlA;Creates a URL from its component parts.;LPURL_COMPONENTSA lpUrlComponents, DWORD dwFlags, LPSTR lpszUrl, LPDWORD lpdwUrlLength
InternetCreateUrlW;Creates a URL from its component parts.;LPURL_COMPONENTSW lpUrlComponents, DWORD dwFlags, LPWSTR lpszUrl, LPDWORD lpdwUrlLength
InternetDialA;Initiates a connection to the Internet using a modem.;HWND hwndParent, LPSTR lpszConnectoid, DWORD dwFlags, DWORD_PTR *lpdwConnection, DWORD dwReserved
InternetDial;Initiates a connection to the Internet using a modem.;HWND hwndParent, LPSTR lpszConnectoid, DWORD dwFlags, LPDWORD lpdwConnection, DWORD dwReserved
InternetDialW;Initiates a connection to the Internet using a modem.;HWND hwndParent, LPWSTR lpszConnectoid, DWORD dwFlags, DWORD_PTR *lpdwConnection, DWORD dwReserved
InternetEnumPerSiteCookieDecisionA;Retrieves the domains and cookie settings of websites for which site-specific cookie regulations are set.;LPSTR pszSiteName, unsigned long *pcSiteNameSize, unsigned long *pdwDecision, unsigned long dwIndex
InternetEnumPerSiteCookieDecisionW;Retrieves the domains and cookie settings of websites for which site-specific cookie regulations are set.;LPWSTR pszSiteName, unsigned long *pcSiteNameSize, unsigned long *pdwDecision, unsigned long dwIndex
InternetErrorDlg;Displays a dialog box for the error that is passed to InternetErrorDlg, if an appropriate dialog box exists.;HWND hWnd, HINTERNET hRequest, DWORD dwError, DWORD dwFlags, LPVOID *lppvData
InternetFindNextFileA;Continues a file search started as a result of a previous call to FtpFindFirstFile.Windows XP and Windows Server 2003 R2 and earlier:  Or continues a file search as a result of a previous call to GopherFindFirstFile.;HINTERNET hFind, LPVOID lpvFindData
InternetFindNextFileW;Continues a file search started as a result of a previous call to FtpFindFirstFile.Windows XP and Windows Server 2003 R2 and earlier:  Or continues a file search as a result of a previous call to GopherFindFirstFile.;HINTERNET hFind, LPVOID lpvFindData
InternetFreeCookies;Frees an array of INTERNET_COOKIE2 structures.;INTERNET_COOKIE2 *pCookies, DWORD dwCookieCount
InternetGetConnectedStateExA;Note  Using this API is not recommended, use the INetworkListManager::GetConnectivity method instead. Retrieves the connected state of the specified Internet connection.;LPDWORD lpdwFlags, LPSTR lpszConnectionName, DWORD cchNameLen, DWORD dwReserved
InternetGetConnectedStateEx;Note  Using this API is not recommended, use the INetworkListManager::GetConnectivity method instead. Retrieves the connected state of the specified Internet connection.;LPDWORD lpdwFlags, LPSTR lpszConnectionName, DWORD dwNameLen, DWORD dwReserved
InternetGetConnectedStateExW;Note  Using this API is not recommended, use the INetworkListManager::GetConnectivity method instead. Retrieves the connected state of the specified Internet connection.;LPDWORD lpdwFlags, LPWSTR lpszConnectionName, DWORD cchNameLen, DWORD dwReserved
InternetGetConnectedState;Note  Using this API is not recommended, use the INetworkListManager::GetConnectivity method instead. Retrieves the connected state of the local system.;LPDWORD lpdwFlags, DWORD dwReserved
InternetGetCookieA;Retrieves the cookie for the specified URL.;LPCSTR lpszUrl, LPCSTR lpszCookieName, LPSTR lpszCookieData, LPDWORD lpdwSize
InternetGetCookieEx2;Retrieves one or more cookies associated with the specified URL.;PCWSTR pcwszUrl, PCWSTR pcwszCookieName, DWORD dwFlags, INTERNET_COOKIE2 **ppCookies, PDWORD pdwCookieCount
InternetGetCookieExA;Retrieves data stored in cookies associated with a specified URL.;LPCSTR lpszUrl, LPCSTR lpszCookieName, LPSTR lpszCookieData, LPDWORD lpdwSize, DWORD dwFlags, LPVOID lpReserved
InternetGetCookieExW;Retrieves data stored in cookies associated with a specified URL.;LPCWSTR lpszUrl, LPCWSTR lpszCookieName, LPWSTR lpszCookieData, LPDWORD lpdwSize, DWORD dwFlags, LPVOID lpReserved
InternetGetCookieW;Retrieves the cookie for the specified URL.;LPCWSTR lpszUrl, LPCWSTR lpszCookieName, LPWSTR lpszCookieData, LPDWORD lpdwSize
InternetGetLastResponseInfoA;Retrieves the last error description or server response on the thread calling this function.;LPDWORD lpdwError, LPSTR lpszBuffer, LPDWORD lpdwBufferLength
InternetGetLastResponseInfoW;Retrieves the last error description or server response on the thread calling this function.;LPDWORD lpdwError, LPWSTR lpszBuffer, LPDWORD lpdwBufferLength
InternetGetPerSiteCookieDecisionA;Retrieves a decision on cookies for a given domain.;LPCSTR pchHostName, unsigned long *pResult
InternetGetPerSiteCookieDecisionW;Retrieves a decision on cookies for a given domain.;LPCWSTR pchHostName, unsigned long *pResult
InternetGoOnlineA;Prompts the user for permission to initiate connection to a URL.;LPCSTR lpszURL, HWND hwndParent, DWORD dwFlags
InternetGoOnline;Prompts the user for permission to initiate connection to a URL.;LPSTR lpszURL, HWND hwndParent, DWORD dwFlags
InternetGoOnlineW;Prompts the user for permission to initiate connection to a URL.;LPCWSTR lpszURL, HWND hwndParent, DWORD dwFlags
InternetHangUp;Instructs the modem to disconnect from the Internet.;DWORD_PTR dwConnection, DWORD dwReserved
InternetInitializeAutoProxyDll;There are two WinINet functions named InternetInitializeAutoProxyDll.;DWORD dwReserved
InternetLockRequestFile;Places a lock on the file that is being used.;HINTERNET hInternet, HANDLE *lphLockRequestInfo
InternetOpenA;Initializes an application's use of the WinINet functions.;LPCSTR lpszAgent, DWORD dwAccessType, LPCSTR lpszProxy, LPCSTR lpszProxyBypass, DWORD dwFlags
InternetOpenUrlA;Opens a resource specified by a complete FTP or HTTP URL.;HINTERNET hInternet, LPCSTR lpszUrl, LPCSTR lpszHeaders, DWORD dwHeadersLength, DWORD dwFlags, DWORD_PTR dwContext
InternetOpenUrlW;Opens a resource specified by a complete FTP or HTTP URL.;HINTERNET hInternet, LPCWSTR lpszUrl, LPCWSTR lpszHeaders, DWORD dwHeadersLength, DWORD dwFlags, DWORD_PTR dwContext
InternetOpenW;Initializes an application's use of the WinINet functions.;LPCWSTR lpszAgent, DWORD dwAccessType, LPCWSTR lpszProxy, LPCWSTR lpszProxyBypass, DWORD dwFlags
InternetQueryDataAvailable;Queries the server to determine the amount of data available.;HINTERNET hFile, LPDWORD lpdwNumberOfBytesAvailable, DWORD dwFlags, DWORD_PTR dwContext
InternetQueryOptionA;Queries an Internet option on the specified handle.;HINTERNET hInternet, DWORD dwOption, LPVOID lpBuffer, LPDWORD lpdwBufferLength
InternetQueryOptionW;Queries an Internet option on the specified handle.;HINTERNET hInternet, DWORD dwOption, LPVOID lpBuffer, LPDWORD lpdwBufferLength
InternetReadFileExA;Reads data from a handle opened by the InternetOpenUrl or HttpOpenRequest function.;HINTERNET hFile, LPINTERNET_BUFFERSA lpBuffersOut, DWORD dwFlags, DWORD_PTR dwContext
InternetReadFileExW;Reads data from a handle opened by the InternetOpenUrl or HttpOpenRequest function.;HINTERNET hFile, LPINTERNET_BUFFERSW lpBuffersOut, DWORD dwFlags, DWORD_PTR dwContext
InternetReadFile;Reads data from a handle opened by the InternetOpenUrl, FtpOpenFile, or HttpOpenRequest function.;HINTERNET hFile, LPVOID lpBuffer, DWORD dwNumberOfBytesToRead, LPDWORD lpdwNumberOfBytesRead
InternetSetCookieA;Creates a cookie associated with the specified URL.;LPCSTR lpszUrl, LPCSTR lpszCookieName, LPCSTR lpszCookieData
InternetSetCookieEx2;Creates a cookie associated with the specified URL.;PCWSTR pcwszUrl, const INTERNET_COOKIE2 *pCookie, PCWSTR pcwszP3PPolicy, DWORD dwFlags, PDWORD pdwCookieState
InternetSetCookieExA;The InternetSetCookieEx function creates a cookie with a specified name that is associated with a specified URL. This function differs from the InternetSetCookie function by being able to create third-party cookies.;LPCSTR lpszUrl, LPCSTR lpszCookieName, LPCSTR lpszCookieData, DWORD dwFlags, DWORD_PTR dwReserved
InternetSetCookieExW;The InternetSetCookieEx function creates a cookie with a specified name that is associated with a specified URL. This function differs from the InternetSetCookie function by being able to create third-party cookies.;LPCWSTR lpszUrl, LPCWSTR lpszCookieName, LPCWSTR lpszCookieData, DWORD dwFlags, DWORD_PTR dwReserved
InternetSetCookieW;Creates a cookie associated with the specified URL.;LPCWSTR lpszUrl, LPCWSTR lpszCookieName, LPCWSTR lpszCookieData
InternetSetDialStateA;Not supported.This function is obsolete. Do not use.;LPCSTR lpszConnectoid, DWORD dwState, DWORD dwReserved
InternetSetDialState;Not supported.This function is obsolete. Do not use.;LPCSTR lpszConnectoid, DWORD dwState, DWORD dwReserved
InternetSetDialStateW;Not supported.This function is obsolete. Do not use.;LPCWSTR lpszConnectoid, DWORD dwState, DWORD dwReserved
InternetSetFilePointer;Sets a file position for InternetReadFile. This is a synchronous call; however, subsequent calls to InternetReadFile might block or return pending if the data is not available from the cache and the server does not support random access.;HINTERNET hFile, LONG lDistanceToMove, PLONG lpDistanceToMoveHigh, DWORD dwMoveMethod, DWORD_PTR dwContext
InternetSetOptionA;Sets an Internet option.;HINTERNET hInternet, DWORD dwOption, LPVOID lpBuffer, DWORD dwBufferLength
InternetSetOptionExA;Not supported.Implemented only as a stub that calls the InternetSetOption function; InternetSetOptionEx has no functionality of its own. Do not use this function at this time.;HINTERNET hInternet, DWORD dwOption, LPVOID lpBuffer, DWORD dwBufferLength, DWORD dwFlags
InternetSetOptionExW;Not supported.Implemented only as a stub that calls the InternetSetOption function; InternetSetOptionEx has no functionality of its own. Do not use this function at this time.;HINTERNET hInternet, DWORD dwOption, LPVOID lpBuffer, DWORD dwBufferLength, DWORD dwFlags
InternetSetOptionW;Sets an Internet option.;HINTERNET hInternet, DWORD dwOption, LPVOID lpBuffer, DWORD dwBufferLength
InternetSetPerSiteCookieDecisionA;Sets a decision on cookies for a given domain.;LPCSTR pchHostName, DWORD dwDecision
InternetSetPerSiteCookieDecisionW;Sets a decision on cookies for a given domain.;LPCWSTR pchHostName, DWORD dwDecision
InternetSetStatusCallbackA;;HINTERNET hInternet, INTERNET_STATUS_CALLBACK lpfnInternetCallback
InternetSetStatusCallback;Sets up a callback function that WinINet functions can call as progress is made during an operation.;HINTERNET hInternet, INTERNET_STATUS_CALLBACK lpfnInternetCallback
InternetSetStatusCallbackW;;HINTERNET hInternet, INTERNET_STATUS_CALLBACK lpfnInternetCallback
InternetTimeFromSystemTimeA;Formats a date and time according to the HTTP version 1.0 specification.;const SYSTEMTIME *pst, DWORD dwRFC, LPSTR lpszTime, DWORD cbTime
InternetTimeFromSystemTime;Formats a date and time according to the HTTP version 1.0 specification.;const SYSTEMTIME *pst, DWORD dwRFC, LPSTR lpszTime, DWORD cbTime
InternetTimeFromSystemTimeW;Formats a date and time according to the HTTP version 1.0 specification.;const SYSTEMTIME *pst, DWORD dwRFC, LPWSTR lpszTime, DWORD cbTime
InternetTimeToSystemTimeA;Converts an HTTP time/date string to a SYSTEMTIME structure.;LPCSTR lpszTime, SYSTEMTIME *pst, DWORD dwReserved
InternetTimeToSystemTime;Converts an HTTP time/date string to a SYSTEMTIME structure.;LPCSTR lpszTime, SYSTEMTIME *pst, DWORD dwReserved
InternetTimeToSystemTimeW;Converts an HTTP time/date string to a SYSTEMTIME structure.;LPCWSTR lpszTime, SYSTEMTIME *pst, DWORD dwReserved
InternetUnlockRequestFile;Unlocks a file that was locked using InternetLockRequestFile.;HANDLE hLockRequestInfo
InternetWriteFile;Writes data to an open Internet file.;HINTERNET hFile, LPCVOID lpBuffer, DWORD dwNumberOfBytesToWrite, LPDWORD lpdwNumberOfBytesWritten
IntersectClipRect;The IntersectClipRect function creates a new clipping region from the intersection of the current clipping region and the specified rectangle.;HDC hdc, int left, int top, int right, int bottom
IntersectRect;The IntersectRect function calculates the intersection of two source rectangles and places the coordinates of the intersection rectangle into the destination rectangle.;LPRECT lprcDst, const RECT *lprcSrc1, const RECT *lprcSrc2
IntlStrEqNA;Performs a case-sensitive comparison of a specified number of characters from the beginning of two localized strings.;s1, s2, nChar
IntlStrEqNIA;Performs a case-insensitive comparison of a specified number of characters from the beginning of two localized strings.;s1, s2, nChar
IntlStrEqNIW;Performs a case-insensitive comparison of a specified number of characters from the beginning of two localized strings.;s1, s2, nChar
IntlStrEqNW;Performs a case-sensitive comparison of a specified number of characters from the beginning of two localized strings.;s1, s2, nChar
IntlStrEqWorkerA;Compares a specified number of characters from the beginning of two localized strings.;BOOL fCaseSens, LPCSTR lpString1, LPCSTR lpString2, int nChar
IntlStrEqWorkerW;Compares a specified number of characters from the beginning of two localized strings.;BOOL fCaseSens, LPCWSTR lpString1, LPCWSTR lpString2, int nChar
InvalidateRect;The InvalidateRect function adds a rectangle to the specified window's update region. The update region represents the portion of the window's client area that must be redrawn.;HWND hWnd, const RECT *lpRect, BOOL bErase
InvalidateRgn;The InvalidateRgn function invalidates the client area within the specified region by adding it to the current update region of a window.;HWND hWnd, HRGN hRgn, BOOL bErase
InventoryNtmsLibrary;The InventoryNtmsLibrary function queues an inventory of the specified library. If the library is busy, RSM queues InventoryNtmsLibrary and returns success.;HANDLE hSession, LPNTMS_GUID lpLibraryId, DWORD dwAction
InvertRect;The InvertRect function inverts a rectangle in a window by performing a logical NOT operation on the color values for each pixel in the rectangle's interior.;HDC hDC, const RECT *lprc
InvertRgn;The InvertRgn function inverts the colors in the specified region.;HDC hdc, HRGN hrgn
ioctlsocket;The ioctlsocket function controls the I/O mode of a socket.;SOCKET s, long cmd, u_long *argp
IpReleaseAddress;The IpReleaseAddress function releases an IPv4 address previously obtained through the Dynamic Host Configuration Protocol (DHCP).;PIP_ADAPTER_INDEX_MAP AdapterInfo
IpRenewAddress;The IpRenewAddressfunction renews a lease on an IPv4 address previously obtained through Dynamic Host Configuration Protocol (DHCP).;PIP_ADAPTER_INDEX_MAP AdapterInfo
I_RpcBindingInqLocalClientPID;Obtains a client process ID.;RPC_BINDING_HANDLE Binding, unsigned long *Pid
I_RpcExceptionFilter;Determines whether an exception is fatal or non-fatal;unsigned long ExceptionCode
IsApiSetImplemented;The IsApiSetImplemented function tests if a specified API set is present on the computer.;PCSTR Contract
IsBadCodePtr;Determines whether the calling process has read access to the memory at the specified address.;FARPROC lpfn
IsBadReadPtr;Verifies that the calling process has read access to the specified range of memory.;const VOID *lp, UINT_PTR ucb
IsBadStringPtrA;Verifies that the calling process has read access to the specified range of memory.;LPCSTR lpsz, UINT_PTR ucchMax
IsBadStringPtrW;Verifies that the calling process has read access to the specified range of memory.;LPCWSTR lpsz, UINT_PTR ucchMax
IsBadWritePtr;Verifies that the calling process has write access to the specified range of memory.;LPVOID lp, UINT_PTR ucb
IsCatalogFile;Retrieves a Boolean value that indicates whether the specified file is a catalog file.;HANDLE hFile, WCHAR *pwszFileName
IsCharAlphaA;Determines whether a character is an alphabetical character. This determination is based on the semantics of the language selected by the user during setup or through Control Panel.;CHAR ch
IsCharAlphaNumericA;Determines whether a character is either an alphabetical or a numeric character. This determination is based on the semantics of the language selected by the user during setup or through Control Panel.;CHAR ch
IsCharAlphaNumericW;Determines whether a character is either an alphabetical or a numeric character. This determination is based on the semantics of the language selected by the user during setup or through Control Panel.;WCHAR ch
IsCharAlphaW;Determines whether a character is an alphabetical character. This determination is based on the semantics of the language selected by the user during setup or through Control Panel.;WCHAR ch
IsCharLowerA;Determines whether a character is lowercase. This determination is based on the semantics of the language selected by the user during setup or through Control Panel.;CHAR ch
IsCharLowerW;;WCHAR ch
IsCharSpaceA;Determines whether a character represents a space.;CHAR wch
IsCharSpaceW;Determines whether a character represents a space.;WCHAR wch
IsCharUpperA;Determines whether a character is uppercase. This determination is based on the semantics of the language selected by the user during setup or through Control Panel.;CHAR ch
IsCharUpperW;Determines whether a character is uppercase. This determination is based on the semantics of the language selected by the user during setup or through Control Panel.;WCHAR ch
IsChild;Determines whether a window is a child window or descendant window of a specified parent window.;HWND hWndParent, HWND hWnd
IsClipboardFormatAvailable;Determines whether the clipboard contains data in the specified format.;UINT format
IsDaclCanonical;The IsDaclCanonical method determines whether the ACEs contained in the specified DACL structure are ordered according to the definition of DACL ordering implemented by the client.;PACL pDacl
IsDBCSLeadByte;Determines if a specified character is a lead byte for the system default Windows ANSI code page (CP_ACP). A lead byte is the first byte of a two-byte character in a double-byte character set (DBCS) for the code page.;BYTE TestChar
IsDBCSLeadByteEx;Determines if a specified character is potentially a lead byte. A lead byte is the first byte of a two-byte character in a double-byte character set (DBCS) for the code page.;UINT CodePage, BYTE TestChar
IsDebuggerPresent;Determines whether the calling process is being debugged by a user-mode debugger.;
IsDestinationReachableA;The IsDestinationReachable function determines whether or not a specified destination can be reached, and provides Quality of Connection (QOC) information for a destination.;LPCSTR lpszDestination, LPQOCINFO lpQOCInfo
IsDestinationReachableW;The IsDestinationReachable function determines whether or not a specified destination can be reached, and provides Quality of Connection (QOC) information for a destination.;LPCWSTR lpszDestination, LPQOCINFO lpQOCInfo
IsDialogMessageA;Determines whether a message is intended for the specified dialog box and, if it is, processes the message.;HWND hDlg, LPMSG lpMsg
IsDialogMessageW;Determines whether a message is intended for the specified dialog box and, if it is, processes the message.;HWND hDlg, LPMSG lpMsg
IsDirty;The IsDirty method returns a value indicating whether data in the attachment snap-in has been modified since it was last saved.;LPTSTR lpTemplateName
IsDlgButtonChecked;The IsDlgButtonChecked function determines whether a button control is checked or whether a three-state button control is checked, unchecked, or indeterminate.;HWND hDlg, int nIDButton
IsEnclaveTypeSupported;Retrieves whether the specified type of enclave is supported.;DWORD flEnclaveType
IsErrorPropagationEnabled;Indicates whether the CoreApplication.UnhandledErrorDetected event occurs for the errors that are returned by the delegate registered as a callback function for a Windows Runtime API event or the completion of an asynchronous method.;
IsFunctionalLevelUpgradeSupported;Gets a Boolean value that indicates whether the version of this authorization store can be upgraded.;LONG lFunctionalLevel, VARIANT_BOOL *pbSupported
IsGUIThread;Determines whether the calling thread is already a GUI thread. It can also optionally convert the thread to a GUI thread.;BOOL bConvert
IS_HIGH_SURROGATE;Determines if a character is a UTF-16 high surrogate code point, ranging from 0xd800 to 0xdbff, inclusive.;wch
IsHungAppWindow;Determines whether the system considers that a specified application is not responding.;HWND hwnd
IsIconic;Determines whether the specified window is minimized (iconic).;HWND hWnd
IsImmersiveProcess;Determines whether the process belongs to a Windows Store app.;HANDLE hProcess
IsIndexed;Reports whether the data in the column is indexed.;LONG *pIndexed
IsInRoleAssignment;Checks whether the principal represented by the current client context is a member of the specified role in the specified scope.;BSTR bstrScopeName, BSTR bstrRoleName, VARIANT_BOOL *pbIsInRole
IsInternetESCEnabled;Determines whether Windows Internet Explorer is in the Enhanced Security Configuration.;
IS_INTRESOURCE;Determines whether a value is an integer identifier for a resource.;_r
IS_LOW_SURROGATE;Determines if a character is a UTF-16 low surrogate code point, ranging from 0xdc00 to 0xdfff, inclusive.;wch
IsMenu;Determines whether a handle is a menu handle.;HMENU hMenu
IsMouseInPointerEnabled;Indicates whether EnableMouseInPointer is set for the mouse to act as a pointer input device and send WM_POINTER messages.;
IsMSCEPStoreEmpty;Always returns VARIANT_TRUE. It should not be used.;VARIANT_BOOL *pbEmpty
IsNativeVhdBoot;Indicates if the OS was booted from a VHD container.;PBOOL NativeVhdBoot
IsNetworkAlive;The IsNetworkAlive function determines whether or not a local system is connected to a network, and identifies the type of network connection, for example, a LAN, WAN, or both.;LPDWORD lpdwFlags
IsNLSDefinedString;Determines if each character in a string has a defined result for a specified NLS capability.;NLS_FUNCTION Function, DWORD dwFlags, LPNLSVERSIONINFO lpVersionInformation, LPCWSTR lpString, INT cchStr
IsNormalizedString;Verifies that a string is normalized according to Unicode 4.0 TR#15. For more information, see Using Unicode Normalization to Represent Strings.;NORM_FORM NormForm, LPCWSTR lpString, int cwLength
IsOS;Checks for specified operating systems and operating system features.;DWORD dwOS
IS_POINTER_CANCELED_WPARAM;Checks whether the specified pointer input ended abruptly, or was invalid, indicating the interaction was not completed.;wParam
IS_POINTER_FIFTHBUTTON_WPARAM;Checks whether the specified pointer took fifth action.;wParam
IS_POINTER_FIRSTBUTTON_WPARAM;Checks whether the specified pointer took first action.;wParam
IS_POINTER_FLAG_SET_WPARAM;Checks whether a pointer macro sets the specified flag.;wParam, flag
IS_POINTER_FOURTHBUTTON_WPARAM;Checks whether the specified pointer took fourth action.;wParam
IS_POINTER_INCONTACT_WPARAM;Checks whether the specified pointer is in contact.;wParam
IS_POINTER_INRANGE_WPARAM;Checks whether the specified pointer is in range.;wParam
IS_POINTER_NEW_WPARAM;Checks whether the specified pointer is a new pointer.;wParam
IS_POINTER_SECONDBUTTON_WPARAM;Checks whether the specified pointer took second action.;wParam
IS_POINTER_THIRDBUTTON_WPARAM;Checks whether the specified pointer took third action.;wParam
IsProcessCritical;Determines whether the specified process is considered critical.;HANDLE hProcess, PBOOL Critical
IsProcessDPIAware;IsProcessDPIAware may be altered or unavailable. Instead, use GetProcessDPIAwareness.;
IsProcessorFeaturePresent;Determines whether the specified processor feature is supported by the current computer.;DWORD ProcessorFeature
IsPropertyEditable;Indicates to the caller whether a specified property can be edited.;CASetupProperty propertyId, VARIANT_BOOL *pbEditable
IsRectEmpty;The IsRectEmpty function determines whether the specified rectangle is empty.;const RECT *lprc
IsSmartCard;Retrieves a Boolean value that indicates whether any of the cryptographic providers associated with the request object is a smart card provider.;VARIANT_BOOL *pValue
IsStringSupported;Returns a value that indicates whether a word, date, time, number, or other text that is passed in is contained in the dictionary.The results of this test depend on the factoid setting.;HRECOCONTEXT hrc, ULONG wcString, const WCHAR *pwcString
IS_SURROGATE_PAIR;Determines if the specified code units form a UTF-16 surrogate pair.;hs, ls
IsSystemResumeAutomatic;Determines the current state of the computer.;
IsTextUnicode;Determines if a buffer is likely to contain a form of Unicode text.;const VOID *lpv, int iSize, LPINT lpiResult
IsThreadAFiber;Determines whether the current thread is a fiber.;
IsThreadpoolTimerSet;Determines whether the specified timer object is currently set.;PTP_TIMER pti
IsTokenRestricted;Indicates whether a token contains a list of restricted security identifiers (SIDs).;HANDLE TokenHandle
IsTouchWindow;Checks whether a specified window is touch-capable and, optionally, retrieves the modifier flags set for the window's touch capability.;HWND hwnd, PULONG pulFlags
IStream_Copy;Copies a stream to another stream.;IStream *pstmFrom, IStream *pstmTo, DWORD cb
IStream_ReadPidl;Reads a pointer to an item identifier list (PIDL) from an IStream object into a PIDLIST_RELATIVE object.;IStream *pstm, PIDLIST_RELATIVE *ppidlOut
IStream_Read;Reads bytes from a specified stream and returns a value that indicates whether all bytes were successfully read.;IStream *pstm, void *pv, ULONG cb
IStream_ReadStr;Reads from a stream and writes into a string.;IStream *pstm, PWSTR *ppsz
IStream_Reset;Moves the seek position in a specified stream to the beginning of the stream.;IStream *pstm
IStream_Size;Retrieves the size, in bytes, of a specified stream.;IStream *pstm, ULARGE_INTEGER *pui
IStream_WritePidl;Writes a pointer to an item identifier list (PIDL) from a PCUIDLIST_RELATIVE object into an IStream object.;IStream *pstm, PCUIDLIST_RELATIVE pidlWrite
IStream_WriteStr;Reads from a string and writes into a stream.;IStream *pstm, PCWSTR psz
IStream_Write;Writes data of unknown format from a buffer to a specified stream.;IStream *pstm, const void *pv, ULONG cb
IsUpdateNeeded;Checks whether the persisted version of this authorization store is newer than the cached version.;VARIANT_BOOL *pbIsUpdateNeeded
IsUserCetAvailableInEnvironment;Queries whether user-mode Hardware-enforced Stack Protection is available for the specified environment.;DWORD UserCetEnvironment
IsValidAcl;Validates an access control list (ACL).;PACL pAcl
IsValidCertificate;Verifies the certificate against the certification authority (CA) key and checks that the certificate has not been revoked. This method was first defined in the ICertAdmin interface.;const BSTR strConfig, const BSTR strSerialNumber, LONG *pDisposition
IsValidCodePage;Determines if a specified code page is valid.;UINT CodePage
IsValidDpiAwarenessContext;Determines if a specified DPI_AWARENESS_CONTEXT is valid and supported by the current system.;DPI_AWARENESS_CONTEXT value
IsValidLanguageGroup;Determines if a language group is installed or supported on the operating system. For more information, see NLS Terminology.;LGRPID LanguageGroup, DWORD dwFlags
IsValidLocale;Determines if the specified locale is installed or supported on the operating system. For more information, see Locales and Languages.;LCID Locale, DWORD dwFlags
IsValidLocaleName;Determines if the specified locale name is valid for a locale that is installed or supported on the operating system.Note  An application running only on Windows Vista and later should call this function in preference to IsValidLocale to determine the validity of a supplemental locale.;LPCWSTR lpLocaleName
IsValidNLSVersion;Determines if the NLS version is valid for a given NLS function.;NLS_FUNCTION function, LPCWSTR lpLocaleName, LPNLSVERSIONINFOEX lpVersionInformation
IsValidSecurityDescriptor;Determines whether the components of a security descriptor are valid.;PSECURITY_DESCRIPTOR pSecurityDescriptor
IsValidSid;Validates a security identifier (SID) by verifying that the revision number is within a known range, and that the number of subauthorities is less than the maximum.;PSID pSid
IsWellKnownSid;Compares a SID to a well-known SID and returns TRUE if they match.;PSID pSid, WELL_KNOWN_SID_TYPE WellKnownSidType
IsWindow;Determines whether the specified window handle identifies an existing window.;HWND hWnd
IsWindowEnabled;Determines whether the specified window is enabled for mouse and keyboard input.;HWND hWnd
IsWindowUnicode;Determines whether the specified window is a native Unicode window.;HWND hWnd
IsWindowVisible;Determines the visibility state of the specified window.;HWND hWnd
IsWinEventHookInstalled;Determines whether there is an installed WinEvent hook that might be notified of a specified event.;DWORD event
IsWow64GuestMachineSupported;Determines which architectures are supported (under WOW64) on the given machine architecture.;USHORT WowGuestMachine, BOOL *MachineIsSupported
IsWow64Message;Determines whether the last message read from the current thread's queue originated from a WOW64 process.;
IsWow64Process2;Determines whether the specified process is running under WOW64; also returns additional machine process and architecture information.;HANDLE hProcess, USHORT *pProcessMachine, USHORT *pNativeMachine
IsWow64Process;Determines whether the specified process is running under WOW64 or an Intel64 of x64 processor.;HANDLE hProcess, PBOOL Wow64Process
IsZoomed;Determines whether a window is maximized.;HWND hWnd
IUnknown_AddRef_Proxy;The IUnknown_AddRef_Proxy function implements the AddRef method for all interface proxies.;IUnknown *This
IUnknown_AtomicRelease;Releases a Component Object Model (COM) pointer and sets it to NULL.;void **ppunk
IUnknown_GetSite;Calls the specified object's IObjectWithSite::GetSite method.;IUnknown *punk, REFIID riid, void **ppv
IUnknown_GetWindow;Attempts to retrieve a window handle from a Component Object Model (COM) object by querying for various interfaces that have a GetWindow method.;IUnknown *punk, HWND *phwnd
IUnknown_QueryInterface_Proxy;The IUnknown_QueryInterface_Proxy function implements the QueryInterface method for all interface proxies.;IUnknown *This, REFIID riid, void **ppvObject
IUnknown_QueryService;Retrieves an interface for a service from a specified object.;IUnknown *punk, REFGUID guidService, REFIID riid, void **ppvOut
IUnknown_Release_Proxy;The IUnknown_Release_Proxy function implements the Release method for all interface proxies.;IUnknown *This
IUnknown_Set;Changes the value of a Component Object Model (COM) interface pointer and releases the previous interface.;IUnknown **ppunk, IUnknown *punk
IUnknown_SetSite;Sets the specified object's site by calling its IObjectWithSite::SetSite method.;IUnknown *punk, IUnknown *punkSite
joyConfigChanged;The joyConfigChanged function informs the joystick driver that the configuration has changed and should be reloaded from the registry.;DWORD dwFlags
joyGetDevCaps;The joyGetDevCaps function queries a joystick to determine its capabilities.;UINT uJoyID, LPJOYCAPS pjc, UINT cbjc
joyGetDevCapsW;The joyGetDevCaps function queries a joystick to determine its capabilities.;UINT_PTR uJoyID, LPJOYCAPSW pjc, UINT cbjc
joyGetNumDevs;The joyGetNumDevs function queries the joystick driver for the number of joysticks it supports.;
joyGetPosEx;The joyGetPosEx function queries a joystick for its position and button status.;UINT uJoyID, LPJOYINFOEX pji
joyGetPos;The joyGetPos function queries a joystick for its position and button status.;UINT uJoyID, LPJOYINFO pji
joyGetThreshold;The joyGetThreshold function queries a joystick for its current movement threshold.;UINT uJoyID, LPUINT puThreshold
joyReleaseCapture;The joyReleaseCapture function releases the specified captured joystick.;UINT uJoyID
joySetCapture;The joySetCapture function captures a joystick by causing its messages to be sent to the specified window.;HWND hwnd, UINT uJoyID, UINT uPeriod, BOOL fChanged
joySetThreshold;The joySetThreshold function sets the movement threshold of a joystick.;UINT uJoyID, UINT uThreshold
keybd_event;Synthesizes a keystroke.;BYTE bVk, BYTE bScan, DWORD dwFlags, ULONG_PTR dwExtraInfo
KeyCredentialManagerFreeInformation;API to free the KeyCredentialManagerInfo pointer variable from the KeyCredentialManagerGetInformation call.;KeyCredentialManagerInfo *keyCredentialManagerInfo
KeyCredentialManagerGetInformation;API to get a unique identifier of the users enrollment.;KeyCredentialManagerInfo **keyCredentialManagerInfo
KeyCredentialManagerGetOperationErrorStates;Prerequisite API to call to determine if the operation will be successful prior.;KeyCredentialManagerOperationType keyCredentialManagerOperationType, BOOL *isReady, KeyCredentialManagerOperationErrorStates *keyCredentialManagerOperationErrorStates
KeyCredentialManagerShowUIOperation;API to perform the requested WHFB operation.;HWND hWndOwner, KeyCredentialManagerOperationType keyCredentialManagerOperationType
KillTimer;Destroys the specified timer.;HWND hWnd, UINT_PTR uIDEvent
KspDeleteContextFn;Deletes a security context.;LSA_SEC_HANDLE ContextId, PLSA_SEC_HANDLE LsaContextId ) {...}
KspMakeSignatureFn;Generates a signature based on the specified message and security context.;LSA_SEC_HANDLE ContextId, ULONG fQOP, PSecBufferDesc Message, ULONG MessageSeqNo ) {...}
KspVerifySignatureFn;Verifies that the message received is correct according to the signature.;LSA_SEC_HANDLE ContextId, PSecBufferDesc Message, ULONG MessageSeqNo, PULONG pfQOP ) {...}
LCIDToLocaleName;Converts a locale identifier to a locale name.;LCID Locale, LPWSTR lpName, int cchName, DWORD dwFlags
_lclose;The _lclose function closes the specified file so that it is no longer available for reading or writing. This function is provided for compatibility with 16-bit versions of Windows. Win32-based applications should use the CloseHandle function.;HFILE hFile
LCMapStringA;For a locale specified by identifier, maps one input character string to another using a specified transformation, or generates a sort key for the input string.;LCID Locale, DWORD dwMapFlags, LPCSTR lpSrcStr, int cchSrc, LPSTR lpDestStr, int cchDest
LCMapStringEx;For a locale specified by name, maps an input character string to another using a specified transformation, or generates a sort key for the input string.Note  The application should call this function in preference to LCMapString if designed to run only on Windows Vista and later.;LPCWSTR lpLocaleName, DWORD dwMapFlags, LPCWSTR lpSrcStr, int cchSrc, LPWSTR lpDestStr, int cchDest, LPNLSVERSIONINFO lpVersionInformation, LPVOID lpReserved, LPARAM sortHandle
LCMapStringW;For a locale specified by identifier, maps one input character string to another using a specified transformation, or generates a sort key for the input string.;LCID Locale, DWORD dwMapFlags, LPCWSTR lpSrcStr, int cchSrc, LPWSTR lpDestStr, int cchDest
_lcreat;Creates or opens the specified file.;LPCSTR lpPathName, int iAttribute
ldap_abandon;A client calls ldap_abandon to cancel an in-process asynchronous LDAP call.;LDAP *ld, ULONG msgid
ldap_addA;Initiates an asynchronous add operation to a directory tree.;LDAP *ld, PSTR dn, LDAPModA * [] attrs
ldap_add_extA;The ldap_add_ext function initiates an asynchronous add operation to a tree. The parent of the entry added must exist, or the parent must be empty (equal to the distinguished name of the root) for an add operation to succeed.;LDAP *ld, const PSTR dn, LDAPModA * [] attrs, PLDAPControlA *ServerControls, PLDAPControlA *ClientControls, ULONG *MessageNumber
ldap_add_ext_sA;The ldap_add_ext_s function initiates a synchronous add operation to a tree. For an add operation to succeed, the parent of the entry added must exist, or the parent must be empty (equal to the distinguished name of the root).;LDAP *ld, const PSTR dn, LDAPModA * [] attrs, PLDAPControlA *ServerControls, PLDAPControlA *ClientControls
ldap_add_ext_s;The ldap_add_ext_s function initiates a synchronous add operation to a tree. For an add operation to succeed, the parent of the entry added must exist, or the parent must be empty (equal to the distinguished name of the root).;LDAP *ld, const PSTR dn, LDAPModA * [] attrs, PLDAPControlA *ServerControls, PLDAPControlA *ClientControls
ldap_add_ext_sW;The ldap_add_ext_s function initiates a synchronous add operation to a tree. For an add operation to succeed, the parent of the entry added must exist, or the parent must be empty (equal to the distinguished name of the root).;LDAP *ld, const PWSTR dn, LDAPModW * [] attrs, PLDAPControlW *ServerControls, PLDAPControlW *ClientControls
ldap_add_ext;The ldap_add_ext function initiates an asynchronous add operation to a tree. The parent of the entry added must exist, or the parent must be empty (equal to the distinguished name of the root) for an add operation to succeed.;LDAP *ld, const PSTR dn, LDAPModA * [] attrs, PLDAPControlA *ServerControls, PLDAPControlA *ClientControls, ULONG *MessageNumber
ldap_add_extW;The ldap_add_ext function initiates an asynchronous add operation to a tree. The parent of the entry added must exist, or the parent must be empty (equal to the distinguished name of the root) for an add operation to succeed.;LDAP *ld, const PWSTR dn, LDAPModW * [] attrs, PLDAPControlW *ServerControls, PLDAPControlW *ClientControls, ULONG *MessageNumber
ldap_add;Initiates an asynchronous add operation to a directory tree.;LDAP *ld, PSTR dn, LDAPMod * [] attrs
ldap_add_sA;The ldap_add_s function initiates a synchronous add operation that adds an entry to a tree. The parent of the entry being added must already exist or the parent must be empty (equal to the root distinguished name) for an add operation to succeed.;LDAP *ld, PSTR dn, LDAPModA * [] attrs
ldap_add_s;The ldap_add_s function initiates a synchronous add operation that adds an entry to a tree. The parent of the entry being added must already exist or the parent must be empty (equal to the root distinguished name) for an add operation to succeed.;LDAP *ld, PSTR dn, LDAPMod * [] attrs
ldap_add_sW;The ldap_add_s function initiates a synchronous add operation that adds an entry to a tree. The parent of the entry being added must already exist or the parent must be empty (equal to the root distinguished name) for an add operation to succeed.;LDAP *ld, PWSTR dn, LDAPModW * [] attrs
ldap_addW;Initiates an asynchronous add operation to a directory tree.;LDAP *ld, PWSTR dn, LDAPModW * [] attrs
ldap_bindA;Asynchronously authenticates a client with the LDAP server.;LDAP *ld, PSTR dn, PCHAR cred, ULONG method
ldap_bind;Asynchronously authenticates a client with the LDAP server.;LDAP *ld, const PSTR dn, const PCHAR cred, ULONG method
ldap_bind_sA;Synchronously authenticates a client to the LDAP server.;LDAP *ld, PSTR dn, PCHAR cred, ULONG method
ldap_bind_s;Synchronously authenticates a client to the LDAP server.;LDAP *ld, const PSTR dn, const PCHAR cred, ULONG method
ldap_bind_sW;Synchronously authenticates a client to the LDAP server.;LDAP *ld, PWSTR dn, PWCHAR cred, ULONG method
ldap_bindW;Asynchronously authenticates a client with the LDAP server.;LDAP *ld, PWSTR dn, PWCHAR cred, ULONG method
ldap_check_filterA;The ldap_check_filter function is used to verify filter syntax.;LDAP *ld, PSTR SearchFilter
ldap_check_filterW;The ldap_check_filter function is used to verify filter syntax.;LDAP *ld, PWSTR SearchFilter
ldap_cleanup;Warning  The ldap_cleanup function may cause unpredictable behavior at DLL unload time so, there is no way to safely clean up resources when dynamically loading and unloading the wldap32.dll.Because of this, resource leaks can occur on unload of the library. Use of ldap_cleanup is therefore not recommended and, is at your own risk. .;HANDLE hInstance
ldap_close_extended_op;The ldap_close_extended_op function ends a request that was made by calling ldap_extended_operation.;LDAP *ld, ULONG MessageNumber
ldap_compareA;Use the ldap_compare function to determine whether an attribute for a given entry holds a known value.;LDAP *ld, const PSTR dn, const PSTR attr, PSTR value
ldap_compare_extA;Use the ldap_compare_ext function to determine if an attribute, for a given entry, holds a known value.;LDAP *ld, const PSTR dn, const PSTR Attr, const PSTR Value, berval *Data, PLDAPControlA *ServerControls, PLDAPControlA *ClientControls, ULONG *MessageNumber
ldap_compare_ext_sA;Use the ldap_compare_ext_s function to determine if an attribute, for a given entry, holds a known value.;LDAP *ld, const PSTR dn, const PSTR Attr, const PSTR Value, berval *Data, PLDAPControlA *ServerControls, PLDAPControlA *ClientControls
ldap_compare_ext_s;Use the ldap_compare_ext_s function to determine if an attribute, for a given entry, holds a known value.;LDAP *ld, const PSTR dn, const PSTR Attr, const PSTR Value, berval *Data, PLDAPControlA *ServerControls, PLDAPControlA *ClientControls
ldap_compare_ext_sW;Use the ldap_compare_ext_s function to determine if an attribute, for a given entry, holds a known value.;LDAP *ld, const PWSTR dn, const PWSTR Attr, const PWSTR Value, berval *Data, PLDAPControlW *ServerControls, PLDAPControlW *ClientControls
ldap_compare_ext;Use the ldap_compare_ext function to determine if an attribute, for a given entry, holds a known value.;LDAP *ld, const PSTR dn, const PSTR Attr, const PSTR Value, berval *Data, PLDAPControlA *ServerControls, PLDAPControlA *ClientControls, ULONG *MessageNumber
ldap_compare_extW;Use the ldap_compare_ext function to determine if an attribute, for a given entry, holds a known value.;LDAP *ld, const PWSTR dn, const PWSTR Attr, const PWSTR Value, berval *Data, PLDAPControlW *ServerControls, PLDAPControlW *ClientControls, ULONG *MessageNumber
ldap_compare_sA;Use the ldap_compare_s function to determine whether an attribute for a given entry holds a known value.;LDAP *ld, const PSTR dn, const PSTR attr, PSTR value
ldap_compare_s;Use the ldap_compare_s function to determine whether an attribute for a given entry holds a known value.;LDAP *ld, const PSTR dn, const PSTR attr, PSTR value
ldap_compare_sW;Use the ldap_compare_s function to determine whether an attribute for a given entry holds a known value.;LDAP *ld, const PWSTR dn, const PWSTR attr, PWSTR value
ldap_compare;Use the ldap_compare function to determine whether an attribute for a given entry holds a known value.;LDAP *ld, const PSTR dn, const PSTR attr, PSTR value
ldap_compareW;Use the ldap_compare function to determine whether an attribute for a given entry holds a known value.;LDAP *ld, const PWSTR dn, const PWSTR attr, PWSTR value
ldap_connect;The ldap_connect function establishes a connection with the server.;LDAP *ld, l_timeval *timeout
ldap_conn_from_msg;Returns the LDAP session handle (connection pointer) for a particular message.;LDAP *PrimaryConn, LDAPMessage *res
ldap_control_freeA;The ldap_control_free function frees an LDAPControl structure.;LDAPControlA *Controls
ldap_control_free;The ldap_control_free function frees an LDAPControl structure.;LDAPControlA *Control
ldap_control_freeW;The ldap_control_free function frees an LDAPControl structure.;LDAPControlW *Control
ldap_controls_freeA;Frees an array of LDAPControl structures.;LDAPControlA **Controls
ldap_controls_free;Frees an array of LDAPControl structures.;LDAPControlA **Controls
ldap_controls_freeW;Frees an array of LDAPControl structures.;LDAPControlW **Control
ldap_count_entries;The ldap_count_entries function counts the number of search entries that a server returned.;LDAP *ld, LDAPMessage *res
ldap_count_references;The ldap_count_references function counts the number of subordinate references that were returned by the server in a response to a search request.;LDAP *ld, LDAPMessage *res
ldap_count_valuesA;The ldap_count_values function counts the number of values in a list.;PCHAR *vals
ldap_count_values_len;Counts the number of values in a list.;berval **vals
ldap_count_values;The ldap_count_values function counts the number of values in a list.;PCHAR *vals
ldap_count_valuesW;The ldap_count_values function counts the number of values in a list.;PWCHAR *vals
ldap_create_page_controlA;Use the ldap_create_page_control function to create a basic control for paging results. Support for controls is available effective with LDAP 3, but whether the page control is supported or not is dependent on the particular server.;PLDAP ExternalHandle, ULONG PageSize, berval *Cookie, UCHAR IsCritical, PLDAPControlA *Control
ldap_create_page_control;Use the ldap_create_page_control function to create a basic control for paging results. Support for controls is available effective with LDAP 3, but whether the page control is supported or not is dependent on the particular server.;PLDAP ExternalHandle, ULONG PageSize, berval *Cookie, UCHAR IsCritical, PLDAPControlA *Control
ldap_create_page_controlW;Use the ldap_create_page_control function to create a basic control for paging results. Support for controls is available effective with LDAP 3, but whether the page control is supported or not is dependent on the particular server.;PLDAP ExternalHandle, ULONG PageSize, berval *Cookie, UCHAR IsCritical, PLDAPControlW *Control
ldap_create_sort_controlA;The ldap_create_sort_control function is used to format a list of sort keys into a search control. Support for controls is available effective with LDAP 3, but whether the sort control is supported or not is dependent on the particular server.;PLDAP ExternalHandle, PLDAPSortKeyA *SortKeys, UCHAR IsCritical, PLDAPControlA *Control
ldap_create_sort_control;The ldap_create_sort_control function is used to format a list of sort keys into a search control. Support for controls is available effective with LDAP 3, but whether the sort control is supported or not is dependent on the particular server.;PLDAP ExternalHandle, PLDAPSortKeyA *SortKeys, UCHAR IsCritical, PLDAPControlA *Control
ldap_create_sort_controlW;The ldap_create_sort_control function is used to format a list of sort keys into a search control. Support for controls is available effective with LDAP 3, but whether the sort control is supported or not is dependent on the particular server.;PLDAP ExternalHandle, PLDAPSortKeyW *SortKeys, UCHAR IsCritical, PLDAPControlW *Control
ldap_create_vlv_controlA;The ldap_create_vlv_control function is used to create the request control (LDAP_CONTROL_VLVREQUEST) on the server.;PLDAP ExternalHandle, PLDAPVLVInfo VlvInfo, UCHAR IsCritical, PLDAPControlA *Control
ldap_create_vlv_controlW;The ldap_create_vlv_control function is used to create the request control (LDAP_CONTROL_VLVREQUEST) on the server.;PLDAP ExternalHandle, PLDAPVLVInfo VlvInfo, UCHAR IsCritical, PLDAPControlW *Control
ldap_deleteA;The ldap_delete function deletes an entry from the directory tree.;LDAP *ld, const PSTR dn
ldap_delete_extA;The ldap_delete_ext function is an extended routine that removes a leaf entry from the directory tree.;LDAP *ld, const PSTR dn, PLDAPControlA *ServerControls, PLDAPControlA *ClientControls, ULONG *MessageNumber
ldap_delete_ext_sA;The ldap_delete_ext_s function is an extended routine that performs a synchronous operation to remove a leaf entry from the directory tree.;LDAP *ld, const PSTR dn, PLDAPControlA *ServerControls, PLDAPControlA *ClientControls
ldap_delete_ext_s;The ldap_delete_ext_s function is an extended routine that performs a synchronous operation to remove a leaf entry from the directory tree.;LDAP *ld, const PSTR dn, PLDAPControlA *ServerControls, PLDAPControlA *ClientControls
ldap_delete_ext_sW;The ldap_delete_ext_s function is an extended routine that performs a synchronous operation to remove a leaf entry from the directory tree.;LDAP *ld, const PWSTR dn, PLDAPControlW *ServerControls, PLDAPControlW *ClientControls
ldap_delete_ext;The ldap_delete_ext function is an extended routine that removes a leaf entry from the directory tree.;LDAP *ld, const PSTR dn, PLDAPControlA *ServerControls, PLDAPControlA *ClientControls, ULONG *MessageNumber
ldap_delete_extW;The ldap_delete_ext function is an extended routine that removes a leaf entry from the directory tree.;LDAP *ld, const PWSTR dn, PLDAPControlW *ServerControls, PLDAPControlW *ClientControls, ULONG *MessageNumber
ldap_delete_sA;The ldap_delete_s function is a synchronous operation that removes a leaf entry from the directory tree.;LDAP *ld, const PSTR dn
ldap_delete_s;The ldap_delete_s function is a synchronous operation that removes a leaf entry from the directory tree.;LDAP *ld, PSTR dn
ldap_delete_sW;The ldap_delete_s function is a synchronous operation that removes a leaf entry from the directory tree.;LDAP *ld, const PWSTR dn
ldap_delete;The ldap_delete function deletes an entry from the directory tree.;LDAP *ld, PSTR dn
ldap_deleteW;The ldap_delete function deletes an entry from the directory tree.;LDAP *ld, const PWSTR dn
ldap_dn2ufnA;Converts a distinguished name to a user-friendly format.;const PSTR dn
ldap_dn2ufn;Converts a distinguished name to a user-friendly format.;const PSTR dn
ldap_dn2ufnW;Converts a distinguished name to a user-friendly format.;const PWSTR dn
ldap_encode_sort_controlA;The ldap_encode_sort_control function formats a list of sort keys into a search control. This function is obsolete. Instead, use ldap_create_sort_control.;PLDAP ExternalHandle, PLDAPSortKeyA *SortKeys, PLDAPControlA Control, BOOLEAN Criticality
ldap_encode_sort_control;The ldap_encode_sort_control function formats a list of sort keys into a search control. This function is obsolete. Instead, use ldap_create_sort_control.;PLDAP ExternalHandle, PLDAPSortKeyA *SortKeys, PLDAPControlA Control, BOOLEAN Criticality
ldap_encode_sort_controlW;The ldap_encode_sort_control function formats a list of sort keys into a search control. This function is obsolete. Instead, use ldap_create_sort_control.;PLDAP ExternalHandle, PLDAPSortKeyW *SortKeys, PLDAPControlW Control, BOOLEAN Criticality
ldap_err2stringA;Converts a numeric LDAP error code into a null-terminated character string that describes the error.;ULONG err
ldap_err2string;Converts a numeric LDAP error code into a null-terminated character string that describes the error.;ULONG err
ldap_err2stringW;Converts a numeric LDAP error code into a null-terminated character string that describes the error.;ULONG err
ldap_escape_filter_elementA;The ldap_escape_filter_element function converts a filter element to a null-terminated character string that can be passed safely in a search filter.;PCHAR sourceFilterElement, ULONG sourceLength, PCHAR destFilterElement, ULONG destLength
ldap_escape_filter_element;The ldap_escape_filter_element function converts a filter element to a null-terminated character string that can be passed safely in a search filter.;PCHAR sourceFilterElement, ULONG sourceLength, PCHAR destFilterElement, ULONG destLength
ldap_escape_filter_elementW;The ldap_escape_filter_element function converts a filter element to a null-terminated character string that can be passed safely in a search filter.;PCHAR sourceFilterElement, ULONG sourceLength, PWCHAR destFilterElement, ULONG destLength
ldap_explode_dnA;The ldap_explode_dn function breaks up an entry name into its component parts.;const PSTR dn, ULONG notypes
ldap_explode_dn;The ldap_explode_dn function breaks up an entry name into its component parts.;const PSTR dn, ULONG notypes
ldap_explode_dnW;The ldap_explode_dn function breaks up an entry name into its component parts.;const PWSTR dn, ULONG notypes
ldap_extended_operationA;The ldap_extended_operation function enables you to pass extended LDAP operations to the server.;LDAP *ld, const PSTR Oid, berval *Data, PLDAPControlA *ServerControls, PLDAPControlA *ClientControls, ULONG *MessageNumber
ldap_extended_operation_sA;Used to pass extended LDAP operations to the server.;LDAP *ExternalHandle, PSTR Oid, berval *Data, PLDAPControlA *ServerControls, PLDAPControlA *ClientControls, PCHAR *ReturnedOid, berval **ReturnedData
ldap_extended_operation_sW;Used to pass extended LDAP operations to the server.;LDAP *ExternalHandle, PWSTR Oid, berval *Data, PLDAPControlW *ServerControls, PLDAPControlW *ClientControls, PWCHAR *ReturnedOid, berval **ReturnedData
ldap_extended_operation;The ldap_extended_operation function enables you to pass extended LDAP operations to the server.;LDAP *ld, const PSTR Oid, berval *Data, PLDAPControlA *ServerControls, PLDAPControlA *ClientControls, ULONG *MessageNumber
ldap_extended_operationW;The ldap_extended_operation function enables you to pass extended LDAP operations to the server.;LDAP *ld, const PWSTR Oid, berval *Data, PLDAPControlW *ServerControls, PLDAPControlW *ClientControls, ULONG *MessageNumber
ldap_first_attributeA;Returns the first attribute.;LDAP *ld, LDAPMessage *entry, BerElement **ptr
ldap_first_attribute;Returns the first attribute.;LDAP *ld, LDAPMessage *entry, BerElement **ptr
ldap_first_attributeW;Returns the first attribute.;LDAP *ld, LDAPMessage *entry, BerElement **ptr
ldap_first_entry;The ldap_first_entry function returns the first entry of a message.;LDAP *ld, LDAPMessage *res
ldap_first_reference;Returns the first reference from a message.;LDAP *ld, LDAPMessage *res
ldap_free_controlsA;Obsolete function which frees an array of LDAPControl structures.;LDAPControlA **Controls
ldap_free_controls;Obsolete function which frees an array of LDAPControl structures.;LDAPControlA **Controls
ldap_free_controlsW;Obsolete function which frees an array of LDAPControl structures.;LDAPControlW **Controls
ldap_get_dnA;The ldap_get_dn function retrieves the distinguished name for a given entry.;LDAP *ld, LDAPMessage *entry
ldap_get_dn;The ldap_get_dn function retrieves the distinguished name for a given entry.;LDAP *ld, LDAPMessage *entry
ldap_get_dnW;The ldap_get_dn function retrieves the distinguished name for a given entry.;LDAP *ld, LDAPMessage *entry
LdapGetLastError;The LdapGetLastError function retrieves the last error code returned by an LDAP call.;
ldap_get_next_page;Returns the next page in a sequence of asynchronous paged search results.;PLDAP ExternalHandle, PLDAPSearch SearchHandle, ULONG PageSize, ULONG *MessageNumber
ldap_get_next_page_s;Returns the next page in a sequence of synchronous paged search results.;PLDAP ExternalHandle, PLDAPSearch SearchHandle, l_timeval *timeout, ULONG PageSize, ULONG *TotalCount, LDAPMessage **Results
ldap_get_option;Retrieves the current values of session-wide parameters.;LDAP *ld, int option, void *outvalue
ldap_get_optionW;Retrieves the current values of session-wide parameters.;LDAP *ld, int option, void *outvalue
ldap_get_paged_count;Records the number of paged results that the server has returned for a search.;PLDAP ExternalHandle, PLDAPSearch SearchBlock, ULONG *TotalCount, PLDAPMessage Results
ldap_get_valuesA;The ldap_get_values function retrieves the list of values of a given attribute.;LDAP *ld, LDAPMessage *entry, const PSTR attr
ldap_get_values_lenA;The ldap_get_values_len function retrieves the list of values for a given attribute.;LDAP *ExternalHandle, LDAPMessage *Message, const PSTR attr
ldap_get_values_len;The ldap_get_values_len function retrieves the list of values for a given attribute.;LDAP *ExternalHandle, LDAPMessage *Message, const PSTR attr
ldap_get_values_lenW;The ldap_get_values_len function retrieves the list of values for a given attribute.;LDAP *ExternalHandle, LDAPMessage *Message, const PWSTR attr
ldap_get_values;The ldap_get_values function retrieves the list of values of a given attribute.;LDAP *ld, LDAPMessage *entry, const PSTR attr
ldap_get_valuesW;The ldap_get_values function retrieves the list of values of a given attribute.;LDAP *ld, LDAPMessage *entry, const PWSTR attr
ldap_initA;Initializes a session with an LDAP server.;const PSTR HostName, ULONG PortNumber
ldap_init;Initializes a session with an LDAP server.;PSTR HostName, ULONG PortNumber
ldap_initW;Initializes a session with an LDAP server.;const PWSTR HostName, ULONG PortNumber
LdapMapErrorToWin32;The LdapMapErrorToWin32 function translates an LdapError value to the closest Win32 error code.;ULONG LdapError
ldap_memfreeA;Frees memory allocated from the LDAP heap.;PCHAR Block
ldap_memfree;Frees memory allocated from the LDAP heap.;PCHAR Block
ldap_memfreeW;Frees memory allocated from the LDAP heap.;PWCHAR Block
ldap_modifyA;The ldap_modify function changes an existing entry.;LDAP *ld, PSTR dn, LDAPModA * [] mods
ldap_modify_extA;The ldap_modify_ext function changes an existing entry.;LDAP *ld, const PSTR dn, LDAPModA * [] mods, PLDAPControlA *ServerControls, PLDAPControlA *ClientControls, ULONG *MessageNumber
ldap_modify_ext_sA;The ldap_modify_ext_s function changes an existing entry.;LDAP *ld, const PSTR dn, LDAPModA * [] mods, PLDAPControlA *ServerControls, PLDAPControlA *ClientControls
ldap_modify_ext_s;The ldap_modify_ext_s function changes an existing entry.;LDAP *ld, const PSTR dn, LDAPModA * [] mods, PLDAPControlA *ServerControls, PLDAPControlA *ClientControls
ldap_modify_ext_sW;The ldap_modify_ext_s function changes an existing entry.;LDAP *ld, const PWSTR dn, LDAPModW * [] mods, PLDAPControlW *ServerControls, PLDAPControlW *ClientControls
ldap_modify_ext;The ldap_modify_ext function changes an existing entry.;LDAP *ld, const PSTR dn, LDAPModA * [] mods, PLDAPControlA *ServerControls, PLDAPControlA *ClientControls, ULONG *MessageNumber
ldap_modify_extW;The ldap_modify_ext function changes an existing entry.;LDAP *ld, const PWSTR dn, LDAPModW * [] mods, PLDAPControlW *ServerControls, PLDAPControlW *ClientControls, ULONG *MessageNumber
ldap_modify_sA;The ldap_modify_s function changes an existing entry.;LDAP *ld, PSTR dn, LDAPModA * [] mods
ldap_modify_s;The ldap_modify_s function changes an existing entry.;LDAP *ld, PSTR dn, LDAPModA * [] mods
ldap_modify_sW;The ldap_modify_s function changes an existing entry.;LDAP *ld, PWSTR dn, LDAPModW * [] mods
ldap_modify;The ldap_modify function changes an existing entry.;LDAP *ld, PSTR dn, LDAPModA * [] mods
ldap_modifyW;The ldap_modify function changes an existing entry.;LDAP *ld, PWSTR dn, LDAPModW * [] mods
ldap_modrdn2A;The ldap_modrdn2 function changes the relative distinguished name of an LDAP entry.;LDAP *ExternalHandle, const PSTR DistinguishedName, const PSTR NewDistinguishedName, INT DeleteOldRdn
ldap_modrdn2_sA;The ldap_modrdn2_s function changes the relative distinguished name of an LDAP entry.;LDAP *ExternalHandle, const PSTR DistinguishedName, const PSTR NewDistinguishedName, INT DeleteOldRdn
ldap_modrdn2_s;The ldap_modrdn2_s function changes the relative distinguished name of an LDAP entry.;LDAP *ExternalHandle, const PSTR DistinguishedName, const PSTR NewDistinguishedName, INT DeleteOldRdn
ldap_modrdn2_sW;The ldap_modrdn2_s function changes the relative distinguished name of an LDAP entry.;LDAP *ExternalHandle, const PWSTR DistinguishedName, const PWSTR NewDistinguishedName, INT DeleteOldRdn
ldap_modrdn2;The ldap_modrdn2 function changes the relative distinguished name of an LDAP entry.;LDAP *ExternalHandle, const PSTR DistinguishedName, const PSTR NewDistinguishedName, INT DeleteOldRdn
ldap_modrdn2W;The ldap_modrdn2 function changes the relative distinguished name of an LDAP entry.;LDAP *ExternalHandle, const PWSTR DistinguishedName, const PWSTR NewDistinguishedName, INT DeleteOldRdn
ldap_modrdnA;The ldap_modrdn function changes the relative distinguished name of an LDAP entry.;LDAP *ExternalHandle, const PSTR DistinguishedName, const PSTR NewDistinguishedName
ldap_modrdn_sA;Changes the relative distinguished name of an LDAP entry.;LDAP *ExternalHandle, const PSTR DistinguishedName, const PSTR NewDistinguishedName
ldap_modrdn_s;Changes the relative distinguished name of an LDAP entry.;LDAP *ExternalHandle, const PSTR DistinguishedName, const PSTR NewDistinguishedName
ldap_modrdn_sW;Changes the relative distinguished name of an LDAP entry.;LDAP *ExternalHandle, const PWSTR DistinguishedName, const PWSTR NewDistinguishedName
ldap_modrdn;The ldap_modrdn function changes the relative distinguished name of an LDAP entry.;LDAP *ExternalHandle, const PSTR DistinguishedName, const PSTR NewDistinguishedName
ldap_modrdnW;The ldap_modrdn function changes the relative distinguished name of an LDAP entry.;LDAP *ExternalHandle, const PWSTR DistinguishedName, const PWSTR NewDistinguishedName
ldap_msgfree;The ldap_msgfree function frees the results obtained from a previous call to ldap_result, or to one of the synchronous search routines.;LDAPMessage *res
ldap_next_attributeA;Returns the next attribute.;LDAP *ld, LDAPMessage *entry, BerElement *ptr
ldap_next_attribute;Returns the next attribute.;LDAP *ld, LDAPMessage *entry, BerElement *ptr
ldap_next_attributeW;Returns the next attribute.;LDAP *ld, LDAPMessage *entry, BerElement *ptr
ldap_next_entry;The ldap_next_entry function retrieves an entry from a search result chain.;LDAP *ld, LDAPMessage *entry
ldap_next_reference;Retrieves a reference from a search result chain.;LDAP *ld, LDAPMessage *entry
ldap_openA;ldap_open is not recommended for use.;const PSTR HostName, ULONG PortNumber
ldap_open;ldap_open is not recommended for use.;PSTR HostName, ULONG PortNumber
ldap_openW;ldap_open is not recommended for use.;const PWSTR HostName, ULONG PortNumber
ldap_parse_extended_resultA;The ldap_parse_extended_result parses the results of an LDAP extended operation.;LDAP *Connection, LDAPMessage *ResultMessage, PSTR *ResultOID, berval **ResultData, BOOLEAN Freeit
ldap_parse_extended_resultW;The ldap_parse_extended_result parses the results of an LDAP extended operation.;LDAP *Connection, LDAPMessage *ResultMessage, PWSTR *ResultOID, berval **ResultData, BOOLEAN Freeit
ldap_parse_page_controlA;The ldap_parse_page_control parses the results of a search into pages.;PLDAP ExternalHandle, PLDAPControlA *ServerControls, ULONG *TotalCount, berval **Cookie
ldap_parse_page_control;The ldap_parse_page_control parses the results of a search into pages.;PLDAP ExternalHandle, PLDAPControlA *ServerControls, ULONG *TotalCount, berval **Cookie
ldap_parse_page_controlW;The ldap_parse_page_control parses the results of a search into pages.;PLDAP ExternalHandle, PLDAPControlW *ServerControls, ULONG *TotalCount, berval **Cookie
ldap_parse_referenceA;The ldap_parse_reference function returns a list of subordinate referrals in a search response message.;LDAP *Connection, LDAPMessage *ResultMessage, PCHAR **Referrals
ldap_parse_reference;The ldap_parse_reference function returns a list of subordinate referrals in a search response message.;LDAP *Connection, LDAPMessage *ResultMessage, PCHAR **Referrals
ldap_parse_referenceW;The ldap_parse_reference function returns a list of subordinate referrals in a search response message.;LDAP *Connection, LDAPMessage *ResultMessage, PWCHAR **Referrals
ldap_parse_resultA;The ldap_parse_result function parses responses from the server and returns the appropriate fields.;LDAP *Connection, LDAPMessage *ResultMessage, ULONG *ReturnCode, PSTR *MatchedDNs, PSTR *ErrorMessage, PZPSTR *Referrals, PLDAPControlA **ServerControls, BOOLEAN Freeit
ldap_parse_result;The ldap_parse_result function parses responses from the server and returns the appropriate fields.;LDAP *Connection, LDAPMessage *ResultMessage, ULONG *ReturnCode, PSTR *MatchedDNs, PSTR *ErrorMessage, PSTR **Referrals, PLDAPControlA **ServerControls, BOOLEAN Freeit
ldap_parse_resultW;The ldap_parse_result function parses responses from the server and returns the appropriate fields.;LDAP *Connection, LDAPMessage *ResultMessage, ULONG *ReturnCode, PWSTR *MatchedDNs, PWSTR *ErrorMessage, PZPWSTR *Referrals, PLDAPControlW **ServerControls, BOOLEAN Freeit
ldap_parse_sort_controlA;The ldap_parse_sort_control function parses the sort control returned by the server.;PLDAP ExternalHandle, PLDAPControlA *Control, ULONG *Result, PCHAR *Attribute
ldap_parse_sort_control;The ldap_parse_sort_control function parses the sort control returned by the server.;PLDAP ExternalHandle, PLDAPControlA *Control, ULONG *Result, PCHAR *Attribute
ldap_parse_sort_controlW;The ldap_parse_sort_control function parses the sort control returned by the server.;PLDAP ExternalHandle, PLDAPControlW *Control, ULONG *Result, PWCHAR *Attribute
ldap_parse_vlv_controlA;Used to find and parse VLV search results.;PLDAP ExternalHandle, PLDAPControlA *Control, PULONG TargetPos, PULONG ListCount, PBERVAL *Context, PINT ErrCode
ldap_parse_vlv_controlW;Used to find and parse VLV search results.;PLDAP ExternalHandle, PLDAPControlW *Control, PULONG TargetPos, PULONG ListCount, PBERVAL *Context, PINT ErrCode
ldap_perror;Obsolete function. It exists only for compatibility.;LDAP *ld, const PCHAR msg
ldap_rename_extA;The ldap_rename_ext function starts an asynchronous operation that changes the distinguished name of an entry in the directory. This function is available effective with LDAP 3.;LDAP *ld, const PSTR dn, const PSTR NewRDN, const PSTR NewParent, INT DeleteOldRdn, PLDAPControlA *ServerControls, PLDAPControlA *ClientControls, ULONG *MessageNumber
ldap_rename_ext_sA;The ldap_rename_ext_s function is a synchronous operation that changes the distinguished name of an entry in the directory. This function is available effective with LDAP 3.;LDAP *ld, const PSTR dn, const PSTR NewRDN, const PSTR NewParent, INT DeleteOldRdn, PLDAPControlA *ServerControls, PLDAPControlA *ClientControls
ldap_rename_ext_s;The ldap_rename_ext_s function is a synchronous operation that changes the distinguished name of an entry in the directory. This function is available effective with LDAP 3.;LDAP *ld, const PSTR dn, const PSTR NewRDN, const PSTR NewParent, INT DeleteOldRdn, PLDAPControlA *ServerControls, PLDAPControlA *ClientControls
ldap_rename_ext_sW;The ldap_rename_ext_s function is a synchronous operation that changes the distinguished name of an entry in the directory. This function is available effective with LDAP 3.;LDAP *ld, const PWSTR dn, const PWSTR NewRDN, const PWSTR NewParent, INT DeleteOldRdn, PLDAPControlW *ServerControls, PLDAPControlW *ClientControls
ldap_rename_ext;The ldap_rename_ext function starts an asynchronous operation that changes the distinguished name of an entry in the directory. This function is available effective with LDAP 3.;LDAP *ld, const PSTR dn, const PSTR NewRDN, const PSTR NewParent, INT DeleteOldRdn, PLDAPControlA *ServerControls, PLDAPControlA *ClientControls, ULONG *MessageNumber
ldap_rename_extW;The ldap_rename_ext function starts an asynchronous operation that changes the distinguished name of an entry in the directory. This function is available effective with LDAP 3.;LDAP *ld, const PWSTR dn, const PWSTR NewRDN, const PWSTR NewParent, INT DeleteOldRdn, PLDAPControlW *ServerControls, PLDAPControlW *ClientControls, ULONG *MessageNumber
ldap_result2error;The ldap_result2error function parses a message and returns the error code.;LDAP *ld, LDAPMessage *res, ULONG freeit
ldap_result;Obtains the result of an asynchronous operation.;LDAP *ld, ULONG msgid, ULONG all, PLDAP_TIMEVAL timeout, PLDAPMessage *res
ldap_sasl_bindA;The ldap_sasl_bind is an asynchronous function that authenticates a client to the LDAP server using SASL.;LDAP *ExternalHandle, const PSTR DistName, const PSTR AuthMechanism, const BERVAL *cred, PLDAPControlA *ServerCtrls, PLDAPControlA *ClientCtrls, int *MessageNumber
ldap_sasl_bind_sA;The ldap_sasl_bind_s function is a synchronous function that authenticates a client to the LDAP server using SASL.;LDAP *ExternalHandle, const PSTR DistName, const PSTR AuthMechanism, const BERVAL *cred, PLDAPControlA *ServerCtrls, PLDAPControlA *ClientCtrls, PBERVAL *ServerData
ldap_sasl_bind_sW;The ldap_sasl_bind_s function is a synchronous function that authenticates a client to the LDAP server using SASL.;LDAP *ExternalHandle, const PWSTR DistName, const PWSTR AuthMechanism, const BERVAL *cred, PLDAPControlW *ServerCtrls, PLDAPControlW *ClientCtrls, PBERVAL *ServerData
ldap_sasl_bindW;The ldap_sasl_bind is an asynchronous function that authenticates a client to the LDAP server using SASL.;LDAP *ExternalHandle, const PWSTR DistName, const PWSTR AuthMechanism, const BERVAL *cred, PLDAPControlW *ServerCtrls, PLDAPControlW *ClientCtrls, int *MessageNumber
ldap_search_abandon_page;The ldap_search_abandon_page function terminates a paged-results search.;PLDAP ExternalHandle, PLDAPSearch SearchBlock
ldap_searchA;Searches the LDAP directory and returns a requested set of attributes for each matched entry.;LDAP *ld, const PSTR base, ULONG scope, const PSTR filter, PZPSTR attrs, ULONG attrsonly
ldap_search_extA;Searches the LDAP directory and returns a requested set of attributes for each matched entry.;LDAP *ld, const PSTR base, ULONG scope, const PSTR filter, PZPSTR attrs, ULONG attrsonly, PLDAPControlA *ServerControls, PLDAPControlA *ClientControls, ULONG TimeLimit, ULONG SizeLimit, ULONG *MessageNumber
ldap_search_ext_sA;Synchronously searches the LDAP directory and returns a requested set of attributes for each matched entry.;LDAP *ld, const PSTR base, ULONG scope, const PSTR filter, PZPSTR attrs, ULONG attrsonly, PLDAPControlA *ServerControls, PLDAPControlA *ClientControls, l_timeval *timeout, ULONG SizeLimit, PLDAPMessage *res
ldap_search_ext;Searches the LDAP directory and returns a requested set of attributes for each matched entry.;LDAP *ld, PSTR base, ULONG scope, PSTR filter, PZPSTR attrs, ULONG attrsonly, PLDAPControlA *ServerControls, PLDAPControlA *ClientControls, ULONG TimeLimit, ULONG SizeLimit, ULONG *MessageNumber
ldap_search_ext_s;Synchronously searches the LDAP directory and returns a requested set of attributes for each matched entry.;LDAP *ld, PSTR base, ULONG scope, PSTR filter, PZPSTR attrs, ULONG attrsonly, PLDAPControlA *ServerControls, PLDAPControlA *ClientControls, l_timeval *timeout, ULONG SizeLimit, PLDAPMessage *res
ldap_search_ext_sW;Synchronously searches the LDAP directory and returns a requested set of attributes for each matched entry.;LDAP *ld, const PWSTR base, ULONG scope, const PWSTR filter, PZPWSTR attrs, ULONG attrsonly, PLDAPControlW *ServerControls, PLDAPControlW *ClientControls, l_timeval *timeout, ULONG SizeLimit, PLDAPMessage *res
ldap_search_extW;Searches the LDAP directory and returns a requested set of attributes for each matched entry.;LDAP *ld, const PWSTR base, ULONG scope, const PWSTR filter, PZPWSTR attrs, ULONG attrsonly, PLDAPControlW *ServerControls, PLDAPControlW *ClientControls, ULONG TimeLimit, ULONG SizeLimit, ULONG *MessageNumber
ldap_search_init_pageA;Initializes a search block for a simple paged-results search.;PLDAP ExternalHandle, const PSTR DistinguishedName, ULONG ScopeOfSearch, const PSTR SearchFilter, PZPSTR AttributeList, ULONG AttributesOnly, PLDAPControlA *ServerControls, PLDAPControlA *ClientControls, ULONG PageTimeLimit, ULONG TotalSizeLimit, PLDAPSortKeyA *SortKeys
ldap_search_init_page;Initializes a search block for a simple paged-results search.;PLDAP ExternalHandle, const PSTR DistinguishedName, ULONG ScopeOfSearch, const PSTR SearchFilter, PZPSTR AttributeList, ULONG AttributesOnly, PLDAPControl *ServerControls, PLDAPControl *ClientControls, ULONG PageTimeLimit, ULONG TotalSizeLimit, PLDAPSortKey *SortKeys
ldap_search_init_pageW;Initializes a search block for a simple paged-results search.;PLDAP ExternalHandle, const PWSTR DistinguishedName, ULONG ScopeOfSearch, const PWSTR SearchFilter, PZPWSTR AttributeList, ULONG AttributesOnly, PLDAPControlW *ServerControls, PLDAPControlW *ClientControls, ULONG PageTimeLimit, ULONG TotalSizeLimit, PLDAPSortKeyW *SortKeys
ldap_search_sA;The ldap_search_s function synchronously searches the LDAP directory and returns a requested set of attributes for each matched entry.;LDAP *ld, const PSTR base, ULONG scope, const PSTR filter, PZPSTR attrs, ULONG attrsonly, LDAPMessage **res
ldap_search;Searches the LDAP directory and returns a requested set of attributes for each matched entry.;LDAP *ld, PSTR base, ULONG scope, PSTR filter, PZPSTR attrs, ULONG attrsonly
ldap_search_stA;The ldap_search_st function synchronously searches the LDAP directory and returns a requested set of attributes for each entry matched. An additional parameter specifies a local time-out for the search.;LDAP *ld, const PSTR base, ULONG scope, const PSTR filter, PZPSTR attrs, ULONG attrsonly, l_timeval *timeout, PLDAPMessage *res
ldap_search_s;The ldap_search_s function synchronously searches the LDAP directory and returns a requested set of attributes for each matched entry.;LDAP *ld, PSTR base, ULONG scope, PSTR filter, PZPSTR attrs, ULONG attrsonly, PLDAPMessage *res
ldap_search_st;The ldap_search_st function synchronously searches the LDAP directory and returns a requested set of attributes for each entry matched. An additional parameter specifies a local time-out for the search.;LDAP *ld, PSTR base, ULONG scope, PSTR filter, PZPSTR attrs, ULONG attrsonly, l_timeval *timeout, PLDAPMessage *res
ldap_search_stW;The ldap_search_st function synchronously searches the LDAP directory and returns a requested set of attributes for each entry matched. An additional parameter specifies a local time-out for the search.;LDAP *ld, const PWSTR base, ULONG scope, const PWSTR filter, PZPWSTR attrs, ULONG attrsonly, l_timeval *timeout, PLDAPMessage *res
ldap_search_sW;The ldap_search_s function synchronously searches the LDAP directory and returns a requested set of attributes for each matched entry.;LDAP *ld, const PWSTR base, ULONG scope, const PWSTR filter, PZPWSTR attrs, ULONG attrsonly, LDAPMessage **res
ldap_searchW;Searches the LDAP directory and returns a requested set of attributes for each matched entry.;LDAP *ld, const PWSTR base, ULONG scope, const PWSTR filter, PZPWSTR attrs, ULONG attrsonly
ldap_set_option;Sets options on connection blocks.;LDAP *ld, int option, const void *invalue
ldap_set_optionW;Sets options on connection blocks.;LDAP *ld, int option, const void *invalue
ldap_simple_bindA;Asynchronously authenticates a client to a server, using a plaintext password.;LDAP *ld, PSTR dn, PSTR passwd
ldap_simple_bind;Asynchronously authenticates a client to a server, using a plaintext password.;LDAP *ld, const PSTR dn, const PSTR passwd
ldap_simple_bind_sA;The ldap_simple_bind_s function synchronously authenticates a client to a server, using a plaintext password.;LDAP *ld, PSTR dn, PSTR passwd
ldap_simple_bind_s;The ldap_simple_bind_s function synchronously authenticates a client to a server, using a plaintext password.;LDAP *ld, const PSTR dn, const PSTR passwd
ldap_simple_bind_sW;The ldap_simple_bind_s function synchronously authenticates a client to a server, using a plaintext password.;LDAP *ld, PWSTR dn, PWSTR passwd
ldap_simple_bindW;Asynchronously authenticates a client to a server, using a plaintext password.;LDAP *ld, PWSTR dn, PWSTR passwd
ldap_sslinitA;Initializes a Secure Sockets Layer (SSL) session with an LDAP server.;PSTR HostName, ULONG PortNumber, int secure
ldap_sslinit;Initializes a Secure Sockets Layer (SSL) session with an LDAP server.;PSTR HostName, ULONG PortNumber, int secure
ldap_sslinitW;Initializes a Secure Sockets Layer (SSL) session with an LDAP server.;PWSTR HostName, ULONG PortNumber, int secure
ldap_start_tls_sA;Used in an active LDAP session to begin using TLS encryption.;PLDAP ExternalHandle, PULONG ServerReturnValue, LDAPMessage **result, PLDAPControlA *ServerControls, PLDAPControlA *ClientControls
ldap_start_tls_sW;Used in an active LDAP session to begin using TLS encryption.;PLDAP ExternalHandle, PULONG ServerReturnValue, LDAPMessage **result, PLDAPControlW *ServerControls, PLDAPControlW *ClientControls
ldap_stop_tls_s;Stops the encryption operation started by a call to ldap_start_tls_s.;PLDAP ExternalHandle
ldap_ufn2dnA;Converts a user-friendly name to a distinguished name.;const PSTR ufn, PSTR *pDn
ldap_ufn2dn;Converts a user-friendly name to a distinguished name.;const PSTR ufn, PSTR *pDn
ldap_ufn2dnW;Converts a user-friendly name to a distinguished name.;const PWSTR ufn, PWSTR *pDn
ldap_unbind_s;The ldap_unbind_s function synchronously frees resources associated with an LDAP session.;LDAP *ld
ldap_unbind;The ldap_unbind function frees resources associated with an LDAP session.;LDAP *ld
LdapUnicodeToUTF8;Converts Unicode strings to UTF-8.;LPCWSTR lpSrcStr, int cchSrc, LPSTR lpDestStr, int cchDest
LdapUTF8ToUnicode;Used to translate strings for modules that do not have the UTF-8 code page.;LPCSTR lpSrcStr, int cchSrc, LPWSTR lpDestStr, int cchDest
ldap_value_freeA;Frees a structure returned by ldap_get_values.;PCHAR *vals
ldap_value_free;Frees a structure returned by ldap_get_values.;PCHAR *vals
ldap_value_free_len;The ldap_value_free_len frees berval structures that were returned by ldap_get_values_len.;berval **vals
ldap_value_freeW;Frees a structure returned by ldap_get_values.;PWCHAR *vals
LeaveCriticalPolicySection;The LeaveCriticalPolicySection function resumes the background application of policy. This function closes the handle to the policy section.;HANDLE hSection
LeaveCriticalSection;Releases ownership of the specified critical section object.;LPCRITICAL_SECTION lpCriticalSection
LeaveCriticalSectionWhenCallbackReturns;Specifies the critical section that the thread pool will release when the current callback completes.;PTP_CALLBACK_INSTANCE pci, PCRITICAL_SECTION pcs
lineAccept;The lineAccept function accepts the specified offered call. It can optionally send the specified user-user information to the calling party.;HCALL hCall, LPCSTR lpsUserUserInfo, DWORD dwSize
lineAddProviderA;The lineAddProvider function installs a new telephony service provider into the telephony system.;LPCSTR lpszProviderFilename, HWND hwndOwner, LPDWORD lpdwPermanentProviderID
lineAddProvider;The lineAddProvider function installs a new telephony service provider into the telephony system.;LPCSTR lpszProviderFilename, HWND hwndOwner, LPDWORD lpdwPermanentProviderID
lineAddProviderW;The lineAddProvider function installs a new telephony service provider into the telephony system.;LPCWSTR lpszProviderFilename, HWND hwndOwner, LPDWORD lpdwPermanentProviderID
lineAddToConference;The lineAddToConference function adds the call specified by hConsultCall to the conference call specified by hConfCall.;HCALL hConfCall, HCALL hConsultCall
lineAgentSpecific;The lineAgentSpecific function allows the application to access proprietary handler-specific functions of the agent handler associated with the address.;HLINE hLine, DWORD dwAddressID, DWORD dwAgentExtensionIDIndex, LPVOID lpParams, DWORD dwSize
lineAnswer;The lineAnswer function answers the specified offering call.;HCALL hCall, LPCSTR lpsUserUserInfo, DWORD dwSize
lineBlindTransferA;The lineBlindTransfer function performs a blind or single-step transfer of the specified call to the specified destination address.;HCALL hCall, LPCSTR lpszDestAddress, DWORD dwCountryCode
lineBlindTransfer;The lineBlindTransfer function performs a blind or single-step transfer of the specified call to the specified destination address.;HCALL hCall, LPCSTR lpszDestAddress, DWORD dwCountryCode
lineBlindTransferW;The lineBlindTransfer function performs a blind or single-step transfer of the specified call to the specified destination address.;HCALL hCall, LPCWSTR lpszDestAddressW, DWORD dwCountryCode
lineClose;The lineClose function closes the specified open line device.;HLINE hLine
lineCompleteCall;The lineCompleteCall function specifies how a call that could not be connected normally should be completed instead.;HCALL hCall, LPDWORD lpdwCompletionID, DWORD dwCompletionMode, DWORD dwMessageID
lineCompleteTransfer;The lineCompleteTransfer function completes the transfer of the specified call to the party connected in the consultation call.;HCALL hCall, HCALL hConsultCall, LPHCALL lphConfCall, DWORD dwTransferMode
lineConfigDialogA;The lineConfigDialog function causes the provider of the specified line device to display a dialog box (attached to hwndOwner of the application) to allow the user to configure parameters related to the line device.;DWORD dwDeviceID, HWND hwndOwner, LPCSTR lpszDeviceClass
lineConfigDialogEditA;The lineConfigDialogEdit function causes the provider of the specified line device to display a dialog box (attached to hwndOwner of the application) to allow the user to configure parameters related to the line device.;DWORD dwDeviceID, HWND hwndOwner, LPCSTR lpszDeviceClass, LPVOID const lpDeviceConfigIn, DWORD dwSize, LPVARSTRING lpDeviceConfigOut
lineConfigDialogEdit;The lineConfigDialogEdit function causes the provider of the specified line device to display a dialog box (attached to hwndOwner of the application) to allow the user to configure parameters related to the line device.;DWORD dwDeviceID, HWND hwndOwner, LPCSTR lpszDeviceClass, LPVOID const lpDeviceConfigIn, DWORD dwSize, LPVARSTRING lpDeviceConfigOut
lineConfigDialogEditW;The lineConfigDialogEdit function causes the provider of the specified line device to display a dialog box (attached to hwndOwner of the application) to allow the user to configure parameters related to the line device.;DWORD dwDeviceID, HWND hwndOwner, LPCWSTR lpszDeviceClass, LPVOID const lpDeviceConfigIn, DWORD dwSize, LPVARSTRING lpDeviceConfigOut
lineConfigDialog;The lineConfigDialog function causes the provider of the specified line device to display a dialog box (attached to hwndOwner of the application) to allow the user to configure parameters related to the line device.;DWORD dwDeviceID, HWND hwndOwner, LPCSTR lpszDeviceClass
lineConfigDialogW;The lineConfigDialog function causes the provider of the specified line device to display a dialog box (attached to hwndOwner of the application) to allow the user to configure parameters related to the line device.;DWORD dwDeviceID, HWND hwndOwner, LPCWSTR lpszDeviceClass
lineConfigProvider;The lineConfigProvider function causes a service provider to display its configuration dialog box.;HWND hwndOwner, DWORD dwPermanentProviderID
lineCreateAgentA;The lineCreateAgent function creates a new Agent object. It generates a LINE_PROXYREQUEST message to be sent to a registered proxy function handler, referencing a LINEPROXYREQUEST structure of type LINEPROXYREQUEST_CREATEAGENT.;HLINE hLine, LPCSTR lpszAgentID, LPCSTR lpszAgentPIN, LPHAGENT lphAgent
lineCreateAgentSessionA;The lineCreateAgentSession function creates a new AgentSession object. It generates a LINE_PROXYREQUEST message to be sent to a registered proxy function handler, referencing a LINEPROXYREQUEST structure of type LINEPROXYREQUEST_CREATEAGENTSESSION.;HLINE hLine, HAGENT hAgent, LPCSTR lpszAgentPIN, DWORD dwWorkingAddressID, LPGUID lpGroupID, LPHAGENTSESSION lphAgentSession
lineCreateAgentSessionW;The lineCreateAgentSession function creates a new AgentSession object. It generates a LINE_PROXYREQUEST message to be sent to a registered proxy function handler, referencing a LINEPROXYREQUEST structure of type LINEPROXYREQUEST_CREATEAGENTSESSION.;HLINE hLine, HAGENT hAgent, LPCWSTR lpszAgentPIN, DWORD dwWorkingAddressID, LPGUID lpGroupID, LPHAGENTSESSION lphAgentSession
lineCreateAgentW;The lineCreateAgent function creates a new Agent object. It generates a LINE_PROXYREQUEST message to be sent to a registered proxy function handler, referencing a LINEPROXYREQUEST structure of type LINEPROXYREQUEST_CREATEAGENT.;HLINE hLine, LPCWSTR lpszAgentID, LPCWSTR lpszAgentPIN, LPHAGENT lphAgent
LineDDA;The LineDDA function determines which pixels should be highlighted for a line defined by the specified starting and ending points.;int xStart, int yStart, int xEnd, int yEnd, LINEDDAPROC lpProc, LPARAM data
lineDeallocateCall;Deallocates the specified call handle.;HCALL hCall
lineDevSpecificFeature;The lineDevSpecificFeature function enables service providers to provide access to features not offered by other TAPI functions.;HLINE hLine, DWORD dwFeature, LPVOID lpParams, DWORD dwSize
lineDevSpecific;The lineDevSpecific function enables service providers to provide access to features not offered by other TAPI functions.;HLINE hLine, DWORD dwAddressID, HCALL hCall, LPVOID lpParams, DWORD dwSize
lineDialA;The lineDial function dials the specified dialable number on the specified call.;HCALL hCall, LPCSTR lpszDestAddress, DWORD dwCountryCode
lineDial;The lineDial function dials the specified dialable number on the specified call.;HCALL hCall, LPCSTR lpszDestAddress, DWORD dwCountryCode
lineDialW;The lineDial function dials the specified dialable number on the specified call.;HCALL hCall, LPCWSTR lpszDestAddress, DWORD dwCountryCode
lineDrop;The lineDrop function drops or disconnects the specified call. The application has the option to specify user-user information to be transmitted as part of the call disconnect.;HCALL hCall, LPCSTR lpsUserUserInfo, DWORD dwSize
lineForwardA;The lineForward function forwards calls destined for the specified address on the specified line, according to the specified forwarding instructions.;HLINE hLine, DWORD bAllAddresses, DWORD dwAddressID, LPLINEFORWARDLIST const lpForwardList, DWORD dwNumRingsNoAnswer, LPHCALL lphConsultCall, LPLINECALLPARAMS const lpCallParams
lineForward;The lineForward function forwards calls destined for the specified address on the specified line, according to the specified forwarding instructions.;HLINE hLine, DWORD bAllAddresses, DWORD dwAddressID, LPLINEFORWARDLIST const lpForwardList, DWORD dwNumRingsNoAnswer, LPHCALL lphConsultCall, LPLINECALLPARAMS const lpCallParams
lineForwardW;The lineForward function forwards calls destined for the specified address on the specified line, according to the specified forwarding instructions.;HLINE hLine, DWORD bAllAddresses, DWORD dwAddressID, LPLINEFORWARDLIST const lpForwardList, DWORD dwNumRingsNoAnswer, LPHCALL lphConsultCall, LPLINECALLPARAMS const lpCallParams
lineGatherDigitsA;The lineGatherDigits function initiates the buffered gathering of digits on the specified call. The application specifies a buffer in which to place the digits and the maximum number of digits to be collected.;HCALL hCall, DWORD dwDigitModes, LPSTR lpsDigits, DWORD dwNumDigits, LPCSTR lpszTerminationDigits, DWORD dwFirstDigitTimeout, DWORD dwInterDigitTimeout
lineGatherDigits;The lineGatherDigits function initiates the buffered gathering of digits on the specified call. The application specifies a buffer in which to place the digits and the maximum number of digits to be collected.;HCALL hCall, DWORD dwDigitModes, LPSTR lpsDigits, DWORD dwNumDigits, LPCSTR lpszTerminationDigits, DWORD dwFirstDigitTimeout, DWORD dwInterDigitTimeout
lineGatherDigitsW;The lineGatherDigits function initiates the buffered gathering of digits on the specified call. The application specifies a buffer in which to place the digits and the maximum number of digits to be collected.;HCALL hCall, DWORD dwDigitModes, LPWSTR lpsDigits, DWORD dwNumDigits, LPCWSTR lpszTerminationDigits, DWORD dwFirstDigitTimeout, DWORD dwInterDigitTimeout
lineGenerateDigitsA;Initiates the generation of the specified digits on the specified call as inband tones using the specified signaling mode.;HCALL hCall, DWORD dwDigitMode, LPCSTR lpszDigits, DWORD dwDuration
lineGenerateDigits;Initiates the generation of the specified digits on the specified call as inband tones using the specified signaling mode.;HCALL hCall, DWORD dwDigitMode, LPCSTR lpszDigits, DWORD dwDuration
lineGenerateDigitsW;Initiates the generation of the specified digits on the specified call as inband tones using the specified signaling mode.;HCALL hCall, DWORD dwDigitMode, LPCWSTR lpszDigits, DWORD dwDuration
lineGenerateTone;The lineGenerateTone function generates the specified inband tone over the specified call.;HCALL hCall, DWORD dwToneMode, DWORD dwDuration, DWORD dwNumTones, LPLINEGENERATETONE const lpTones
lineGetAddressCapsA;The lineGetAddressCaps function queries the specified address on the specified line device to determine its telephony capabilities.;HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAddressID, DWORD dwAPIVersion, DWORD dwExtVersion, LPLINEADDRESSCAPS lpAddressCaps
lineGetAddressCaps;The lineGetAddressCaps function queries the specified address on the specified line device to determine its telephony capabilities.;HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAddressID, DWORD dwAPIVersion, DWORD dwExtVersion, LPLINEADDRESSCAPS lpAddressCaps
lineGetAddressCapsW;The lineGetAddressCaps function queries the specified address on the specified line device to determine its telephony capabilities.;HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAddressID, DWORD dwAPIVersion, DWORD dwExtVersion, LPLINEADDRESSCAPS lpAddressCaps
lineGetAddressIDA;The lineGetAddressID function returns the address identifier associated with an address in a different format on the specified line.;HLINE hLine, LPDWORD lpdwAddressID, DWORD dwAddressMode, LPCSTR lpsAddress, DWORD dwSize
lineGetAddressID;The lineGetAddressID function returns the address identifier associated with an address in a different format on the specified line.;HLINE hLine, LPDWORD lpdwAddressID, DWORD dwAddressMode, LPCSTR lpsAddress, DWORD dwSize
lineGetAddressIDW;The lineGetAddressID function returns the address identifier associated with an address in a different format on the specified line.;HLINE hLine, LPDWORD lpdwAddressID, DWORD dwAddressMode, LPCWSTR lpsAddress, DWORD dwSize
lineGetAddressStatusA;The lineGetAddressStatus function allows an application to query the specified address for its current status.;HLINE hLine, DWORD dwAddressID, LPLINEADDRESSSTATUS lpAddressStatus
lineGetAddressStatus;The lineGetAddressStatus function allows an application to query the specified address for its current status.;HLINE hLine, DWORD dwAddressID, LPLINEADDRESSSTATUS lpAddressStatus
lineGetAddressStatusW;The lineGetAddressStatus function allows an application to query the specified address for its current status.;HLINE hLine, DWORD dwAddressID, LPLINEADDRESSSTATUS lpAddressStatus
lineGetAgentActivityListA;The lineGetAgentActivityList function obtains the identities of activities that the application can select using lineSetAgentActivity to indicate what function the agent is actually performing at the moment.;HLINE hLine, DWORD dwAddressID, LPLINEAGENTACTIVITYLIST lpAgentActivityList
lineGetAgentActivityListW;The lineGetAgentActivityList function obtains the identities of activities that the application can select using lineSetAgentActivity to indicate what function the agent is actually performing at the moment.;HLINE hLine, DWORD dwAddressID, LPLINEAGENTACTIVITYLIST lpAgentActivityList
lineGetAgentCapsA;The lineGetAgentCaps function obtains the agent-related capabilities supported on the specified line device. If a specific agent is named, the capabilities include a listing of ACD groups into which the agent is permitted to log in.;HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAddressID, DWORD dwAppAPIVersion, LPLINEAGENTCAPS lpAgentCaps
lineGetAgentCapsW;The lineGetAgentCaps function obtains the agent-related capabilities supported on the specified line device. If a specific agent is named, the capabilities include a listing of ACD groups into which the agent is permitted to log in.;HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAddressID, DWORD dwAppAPIVersion, LPLINEAGENTCAPS lpAgentCaps
lineGetAgentGroupListA;The lineGetAgentGroupList function obtains the identities of agent groups (combination of queue, supervisor, skill level, and so on) into which the agent currently logged in on the workstation is permitted to log into on the automatic call distributor.;HLINE hLine, DWORD dwAddressID, LPLINEAGENTGROUPLIST lpAgentGroupList
lineGetAgentGroupListW;The lineGetAgentGroupList function obtains the identities of agent groups (combination of queue, supervisor, skill level, and so on) into which the agent currently logged in on the workstation is permitted to log into on the automatic call distributor.;HLINE hLine, DWORD dwAddressID, LPLINEAGENTGROUPLIST lpAgentGroupList
lineGetAgentInfo;The lineGetAgentInfo function returns a structure holding the ACD information associated with a particular agent handle.;HLINE hLine, HAGENT hAgent, LPLINEAGENTINFO lpAgentInfo
lineGetAgentSessionInfo;The lineGetAgentSessionInfo function returns a structure that holds the ACD information associated with a particular agent session handle.;HLINE hLine, HAGENTSESSION hAgentSession, LPLINEAGENTSESSIONINFO lpAgentSessionInfo
lineGetAgentSessionList;The lineGetAgentSessionList function returns a list of agent sessions created for the specified agent.;HLINE hLine, HAGENT hAgent, LPLINEAGENTSESSIONLIST lpAgentSessionList
lineGetAgentStatusA;The lineGetAgentStatus function obtains the agent-related status on the specified address.;HLINE hLine, DWORD dwAddressID, LPLINEAGENTSTATUS lpAgentStatus
lineGetAgentStatusW;The lineGetAgentStatus function obtains the agent-related status on the specified address.;HLINE hLine, DWORD dwAddressID, LPLINEAGENTSTATUS lpAgentStatus
lineGetAppPriorityA;Enables an application to determine whether or not it is in the handoff priority list for a particular media mode or Assisted Telephony request mode and, if so, its position in the priority list.;LPCSTR lpszAppFilename, DWORD dwMediaMode, LPLINEEXTENSIONID lpExtensionID, DWORD dwRequestMode, LPVARSTRING lpExtensionName, LPDWORD lpdwPriority
lineGetAppPriority;Enables an application to determine whether or not it is in the handoff priority list for a particular media mode or Assisted Telephony request mode and, if so, its position in the priority list.;LPCSTR lpszAppFilename, DWORD dwMediaMode, LPLINEEXTENSIONID lpExtensionID, DWORD dwRequestMode, LPVARSTRING lpExtensionName, LPDWORD lpdwPriority
lineGetAppPriorityW;Enables an application to determine whether or not it is in the handoff priority list for a particular media mode or Assisted Telephony request mode and, if so, its position in the priority list.;LPCWSTR lpszAppFilename, DWORD dwMediaMode, LPLINEEXTENSIONID lpExtensionID, DWORD dwRequestMode, LPVARSTRING lpExtensionName, LPDWORD lpdwPriority
lineGetCallInfoA;The lineGetCallInfo function enables an application to obtain fixed information about the specified call.;HCALL hCall, LPLINECALLINFO lpCallInfo
lineGetCallInfo;The lineGetCallInfo function enables an application to obtain fixed information about the specified call.;HCALL hCall, LPLINECALLINFO lpCallInfo
lineGetCallInfoW;The lineGetCallInfo function enables an application to obtain fixed information about the specified call.;HCALL hCall, LPLINECALLINFO lpCallInfo
lineGetCallStatus;The lineGetCallStatus function returns the current status of the specified call.;HCALL hCall, LPLINECALLSTATUS lpCallStatus
lineGetConfRelatedCalls;The lineGetConfRelatedCalls function returns a list of call handles that are part of the same conference call as the specified call.;HCALL hCall, LPLINECALLLIST lpCallList
lineGetCountryA;The lineGetCountry function fetches the stored dialing rules and other information related to a specified country/region, the first country/region in the country/region list, or all countries/regions.;DWORD dwCountryID, DWORD dwAPIVersion, LPLINECOUNTRYLIST lpLineCountryList
lineGetCountry;The lineGetCountry function fetches the stored dialing rules and other information related to a specified country/region, the first country/region in the country/region list, or all countries/regions.;DWORD dwCountryID, DWORD dwAPIVersion, LPLINECOUNTRYLIST lpLineCountryList
lineGetCountryW;The lineGetCountry function fetches the stored dialing rules and other information related to a specified country/region, the first country/region in the country/region list, or all countries/regions.;DWORD dwCountryID, DWORD dwAPIVersion, LPLINECOUNTRYLIST lpLineCountryList
lineGetDevCapsA;The lineGetDevCaps function queries a specified line device to determine its telephony capabilities. The returned information is valid for all addresses on the line device.;HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAPIVersion, DWORD dwExtVersion, LPLINEDEVCAPS lpLineDevCaps
lineGetDevCaps;The lineGetDevCaps function queries a specified line device to determine its telephony capabilities. The returned information is valid for all addresses on the line device.;HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAPIVersion, DWORD dwExtVersion, LPLINEDEVCAPS lpLineDevCaps
lineGetDevCapsW;The lineGetDevCaps function queries a specified line device to determine its telephony capabilities. The returned information is valid for all addresses on the line device.;HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAPIVersion, DWORD dwExtVersion, LPLINEDEVCAPS lpLineDevCaps
lineGetDevConfigA;The lineGetDevConfig function returns an &quot;opaque&quot; data structure object, the contents of which are specific to the line (service provider) and device class.;DWORD dwDeviceID, LPVARSTRING lpDeviceConfig, LPCSTR lpszDeviceClass
lineGetDevConfig;The lineGetDevConfig function returns an &quot;opaque&quot; data structure object, the contents of which are specific to the line (service provider) and device class.;DWORD dwDeviceID, LPVARSTRING lpDeviceConfig, LPCSTR lpszDeviceClass
lineGetDevConfigW;The lineGetDevConfig function returns an &quot;opaque&quot; data structure object, the contents of which are specific to the line (service provider) and device class.;DWORD dwDeviceID, LPVARSTRING lpDeviceConfig, LPCWSTR lpszDeviceClass
lineGetGroupListA;The lineGetGroupList function returns a list of ACD groups available on the ACD system.;HLINE hLine, LPLINEAGENTGROUPLIST lpGroupList
lineGetGroupListW;The lineGetGroupList function returns a list of ACD groups available on the ACD system.;HLINE hLine, LPLINEAGENTGROUPLIST lpGroupList
lineGetIconA;The lineGetIcon function allows an application to retrieve a service line device-specific (or provider-specific) icon for display to the user.;DWORD dwDeviceID, LPCSTR lpszDeviceClass, LPHICON lphIcon
lineGetIcon;The lineGetIcon function allows an application to retrieve a service line device-specific (or provider-specific) icon for display to the user.;DWORD dwDeviceID, LPCSTR lpszDeviceClass, LPHICON lphIcon
lineGetIconW;The lineGetIcon function allows an application to retrieve a service line device-specific (or provider-specific) icon for display to the user.;DWORD dwDeviceID, LPCWSTR lpszDeviceClass, LPHICON lphIcon
lineGetIDA;The lineGetID function returns a device identifier for the specified device class associated with the selected line, address, or call.;HLINE hLine, DWORD dwAddressID, HCALL hCall, DWORD dwSelect, LPVARSTRING lpDeviceID, LPCSTR lpszDeviceClass
lineGetID;The lineGetID function returns a device identifier for the specified device class associated with the selected line, address, or call.;HLINE hLine, DWORD dwAddressID, HCALL hCall, DWORD dwSelect, LPVARSTRING lpDeviceID, LPCSTR lpszDeviceClass
lineGetIDW;The lineGetID function returns a device identifier for the specified device class associated with the selected line, address, or call.;HLINE hLine, DWORD dwAddressID, HCALL hCall, DWORD dwSelect, LPVARSTRING lpDeviceID, LPCWSTR lpszDeviceClass
lineGetLineDevStatusA;The lineGetLineDevStatus function enables an application to query the specified open line device for its current status.;HLINE hLine, LPLINEDEVSTATUS lpLineDevStatus
lineGetLineDevStatus;The lineGetLineDevStatus function enables an application to query the specified open line device for its current status.;HLINE hLine, LPLINEDEVSTATUS lpLineDevStatus
lineGetLineDevStatusW;The lineGetLineDevStatus function enables an application to query the specified open line device for its current status.;HLINE hLine, LPLINEDEVSTATUS lpLineDevStatus
lineGetMessage;The lineGetMessage function returns the next TAPI message that is queued for delivery to an application that is using the Event Handle notification mechanism (see lineInitializeEx for further details).;HLINEAPP hLineApp, LPLINEMESSAGE lpMessage, DWORD dwTimeout
lineGetNewCalls;The lineGetNewCalls function returns call handles to calls on a specified line or address for which the application currently does not have handles. The application is granted monitor privilege to these calls.;HLINE hLine, DWORD dwAddressID, DWORD dwSelect, LPLINECALLLIST lpCallList
lineGetNumRings;The lineGetNumRings function determines the number of rings an incoming call on the given address should ring prior to answering the call.;HLINE hLine, DWORD dwAddressID, LPDWORD lpdwNumRings
lineGetProviderListA;The lineGetProviderList function returns a list of service providers currently installed in the telephony system.;DWORD dwAPIVersion, LPLINEPROVIDERLIST lpProviderList
lineGetProviderList;The lineGetProviderList function returns a list of service providers currently installed in the telephony system.;DWORD dwAPIVersion, LPLINEPROVIDERLIST lpProviderList
lineGetProviderListW;The lineGetProviderList function returns a list of service providers currently installed in the telephony system.;DWORD dwAPIVersion, LPLINEPROVIDERLIST lpProviderList
lineGetProxyStatus;The lineGetProxyStatus function returns a list of proxy request types that are currently being serviced for the specified device.;HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAppAPIVersion, LPLINEPROXYREQUESTLIST lpLineProxyReqestList
lineGetQueueInfo;The lineGetQueueInfo function returns a structure holding the ACD information associated with a particular queue.;HLINE hLine, DWORD dwQueueID, LPLINEQUEUEINFO lpLineQueueInfo
lineGetQueueListA;The lineGetQueueList function returns a list of queues associated with a particular ACD Group.;HLINE hLine, LPGUID lpGroupID, LPLINEQUEUELIST lpQueueList
lineGetQueueListW;The lineGetQueueList function returns a list of queues associated with a particular ACD Group.;HLINE hLine, LPGUID lpGroupID, LPLINEQUEUELIST lpQueueList
lineGetRequestA;Retrieves the next by-proxy request for the specified request mode.;HLINEAPP hLineApp, DWORD dwRequestMode, LPVOID lpRequestBuffer
lineGetRequest;Retrieves the next by-proxy request for the specified request mode.;HLINEAPP hLineApp, DWORD dwRequestMode, LPVOID lpRequestBuffer
lineGetRequestW;Retrieves the next by-proxy request for the specified request mode.;HLINEAPP hLineApp, DWORD dwRequestMode, LPVOID lpRequestBuffer
lineGetStatusMessages;The lineGetStatusMessages function enables an application to query which notification messages the application is set up to receive for events related to status changes for the specified line or any of its addresses.;HLINE hLine, LPDWORD lpdwLineStates, LPDWORD lpdwAddressStates
lineGetTranslateCapsA;The lineGetTranslateCaps function returns address translation capabilities.;HLINEAPP hLineApp, DWORD dwAPIVersion, LPLINETRANSLATECAPS lpTranslateCaps
lineGetTranslateCaps;The lineGetTranslateCaps function returns address translation capabilities.;HLINEAPP hLineApp, DWORD dwAPIVersion, LPLINETRANSLATECAPS lpTranslateCaps
lineGetTranslateCapsW;The lineGetTranslateCaps function returns address translation capabilities.;HLINEAPP hLineApp, DWORD dwAPIVersion, LPLINETRANSLATECAPS lpTranslateCaps
lineHandoffA;The lineHandoff function gives ownership of the specified call to another application. The application can be either specified directly by its file name or indirectly as the highest priority application that handles calls of the specified media mode.;HCALL hCall, LPCSTR lpszFileName, DWORD dwMediaMode
lineHandoff;The lineHandoff function gives ownership of the specified call to another application. The application can be either specified directly by its file name or indirectly as the highest priority application that handles calls of the specified media mode.;HCALL hCall, LPCSTR lpszFileName, DWORD dwMediaMode
lineHandoffW;The lineHandoff function gives ownership of the specified call to another application. The application can be either specified directly by its file name or indirectly as the highest priority application that handles calls of the specified media mode.;HCALL hCall, LPCWSTR lpszFileName, DWORD dwMediaMode
lineHold;The lineHold function places the specified call on hold.;HCALL hCall
lineInitializeExA;The lineInitializeEx function initializes the application's use of TAPI for subsequent use of the line abstraction.;LPHLINEAPP lphLineApp, HINSTANCE hInstance, LINECALLBACK lpfnCallback, LPCSTR lpszFriendlyAppName, LPDWORD lpdwNumDevs, LPDWORD lpdwAPIVersion, LPLINEINITIALIZEEXPARAMS lpLineInitializeExParams
lineInitializeExW;The lineInitializeEx function initializes the application's use of TAPI for subsequent use of the line abstraction.;LPHLINEAPP lphLineApp, HINSTANCE hInstance, LINECALLBACK lpfnCallback, LPCWSTR lpszFriendlyAppName, LPDWORD lpdwNumDevs, LPDWORD lpdwAPIVersion, LPLINEINITIALIZEEXPARAMS lpLineInitializeExParams
lineInitialize;The lineInitialize function is obsolete. It continues to be exported by Tapi.dll and Tapi32.dll for backward compatibility with applications using API versions 1.3 and 1.4.;LPHLINEAPP lphLineApp, HINSTANCE hInstance, LINECALLBACK lpfnCallback, LPCSTR lpszAppName, LPDWORD lpdwNumDevs
lineMakeCallA;The lineMakeCall function places a call on the specified line to the specified destination address. Optionally, call parameters can be specified if anything but default call setup parameters are requested.;HLINE hLine, LPHCALL lphCall, LPCSTR lpszDestAddress, DWORD dwCountryCode, LPLINECALLPARAMS const lpCallParams
lineMakeCall;The lineMakeCall function places a call on the specified line to the specified destination address. Optionally, call parameters can be specified if anything but default call setup parameters are requested.;HLINE hLine, LPHCALL lphCall, LPCSTR lpszDestAddress, DWORD dwCountryCode, LPLINECALLPARAMS const lpCallParams
lineMakeCallW;The lineMakeCall function places a call on the specified line to the specified destination address. Optionally, call parameters can be specified if anything but default call setup parameters are requested.;HLINE hLine, LPHCALL lphCall, LPCWSTR lpszDestAddress, DWORD dwCountryCode, LPLINECALLPARAMS const lpCallParams
lineMonitorDigits;The lineMonitorDigits function enables and disables the unbuffered detection of digits received on the call. Each time a digit of the specified digit mode is detected, a message is sent to the application indicating which digit has been detected.;HCALL hCall, DWORD dwDigitModes
lineMonitorMedia;The lineMonitorMedia function enables and disables the detection of media types (modes) on the specified call. When a media type is detected, a message is sent to the application. For more information, see ITLegacyCallMediaControl::MonitorMedia.;HCALL hCall, DWORD dwMediaModes
lineMonitorTones;The lineMonitorTones function enables and disables the detection of inband tones on the call. Each time a specified tone is detected, a message is sent to the application.;HCALL hCall, LPLINEMONITORTONE const lpToneList, DWORD dwNumEntries
lineNegotiateAPIVersion;The lineNegotiateAPIVersion function allows an application to negotiate an API version to use.;HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAPILowVersion, DWORD dwAPIHighVersion, LPDWORD lpdwAPIVersion, LPLINEEXTENSIONID lpExtensionID
lineNegotiateExtVersion;The lineNegotiateExtVersion function allows an application to negotiate an extension version to use with the specified line device. This operation need not be called if the application does not support extensions.;HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAPIVersion, DWORD dwExtLowVersion, DWORD dwExtHighVersion, LPDWORD lpdwExtVersion
lineOpenA;The lineOpen function opens the line device specified by its device identifier and returns a line handle for the corresponding opened line device. This line handle is used in subsequent operations on the line device.;HLINEAPP hLineApp, DWORD dwDeviceID, LPHLINE lphLine, DWORD dwAPIVersion, DWORD dwExtVersion, DWORD_PTR dwCallbackInstance, DWORD dwPrivileges, DWORD dwMediaModes, LPLINECALLPARAMS const lpCallParams
lineOpen;The lineOpen function opens the line device specified by its device identifier and returns a line handle for the corresponding opened line device. This line handle is used in subsequent operations on the line device.;HLINEAPP hLineApp, DWORD dwDeviceID, LPHLINE lphLine, DWORD dwAPIVersion, DWORD dwExtVersion, DWORD_PTR dwCallbackInstance, DWORD dwPrivileges, DWORD dwMediaModes, LPLINECALLPARAMS const lpCallParams
lineOpenW;The lineOpen function opens the line device specified by its device identifier and returns a line handle for the corresponding opened line device. This line handle is used in subsequent operations on the line device.;HLINEAPP hLineApp, DWORD dwDeviceID, LPHLINE lphLine, DWORD dwAPIVersion, DWORD dwExtVersion, DWORD_PTR dwCallbackInstance, DWORD dwPrivileges, DWORD dwMediaModes, LPLINECALLPARAMS const lpCallParams
lineParkA;The linePark function parks the specified call according to the specified park mode.;HCALL hCall, DWORD dwParkMode, LPCSTR lpszDirAddress, LPVARSTRING lpNonDirAddress
linePark;The linePark function parks the specified call according to the specified park mode.;HCALL hCall, DWORD dwParkMode, LPCSTR lpszDirAddress, LPVARSTRING lpNonDirAddress
lineParkW;The linePark function parks the specified call according to the specified park mode.;HCALL hCall, DWORD dwParkMode, LPCWSTR lpszDirAddress, LPVARSTRING lpNonDirAddress
linePickupA;The linePickup function picks up a call alerting at the specified destination address and returns a call handle for the picked-up call.;HLINE hLine, DWORD dwAddressID, LPHCALL lphCall, LPCSTR lpszDestAddress, LPCSTR lpszGroupID
linePickup;The linePickup function picks up a call alerting at the specified destination address and returns a call handle for the picked-up call.;HLINE hLine, DWORD dwAddressID, LPHCALL lphCall, LPCSTR lpszDestAddress, LPCSTR lpszGroupID
linePickupW;The linePickup function picks up a call alerting at the specified destination address and returns a call handle for the picked-up call.;HLINE hLine, DWORD dwAddressID, LPHCALL lphCall, LPCWSTR lpszDestAddress, LPCWSTR lpszGroupID
linePrepareAddToConferenceA;The linePrepareAddToConference function prepares an existing conference call for the addition of another party.;HCALL hConfCall, LPHCALL lphConsultCall, LPLINECALLPARAMS const lpCallParams
linePrepareAddToConference;The linePrepareAddToConference function prepares an existing conference call for the addition of another party.;HCALL hConfCall, LPHCALL lphConsultCall, LPLINECALLPARAMS const lpCallParams
linePrepareAddToConferenceW;The linePrepareAddToConference function prepares an existing conference call for the addition of another party.;HCALL hConfCall, LPHCALL lphConsultCall, LPLINECALLPARAMS const lpCallParams
lineProxyMessage;The lineProxyMessage function is used by a registered proxy request handler to generate TAPI messages related to its role.;HLINE hLine, HCALL hCall, DWORD dwMsg, DWORD dwParam1, DWORD dwParam2, DWORD dwParam3
lineProxyResponse;Indicates completion of a proxy request by a registered proxy handler, such as an ACD agent handler on a server.;HLINE hLine, LPLINEPROXYREQUEST lpProxyRequest, DWORD dwResult
lineRedirectA;The lineRedirect function redirects the specified offering call to the specified destination address.;HCALL hCall, LPCSTR lpszDestAddress, DWORD dwCountryCode
lineRedirect;The lineRedirect function redirects the specified offering call to the specified destination address.;HCALL hCall, LPCSTR lpszDestAddress, DWORD dwCountryCode
lineRedirectW;The lineRedirect function redirects the specified offering call to the specified destination address.;HCALL hCall, LPCWSTR lpszDestAddress, DWORD dwCountryCode
lineRegisterRequestRecipient;The lineRegisterRequestRecipient function registers the invoking application as a recipient of requests for the specified request mode.;HLINEAPP hLineApp, DWORD dwRegistrationInstance, DWORD dwRequestMode, DWORD bEnable
lineReleaseUserUserInfo;The lineReleaseUserUserInfo function informs the service provider that the application has processed the user-user information contained in the LINECALLINFO structure.;HCALL hCall
lineRemoveFromConference;The lineRemoveFromConference function removes the specified call from the conference call to which it currently belongs. The remaining calls in the conference call are unaffected.;HCALL hCall
lineRemoveProvider;The lineRemoveProvider function removes an existing telephony service provider from the telephony system.;DWORD dwPermanentProviderID, HWND hwndOwner
lineSecureCall;The lineSecureCall function secures the call from any interruptions or interference that can affect the call's media stream.;HCALL hCall
lineSendUserUserInfo;The lineSendUserUserInfo function sends user-user information to the remote party on the specified call.;HCALL hCall, LPCSTR lpsUserUserInfo, DWORD dwSize
lineSetAgentActivity;The lineSetAgentActivity function sets the agent activity code associated with a particular address.;HLINE hLine, DWORD dwAddressID, DWORD dwActivityID
lineSetAgentGroup;The lineSetAgentGroup function sets the agent groups into which the agent is logged into on a particular address.;HLINE hLine, DWORD dwAddressID, LPLINEAGENTGROUPLIST lpAgentGroupList
lineSetAgentMeasurementPeriod;The lineSetAgentMeasurementPeriod function sets the measurement period associated with a particular agent.;HLINE hLine, HAGENT hAgent, DWORD dwMeasurementPeriod
lineSetAgentSessionState;The lineSetAgentSessionState function sets the agent session state associated with a particular agent session handle.;HLINE hLine, HAGENTSESSION hAgentSession, DWORD dwAgentSessionState, DWORD dwNextAgentSessionState
lineSetAgentStateEx;The lineSetAgentStateEx function sets the agent state associated with a particular agent handle.;HLINE hLine, HAGENT hAgent, DWORD dwAgentState, DWORD dwNextAgentState
lineSetAgentState;The lineSetAgentState function sets the agent state associated with a particular address.;HLINE hLine, DWORD dwAddressID, DWORD dwAgentState, DWORD dwNextAgentState
lineSetAppPriorityA;Enables an application to set its priority in the handoff priority list for a particular media type or Assisted Telephony request mode, or to remove itself from the priority list.;LPCSTR lpszAppFilename, DWORD dwMediaMode, LPLINEEXTENSIONID lpExtensionID, DWORD dwRequestMode, LPCSTR lpszExtensionName, DWORD dwPriority
lineSetAppPriority;Enables an application to set its priority in the handoff priority list for a particular media type or Assisted Telephony request mode, or to remove itself from the priority list.;LPCSTR lpszAppFilename, DWORD dwMediaMode, LPLINEEXTENSIONID lpExtensionID, DWORD dwRequestMode, LPCSTR lpszExtensionName, DWORD dwPriority
lineSetAppPriorityW;Enables an application to set its priority in the handoff priority list for a particular media type or Assisted Telephony request mode, or to remove itself from the priority list.;LPCWSTR lpszAppFilename, DWORD dwMediaMode, LPLINEEXTENSIONID lpExtensionID, DWORD dwRequestMode, LPCWSTR lpszExtensionName, DWORD dwPriority
lineSetAppSpecific;The lineSetAppSpecific function enables an application to set the application-specific field of the specified call's call-information record.;HCALL hCall, DWORD dwAppSpecific
lineSetCallData;The lineSetCallData function sets the CallData member in LINECALLINFO.;HCALL hCall, LPVOID lpCallData, DWORD dwSize
lineSetCallParams;The lineSetCallParams function allows an application to change bearer mode and/or the rate parameters of an existing call.;HCALL hCall, DWORD dwBearerMode, DWORD dwMinRate, DWORD dwMaxRate, LPLINEDIALPARAMS const lpDialParams
lineSetCallPrivilege;The lineSetCallPrivilege function sets the application's privilege to the specified privilege.;HCALL hCall, DWORD dwCallPrivilege
lineSetCallQualityOfService;The lineSetCallQualityOfService function allows the application to attempt to change the quality of service parameters (reserved capacity and performance guarantees) for an existing call.;HCALL hCall, LPVOID lpSendingFlowspec, DWORD dwSendingFlowspecSize, LPVOID lpReceivingFlowspec, DWORD dwReceivingFlowspecSize
lineSetCallTreatment;The lineSetCallTreatment function sets the sounds a party on a call that is unanswered or on hold hears. Except for basic parameter validation, it is a straight pass-through by TAPI to the service provider.;HCALL hCall, DWORD dwTreatment
lineSetCurrentLocation;The lineSetCurrentLocation function sets the location used as the context for address translation.;HLINEAPP hLineApp, DWORD dwLocation
lineSetDevConfigA;The lineSetDevConfig function allows the application to restore the configuration of a media stream device on a line device to a setup previously obtained using lineGetDevConfig.;DWORD dwDeviceID, LPVOID const lpDeviceConfig, DWORD dwSize, LPCSTR lpszDeviceClass
lineSetDevConfig;The lineSetDevConfig function allows the application to restore the configuration of a media stream device on a line device to a setup previously obtained using lineGetDevConfig.;DWORD dwDeviceID, LPVOID const lpDeviceConfig, DWORD dwSize, LPCSTR lpszDeviceClass
lineSetDevConfigW;The lineSetDevConfig function allows the application to restore the configuration of a media stream device on a line device to a setup previously obtained using lineGetDevConfig.;DWORD dwDeviceID, LPVOID const lpDeviceConfig, DWORD dwSize, LPCWSTR lpszDeviceClass
lineSetLineDevStatus;The lineSetLineDevStatus function sets the line device status.;HLINE hLine, DWORD dwStatusToChange, DWORD fStatus
lineSetMediaControl;The lineSetMediaControl function enables and disables control actions on the media stream associated with the specified line, address, or call.;HLINE hLine, DWORD dwAddressID, HCALL hCall, DWORD dwSelect, LPLINEMEDIACONTROLDIGIT const lpDigitList, DWORD dwDigitNumEntries, LPLINEMEDIACONTROLMEDIA const lpMediaList, DWORD dwMediaNumEntries, LPLINEMEDIACONTROLTONE const lpToneList, DWORD dwToneNumEntries, LPLINEMEDIACONTROLCALLSTATE const lpCallStateList, DWORD dwCallStateNumEntries
lineSetMediaMode;The lineSetMediaMode function sets the media type(s) of the specified call in its LINECALLINFO structure. For more information, see ITLegacyCallMediaControl::SetMediaType.;HCALL hCall, DWORD dwMediaModes
lineSetNumRings;The lineSetNumRings function sets the number of rings that must occur before an incoming call is answered.;HLINE hLine, DWORD dwAddressID, DWORD dwNumRings
lineSetQueueMeasurementPeriod;The lineSetQueueMeasurementPeriod function sets the measurement period associated with a particular queue.;HLINE hLine, DWORD dwQueueID, DWORD dwMeasurementPeriod
lineSetStatusMessages;The lineSetStatusMessages function enables an application to specify which notification messages to receive for events related to status changes for the specified line or any of its addresses.;HLINE hLine, DWORD dwLineStates, DWORD dwAddressStates
lineSetTerminal;The lineSetTerminal function enables an application to specify which terminal information related to the specified line, address, or call is to be routed.;HLINE hLine, DWORD dwAddressID, HCALL hCall, DWORD dwSelect, DWORD dwTerminalModes, DWORD dwTerminalID, DWORD bEnable
lineSetTollListA;The lineSetTollList function manipulates the toll list.;HLINEAPP hLineApp, DWORD dwDeviceID, LPCSTR lpszAddressIn, DWORD dwTollListOption
lineSetTollList;The lineSetTollList function manipulates the toll list.;HLINEAPP hLineApp, DWORD dwDeviceID, LPCSTR lpszAddressIn, DWORD dwTollListOption
lineSetTollListW;The lineSetTollList function manipulates the toll list.;HLINEAPP hLineApp, DWORD dwDeviceID, LPCWSTR lpszAddressInW, DWORD dwTollListOption
lineSetupConferenceA;The lineSetupConference function sets up a conference call for the addition of the third party.;HCALL hCall, HLINE hLine, LPHCALL lphConfCall, LPHCALL lphConsultCall, DWORD dwNumParties, LPLINECALLPARAMS const lpCallParams
lineSetupConference;The lineSetupConference function sets up a conference call for the addition of the third party.;HCALL hCall, HLINE hLine, LPHCALL lphConfCall, LPHCALL lphConsultCall, DWORD dwNumParties, LPLINECALLPARAMS const lpCallParams
lineSetupConferenceW;The lineSetupConference function sets up a conference call for the addition of the third party.;HCALL hCall, HLINE hLine, LPHCALL lphConfCall, LPHCALL lphConsultCall, DWORD dwNumParties, LPLINECALLPARAMS const lpCallParams
lineSetupTransferA;The lineSetupTransfer function initiates a transfer of the call specified by the hCall parameter.;HCALL hCall, LPHCALL lphConsultCall, LPLINECALLPARAMS const lpCallParams
lineSetupTransfer;The lineSetupTransfer function initiates a transfer of the call specified by the hCall parameter.;HCALL hCall, LPHCALL lphConsultCall, LPLINECALLPARAMS const lpCallParams
lineSetupTransferW;The lineSetupTransfer function initiates a transfer of the call specified by the hCall parameter.;HCALL hCall, LPHCALL lphConsultCall, LPLINECALLPARAMS const lpCallParams
lineShutdown;The lineShutdown function shuts down the application's usage of the line abstraction of the API.;HLINEAPP hLineApp
lineSwapHold;The lineSwapHold function swaps the specified active call with the specified call on consultation hold.;HCALL hActiveCall, HCALL hHeldCall
LineTo;The LineTo function draws a line from the current position up to, but not including, the specified point.;HDC hdc, int x, int y
lineTranslateAddressA;The lineTranslateAddress function translates the specified address into another format.;HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAPIVersion, LPCSTR lpszAddressIn, DWORD dwCard, DWORD dwTranslateOptions, LPLINETRANSLATEOUTPUT lpTranslateOutput
lineTranslateAddress;The lineTranslateAddress function translates the specified address into another format.;HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAPIVersion, LPCSTR lpszAddressIn, DWORD dwCard, DWORD dwTranslateOptions, LPLINETRANSLATEOUTPUT lpTranslateOutput
lineTranslateAddressW;The lineTranslateAddress function translates the specified address into another format.;HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAPIVersion, LPCWSTR lpszAddressIn, DWORD dwCard, DWORD dwTranslateOptions, LPLINETRANSLATEOUTPUT lpTranslateOutput
lineTranslateDialogA;The lineTranslateDialog function displays an application-modal dialog box that allows the user to change the current location of a phone number about to be dialed, adjust location and calling card parameters, and see the effect.;HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAPIVersion, HWND hwndOwner, LPCSTR lpszAddressIn
lineTranslateDialog;The lineTranslateDialog function displays an application-modal dialog box that allows the user to change the current location of a phone number about to be dialed, adjust location and calling card parameters, and see the effect.;HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAPIVersion, HWND hwndOwner, LPCSTR lpszAddressIn
lineTranslateDialogW;The lineTranslateDialog function displays an application-modal dialog box that allows the user to change the current location of a phone number about to be dialed, adjust location and calling card parameters, and see the effect.;HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAPIVersion, HWND hwndOwner, LPCWSTR lpszAddressIn
lineUncompleteCall;The lineUncompleteCall function cancels the specified call completion request on the specified line.;HLINE hLine, DWORD dwCompletionID
lineUnhold;The lineUnhold function retrieves the specified held call.;HCALL hCall
lineUnparkA;The lineUnpark function retrieves the call parked at the specified address and returns a call handle for it.;HLINE hLine, DWORD dwAddressID, LPHCALL lphCall, LPCSTR lpszDestAddress
lineUnpark;The lineUnpark function retrieves the call parked at the specified address and returns a call handle for it.;HLINE hLine, DWORD dwAddressID, LPHCALL lphCall, LPCSTR lpszDestAddress
lineUnparkW;The lineUnpark function retrieves the call parked at the specified address and returns a call handle for it.;HLINE hLine, DWORD dwAddressID, LPHCALL lphCall, LPCWSTR lpszDestAddress
listen;The listen function places a socket in a state in which it is listening for an incoming connection.;SOCKET s, int backlog
_llseek;Repositions the file pointer for the specified file.;HFILE hFile, LONG lOffset, int iOrigin
LoadAcceleratorsA;Loads the specified accelerator table.;HINSTANCE hInstance, LPCSTR lpTableName
LoadAcceleratorsW;Loads the specified accelerator table.;HINSTANCE hInstance, LPCWSTR lpTableName
LoadBitmapA;The LoadBitmap function loads the specified bitmap resource from a module's executable file.;HINSTANCE hInstance, LPCSTR lpBitmapName
LoadBitmapW;The LoadBitmap function loads the specified bitmap resource from a module's executable file.;HINSTANCE hInstance, LPCWSTR lpBitmapName
LoadCachedAttributes;Loads the cached attributes of a recognizer.;CLSID clsid, RECO_ATTRS *pRecoAttributes
LoadCursorA;Loads the specified cursor resource from the executable (.EXE) file associated with an application instance.;HINSTANCE hInstance, LPCSTR lpCursorName
LoadCursorFromFileA;Creates a cursor based on data contained in a file.;LPCSTR lpFileName
LoadCursorFromFileW;Creates a cursor based on data contained in a file.;LPCWSTR lpFileName
LoadCursorW;Loads the specified cursor resource from the executable (.EXE) file associated with an application instance.;HINSTANCE hInstance, LPCWSTR lpCursorName
LoadEnclaveData;Loads data into an uninitialized enclave that you created by calling CreateEnclave.;HANDLE hProcess, LPVOID lpAddress, LPCVOID lpBuffer, SIZE_T nSize, DWORD flProtect, LPCVOID lpPageInformation, DWORD dwInfoLength, PSIZE_T lpNumberOfBytesWritten, LPDWORD lpEnclaveError
LoadEnclaveImageW;Loads an image and all of its imports into an enclave.;LPVOID lpEnclaveAddress, LPCWSTR lpImageName
LoadIconA;Loads the specified icon resource from the executable (.exe) file associated with an application instance.;HINSTANCE hInstance, LPCSTR lpIconName
LoadIconW;Loads the specified icon resource from the executable (.exe) file associated with an application instance.;HINSTANCE hInstance, LPCWSTR lpIconName
LoadImageA;Loads an icon, cursor, animated cursor, or bitmap.;HINSTANCE hInst, LPCSTR name, UINT type, int cx, int cy, UINT fuLoad
LoadImageW;Loads an icon, cursor, animated cursor, or bitmap.;HINSTANCE hInst, LPCWSTR name, UINT type, int cx, int cy, UINT fuLoad
LoadKeyboardLayoutA;Loads a new input locale identifier (formerly called the keyboard layout) into the system.;LPCSTR pwszKLID, UINT Flags
LoadKeyboardLayoutW;Loads a new input locale identifier (formerly called the keyboard layout) into the system.;LPCWSTR pwszKLID, UINT Flags
LoadLibraryA;Loads the specified module into the address space of the calling process.;LPCSTR lpLibFileName
LoadLibraryExA;Loads the specified module into the address space of the calling process.;LPCSTR lpLibFileName, HANDLE hFile, DWORD dwFlags
LoadLibraryExW;Loads the specified module into the address space of the calling process.;LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags
LoadLibraryW;Loads the specified module into the address space of the calling process.;LPCWSTR lpLibFileName
LoadMenuA;Loads the specified menu resource from the executable (.exe) file associated with an application instance.;HINSTANCE hInstance, LPCSTR lpMenuName
LoadMenuIndirectA;Loads the specified menu template in memory.;const MENUTEMPLATEA *lpMenuTemplate
LoadMenuIndirectW;Loads the specified menu template in memory.;const MENUTEMPLATEW *lpMenuTemplate
LoadMenuW;Loads the specified menu resource from the executable (.exe) file associated with an application instance.;HINSTANCE hInstance, LPCWSTR lpMenuName
LoadModule;Loads and executes an application or creates a new instance of an existing application.;LPCSTR lpModuleName, LPVOID lpParameterBlock
LoadPackagedLibrary;Loads the specified packaged module and its dependencies into the address space of the calling process.;LPCWSTR lpwLibFileName, DWORD Reserved
LoadPolicy;Retrieves policy information from the certificate enrollment policy (CEP) server.;X509EnrollmentPolicyLoadOption option
LoadResource;Retrieves a handle that can be used to obtain a pointer to the first byte of the specified resource in memory.;HMODULE hModule, HRSRC hResInfo
LoadStringA;Loads a string resource from the executable file associated with a specified module, copies the string into a buffer, and appends a terminating null character.;HINSTANCE hInstance, UINT uID, LPSTR lpBuffer, int cchBufferMax
LoadStringByReference;Unsupported. LoadStringByReference may be altered or unavailable. Instead, use SHLoadIndirectString.;DWORD Flags, PCWSTR Language, PCWSTR SourceString, PWSTR Buffer, ULONG cchBuffer, PCWSTR Directory, PULONG pcchBufferOut
LoadStringW;Loads a string resource from the executable file associated with a specified module, copies the string into a buffer, and appends a terminating null character.;HINSTANCE hInstance, UINT uID, LPWSTR lpBuffer, int cchBufferMax
LocalAlloc;Allocates the specified number of bytes from the heap.;UINT uFlags, SIZE_T uBytes
LocaleNameToLCID;Converts a locale name to a locale identifier.;LPCWSTR lpName, DWORD dwFlags
LocalFileTimeToFileTime;Converts a local file time to a file time based on the Coordinated Universal Time (UTC).;const FILETIME *lpLocalFileTime, LPFILETIME lpFileTime
LocalFlags;Retrieves information about the specified local memory object.;HLOCAL hMem
LocalFree;Frees the specified local memory object and invalidates its handle.;_Frees_ptr_opt_ HLOCAL hMem
LocalHandle;Retrieves the handle associated with the specified pointer to a local memory object.;LPCVOID pMem
LocalLock;Locks a local memory object and returns a pointer to the first byte of the object's memory block.;HLOCAL hMem
LocalReAlloc;Changes the size or the attributes of a specified local memory object. The size can increase or decrease.;_Frees_ptr_opt_ HLOCAL hMem, SIZE_T uBytes, UINT uFlags
LocalSize;Retrieves the current size of the specified local memory object, in bytes.;HLOCAL hMem
LocalUnlock;Decrements the lock count associated with a memory object that was allocated with LMEM_MOVEABLE.;HLOCAL hMem
LocateXStateFeature;Retrieves a pointer to the processor state for an XState feature within a CONTEXT structure.;PCONTEXT Context, DWORD FeatureId, PDWORD Length
LockFileEx;Locks the specified file for exclusive access by the calling process. This function can operate either synchronously or asynchronously and can request either an exclusive or a shared lock.;HANDLE hFile, DWORD dwFlags, DWORD dwReserved, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh, LPOVERLAPPED lpOverlapped
LockFile;Locks the specified file for exclusive access by the calling process.;HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh
LockResource;Retrieves a pointer to the specified resource in memory.;HGLOBAL hResData
LockServiceDatabase;Requests ownership of the service control manager (SCM) database lock. Only one process can own the lock at any specified time.;SC_HANDLE hSCManager
LockSetForegroundWindow;The foreground process can call the LockSetForegroundWindow function to disable calls to the SetForegroundWindow function.;UINT uLockCode
LockWindowUpdate;The LockWindowUpdate function disables or enables drawing in the specified window. Only one window can be locked at a time.;HWND hWndLock
LockWorkStation;Locks the workstation's display.;
LogicalToPhysicalPoint;Converts the logical coordinates of a point in a window to physical coordinates.;HWND hWnd, LPPOINT lpPoint
LogicalToPhysicalPointForPerMonitorDPI;Converts a point in a window from logical coordinates into physical coordinates, regardless of the dots per inch (dpi) awareness of the caller.;HWND hWnd, LPPOINT lpPoint
LogonUserA;The Win32 LogonUser function attempts to log a user on to the local computer. LogonUser returns a handle to a user token that you can use to impersonate user.;LPCSTR lpszUsername, LPCSTR lpszDomain, LPCSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken
LogonUserExA;The LogonUserEx function attempts to log a user on to the local computer.;LPCSTR lpszUsername, LPCSTR lpszDomain, LPCSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken, PSID *ppLogonSid, PVOID *ppProfileBuffer, LPDWORD pdwProfileLength, PQUOTA_LIMITS pQuotaLimits
LogonUserExW;The LogonUserEx function attempts to log a user on to the local computer.;LPCWSTR lpszUsername, LPCWSTR lpszDomain, LPCWSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken, PSID *ppLogonSid, PVOID *ppProfileBuffer, LPDWORD pdwProfileLength, PQUOTA_LIMITS pQuotaLimits
LogonUserW;The Win32 LogonUser function attempts to log a user on to the local computer. LogonUser returns a handle to a user token that you can use to impersonate user.;LPCWSTR lpszUsername, LPCWSTR lpszDomain, LPCWSTR lpszPassword, DWORD dwLogonType, DWORD dwLogonProvider, PHANDLE phToken
LookupAccountNameA;Accepts the name of a system and an account as input. It retrieves a security identifier (SID) for the account and the name of the domain on which the account was found.;LPCSTR lpSystemName, LPCSTR lpAccountName, PSID Sid, LPDWORD cbSid, LPSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse
LookupAccountNameW;Accepts the name of a system and an account as input. It retrieves a security identifier (SID) for the account and the name of the domain on which the account was found.;LPCWSTR lpSystemName, LPCWSTR lpAccountName, PSID Sid, LPDWORD cbSid, LPWSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse
LookupAccountSidA;Accepts a security identifier (SID) as input. It retrieves the name of the account for this SID and the name of the first domain on which this SID is found.;LPCSTR lpSystemName, PSID Sid, LPSTR Name, LPDWORD cchName, LPSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse
LookupAccountSidLocalA;Retrieves the name of the account for the specified SID on the local machine.;PSID Sid, LPSTR Name, LPDWORD cchName, LPSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse
LookupAccountSidLocalW;Retrieves the name of the account for the specified SID on the local machine.;PSID Sid, LPWSTR Name, LPDWORD cchName, LPWSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse
LookupAccountSidW;Accepts a security identifier (SID) as input. It retrieves the name of the account for this SID and the name of the first domain on which this SID is found.;LPCWSTR lpSystemName, PSID Sid, LPWSTR Name, LPDWORD cchName, LPWSTR ReferencedDomainName, LPDWORD cchReferencedDomainName, PSID_NAME_USE peUse
LookupIconIdFromDirectoryEx;Searches through icon or cursor data for the icon or cursor that best fits the current display device.;PBYTE presbits, BOOL fIcon, int cxDesired, int cyDesired, UINT Flags
LookupIconIdFromDirectory;Searches through icon or cursor data for the icon or cursor that best fits the current display device.;PBYTE presbits, BOOL fIcon
LookupPersistentTcpPortReservation;Looks up the token for a persistent TCP port reservation for a consecutive block of TCP ports on the local computer.;USHORT StartPort, USHORT NumberOfPorts, PULONG64 Token
LookupPersistentUdpPortReservation;Looks up the token for a persistent UDP port reservation for a consecutive block of TCP ports on the local computer.;USHORT StartPort, USHORT NumberOfPorts, PULONG64 Token
LookupPrivilegeDisplayNameA;Retrieves the display name that represents a specified privilege.;LPCSTR lpSystemName, LPCSTR lpName, LPSTR lpDisplayName, LPDWORD cchDisplayName, LPDWORD lpLanguageId
LookupPrivilegeDisplayNameW;Retrieves the display name that represents a specified privilege.;LPCWSTR lpSystemName, LPCWSTR lpName, LPWSTR lpDisplayName, LPDWORD cchDisplayName, LPDWORD lpLanguageId
LookupPrivilegeNameA;Retrieves the name that corresponds to the privilege represented on a specific system by a specified locally unique identifier (LUID).;LPCSTR lpSystemName, PLUID lpLuid, LPSTR lpName, LPDWORD cchName
LookupPrivilegeNameW;Retrieves the name that corresponds to the privilege represented on a specific system by a specified locally unique identifier (LUID).;LPCWSTR lpSystemName, PLUID lpLuid, LPWSTR lpName, LPDWORD cchName
LookupPrivilegeValueA;Retrieves the locally unique identifier (LUID) used on a specified system to locally represent the specified privilege name.;LPCSTR lpSystemName, LPCSTR lpName, PLUID lpLuid
LookupPrivilegeValueW;Retrieves the locally unique identifier (LUID) used on a specified system to locally represent the specified privilege name.;LPCWSTR lpSystemName, LPCWSTR lpName, PLUID lpLuid
LookupSecurityDescriptorPartsA;Retrieves security information from a self-relative security descriptor.;PTRUSTEE_A *ppOwner, PTRUSTEE_A *ppGroup, PULONG pcCountOfAccessEntries, PEXPLICIT_ACCESS_A *ppListOfAccessEntries, PULONG pcCountOfAuditEntries, PEXPLICIT_ACCESS_A *ppListOfAuditEntries, PSECURITY_DESCRIPTOR pSD
LookupSecurityDescriptorPartsW;Retrieves security information from a self-relative security descriptor.;PTRUSTEE_W *ppOwner, PTRUSTEE_W *ppGroup, PULONG pcCountOfAccessEntries, PEXPLICIT_ACCESS_W *ppListOfAccessEntries, PULONG pcCountOfAuditEntries, PEXPLICIT_ACCESS_W *ppListOfAuditEntries, PSECURITY_DESCRIPTOR pSD
LookupSids;The LookupSids method returns the common names corresponding to each of the elements in the specified list of SIDs.;ULONG cSids, PSID *rgpSids, LPDATAOBJECT *ppdo
_lopen;The _lopen function opens an existing file and sets the file pointer to the beginning of the file. This function is provided for compatibility with 16-bit versions of Windows. Win32-based applications should use the CreateFile function.;LPCSTR lpPathName, int iReadWrite
LPHANDLER_FUNCTION;An application-defined callback function used with the RegisterServiceCtrlHandler function. A service program can use it as the control handler function of a particular service.;DWORD dwControl ) {...}
LPHANDLER_FUNCTION_EX;An application-defined callback function used with the RegisterServiceCtrlHandlerEx function. A service program can use it as the control handler function of a particular service.;DWORD dwControl, DWORD dwEventType, LPVOID lpEventData, LPVOID lpContext ) {...}
LPM_AdmitRsvpMsg;The LPM_AdmitRsvpMsg function is called by the PCM to pass RSVP messages to the LPM for policy based�admission control decisions.;RHANDLE PcmReqHandle, RSVP_HOP *pRecvdIntf, RSVP_MSG_OBJS *pRsvpMsgObjs, int RcvdRsvpMsgLength, UCHAR *RcvdRsvpMsg, ULONG *pulPcmActionFlags, POLICY_DECISION *pPolicyDecisions, void *Reserved
LPM_CommitResv;The LPM_CommitResv function is called by the PCM to obtain reservation commitment decisions from the LPM.;RSVP_SESSION *RsvpSession, RSVP_HOP *FlowInstalledIntf, RESV_STYLE *RsvpStyle, int FilterSpecCount, FILTER_SPEC **ppFilterSpecList, IS_FLOWSPEC *pMergedFlowSpec, ULONG CommitDecision
LPM_Deinitialize;The LPM_Deinitialize function allows the PCM to instruct LPMs to deinitialize, whether due to system shutdown or a change in Designated Subnet Bandwidth Manager (DSBM) status.;LPM_HANDLE LpmHandle
LPM_DeleteState;The LPM_DeleteState function is called by the PCM to delete the LPMs' RSVP state information.;RSVP_HOP *pRcvdIfAddr, MSG_TYPE RsvpMsgType, RSVP_SESSION *pRsvpSession, RSVP_HOP *pRsvpFromHop, RESV_STYLE *pResvStyle, int FilterSpecCount, FILTER_SPEC **ppFilterSpecList, int TearDownReason
LPM_GetRsvpObjects;The LPM_GetRsvpObjects function allows the PCM to query LPMs for policy data.;RHANDLE PcmReqHandle, ULONG MaxPdSize, RSVP_HOP *SendingIntfAddr, RSVP_MSG_OBJS *pRsvpMsgObjs, int *pRsvpObjectsCount, RsvpObjHdr ***pppRsvpObjects, void *Reserved
LPM_Initialize;The LPM_Initialize function initializes a local policy module (LPM).;LPM_HANDLE LpmHandle, LPM_INIT_INFO *pLpmInitInfo, DWORD *pLpmVersionNumber, PETYPE *pSupportedPeType, VOID *Reserved
LPM_IpAddressTable;The LPM_IpAddressTable function is used by the PCM to pass a list of IP addresses assigned to the Windows 2000 Server upon which the LPM is initialized.;ULONG cIpAddrTable, LPMIPTABLE *pIpAddrTable
LPSERVICE_MAIN_FUNCTIONA;The entry point for a service.;DWORD dwNumServicesArgs, LPSTR *lpServiceArgVectors ) {...}
LPSERVICE_MAIN_FUNCTIONW;The entry point for a service.;DWORD dwNumServicesArgs, LPWSTR *lpServiceArgVectors ) {...}
LPtoDP;The LPtoDP function converts logical coordinates into device coordinates. The conversion depends on the mapping mode of the device context, the settings of the origins and extents for the window and viewport, and the world transformation.;HDC hdc, LPPOINT lppt, int c
_lread;The _lread function reads data from the specified file. This function is provided for compatibility with 16-bit versions of Windows. Win32-based applications should use the ReadFile function.;HFILE hFile, LPVOID lpBuffer, UINT uBytes
LsaAddAccountRights;Assigns one or more privileges to an account.;LSA_HANDLE PolicyHandle, PSID AccountSid, PLSA_UNICODE_STRING UserRights, ULONG CountOfRights
LSA_ADD_CREDENTIAL;Adds credentials to a logon session.;PLUID LogonId, ULONG AuthenticationPackage, PLSA_STRING PrimaryKeyValue, PLSA_STRING Credentials ) {...}
LSA_ALLOCATE_CLIENT_BUFFER;Allocates a buffer in the client's address space.;PLSA_CLIENT_REQUEST ClientRequest, ULONG LengthRequired, PVOID *ClientBaseAddress ) {...}
LSA_ALLOCATE_LSA_HEAP;Allocates memory on the heap. Some information passed back to the LSA is expected to be allocated using this function.;ULONG Length ) {...}
LSA_ALLOCATE_PRIVATE_HEAP;Allocates memory on the private heap.;SIZE_T Length ) {...}
LSA_ALLOCATE_SHARED_MEMORY;The AllocateSharedMemory function allocates a block of shared memory from a section of memory previously reserved by a call to the CreateSharedMemory function.;PVOID SharedMem, ULONG Size ) {...}
LSA_AP_CALL_PACKAGE;Called by the Local Security Authority (LSA) when a logon application with a trusted connection to the LSA calls the LsaCallAuthenticationPackage function and specifies the authentication package's identifier.;PLSA_CLIENT_REQUEST ClientRequest, PVOID ProtocolSubmitBuffer, PVOID ClientBufferBase, ULONG SubmitBufferLength, PVOID *ProtocolReturnBuffer, PULONG ReturnBufferLength, PNTSTATUS ProtocolStatus ) {...}
LSA_AP_CALL_PACKAGE_PASSTHROUGH;The dispatch function for pass-through logon requests sent to the LsaCallAuthenticationPackage function.;PLSA_CLIENT_REQUEST ClientRequest, PVOID ProtocolSubmitBuffer, PVOID ClientBufferBase, ULONG SubmitBufferLength, PVOID *ProtocolReturnBuffer, PULONG ReturnBufferLength, PNTSTATUS ProtocolStatus ) {...}
LSA_AP_INITIALIZE_PACKAGE;Called once by the Local Security Authority (LSA) during system initialization to provide the authentication package a chance to initialize itself.;ULONG AuthenticationPackageId, PLSA_DISPATCH_TABLE LsaDispatchTable, PLSA_STRING Database, PLSA_STRING Confidentiality, PLSA_STRING *AuthenticationPackageName ) {...}
LSA_AP_LOGON_TERMINATED;Used to notify an authentication package when a logon session terminates. A logon session terminates when the last token referencing the logon session is deleted.;PLUID LogonId ) {...}
LSA_AP_LOGON_USER;Authenticates a user's logon credentials.;PLSA_CLIENT_REQUEST ClientRequest, SECURITY_LOGON_TYPE LogonType, PVOID AuthenticationInformation, PVOID ClientAuthenticationBase, ULONG AuthenticationInformationLength, PVOID *ProfileBuffer, PULONG ProfileBufferLength, PLUID LogonId, PNTSTATUS SubStatus, PLSA_TOKEN_INFORMATION_TYPE TokenInformationType, PVOID *TokenInformation, PLSA_UNICODE_STRING *AccountName, PLSA_UNICODE_STRING *AuthenticatingAuthority ) {...}
LSA_AP_LOGON_USER_EX2;Used to authenticate a user logon attempt on the user's initial logon. A new logon session is established for the user, and validation information for the user is returned.;PLSA_CLIENT_REQUEST ClientRequest, SECURITY_LOGON_TYPE LogonType, PVOID ProtocolSubmitBuffer, PVOID ClientBufferBase, ULONG SubmitBufferSize, PVOID *ProfileBuffer, PULONG ProfileBufferSize, PLUID LogonId, PNTSTATUS SubStatus, PLSA_TOKEN_INFORMATION_TYPE TokenInformationType, PVOID *TokenInformation, PUNICODE_STRING *AccountName, PUNICODE_STRING *AuthenticatingAuthority, PUNICODE_STRING *MachineName, PSECPKG_PRIMARY_CRED PrimaryCredentials, PSECPKG_SUPPLEMENTAL_CRED_ARRAY *SupplementalCredentials ) {...}
LSA_AP_LOGON_USER_EX;Authenticates a user's logon credentials.;PLSA_CLIENT_REQUEST ClientRequest, SECURITY_LOGON_TYPE LogonType, PVOID AuthenticationInformation, PVOID ClientAuthenticationBase, ULONG AuthenticationInformationLength, PVOID *ProfileBuffer, PULONG ProfileBufferLength, PLUID LogonId, PNTSTATUS SubStatus, PLSA_TOKEN_INFORMATION_TYPE TokenInformationType, PVOID *TokenInformation, PUNICODE_STRING *AccountName, PUNICODE_STRING *AuthenticatingAuthority, PUNICODE_STRING *MachineName ) {...}
LSA_AUDIT_ACCOUNT_LOGON;The AuditAccountLogon function produces an audit record that represents the mapping of a foreign principal name onto a Windows account.;ULONG AuditId, BOOLEAN Success, PUNICODE_STRING Source, PUNICODE_STRING ClientName, PUNICODE_STRING MappedName, NTSTATUS Status ) {...}
LSA_AUDIT_LOGON;The AuditLogon function is used to audit a logon attempt.;NTSTATUS Status, NTSTATUS SubStatus, PUNICODE_STRING AccountName, PUNICODE_STRING AuthenticatingAuthority, PUNICODE_STRING WorkstationName, PSID UserSid, SECURITY_LOGON_TYPE LogonType, PTOKEN_SOURCE TokenSource, PLUID LogonId ) {...}
LsaCallAuthenticationPackage;Used by a logon application to communicate with an authentication package.;HANDLE LsaHandle, ULONG AuthenticationPackage, PVOID ProtocolSubmitBuffer, ULONG SubmitBufferLength, PVOID *ProtocolReturnBuffer, PULONG ReturnBufferLength, PNTSTATUS ProtocolStatus
LSA_CALL_PACKAGEEX;The CallPackageEx function is used to call another security package to access its services.;PUNICODE_STRING AuthenticationPackage, PVOID ClientBufferBase, PVOID ProtocolSubmitBuffer, ULONG SubmitBufferLength, PVOID *ProtocolReturnBuffer, PULONG ReturnBufferLength, PNTSTATUS ProtocolStatus ) {...}
LSA_CALL_PACKAGE_PASSTHROUGH;The CallPackagePassthrough function is used to call another security package to access its services.;PUNICODE_STRING AuthenticationPackage, PVOID ClientBufferBase, PVOID ProtocolSubmitBuffer, ULONG SubmitBufferLength, PVOID *ProtocolReturnBuffer, PULONG ReturnBufferLength, PNTSTATUS ProtocolStatus ) {...}
LSA_CALL_PACKAGE;The CallPackage function is used to call another security package to access its services.;PUNICODE_STRING AuthenticationPackage, PVOID ProtocolSubmitBuffer, ULONG SubmitBufferLength, PVOID *ProtocolReturnBuffer, PULONG ReturnBufferLength, PNTSTATUS ProtocolStatus ) {...}
LSA_CANCEL_NOTIFICATION;The CancelNotification function cancels a previously registered notification.;HANDLE NotifyHandle ) {...}
LSA_CLIENT_CALLBACK;Allows a Local Security Authority (LSA)-mode security package to call back to its user-mode package and invoke a function in its DLL there.;PCHAR Callback, ULONG_PTR Argument1, ULONG_PTR Argument2, PSecBuffer Input, PSecBuffer Output ) {...}
LSA_CLOSE_SAM_USER;Closes a handle to a Security Accounts Manager (SAM) user account.;PVOID UserHandle ) {...}
LsaClose;The LsaClose function closes a handle to a Policy or TrustedDomain object.;LSA_HANDLE ObjectHandle
LsaConnectUntrusted;Establishes an untrusted connection to the LSA server.;PHANDLE LsaHandle
LSA_CONVERT_AUTH_DATA_TO_TOKEN;The ConvertAuthDataToToken function creates an access token from the authorization data returned from the GetAuthDataForUser or GetUserAuthData functions.;PVOID UserAuthData, ULONG UserAuthDataSize, SECURITY_IMPERSONATION_LEVEL ImpersonationLevel, PTOKEN_SOURCE TokenSource, SECURITY_LOGON_TYPE LogonType, PUNICODE_STRING AuthorityName, PHANDLE Token, PLUID LogonId, PUNICODE_STRING AccountName, PNTSTATUS SubStatus ) {...}
LSA_COPY_FROM_CLIENT_BUFFER;Copies information from the address space of a client process into a buffer in the current process.;PLSA_CLIENT_REQUEST ClientRequest, ULONG Length, PVOID BufferToCopy, PVOID ClientBaseAddress ) {...}
LSA_COPY_TO_CLIENT_BUFFER;Copies information from a buffer in the current process into a client process's address space.;PLSA_CLIENT_REQUEST ClientRequest, ULONG Length, PVOID ClientBaseAddress, PVOID BufferToCopy ) {...}
LSA_CRACK_SINGLE_NAME;The CrackSingleName function converts a name from one format to another.;ULONG FormatOffered, BOOLEAN PerformAtGC, PUNICODE_STRING NameInput, PUNICODE_STRING Prefix, ULONG RequestedFormat, PUNICODE_STRING CrackedName, PUNICODE_STRING DnsDomainName, PULONG SubStatus ) {...}
LSA_CREATE_LOGON_SESSION;Creates logon sessions.;PLUID LogonId ) {...}
LSA_CREATE_SHARED_MEMORY;The CreateSharedMemory function creates a section of memory that is shared by client processes and the security package.;ULONG MaxSize, ULONG InitialSize ) {...}
LSA_CREATE_THREAD;A wrapper for the Windows CreateThread function that should be used by the Local Security Authority (LSA).;SEC_ATTRS SecurityAttributes, ULONG StackSize, SEC_THREAD_START StartFunction, PVOID ThreadParameter, ULONG CreationFlags, PULONG ThreadId ) {...}
LSA_CREATE_TOKEN_EX;Creates tokens while processing calls to SpAcceptLsaModeContext.;PLUID LogonId, PTOKEN_SOURCE TokenSource, SECURITY_LOGON_TYPE LogonType, SECURITY_IMPERSONATION_LEVEL ImpersonationLevel, LSA_TOKEN_INFORMATION_TYPE TokenInformationType, PVOID TokenInformation, PTOKEN_GROUPS TokenGroups, PUNICODE_STRING Workstation, PUNICODE_STRING ProfilePath, PVOID SessionInformation, SECPKG_SESSIONINFO_TYPE SessionInformationType, PHANDLE Token, PNTSTATUS SubStatus ) {...}
LSA_CREATE_TOKEN;The CreateToken function is used by SSP/APs to create tokens while processing calls to SpAcceptLsaModeContext.;PLUID LogonId, PTOKEN_SOURCE TokenSource, SECURITY_LOGON_TYPE LogonType, SECURITY_IMPERSONATION_LEVEL ImpersonationLevel, LSA_TOKEN_INFORMATION_TYPE TokenInformationType, PVOID TokenInformation, PTOKEN_GROUPS TokenGroups, PUNICODE_STRING AccountName, PUNICODE_STRING AuthorityName, PUNICODE_STRING Workstation, PUNICODE_STRING ProfilePath, PHANDLE Token, PNTSTATUS SubStatus ) {...}
LsaCreateTrustedDomainEx;The LsaCreateTrustedDomainEx function establishes a new trusted domain by creating a new TrustedDomain object.;LSA_HANDLE PolicyHandle, PTRUSTED_DOMAIN_INFORMATION_EX TrustedDomainInformation, PTRUSTED_DOMAIN_AUTH_INFORMATION AuthenticationInformation, ACCESS_MASK DesiredAccess, PLSA_HANDLE TrustedDomainHandle
LSA_DELETE_CREDENTIAL;Deletes an existing credential.;PLUID LogonId, ULONG AuthenticationPackage, PLSA_STRING PrimaryKeyValue ) {...}
LSA_DELETE_LOGON_SESSION;Cleans up any logon sessions created while determining whether a user's authentication information is legitimate.;PLUID LogonId ) {...}
LSA_DELETE_SHARED_MEMORY;The DeleteSharedMemory function releases a section of memory that is shared by clients and a security package.;PVOID SharedMem ) {...}
LsaDeleteTrustedDomain;The LsaDeleteTrustedDomain function removes a trusted domain from the list of trusted domains for a system and deletes the associated TrustedDomain object.;LSA_HANDLE PolicyHandle, PSID TrustedDomainSid
LsaDeregisterLogonProcess;Deletes the caller's logon application context and closes the connection to the LSA server.;HANDLE LsaHandle
LSA_DUPLICATE_HANDLE;The DuplicateHandle function creates a duplicate handle. The returned duplicate is in the caller's process space.;HANDLE SourceHandle, PHANDLE DestionationHandle ) {...}
LsaEnumerateAccountRights;The LsaEnumerateAccountRights function enumerates the privileges assigned to an account.;LSA_HANDLE PolicyHandle, PSID AccountSid, PLSA_UNICODE_STRING *UserRights, PULONG CountOfRights
LsaEnumerateAccountsWithUserRight;Returns the accounts in the database of a Local Security Authority (LSA) Policy object that hold a specified privilege.;LSA_HANDLE PolicyHandle, PLSA_UNICODE_STRING UserRight, PVOID *Buffer, PULONG CountReturned
LsaEnumerateLogonSessions;Retrieves the set of existing logon session identifiers (LUIDs) and the number of sessions.;PULONG LogonSessionCount, PLUID *LogonSessionList
LsaEnumerateTrustedDomainsEx;Returns information about the domains trusted by the local system.;LSA_HANDLE PolicyHandle, PLSA_ENUMERATION_HANDLE EnumerationContext, PVOID *Buffer, ULONG PreferedMaximumLength, PULONG CountReturned
LsaEnumerateTrustedDomains;The LsaEnumerateTrustedDomains function retrieves the names and SIDs of domains trusted to authenticate logon credentials.;LSA_HANDLE PolicyHandle, PLSA_ENUMERATION_HANDLE EnumerationContext, PVOID *Buffer, ULONG PreferedMaximumLength, PULONG CountReturned
LSA_EXPAND_AUTH_DATA_FOR_DOMAIN;Expands the domain groups in the specified user authentication data.;PUCHAR UserAuthData, ULONG UserAuthDataSize, PVOID Reserved, PUCHAR *ExpandedAuthData, PULONG ExpandedAuthDataSize ) {...}
LSA_FREE_CLIENT_BUFFER;Frees a client buffer previously allocated with the AllocateClientBuffer function.;PLSA_CLIENT_REQUEST ClientRequest, PVOID ClientBaseAddress ) {...}
LSA_FREE_LSA_HEAP;Deallocates heap memory previously allocated by AllocateLsaHeap.;PVOID Base ) {...}
LSA_FREE_LSA_HEAP;The FreeReturnBuffer function is used to free buffers allocated by the Local Security Authority (LSA) and returned to the security package. The package calls this function when the information in the returned buffer is no longer needed.;PVOID Base ) {...}
LsaFreeMemory;The LsaFreeMemory function frees memory allocated for an output buffer by an LSA function call.;PVOID Buffer
LSA_FREE_PRIVATE_HEAP;Frees memory that was allocated by using the AllocatePrivateHeap function.;PVOID Base ) {...}
LsaFreeReturnBuffer;Frees the memory used by a buffer previously allocated by the LSA.;PVOID Buffer
LSA_FREE_SHARED_MEMORY;The FreeSharedMemory function frees a block of shared memory previously allocated by the AllocateSharedMemory function.;PVOID SharedMem, PVOID Memory ) {...}
LsaGetAppliedCAPIDs;Returns an array of central access policies (CAPs) identifiers (CAPIDs) of all the CAPs applied on a specific computer.;PLSA_UNICODE_STRING SystemName, PSID **CAPIDs, PULONG CAPIDCount
LSA_GET_AUTH_DATA_FOR_USER;The GetAuthDataForUser function retrieves authentication information for a user from the Security Accounts Manager (SAM) database and puts it into a format suitable for the ConvertAuthDataToToken function.;PSECURITY_STRING Name, SECPKG_NAME_TYPE NameType, PSECURITY_STRING Prefix, PUCHAR *UserAuthData, PULONG UserAuthDataSize, PUNICODE_STRING UserFlatName ) {...}
LSA_GET_CALL_INFO;The GetCallInfo function retrieves information about the most recent function call.;PSECPKG_CALL_INFO Info ) {...}
LSA_GET_CLIENT_INFO;The GetClientInfo function gets information about the client process, such as thread and process ID, and flags indicating the client's state and privileges.;PSECPKG_CLIENT_INFO ClientInfo ) {...}
LSA_GET_CREDENTIALS;Retrieves credentials associated with a logon session.;PLUID LogonId, ULONG AuthenticationPackage, PULONG QueryContext, BOOLEAN RetrieveAllCredentials, PLSA_STRING PrimaryKeyValue, PULONG PrimaryKeyLength, PLSA_STRING Credentials ) {...}
LsaGetLogonSessionData;Retrieves information about a specified logon session.;PLUID LogonId, PSECURITY_LOGON_SESSION_DATA *ppLogonSessionData
LSA_GET_USER_AUTH_DATA;The GetUserAuthData function returns the authorization data for the user in a single buffer.;PVOID UserHandle, PUCHAR *UserAuthData, PULONG UserAuthDataSize ) {...}
LsaLogonUser;Authenticates a security principal's logon data by using stored credentials information.;HANDLE LsaHandle, PLSA_STRING OriginName, SECURITY_LOGON_TYPE LogonType, ULONG AuthenticationPackage, PVOID AuthenticationInformation, ULONG AuthenticationInformationLength, PTOKEN_GROUPS LocalGroups, PTOKEN_SOURCE SourceContext, PVOID *ProfileBuffer, PULONG ProfileBufferLength, PLUID LogonId, PHANDLE Token, PQUOTA_LIMITS Quotas, PNTSTATUS SubStatus
LsaLookupAuthenticationPackage;Obtains the unique identifier of an authentication package.;HANDLE LsaHandle, PLSA_STRING PackageName, PULONG AuthenticationPackage
LsaLookupNames;Retrieves the security identifiers (SIDs) that correspond to an array of user, group, or local group names.;LSA_HANDLE PolicyHandle, ULONG Count, PLSA_UNICODE_STRING Names, PLSA_REFERENCED_DOMAIN_LIST *ReferencedDomains, PLSA_TRANSLATED_SID *Sids
LsaLookupPrivilegeValue;Retrieves the locally unique identifier (LUID) used by the Local Security Authority (LSA) to represent the specified privilege name.;LSA_HANDLE PolicyHandle, PLSA_UNICODE_STRING Name, PLUID Value
LsaLookupSids2;Looks up the names that correspond to an array of security identifiers (SIDs) and supports Internet provider identities. If LsaLookupSids2 cannot find a name that corresponds to a SID, the function returns the SID in character form.;LSA_HANDLE PolicyHandle, ULONG LookupOptions, ULONG Count, PSID *Sids, PLSA_REFERENCED_DOMAIN_LIST *ReferencedDomains, PLSA_TRANSLATED_NAME *Names
LsaLookupSids;Looks up the names that correspond to an array of security identifiers (SIDs). If LsaLookupSids cannot find a name that corresponds to a SID, the function returns the SID in character form.;LSA_HANDLE PolicyHandle, ULONG Count, PSID *Sids, PLSA_REFERENCED_DOMAIN_LIST *ReferencedDomains, PLSA_TRANSLATED_NAME *Names
LSA_MAP_BUFFER;Maps a SecBuffer structure into the address space of the security support provider/authentication package (SSP/AP).;PSecBuffer InputBuffer, PSecBuffer OutputBuffer ) {...}
LsaNtStatusToWinError;The LsaNtStatusToWinError function converts an NTSTATUS code returned by an LSA function to a Windows error code.;NTSTATUS Status
LsaOpenPolicy;Opens a handle to the Policy object on a local or remote system.;PLSA_UNICODE_STRING SystemName, PLSA_OBJECT_ATTRIBUTES ObjectAttributes, ACCESS_MASK DesiredAccess, PLSA_HANDLE PolicyHandle
LSA_OPEN_SAM_USER;Retrieves a handle to a user account in the Security Accounts Manager (SAM) database.;PSECURITY_STRING Name, SECPKG_NAME_TYPE NameType, PSECURITY_STRING Prefix, BOOLEAN AllowGuest, ULONG Reserved, PVOID *UserHandle ) {...}
LSA_OPEN_TOKEN_BY_LOGON_ID;Opens the user access token associated with the specified user logon.;PLUID LogonId, HANDLE *RetTokenHandle ) {...}
LsaOpenTrustedDomainByName;The LsaOpenTrustedDomainByName function opens the LSA policy handle of a remote trusted domain. You can pass this handle into LSA function calls in order to set or query the LSA policy of the remote machine.;LSA_HANDLE PolicyHandle, PLSA_UNICODE_STRING TrustedDomainName, ACCESS_MASK DesiredAccess, PLSA_HANDLE TrustedDomainHandle
LSA_PROTECT_MEMORY;Encrypts the specified memory buffer.;PVOID Buffer, ULONG BufferSize ) {...}
LsaQueryCAPs;Returns the Central Access Policies (CAPs) for the specified IDs.;PSID *CAPIDs, ULONG CAPIDCount, PCENTRAL_ACCESS_POLICY *CAPs, PULONG CAPCount
LsaQueryDomainInformationPolicy;Retrieves domain information from the Policyobject.;LSA_HANDLE PolicyHandle, POLICY_DOMAIN_INFORMATION_CLASS InformationClass, PVOID *Buffer
LsaQueryForestTrustInformation;Retrieves forest trust information for the specified Local Security Authority�TrustedDomain object.;LSA_HANDLE PolicyHandle, PLSA_UNICODE_STRING TrustedDomainName, PLSA_FOREST_TRUST_INFORMATION *ForestTrustInfo
LsaQueryInformationPolicy;Retrieves information about a Policy object.;LSA_HANDLE PolicyHandle, POLICY_INFORMATION_CLASS InformationClass, PVOID *Buffer
LsaQueryTrustedDomainInfoByName;The LsaQueryTrustedDomainInfoByName function returns information about a trusted domain.;LSA_HANDLE PolicyHandle, PLSA_UNICODE_STRING TrustedDomainName, TRUSTED_INFORMATION_CLASS InformationClass, PVOID *Buffer
LsaQueryTrustedDomainInfo;The LsaQueryTrustedDomainInfo function retrieves information about a trusted domain.;LSA_HANDLE PolicyHandle, PSID TrustedDomainSid, TRUSTED_INFORMATION_CLASS InformationClass, PVOID *Buffer
LsaRegisterLogonProcess;Establishes a connection to the LSA server and verifies that the caller is a logon application.;PLSA_STRING LogonProcessName, PHANDLE LsaHandle, PLSA_OPERATIONAL_MODE SecurityMode
LSA_REGISTER_NOTIFICATION;Provides a mechanism whereby the security package is notified. Notification can occur at fixed intervals, when an event object is signaled, or during certain system events.;SEC_THREAD_START StartFunction, PVOID Parameter, ULONG NotificationType, ULONG NotificationClass, ULONG NotificationFlags, ULONG IntervalMinutes, HANDLE WaitEvent ) {...}
LsaRegisterPolicyChangeNotification;The LsaRegisterPolicyChangeNotification function registers an event handle with the local security authority (LSA). This event handle is signaled whenever the indicated LSA policy is modified.;POLICY_NOTIFICATION_INFORMATION_CLASS InformationClass, HANDLE NotificationEventHandle
LsaRemoveAccountRights;Removes one or more privileges from an account.;LSA_HANDLE PolicyHandle, PSID AccountSid, BOOLEAN AllRights, PLSA_UNICODE_STRING UserRights, ULONG CountOfRights
LsaRetrievePrivateData;Do not use the LSA private data functions. Instead, use the CryptProtectData and CryptUnprotectData functions.;LSA_HANDLE PolicyHandle, PLSA_UNICODE_STRING KeyName, PLSA_UNICODE_STRING *PrivateData
LsaSetDomainInformationPolicy;Sets domain information to the Policyobject.;LSA_HANDLE PolicyHandle, POLICY_DOMAIN_INFORMATION_CLASS InformationClass, PVOID Buffer
LsaSetForestTrustInformation;Sets the forest trust information for a specified Local Security Authority�TrustedDomain object.;LSA_HANDLE PolicyHandle, PLSA_UNICODE_STRING TrustedDomainName, PLSA_FOREST_TRUST_INFORMATION ForestTrustInfo, BOOLEAN CheckOnly, PLSA_FOREST_TRUST_COLLISION_INFORMATION *CollisionInfo
LsaSetInformationPolicy;Modifies information in a Policy object.;LSA_HANDLE PolicyHandle, POLICY_INFORMATION_CLASS InformationClass, PVOID Buffer
LsaSetTrustedDomainInfoByName;The LsaSetTrustedDomainInfoByName function sets values for a TrustedDomain object.;LSA_HANDLE PolicyHandle, PLSA_UNICODE_STRING TrustedDomainName, TRUSTED_INFORMATION_CLASS InformationClass, PVOID Buffer
LsaSetTrustedDomainInformation;The LsaSetTrustedDomainInformation function modifies a Policy object's information about a trusted domain.;LSA_HANDLE PolicyHandle, PSID TrustedDomainSid, TRUSTED_INFORMATION_CLASS InformationClass, PVOID Buffer
LsaStorePrivateData;Do not use the LSA private data functions. Instead, use the CryptProtectData and CryptUnprotectData functions.;LSA_HANDLE PolicyHandle, PLSA_UNICODE_STRING KeyName, PLSA_UNICODE_STRING PrivateData
LsaUnregisterPolicyChangeNotification;The LsaUnregisterPolicyChangeNotification function disables a previously registered notification event.;POLICY_NOTIFICATION_INFORMATION_CLASS InformationClass, HANDLE NotificationEventHandle
LSA_UPDATE_PRIMARY_CREDENTIALS;Provides a mechanism for one security package to notify other packages that the credentials for a logon session have changed.;PSECPKG_PRIMARY_CRED PrimaryCredentials, PSECPKG_SUPPLEMENTAL_CRED_ARRAY Credentials ) {...}
lstrcatA;Appends one string to another.Warning  Do not use.;LPSTR lpString1, LPCSTR lpString2
lstrcatW;Appends one string to another.Warning  Do not use.;LPWSTR lpString1, LPCWSTR lpString2
lstrcmpA;Compares two character strings. The comparison is case-sensitive.;LPCSTR lpString1, LPCSTR lpString2
lstrcmpiA;Compares two character strings. The comparison is not case-sensitive.;LPCSTR lpString1, LPCSTR lpString2
lstrcmpiW;Compares two character strings. The comparison is not case-sensitive.;LPCWSTR lpString1, LPCWSTR lpString2
lstrcmpW;Compares two character strings. The comparison is case-sensitive.;LPCWSTR lpString1, LPCWSTR lpString2
lstrcpyA;Copies a string to a buffer.;LPSTR lpString1, LPCSTR lpString2
lstrcpynA;Copies a specified number of characters from a source string into a buffer.Warning  Do not use.;LPSTR lpString1, LPCSTR lpString2, int iMaxLength
lstrcpynW;Copies a specified number of characters from a source string into a buffer.Warning  Do not use.;LPWSTR lpString1, LPCWSTR lpString2, int iMaxLength
lstrcpyW;Copies a string to a buffer.;LPWSTR lpString1, LPCWSTR lpString2
lstrlenA;Determines the length of the specified string (not including the terminating null character).;LPCSTR lpString
lstrlenW;Determines the length of the specified string (not including the terminating null character).;LPCWSTR lpString
_lwrite;Writes data to the specified file.;HFILE hFile, LPCCH lpBuffer, UINT uBytes
MakeAbsoluteSD;Creates a security descriptor in absolute format by using a security descriptor in self-relative format as a template.;PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor, PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor, LPDWORD lpdwAbsoluteSecurityDescriptorSize, PACL pDacl, LPDWORD lpdwDaclSize, PACL pSacl, LPDWORD lpdwSaclSize, PSID pOwner, LPDWORD lpdwOwnerSize, PSID pPrimaryGroup, LPDWORD lpdwPrimaryGroupSize
MAKEDLLVERULL;Used to pack DLL version information into a ULONGLONG value.;major, minor, build, qfe
MAKEINTATOM;Converts the specified atom into a string, so it can be passed to functions which accept either atoms or strings.;i
MAKEINTRESOURCEA;Converts an integer value to a resource type compatible with the resource-management functions. This macro is used in place of a string containing the name of the resource.;i
MAKEINTRESOURCEW;Converts an integer value to a resource type compatible with the resource-management functions. This macro is used in place of a string containing the name of the resource.;i
MAKELPARAM;Creates a value for use as an lParam parameter in a message. The macro concatenates the specified values.;l, h
MAKELRESULT;Creates a value for use as a return value from a window procedure. The macro concatenates the specified values.;l, h
MAKEPOINTS;The MAKEPOINTS macro converts a value that contains the x- and y-coordinates of a point into a POINTS structure.;l
MAKEROP4;The MAKEROP4 macro creates a quaternary raster operation code for use with the MaskBlt function.;fore, back
MakeSelfRelativeSD;Creates a security descriptor in self-relative format by using a security descriptor in absolute format as a template.;PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor, PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor, LPDWORD lpdwBufferLength
MakeSignature;Generates a cryptographic checksum of the message, and also includes sequencing information to prevent message loss or insertion.;PCtxtHandle phContext, unsigned long fQOP, PSecBufferDesc pMessage, unsigned long MessageSeqNo
MakeWordList;Creates a word list.;HRECOGNIZER hrec, WCHAR *pBuffer, HRECOWORDLIST *phwl
MAKEWPARAM;Creates a value for use as a wParam parameter in a message. The macro concatenates the specified values.;l, h
MapDialogRect;Converts the specified dialog box units to screen units (pixels).;HWND hDlg, LPRECT lpRect
MapGenericMask;Maps the generic access rights in an access mask to specific and standard access rights. The function applies a mapping supplied in a GENERIC_MAPPING structure.;PDWORD AccessMask, PGENERIC_MAPPING GenericMapping
MapGeneric;The MapGeneric method requests that the generic access rights in an access mask be mapped to their corresponding standard and specific access rights.;const GUID *pguidObjectType, UCHAR *pAceFlags, ACCESS_MASK *pMask
MAPIFreeBuffer;The MAPIFreeBuffer function frees memory allocated by the messaging system.;LPVOID pv
MapUserPhysicalPages;Maps previously allocated physical memory pages at a specified address in an Address Windowing Extensions (AWE) region.;PVOID VirtualAddress, ULONG_PTR NumberOfPages, PULONG_PTR PageArray
MapUserPhysicalPagesScatter;Maps previously allocated physical memory pages at a specified address in an Address Windowing Extensions (AWE) region.;PVOID *VirtualAddresses, ULONG_PTR NumberOfPages, PULONG_PTR PageArray
MapViewOfFile2;Maps a view of a file or a pagefile-backed section into the address space of the specified process.;HANDLE FileMappingHandle, HANDLE ProcessHandle, ULONG64 Offset, PVOID BaseAddress, SIZE_T ViewSize, ULONG AllocationType, ULONG PageProtection
MapViewOfFile3FromApp;Maps a view of a file mapping into the address space of a calling Windows Store app.;HANDLE FileMapping, HANDLE Process, PVOID BaseAddress, ULONG64 Offset, SIZE_T ViewSize, ULONG AllocationType, ULONG PageProtection, MEM_EXTENDED_PARAMETER *ExtendedParameters, ULONG ParameterCount
MapViewOfFile3;Maps a view of a file or a pagefile-backed section into the address space of the specified process.;HANDLE FileMapping, HANDLE Process, PVOID BaseAddress, ULONG64 Offset, SIZE_T ViewSize, ULONG AllocationType, ULONG PageProtection, MEM_EXTENDED_PARAMETER *ExtendedParameters, ULONG ParameterCount
MapViewOfFileEx;Maps a view of a file mapping into the address space of a calling process. A caller can optionally specify a suggested base memory address for the view.;HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap, LPVOID lpBaseAddress
MapViewOfFileExNuma;Maps a view of a file mapping into the address space of a calling process and specifies the NUMA node for the physical memory.;HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap, LPVOID lpBaseAddress, DWORD nndPreferred
MapViewOfFileFromApp;Maps a view of a file mapping into the address space of a calling Windows Store app.;HANDLE hFileMappingObject, ULONG DesiredAccess, ULONG64 FileOffset, SIZE_T NumberOfBytesToMap
MapViewOfFile;Maps a view of a file mapping into the address space of a calling process.;HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap
MapViewOfFileNuma2;Maps a view of a file or a pagefile-backed section into the address space of the specified process.;HANDLE FileMappingHandle, HANDLE ProcessHandle, ULONG64 Offset, PVOID BaseAddress, SIZE_T ViewSize, ULONG AllocationType, ULONG PageProtection, ULONG PreferredNode
MapVirtualKeyA;Translates (maps) a virtual-key code into a scan code or character value, or translates a scan code into a virtual-key code.;UINT uCode, UINT uMapType
MapVirtualKeyExA;Translates (maps) a virtual-key code into a scan code or character value, or translates a scan code into a virtual-key code. The function translates the codes using the input language and an input locale identifier.;UINT uCode, UINT uMapType, HKL dwhkl
MapVirtualKeyExW;Translates (maps) a virtual-key code into a scan code or character value, or translates a scan code into a virtual-key code. The function translates the codes using the input language and an input locale identifier.;UINT uCode, UINT uMapType, HKL dwhkl
MapVirtualKeyW;Translates (maps) a virtual-key code into a scan code or character value, or translates a scan code into a virtual-key code.;UINT uCode, UINT uMapType
MapWindowPoints;The MapWindowPoints function converts (maps) a set of points from a coordinate space relative to one window to a coordinate space relative to another window.;HWND hWndFrom, HWND hWndTo, LPPOINT lpPoints, UINT cPoints
MaskBlt;The MaskBlt function combines the color data for the source and destination bitmaps using the specified mask and raster operation.;HDC hdcDest, int xDest, int yDest, int width, int height, HDC hdcSrc, int xSrc, int ySrc, HBITMAP hbmMask, int xMask, int yMask, DWORD rop
MenuItemFromPoint;Determines which menu item, if any, is at the specified location.;HWND hWnd, HMENU hMenu, POINT ptScreen
MesBufferHandleReset;The MesBufferHandleReset function re-initializes the handle for buffer serialization.;handle_t Handle, unsigned long HandleStyle, MIDL_ES_CODE Operation, char **pBuffer, unsigned long BufferSize, unsigned long *pEncodedSize
MesDecodeBufferHandleCreate;The MesDecodeBufferHandleCreate function creates a decoding handle and initializes it for a (fixed) buffer style of serialization.;char *Buffer, unsigned long BufferSize, handle_t *pHandle
MesDecodeIncrementalHandleCreate;The MesDecodeIncrementalHandleCreate function creates a decoding handle for the incremental style of serialization.;void *UserState, MIDL_ES_READ ReadFn, handle_t *pHandle
MesEncodeDynBufferHandleCreate;The MesEncodeDynBufferHandleCreate function creates an encoding handle and then initializes it for a dynamic buffer style of serialization.;char **pBuffer, unsigned long *pEncodedSize, handle_t *pHandle
MesEncodeFixedBufferHandleCreate;The MesEncodeFixedBufferHandleCreate function creates an encoding handle and then initializes it for a fixed buffer style of serialization.;char *pBuffer, unsigned long BufferSize, unsigned long *pEncodedSize, handle_t *pHandle
MesEncodeIncrementalHandleCreate;The MesEncodeIncrementalHandleCreate function creates an encoding and then initializes it for the incremental style of serialization.;void *UserState, MIDL_ES_ALLOC AllocFn, MIDL_ES_WRITE WriteFn, handle_t *pHandle
MesHandleFree;The MesHandleFree function frees the memory allocated by the serialization handle.;handle_t Handle
MesIncrementalHandleReset;The MesIncrementalHandleReset function re-initializes the handle for incremental serialization.;handle_t Handle, void *UserState, MIDL_ES_ALLOC AllocFn, MIDL_ES_WRITE WriteFn, MIDL_ES_READ ReadFn, MIDL_ES_CODE Operation
MesInqProcEncodingId;The MesInqProcEncodingId function provides the identity of an encoding.;handle_t Handle, PRPC_SYNTAX_IDENTIFIER pInterfaceId, unsigned long *pProcNum
MessageBeep;Plays a waveform sound. The waveform sound for each sound type is identified by an entry in the registry.;UINT uType
MessageBoxA;Displays a modal dialog box that contains a system icon, a set of buttons, and a brief application-specific message, such as status or error information. The message box returns an integer value that indicates which button the user clicked.;HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType
MessageBox;Displays a modal dialog box that contains a system icon, a set of buttons, and a brief application-specific message, such as status or error information. The message box returns an integer value that indicates which button the user clicked.;HWND hWnd, LPCTSTR lpText, LPCTSTR lpCaption, UINT uType
MessageBoxExA;Creates, displays, and operates a message box.;HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType, WORD wLanguageId
MessageBoxExW;Creates, displays, and operates a message box.;HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType, WORD wLanguageId
MessageBoxIndirectA;Creates, displays, and operates a message box. The message box contains application-defined message text and title, any icon, and any combination of predefined push buttons.;const MSGBOXPARAMSA *lpmbp
MessageBoxIndirectW;Creates, displays, and operates a message box. The message box contains application-defined message text and title, any icon, and any combination of predefined push buttons.;const MSGBOXPARAMSW *lpmbp
MessageBoxW;Displays a modal dialog box that contains a system icon, a set of buttons, and a brief application-specific message, such as status or error information. The message box returns an integer value that indicates which button the user clicked.;HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType
MEVT_EVENTPARM;The MEVT_EVENTPARM macro retrieves the event parameters or length from the value specified in the dwEvent member of a MIDIEVENT structure.;x
MEVT_EVENTTYPE;The MEVT_EVENTTYPE macro retrieves the event type from the value specified in the dwEvent member of a MIDIEVENT structure.;x
midiConnect;The midiConnect function connects a MIDI input device to a MIDI thru or output device, or connects a MIDI thru device to a MIDI output device.;HMIDI hmi, HMIDIOUT hmo, LPVOID pReserved
midiDisconnect;The midiDisconnect function disconnects a MIDI input device from a MIDI thru or output device, or disconnects a MIDI thru device from a MIDI output device.;HMIDI hmi, HMIDIOUT hmo, LPVOID pReserved
midiInAddBuffer;The midiInAddBuffer function sends an input buffer to a specified opened MIDI input device. This function is used for system-exclusive messages.;HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh
midiInClose;The midiInClose function closes the specified MIDI input device.;HMIDIIN hmi
midiInGetDevCapsA;The midiInGetDevCaps function determines the capabilities of a specified MIDI input device.;UINT_PTR uDeviceID, LPMIDIINCAPSA pmic, UINT cbmic
midiInGetDevCaps;The midiInGetDevCaps function determines the capabilities of a specified MIDI input device.;UINT uDeviceID, LPMIDIINCAPS pmic, UINT cbmic
midiInGetDevCapsW;The midiInGetDevCaps function determines the capabilities of a specified MIDI input device.;UINT_PTR uDeviceID, LPMIDIINCAPSW pmic, UINT cbmic
midiInGetErrorTextA;The midiInGetErrorText function retrieves a textual description for an error identified by the specified error code.;MMRESULT mmrError, LPSTR pszText, UINT cchText
midiInGetErrorText;The midiInGetErrorText function retrieves a textual description for an error identified by the specified error code.;MMRESULT mmrError, LPSTR pszText, UINT cchText
midiInGetErrorTextW;The midiInGetErrorText function retrieves a textual description for an error identified by the specified error code.;MMRESULT mmrError, LPWSTR pszText, UINT cchText
midiInGetID;The midiInGetID function gets the device identifier for the given MIDI input device.;HMIDIIN hmi, LPUINT puDeviceID
midiInGetNumDevs;The midiInGetNumDevs function retrieves the number of MIDI input devices in the system.;
midiInMessage;The midiInMessage function sends a message to the MIDI device driver.;HMIDIIN hmi, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2
midiInOpen;The midiInOpen function opens a specified MIDI input device.;LPHMIDIIN phmi, UINT uDeviceID, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen
midiInPrepareHeader;The midiInPrepareHeader function prepares a buffer for MIDI input.;HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh
midiInReset;The midiInReset function stops input on a given MIDI input device.;HMIDIIN hmi
midiInStart;The midiInStart function starts MIDI input on the specified MIDI input device.;HMIDIIN hmi
midiInStop;The midiInStop function stops MIDI input on the specified MIDI input device.;HMIDIIN hmi
midiInUnprepareHeader;The midiInUnprepareHeader function cleans up the preparation performed by the midiInPrepareHeader function.;HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh
midiOutCacheDrumPatches;The midiOutCacheDrumPatches function requests that an internal MIDI synthesizer device preload and cache a specified set of key-based percussion patches.;HMIDIOUT hmo, UINT uPatch, LPWORD pwkya, UINT fuCache
midiOutCachePatches;The midiOutCachePatches function requests that an internal MIDI synthesizer device preload and cache a specified set of patches.;HMIDIOUT hmo, UINT uBank, LPWORD pwpa, UINT fuCache
midiOutClose;The midiOutClose function closes the specified MIDI output device.;HMIDIOUT hmo
midiOutGetDevCapsA;The midiOutGetDevCaps function queries a specified MIDI output device to determine its capabilities.;UINT_PTR uDeviceID, LPMIDIOUTCAPSA pmoc, UINT cbmoc
midiOutGetDevCaps;The midiOutGetDevCaps function queries a specified MIDI output device to determine its capabilities.;UINT uDeviceID, LPMIDIOUTCAPS pmoc, UINT cbmoc
midiOutGetDevCapsW;The midiOutGetDevCaps function queries a specified MIDI output device to determine its capabilities.;UINT_PTR uDeviceID, LPMIDIOUTCAPSW pmoc, UINT cbmoc
midiOutGetErrorTextA;The midiOutGetErrorText function retrieves a textual description for an error identified by the specified error code.;MMRESULT mmrError, LPSTR pszText, UINT cchText
midiOutGetErrorText;The midiOutGetErrorText function retrieves a textual description for an error identified by the specified error code.;MMRESULT mmrError, LPSTR pszText, UINT cchText
midiOutGetErrorTextW;The midiOutGetErrorText function retrieves a textual description for an error identified by the specified error code.;MMRESULT mmrError, LPWSTR pszText, UINT cchText
midiOutGetID;The midiOutGetID function retrieves the device identifier for the given MIDI output device.;HMIDIOUT hmo, LPUINT puDeviceID
midiOutGetNumDevs;The midiOutGetNumDevs function retrieves the number of MIDI output devices present in the system.;
midiOutGetVolume;The midiOutGetVolume function retrieves the current volume setting of a MIDI output device.;HMIDIOUT hmo, LPDWORD pdwVolume
midiOutLongMsg;The midiOutLongMsg function sends a system-exclusive MIDI message to the specified MIDI output device.;HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh
midiOutMessage;The midiOutMessage function sends a message to the MIDI device drivers. This function is used only for driver-specific messages that are not supported by the MIDI API.;HMIDIOUT hmo, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2
midiOutOpen;The midiOutOpen function opens a MIDI output device for playback.;LPHMIDIOUT phmo, UINT uDeviceID, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen
midiOutPrepareHeader;The midiOutPrepareHeader function prepares a MIDI system-exclusive or stream buffer for output.;HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh
midiOutReset;The midiOutReset function turns off all notes on all MIDI channels for the specified MIDI output device.;HMIDIOUT hmo
midiOutSetVolume;The midiOutSetVolume function sets the volume of a MIDI output device.;HMIDIOUT hmo, DWORD dwVolume
midiOutShortMsg;The midiOutShortMsg function sends a short MIDI message to the specified MIDI output device.;HMIDIOUT hmo, DWORD dwMsg
midiOutUnprepareHeader;The midiOutUnprepareHeader function cleans up the preparation performed by the midiOutPrepareHeader function.;HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh
midiStreamClose;The midiStreamClose function closes an open MIDI stream.;HMIDISTRM hms
midiStreamOpen;The midiStreamOpen function opens a MIDI stream for output. By default, the device is opened in paused mode. The stream handle retrieved by this function must be used in all subsequent references to the stream.;LPHMIDISTRM phms, LPUINT puDeviceID, DWORD cMidi, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen
midiStreamOut;The midiStreamOut function plays or queues a stream (buffer) of MIDI data to a MIDI output device.;HMIDISTRM hms, LPMIDIHDR pmh, UINT cbmh
midiStreamPause;The midiStreamPause function pauses playback of a specified MIDI stream.;HMIDISTRM hms
midiStreamPosition;The midiStreamPosition function retrieves the current position in a MIDI stream.;HMIDISTRM hms, LPMMTIME lpmmt, UINT cbmmt
midiStreamProperty;The midiStreamProperty function sets or retrieves properties of a MIDI data stream associated with a MIDI output device.;HMIDISTRM hms, LPBYTE lppropdata, DWORD dwProperty
midiStreamRestart;The midiStreamRestart function restarts a paused MIDI stream.;HMIDISTRM hms
midiStreamStop;The midiStreamStop function turns off all notes on all MIDI channels for the specified MIDI output device.;HMIDISTRM hms
mixerClose;The mixerClose function closes the specified mixer device.;HMIXER hmx
mixerGetControlDetailsA;The mixerGetControlDetails function retrieves details about a single control associated with an audio line.;HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails
mixerGetControlDetails;The mixerGetControlDetails function retrieves details about a single control associated with an audio line.;HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails
mixerGetControlDetailsW;The mixerGetControlDetails function retrieves details about a single control associated with an audio line.;HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails
mixerGetDevCapsA;The mixerGetDevCaps function queries a specified mixer device to determine its capabilities.;UINT_PTR uMxId, LPMIXERCAPSA pmxcaps, UINT cbmxcaps
mixerGetDevCaps;The mixerGetDevCaps function queries a specified mixer device to determine its capabilities.;UINT uMxId, LPMIXERCAPS pmxcaps, UINT cbmxcaps
mixerGetDevCapsW;The mixerGetDevCaps function queries a specified mixer device to determine its capabilities.;UINT_PTR uMxId, LPMIXERCAPSW pmxcaps, UINT cbmxcaps
mixerGetID;The mixerGetID function retrieves the device identifier for a mixer device associated with a specified device handle.;HMIXEROBJ hmxobj, UINT *puMxId, DWORD fdwId
mixerGetLineControlsA;The mixerGetLineControls function retrieves one or more controls associated with an audio line.;HMIXEROBJ hmxobj, LPMIXERLINECONTROLSA pmxlc, DWORD fdwControls
mixerGetLineControls;The mixerGetLineControls function retrieves one or more controls associated with an audio line.;HMIXEROBJ hmxobj, LPMIXERLINECONTROLS pmxlc, DWORD fdwControls
mixerGetLineControlsW;The mixerGetLineControls function retrieves one or more controls associated with an audio line.;HMIXEROBJ hmxobj, LPMIXERLINECONTROLSW pmxlc, DWORD fdwControls
mixerGetLineInfoA;The mixerGetLineInfo function retrieves information about a specific line of a mixer device.;HMIXEROBJ hmxobj, LPMIXERLINEA pmxl, DWORD fdwInfo
mixerGetLineInfo;The mixerGetLineInfo function retrieves information about a specific line of a mixer device.;HMIXEROBJ hmxobj, LPMIXERLINE pmxl, DWORD fdwInfo
mixerGetLineInfoW;The mixerGetLineInfo function retrieves information about a specific line of a mixer device.;HMIXEROBJ hmxobj, LPMIXERLINEW pmxl, DWORD fdwInfo
mixerGetNumDevs;The mixerGetNumDevs function retrieves the number of mixer devices present in the system.;
mixerMessage;The mixerMessage function sends a custom mixer driver message directly to a mixer driver.;HMIXER hmx, UINT uMsg, DWORD_PTR dwParam1, DWORD_PTR dwParam2
mixerOpen;The mixerOpen function opens a specified mixer device and ensures that the device will not be removed until the application closes the handle.;LPHMIXER phmx, UINT uMxId, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen
mixerSetControlDetails;The mixerSetControlDetails function sets properties of a single control associated with an audio line.;HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails
mmioAdvance;The mmioAdvance function advances the I/O buffer of a file set up for direct I/O buffer access with the mmioGetInfo function.;HMMIO hmmio, LPMMIOINFO pmmioinfo, UINT fuAdvance
mmioAscend;The mmioAscend function ascends out of a chunk in a RIFF file descended into with the mmioDescend function or created with the mmioCreateChunk function.;HMMIO hmmio, LPMMCKINFO pmmcki, UINT fuAscend
mmioClose;The mmioClose function closes a file that was opened by using the mmioOpen function.;HMMIO hmmio, UINT fuClose
mmioCreateChunk;The mmioCreateChunk function creates a chunk in a RIFF file that was opened by using the mmioOpen function.;HMMIO hmmio, LPMMCKINFO pmmcki, UINT fuCreate
mmioDescend;The mmioDescend function descends into a chunk of a RIFF file that was opened by using the mmioOpen function. It can also search for a given chunk.;HMMIO hmmio, LPMMCKINFO pmmcki, const MMCKINFO *pmmckiParent, UINT fuDescend
mmioFlush;The mmioFlush function writes the I/O buffer of a file to disk if the buffer has been written to.;HMMIO hmmio, UINT fuFlush
mmioGetInfo;The mmioGetInfo function retrieves information about a file opened by using the mmioOpen function. This information allows the application to directly access the I/O buffer, if the file is opened for buffered I/O.;HMMIO hmmio, LPMMIOINFO pmmioinfo, UINT fuInfo
mmioInstallIOProcA;The mmioInstallIOProc function installs or removes a custom I/O procedure. This function also locates an installed I/O procedure, using its corresponding four-character code.;FOURCC fccIOProc, LPMMIOPROC pIOProc, DWORD dwFlags
mmioInstallIOProc;The mmioInstallIOProc function installs or removes a custom I/O procedure. This function also locates an installed I/O procedure, using its corresponding four-character code.;FOURCC fccIOProc, LPMMIOPROC pIOProc, DWORD dwFlags
mmioInstallIOProcW;The mmioInstallIOProc function installs or removes a custom I/O procedure. This function also locates an installed I/O procedure, using its corresponding four-character code.;FOURCC fccIOProc, LPMMIOPROC pIOProc, DWORD dwFlags
mmioOpenA;The mmioOpen function opens a file for unbuffered or buffered I/O; creates a file; deletes a file; or checks whether a file exists.;LPSTR pszFileName, LPMMIOINFO pmmioinfo, DWORD fdwOpen
mmioOpen;The mmioOpen function opens a file for unbuffered or buffered I/O; creates a file; deletes a file; or checks whether a file exists.;LPSTR pszFileName, LPMMIOINFO pmmioinfo, DWORD fdwOpen
mmioOpenW;The mmioOpen function opens a file for unbuffered or buffered I/O; creates a file; deletes a file; or checks whether a file exists.;LPWSTR pszFileName, LPMMIOINFO pmmioinfo, DWORD fdwOpen
mmioRead;The mmioRead function reads a specified number of bytes from a file opened by using the mmioOpen function.;HMMIO hmmio, HPSTR pch, LONG cch
mmioRenameA;The mmioRename function renames the specified file.;LPCSTR pszFileName, LPCSTR pszNewFileName, LPCMMIOINFO pmmioinfo, DWORD fdwRename
mmioRename;The mmioRename function renames the specified file.;LPCSTR pszFileName, LPCSTR pszNewFileName, const MMIOINFO *pmmioinfo, DWORD fdwRename
mmioRenameW;The mmioRename function renames the specified file.;LPCWSTR pszFileName, LPCWSTR pszNewFileName, LPCMMIOINFO pmmioinfo, DWORD fdwRename
mmioSeek;The mmioSeek function changes the current file position in a file opened by using the mmioOpen function.;HMMIO hmmio, LONG lOffset, int iOrigin
mmioSendMessage;The mmioSendMessage function sends a message to the I/O procedure associated with the specified file.;HMMIO hmmio, UINT uMsg, LPARAM lParam1, LPARAM lParam2
mmioSetBuffer;The mmioSetBuffer function enables or disables buffered I/O, or changes the buffer or buffer size for a file opened by using the mmioOpen function.;HMMIO hmmio, LPSTR pchBuffer, LONG cchBuffer, UINT fuBuffer
mmioSetInfo;The mmioSetInfo function updates the information retrieved by the mmioGetInfo function about a file opened by using the mmioOpen function. Use this function to terminate direct buffer access of a file opened for buffered I/O.;HMMIO hmmio, LPCMMIOINFO pmmioinfo, UINT fuInfo
mmioStringToFOURCCA;The mmioStringToFOURCC function converts a null-terminated string to a four-character code.;LPCSTR sz, UINT uFlags
mmioStringToFOURCC;The mmioStringToFOURCC function converts a null-terminated string to a four-character code.;LPCSTR sz, UINT uFlags
mmioStringToFOURCCW;The mmioStringToFOURCC function converts a null-terminated string to a four-character code.;LPCWSTR sz, UINT uFlags
mmioWrite;The mmioWrite function writes a specified number of bytes to a file opened by using the mmioOpen function.;HMMIO hmmio, const char _huge *pch, LONG cch
ModifyMenuA;Changes an existing menu item.;HMENU hMnu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCSTR lpNewItem
ModifyMenuW;Changes an existing menu item.;HMENU hMnu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCWSTR lpNewItem
ModifyWorldTransform;The ModifyWorldTransform function changes the world transformation for a device context using the specified mode.;HDC hdc, const XFORM *lpxf, DWORD mode
MonitorFromPoint;The MonitorFromPoint function retrieves a handle to the display monitor that contains a specified point.;POINT pt, DWORD dwFlags
MonitorFromRect;The MonitorFromRect function retrieves a handle to the display monitor that has the largest area of intersection with a specified rectangle.;LPCRECT lprc, DWORD dwFlags
MonitorFromWindow;The MonitorFromWindow function retrieves a handle to the display monitor that has the largest area of intersection with the bounding rectangle of a specified window.;HWND hwnd, DWORD dwFlags
MountNtmsMedia;The MountNtmsMedia function synchronously mounts one or more pieces of media.;HANDLE hSession, LPNTMS_GUID lpMediaId, LPNTMS_GUID lpDriveId, DWORD dwCount, DWORD dwOptions, int dwPriority, DWORD dwTimeout, LPNTMS_MOUNT_INFORMATION lpMountInformation
mouse_event;The mouse_event function synthesizes mouse motion and button clicks.;DWORD dwFlags, DWORD dx, DWORD dy, DWORD dwData, ULONG_PTR dwExtraInfo
MoveFileA;Moves an existing file or a directory, including its children.;LPCSTR lpExistingFileName, LPCSTR lpNewFileName
MoveFileExA;Moves an existing file or directory, including its children, with various move options.;LPCSTR lpExistingFileName, LPCSTR lpNewFileName, DWORD dwFlags
MoveFileExW;Moves an existing file or directory, including its children, with various move options.;LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, DWORD dwFlags
MoveFile;Moves an existing file or a directory, including its children.;LPCTSTR lpExistingFileName, LPCTSTR lpNewFileName
MoveFileTransactedA;Moves an existing file or a directory, including its children, as a transacted operation.;LPCSTR lpExistingFileName, LPCSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, DWORD dwFlags, HANDLE hTransaction
MoveFileTransactedW;Moves an existing file or a directory, including its children, as a transacted operation.;LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, DWORD dwFlags, HANDLE hTransaction
MoveFileWithProgressA;Moves a file or directory, including its children. You can provide a callback function that receives progress notifications.;LPCSTR lpExistingFileName, LPCSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, DWORD dwFlags
MoveFileWithProgressW;Moves a file or directory, including its children. You can provide a callback function that receives progress notifications.;LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, LPPROGRESS_ROUTINE lpProgressRoutine, LPVOID lpData, DWORD dwFlags
MoveFileW;Moves an existing file or a directory, including its children.;LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName
MoveToEx;The MoveToEx function updates the current position to the specified point and optionally returns the previous position.;HDC hdc, int x, int y, LPPOINT lppt
MoveToNtmsMediaPool;The MoveToNtmsMediaPool function moves the specified medium from its current media pool to the specified media pool.;HANDLE hSession, LPNTMS_GUID lpMediaId, LPNTMS_GUID lpPoolId
MoveWindow;Changes the position and dimensions of the specified window.;HWND hWnd, int X, int Y, int nWidth, int nHeight, BOOL bRepaint
MprAdminAcceptNewConnection2;Remote Access Service calls the MprAdminAcceptNewConnection2 function each time a new user dials in and successfully completes RAS authentication. MprAdminAcceptNewConnection2 determines whether the user is allowed to connect.;RAS_CONNECTION_0 *pRasConnection0, RAS_CONNECTION_1 *pRasConnection1, RAS_CONNECTION_2 *pRasConnection2
MprAdminAcceptNewConnection3;Remote Access Service calls the MprAdminAcceptNewConnection3 function each time a new user dials in and successfully completes RAS authentication. MprAdminAcceptNewConnection3 determines whether the user is allowed to connect.;RAS_CONNECTION_0 *pRasConnection0, RAS_CONNECTION_1 *pRasConnection1, RAS_CONNECTION_2 *pRasConnection2, RAS_CONNECTION_3 *pRasConnection3
MprAdminAcceptNewConnectionEx;Remote Access Service (RAS) calls the MprAdminAcceptNewConnectionEx function each time a new user dials in and successfully completes a RAS authentication. MprAdminAcceptNewConnectionEx determines whether the user is allowed to connect.;RAS_CONNECTION_EX *pRasConn
MprAdminAcceptNewConnection;Remote Access Service calls the MprAdminAcceptNewConnection function each time a new user dials in and successfully completes RAS authentication. MprAdminAcceptNewConnection determines whether the user is allowed to connect.;RAS_CONNECTION_0 *pRasConnection0, RAS_CONNECTION_1 *pRasConnection1
MprAdminAcceptNewLink;Remote Access Service (RAS) calls the MprAdminAcceptNewLink function each time a link is created for a particular connection.;RAS_PORT_0 *pRasPort0, RAS_PORT_1 *pRasPort1
MprAdminAcceptReauthenticationEx;Remote Access Service (RAS) calls the MprAdminAcceptReauthenticationEx function whenever the quarantine state of the client changes.;RAS_CONNECTION_EX *pRasConn
MprAdminAcceptReauthentication;Remote Access Service calls the MprAdminAcceptReauthentication function whenever the quarantine state of the client changes.;RAS_CONNECTION_0 *pRasConnection0, RAS_CONNECTION_1 *pRasConnection1, RAS_CONNECTION_2 *pRasConnection2, RAS_CONNECTION_3 *pRasConnection3
MprAdminBufferFree;The MprAdminBufferFree function frees memory buffers returned by _MprAdminDeviceEnum, MprAdminInterfaceGetInfo, MprAdminInterfaceDeviceGetInfo, MprAdminInterfaceEnum, MprAdminServerGetInfo, MprAdminInterfaceTransportGetInfo, and MprAdminTransportGetInfo.;LPVOID pBuffer
MprAdminConnectionClearStats;The MprAdminConnectionClearStats function resets the statistics counters for the specified connection.;RAS_SERVER_HANDLE hRasServer, HANDLE hRasConnection
MprAdminConnectionEnumEx;The MprAdminConnectionEnumEx function enumerates the active connections for a specified RRAS server.;RAS_SERVER_HANDLE hRasServer, PMPRAPI_OBJECT_HEADER pObjectHeader, DWORD dwPreferedMaxLen, LPDWORD lpdwEntriesRead, LPDWORD lpdwTotalEntries, PRAS_CONNECTION_EX *ppRasConn, LPDWORD lpdwResumeHandle
MprAdminConnectionEnum;The MprAdminConnectionEnum function enumerates all active connections.;RAS_SERVER_HANDLE hRasServer, DWORD dwLevel, LPBYTE *lplpbBuffer, DWORD dwPrefMaxLen, LPDWORD lpdwEntriesRead, LPDWORD lpdwTotalEntries, LPDWORD lpdwResumeHandle
MprAdminConnectionGetInfoEx;Retrieves the connection information for a specific connection on a specified RRAS server.;RAS_SERVER_HANDLE hRasServer, HANDLE hRasConnection, PRAS_CONNECTION_EX pRasConnection
MprAdminConnectionGetInfo;Retrieves data about a specific connection.;RAS_SERVER_HANDLE hRasServer, DWORD dwLevel, HANDLE hRasConnection, LPBYTE *lplpbBuffer
MprAdminConnectionHangupNotification2;Remote Access Service calls the MprAdminConnectionHangupNotification2 function after the last link for the specified connection has been dismantled.;RAS_CONNECTION_0 *pRasConnection0, RAS_CONNECTION_1 *pRasConnection1, RAS_CONNECTION_2 *pRasConnection2
MprAdminConnectionHangupNotification3;Remote Access Service calls the MprAdminConnectionHangupNotification3 function after the last link for the specified connection has been dismantled.;RAS_CONNECTION_0 *pRasConnection0, RAS_CONNECTION_1 *pRasConnection1, RAS_CONNECTION_2 *pRasConnection2, RAS_CONNECTION_3 *pRasConnection3
MprAdminConnectionHangupNotificationEx;Remote Access Service (RAS) calls the MprAdminConnectionHangupNotificationEx function after the last link for the specified connection has been dismantled.;RAS_CONNECTION_EX *pRasConn
MprAdminConnectionHangupNotification;Remote Access Service calls the MprAdminConnectionHangupNotification function after the last link for the specified connection has been dismantled.;RAS_CONNECTION_0 *pRasConnection0, RAS_CONNECTION_1 *pRasConnection1
MprAdminConnectionRemoveQuarantine;The MprAdminConnectionRemoveQuarantine function removes quarantine filters on a dialed-in RAS client if the filters were applied as a result of Internet Authentication Service (IAS) policies.;HANDLE hRasServer, HANDLE hRasConnection, BOOL fIsIpAddress
MprAdminDeregisterConnectionNotification;The MprAdminDeregisterConnectionNotification function deregisters an event object that was previously registered using MprAdminRegisterConnectionNotification. Once deregistered, this event is no longer signaled when an interface connects or disconnects.;MPR_SERVER_HANDLE hMprServer, HANDLE hEventNotification
MprAdminDeviceEnum;Function is called to enumerate RAS capable devices installed on the computer that can return their name and type.;MPR_SERVER_HANDLE hMprServer, DWORD dwLevel, LPBYTE *lplpbBuffer, LPDWORD lpdwTotalEntries
MprAdminEstablishDomainRasServer;The MprAdminEstablishDomainRasServer function establishes the given machine as a Remote Access Server in the domain. This function must be executed only on a machine joined to a domain.;LPWSTR pszDomain, LPWSTR pszMachine, BOOL bEnable
MprAdminGetErrorString;The MprAdminGetErrorString function returns the string associated with a router error from Mprerror.h.;DWORD dwError, LPWSTR *lplpwsErrorString
MprAdminGetIpAddressForUser;RAS calls the MprAdminGetIpAddressForUser function once for each user that requires an IP address.;WCHAR *lpwszUserName, WCHAR *lpwszPortName, DWORD *lpdwIpAddress, BOOL *bNotifyRelease
MprAdminGetIpv6AddressForUser;RAS calls the MprAdminGetIpv6AddressForUser function once for each user that requires an IPv6 address.;WCHAR *lpwszUserName, WCHAR *lpwszPortName, IN6_ADDR *lpdwIpv6Address, BOOL *bNotifyRelease
MprAdminGetPDCServer;The MprAdminGetPDCServer function retrieves the name of the server with the master User Accounts Subsystem (UAS) from either a domain name or a server name. Either the domain name parameter or the server name parameter may be NULL, but not both.;LPCWSTR lpszDomain, LPCWSTR lpszServer, LPWSTR lpszPDCServer
MprAdminInitializeDllEx;When the Routing and Remote Access Service (RRAS) starts, it calls the MprAdminInitializeDll function that is exported by the administration DLL.;PMPRAPI_ADMIN_DLL_CALLBACKS pAdminCallbacks
MprAdminInitializeDll;When the Routing and Remote Access Service (RRAS) starts, it calls the MprAdminInitializeDll function that is exported by the administration DLL. Use this function to perform any required initialization for the DLL.;
MprAdminInterfaceConnect;The MprAdminInterfaceConnect function creates a connection to the specified WAN interface.;MPR_SERVER_HANDLE hMprServer, HANDLE hInterface, HANDLE hEvent, BOOL fSynchronous
MprAdminInterfaceCreate;The MprAdminInterfaceCreate function creates an interface on a specified server.;MPR_SERVER_HANDLE hMprServer, DWORD dwLevel, LPBYTE lpbBuffer, HANDLE *phInterface
MprAdminInterfaceDelete;The MprAdminInterfaceDelete function deletes an interface on a specified server.;MPR_SERVER_HANDLE hMprServer, HANDLE hInterface
MprAdminInterfaceDeviceGetInfo;The MprAdminInterfaceDeviceGetInfo retrieves information about a device that is used in a router demand-dial interface.;MPR_SERVER_HANDLE hMprServer, HANDLE hInterface, DWORD dwIndex, DWORD dwLevel, LPBYTE *lplpBuffer
MprAdminInterfaceDeviceSetInfo;The MprAdminInterfaceDeviceSetInfo creates or modifies a device that is used in a router demand-dial interface.;MPR_SERVER_HANDLE hMprServer, HANDLE hInterface, DWORD dwIndex, DWORD dwLevel, LPBYTE lpbBuffer
MprAdminInterfaceDisconnect;The MprAdminInterfaceDisconnect function disconnects a connected WAN interface.;MPR_SERVER_HANDLE hMprServer, HANDLE hInterface
MprAdminInterfaceEnum;The MprAdminInterfaceEnum function enumerates all the interfaces on a specified server.;MPR_SERVER_HANDLE hMprServer, DWORD dwLevel, LPBYTE *lplpbBuffer, DWORD dwPrefMaxLen, LPDWORD lpdwEntriesRead, LPDWORD lpdwTotalEntries, LPDWORD lpdwResumeHandle
MprAdminInterfaceGetCredentialsEx;Use the MprAdminInterfaceGetCredentialsEx function to retrieve extended credentials information for the specified interface. Use this function to retrieve credentials information used for Extensible Authentication Protocols (EAPs).;MPR_SERVER_HANDLE hMprServer, HANDLE hInterface, DWORD dwLevel, LPBYTE *lplpbBuffer
MprAdminInterfaceGetCredentials;Use the MprAdminInterfaceGetCredentials function to retrieve the domain, user name, and password for dialing out on the specified demand-dial interface.;LPWSTR lpwsServer, LPWSTR lpwsInterfaceName, LPWSTR lpwsUserName, LPWSTR lpwsPassword, LPWSTR lpwsDomainName
MprAdminInterfaceGetCustomInfoEx;Retrieves tunnel-specific configuration for a specified demand dial interface on a specified server.;MPR_SERVER_HANDLE hMprServer, HANDLE hInterface, PMPR_IF_CUSTOMINFOEX pCustomInfo
MprAdminInterfaceGetHandle;The MprAdminInterfaceGetHandle function retrieves a handle to a specified interface.;MPR_SERVER_HANDLE hMprServer, LPWSTR lpwsInterfaceName, HANDLE *phInterface, BOOL fIncludeClientInterfaces
MprAdminInterfaceGetInfo;The MprAdminInterfaceGetInfo function retrieves information for a specified interface on a specified server.;MPR_SERVER_HANDLE hMprServer, HANDLE hInterface, DWORD dwLevel, LPBYTE *lplpbBuffer
MprAdminInterfaceQueryUpdateResult;The MprAdminInterfaceQueryUpdateResult function returns the result of the last request to a specified router manager to update its routes for an interface. For more information, see MprAdminInterfaceUpdateRoutes.;MPR_SERVER_HANDLE hMprServer, HANDLE hInterface, DWORD dwProtocolId, LPDWORD lpdwUpdateResult
MprAdminInterfaceSetCredentialsEx;Use the MprAdminInterfaceSetCredentialsEx function to set extended credentials information for an interface. Use this function to set credentials information used for Extensible Authentication Protocols (EAPs).;MPR_SERVER_HANDLE hMprServer, HANDLE hInterface, DWORD dwLevel, LPBYTE lpbBuffer
MprAdminInterfaceSetCredentials;Use MprAdminInterfaceSetCredentials function to set the domain, user name, and password that will be used for dialing out on the specified demand-dial interface.;LPWSTR lpwsServer, LPWSTR lpwsInterfaceName, LPWSTR lpwsUserName, LPWSTR lpwsDomainName, LPWSTR lpwsPassword
MprAdminInterfaceSetCustomInfoEx;Sets the tunnel specific custom configuration for a specified demand dial interface on a specified server.;MPR_SERVER_HANDLE hMprServer, HANDLE hInterface, PMPR_IF_CUSTOMINFOEX pCustomInfo
MprAdminInterfaceSetInfo;The MprAdminInterfaceSetInfo function sets information for a specified interface on a specified server.;MPR_SERVER_HANDLE hMprServer, HANDLE hInterface, DWORD dwLevel, LPBYTE lpbBuffer
MprAdminInterfaceTransportAdd;The MprAdminInterfaceTransportAdd function adds a transport (for example, IP or IPX) to a specified interface.;MPR_SERVER_HANDLE hMprServer, HANDLE hInterface, DWORD dwTransportId, LPBYTE pInterfaceInfo, DWORD dwInterfaceInfoSize
MprAdminInterfaceTransportGetInfo;The MprAdminInterfaceTransportGetInfo function retrieves information about a transport running on a specified interface.;MPR_SERVER_HANDLE hMprServer, HANDLE hInterface, DWORD dwTransportId, LPBYTE *ppInterfaceInfo, LPDWORD lpdwInterfaceInfoSize
MprAdminInterfaceTransportRemove;The MprAdminInterfaceTransportRemove function removes a transport (for example, IP or IPX) from a specified interface.;MPR_SERVER_HANDLE hMprServer, HANDLE hInterface, DWORD dwTransportId
MprAdminInterfaceTransportSetInfo;The MprAdminInterfaceTransportSetInfo function sets information for a transport running on a specified interface.;MPR_SERVER_HANDLE hMprServer, HANDLE hInterface, DWORD dwTransportId, LPBYTE pInterfaceInfo, DWORD dwInterfaceInfoSize
MprAdminInterfaceUpdatePhonebookInfo;The MprAdminInterfaceUpdatePhonebookInfo function forces the router to pick up changes made on a specified demand-dial interface. Call this function after changes are made to a phone-book entry for a demand-dial interface.;MPR_SERVER_HANDLE hMprServer, HANDLE hInterface
MprAdminInterfaceUpdateRoutes;The MprAdminInterfaceUpdateRoutes function requests a specified router manager to update its routing information for a specified interface.;MPR_SERVER_HANDLE hMprServer, HANDLE hInterface, DWORD dwProtocolId, HANDLE hEvent
MprAdminIsDomainRasServer;The MprAdminIsDomainRasServer function returns information regarding whether the given machine is registered as the remote access server in the domain.;LPWSTR pszDomain, LPWSTR pszMachine, PBOOL pbIsRasServer
MprAdminIsServiceInitialized;The MprAdminIsServiceInitialized function checks whether the RRAS service is running on a specified server if the calling process has access.;LPWSTR lpwsServerName, BOOL *fIsServiceInitialized
MprAdminIsServiceRunning;The MprAdminIsServiceRunning function checks whether the RRAS service is running on a specified server if the calling process has access.;LPWSTR lpwsServerName
MprAdminLinkHangupNotification;RAS calls the MprAdminLinkHangupNotification function whenever a link for a particular connection is dismantled.;RAS_PORT_0 *pRasPort0, RAS_PORT_1 *pRasPort1
MprAdminMIBBufferFree;The MprAdminMIBBufferFree function frees buffers returned by the following functions MprAdminMIBEntryGet, MprAdminMIBEntryGetFirst, MprAdminMIBEntryGetNext;LPVOID pBuffer
MprAdminMIBEntryCreate;The MprAdminMIBEntryCreate function creates an entry for one of the variables exported by a routing protocol or router manager.;MIB_SERVER_HANDLE hMibServer, DWORD dwPid, DWORD dwRoutingPid, LPVOID lpEntry, DWORD dwEntrySize
MprAdminMIBEntryDelete;The MprAdminMIBEntryDelete function deletes an entry for one of the variables exported by a routing protocol or router manager.;MIB_SERVER_HANDLE hMibServer, DWORD dwProtocolId, DWORD dwRoutingPid, LPVOID lpEntry, DWORD dwEntrySize
MprAdminMIBEntryGetFirst;The MprAdminMIBEntryGetFirst function retrieves the first variable of some set of variables exported by a protocol or router manager. The module that services the call defines first.;MIB_SERVER_HANDLE hMibServer, DWORD dwProtocolId, DWORD dwRoutingPid, LPVOID lpInEntry, DWORD dwInEntrySize, LPVOID *lplpOutEntry, LPDWORD lpOutEntrySize
MprAdminMIBEntryGetNext;The MprAdminMIBEntryGetNext function retrieves the next variable of some set of variables exported by a protocol or router manager. The module that services the call defines next.;MIB_SERVER_HANDLE hMibServer, DWORD dwProtocolId, DWORD dwRoutingPid, LPVOID lpInEntry, DWORD dwInEntrySize, LPVOID *lplpOutEntry, LPDWORD lpOutEntrySize
MprAdminMIBEntryGet;The MprAdminMIBEntryGet function retrieves the value of one of the variables exported by a routing protocol or router manager.;MIB_SERVER_HANDLE hMibServer, DWORD dwProtocolId, DWORD dwRoutingPid, LPVOID lpInEntry, DWORD dwInEntrySize, LPVOID *lplpOutEntry, LPDWORD lpOutEntrySize
MprAdminMIBEntrySet;The MprAdminMIBEntrySet function sets the value of one of the variables exported by a routing protocol or router manager.;MIB_SERVER_HANDLE hMibServer, DWORD dwProtocolId, DWORD dwRoutingPid, LPVOID lpEntry, DWORD dwEntrySize
MprAdminMIBGetTrapInfo;The MprAdminMIBGetTrapInfo function queries the module that set a trap event for more information about the trap.;MIB_SERVER_HANDLE hMibServer, DWORD dwProtocolId, DWORD dwRoutingPid, LPVOID lpInData, DWORD dwInDataSize, LPVOID *lplpOutData, LPDWORD lpOutDataSize
MprAdminMIBServerConnect;The MprAdminMIBServerConnect function establishes a connection to the router being administered. This call should be made before any other calls to the server. The handle returned by this function is used in subsequent MIB calls.;LPWSTR lpwsServerName, MIB_SERVER_HANDLE *phMibServer
MprAdminMIBServerDisconnect;The MprAdminMIBServerDisconnect function disconnects the connection made by a previous call to MprAdminMIBServerConnect.;MIB_SERVER_HANDLE hMibServer
MprAdminMIBSetTrapInfo;The MprAdminMIBSetTrapInfo function specifies a handle to an event that is signaled whenever a TRAP needs to be issued.;DWORD dwProtocolId, DWORD dwRoutingPid, HANDLE hEvent, LPVOID lpInData, DWORD dwInDataSize, LPVOID *lplpOutData, LPDWORD lpOutDataSize
MprAdminPortClearStats;The MprAdminPortClearStats function resets the statistics for the specified port.;RAS_SERVER_HANDLE hRasServer, HANDLE hPort
MprAdminPortDisconnect;The MprAdminPortDisconnect function disconnects a connection on a specific port.;RAS_SERVER_HANDLE hRasServer, HANDLE hPort
MprAdminPortEnum;Enumerates all active ports in a specific connection, or all ports available for use or currently used by RAS.;RAS_SERVER_HANDLE hRasServer, DWORD dwLevel, HANDLE hRasConnection, LPBYTE *lplpbBuffer, DWORD dwPrefMaxLen, LPDWORD lpdwEntriesRead, LPDWORD lpdwTotalEntries, LPDWORD lpdwResumeHandle
MprAdminPortGetInfo;The MprAdminPortGetInfo function gets information for a specific port.;RAS_SERVER_HANDLE hRasServer, DWORD dwLevel, HANDLE hPort, LPBYTE *lplpbBuffer
MprAdminPortReset;The MprAdminPortReset function resets the communication device attached to the specified port.;RAS_SERVER_HANDLE hRasServer, HANDLE hPort
MprAdminRegisterConnectionNotification;The MprAdminRegisterConnectionNotification function registers an event object with the Demand Dial Manager (DDM) so that, if an interface connects or disconnects, the event is signaled.;MPR_SERVER_HANDLE hMprServer, HANDLE hEventNotification
MprAdminReleaseIpAddress;The MprAdminReleaseIpAddress function is called when a user disconnects and the user's IP address is about to be released.;WCHAR *lpszUserName, WCHAR *lpszPortName, DWORD *lpdwIpAddress
MprAdminReleaseIpv6AddressForUser;The MprAdminReleaseIpv6AddressForUser function is called once for each user that needs to release an IPv6 address.;WCHAR *lpszUserName, WCHAR *lpszPortName, IN6_ADDR *lpdwIpv6Address
MprAdminSendUserMessage;The MprAdminSendUserMessage function sends a message to the user connected on the specified connection.;MPR_SERVER_HANDLE hMprServer, HANDLE hConnection, LPWSTR lpwszMessage
MprAdminServerConnect;The MprAdminServerConnect function establishes a connection to a router for the purpose of administering that router.;LPWSTR lpwsServerName, MPR_SERVER_HANDLE *phMprServer
MprAdminServerDisconnect;The MprAdminServerDisconnect function disconnects the connection made by a previous call to MprAdminServerConnect.;MPR_SERVER_HANDLE hMprServer
MprAdminServerGetCredentials;The MprAdminServerGetCredentials function retrieves the pre-shared key for the specified server.;MPR_SERVER_HANDLE hMprServer, DWORD dwLevel, LPBYTE *lplpbBuffer
MprAdminServerGetInfoEx;The MprAdminServerGetInfoEx function retrieves port information about the specified RRAS server.;MPR_SERVER_HANDLE hMprServer, MPR_SERVER_EX *pServerInfo
MprAdminServerGetInfo;The MprAdminServerGetInfo function retrieves information about the specified RRAS server.;MPR_SERVER_HANDLE hMprServer, DWORD dwLevel, LPBYTE *lplpbBuffer
MprAdminServerSetCredentials;The MprAdminServerSetCredentials functions sets the pre-shared key for the specified server.;MPR_SERVER_HANDLE hMprServer, DWORD dwLevel, LPBYTE lpbBuffer
MprAdminServerSetInfoEx;The MprAdminServerSetInfoEx function sets port information on a specified RRAS server.;MPR_SERVER_HANDLE hMprServer, MPR_SERVER_SET_CONFIG_EX *pServerInfo
MprAdminServerSetInfo;The MprAdminServerSetInfo function is used to set the number of ports for L2TP, PPTP, and SSTP devices when the RRAS service is running.;MPR_SERVER_HANDLE hMprServer, DWORD dwLevel, LPBYTE lpbBuffer
MprAdminTerminateDll;When the RAS shuts down, it calls the MprAdminTerminateDll function exported by the administration DLL. Use this function to perform any required clean-up for the DLL.;
MprAdminTransportCreate;The MprAdminTransportCreate function loads a new transport, and starts the router manager for the transport.;MPR_SERVER_HANDLE hMprServer, DWORD dwTransportId, LPWSTR lpwsTransportName, LPBYTE pGlobalInfo, DWORD dwGlobalInfoSize, LPBYTE pClientInterfaceInfo, DWORD dwClientInterfaceInfoSize, LPWSTR lpwsDLLPath
MprAdminTransportGetInfo;The MprAdminTransportGetInfo function retrieves global information, default client interface information, or both, for a specified transport.;MPR_SERVER_HANDLE hMprServer, DWORD dwTransportId, LPBYTE *ppGlobalInfo, LPDWORD lpdwGlobalInfoSize, LPBYTE *ppClientInterfaceInfo, LPDWORD lpdwClientInterfaceInfoSize
MprAdminTransportSetInfo;The MprAdminTransportSetInfo function sets global information, or default client interface information, or both, for a specified transport.;MPR_SERVER_HANDLE hMprServer, DWORD dwTransportId, LPBYTE pGlobalInfo, DWORD dwGlobalInfoSize, LPBYTE pClientInterfaceInfo, DWORD dwClientInterfaceInfoSize
MprAdminUserGetInfo;The MprAdminUserGetInfo function retrieves all RAS information for a particular user.;LPCWSTR lpszServer, LPCWSTR lpszUser, DWORD dwLevel, LPBYTE lpbBuffer
MprAdminUserSetInfo;The MprAdminUserSetInfo function sets RAS information for the specified user.;LPCWSTR lpszServer, LPCWSTR lpszUser, DWORD dwLevel, const LPBYTE lpbBuffer
MprConfigBufferFree;The MprConfigBufferFree function frees buffers. MprConfigXEnum, MprConfigXGetInfo;LPVOID pBuffer
MprConfigFilterGetInfo;Returns static filtering information for a specified transport protocol type.;HANDLE hMprConfig, DWORD dwLevel, DWORD dwTransportId, LPBYTE lpBuffer
MprConfigFilterSetInfo;Sets the static filtering information for a specified transport protocol type.;HANDLE hMprConfig, DWORD dwLevel, DWORD dwTransportId, LPBYTE lpBuffer
MprConfigGetFriendlyName;The MprConfigGetFriendlyName function returns the friendly name for an interface that corresponds to the specified GUID name.;HANDLE hMprConfig, PWSTR pszGuidName, PWCHAR pszBuffer, DWORD dwBufferSize
MprConfigGetGuidName;The MprConfigGetGuidName function returns the GUID name for an interface that corresponds to the specified friendly name.;HANDLE hMprConfig, PWSTR pszFriendlyName, PWCHAR pszBuffer, DWORD dwBufferSize
MprConfigInterfaceCreate;The MprConfigInterfaceCreate function creates a router interface in the specified router configuration.;HANDLE hMprConfig, DWORD dwLevel, LPBYTE lpbBuffer, HANDLE *phRouterInterface
MprConfigInterfaceDelete;The MprConfigInterfaceDelete function removes a router interface from the router configuration. All transport information associated with this interface is also removed.;HANDLE hMprConfig, HANDLE hRouterInterface
MprConfigInterfaceEnum;The MprConfigInterfaceEnum function enumerates the interfaces that are configured for the router.;HANDLE hMprConfig, DWORD dwLevel, LPBYTE *lplpBuffer, DWORD dwPrefMaxLen, LPDWORD lpdwEntriesRead, LPDWORD lpdwTotalEntries, LPDWORD lpdwResumeHandle
MprConfigInterfaceGetCustomInfoEx;Retrieves the custom IKEv2 policy configuration for the specified interface.;HANDLE hMprConfig, HANDLE hRouterInterface, PMPR_IF_CUSTOMINFOEX pCustomInfo
MprConfigInterfaceGetHandle;The MprConfigInterfaceGetHandle function retrieves a handle to the specified interface's configuration in the specified router configuration.;HANDLE hMprConfig, LPWSTR lpwsInterfaceName, HANDLE *phRouterInterface
MprConfigInterfaceGetInfo;The MprConfigInterfaceGetInfo function retrieves the configuration for the specified interface from the router.;HANDLE hMprConfig, HANDLE hRouterInterface, DWORD dwLevel, LPBYTE *lplpBuffer, LPDWORD lpdwBufferSize
MprConfigInterfaceSetCustomInfoEx;Sets the custom IKEv2 policy configuration for the specified interface.;HANDLE hMprConfig, HANDLE hRouterInterface, PMPR_IF_CUSTOMINFOEX pCustomInfo
MprConfigInterfaceSetInfo;The MprConfigInterfaceSetInfo function sets the configuration for the specified interface.;HANDLE hMprConfig, HANDLE hRouterInterface, DWORD dwLevel, LPBYTE lpbBuffer
MprConfigInterfaceTransportAdd;The MprConfigInterfaceTransportAdd function adds a transport protocol to an interface configuration on the router.;HANDLE hMprConfig, HANDLE hRouterInterface, DWORD dwTransportId, LPWSTR lpwsTransportName, LPBYTE pInterfaceInfo, DWORD dwInterfaceInfoSize, HANDLE *phRouterIfTransport
MprConfigInterfaceTransportEnum;The MprConfigInterfaceTransportEnum function enumerates the transports configured on the specified interface.;HANDLE hMprConfig, HANDLE hRouterInterface, DWORD dwLevel, LPBYTE *lplpBuffer, DWORD dwPrefMaxLen, LPDWORD lpdwEntriesRead, LPDWORD lpdwTotalEntries, LPDWORD lpdwResumeHandle
MprConfigInterfaceTransportGetHandle;The MprConfigInterfaceTransportGetHandle function retrieves a handle to the transport configuration of an interface in the specified router configuration.;HANDLE hMprConfig, HANDLE hRouterInterface, DWORD dwTransportId, HANDLE *phRouterIfTransport
MprConfigInterfaceTransportGetInfo;The MprConfigInterfaceTransportGetInfo function retrieves the configuration information for the specified client on the specified interface.;HANDLE hMprConfig, HANDLE hRouterInterface, HANDLE hRouterIfTransport, LPBYTE *ppInterfaceInfo, LPDWORD lpdwInterfaceInfoSize
MprConfigInterfaceTransportRemove;The MprConfigInterfaceTransportRemove function removes the specified transport from the specified interface configuration on the router.;HANDLE hMprConfig, HANDLE hRouterInterface, HANDLE hRouterIfTransport
MprConfigInterfaceTransportSetInfo;The MprConfigInterfaceTransportSetInfo function updates the configuration information for the client on the specified interface and transport protocol.;HANDLE hMprConfig, HANDLE hRouterInterface, HANDLE hRouterIfTransport, LPBYTE pInterfaceInfo, DWORD dwInterfaceInfoSize
MprConfigServerBackup;The MprConfigServerBackup function creates a backup of the router-manager, interface, and phone-book configuration for the router.;HANDLE hMprConfig, LPWSTR lpwsPath
MprConfigServerConnect;The MprConfigServerConnect function connects to the router to be configured.;LPWSTR lpwsServerName, HANDLE *phMprConfig
MprConfigServerDisconnect;The MprConfigServerDisconnect function disconnects a connection made by a previous call to MprConfigServerConnect.;HANDLE hMprConfig
MprConfigServerGetInfoEx;The MprConfigServerGetInfoEx function retrieves port information for a specified server.;HANDLE hMprConfig, MPR_SERVER_EX *pServerInfo
MprConfigServerGetInfo;The MprConfigServerGetInfo function retrieves server-level configuration information for the specified router.;HANDLE hMprConfig, DWORD dwLevel, LPBYTE *lplpbBuffer
MprConfigServerInstall;The MprConfigServerInstall function configures Routing and Remote Access Service with a default configuration.;DWORD dwLevel, PVOID pBuffer
MprConfigServerRestore;The MprConfigServerRestore function restores the router-manager, interface, and phone-book configuration from a backup created by a previous call to MprConfigServerBackup.;HANDLE hMprConfig, LPWSTR lpwsPath
MprConfigServerSetInfoEx;The MprConfigServerSetInfoEx function sets port information on a specified RRAS server.;HANDLE hMprConfig, MPR_SERVER_SET_CONFIG_EX *pSetServerConfig
MprConfigServerSetInfo;The MprConfigServerSetInfo function is used to set the port count for L2TP, PPTP, and SSTP ports and enable or disable RRAS on them in the registry when the RRAS service is not running so that it is picked up next time the system restarts.;MPR_SERVER_HANDLE hMprServer, DWORD dwLevel, LPBYTE lpbBuffer
MprConfigTransportCreate;The MprConfigTransportCreate function adds the specified transport to the list of transport protocols present in the specified router configuration.;HANDLE hMprConfig, DWORD dwTransportId, LPWSTR lpwsTransportName, LPBYTE pGlobalInfo, DWORD dwGlobalInfoSize, LPBYTE pClientInterfaceInfo, DWORD dwClientInterfaceInfoSize, LPWSTR lpwsDLLPath, HANDLE *phRouterTransport
MprConfigTransportDelete;The MprConfigTransportDelete function removes the specified transport from the list of transports present in the specified router configuration.;HANDLE hMprConfig, HANDLE hRouterTransport
MprConfigTransportEnum;The MprConfigTransportEnum function enumerates the transports configured on the router.;HANDLE hMprConfig, DWORD dwLevel, LPBYTE *lplpBuffer, DWORD dwPrefMaxLen, LPDWORD lpdwEntriesRead, LPDWORD lpdwTotalEntries, LPDWORD lpdwResumeHandle
MprConfigTransportGetHandle;The MprConfigTransportGetHandle function retrieves a handle to the specified transport protocol's configuration in the specified router configuration.;HANDLE hMprConfig, DWORD dwTransportId, HANDLE *phRouterTransport
MprConfigTransportGetInfo;The MprConfigTransportGetInfo function retrieves the configuration for the specified transport protocol from the router.;HANDLE hMprConfig, HANDLE hRouterTransport, LPBYTE *ppGlobalInfo, LPDWORD lpdwGlobalInfoSize, LPBYTE *ppClientInterfaceInfo, LPDWORD lpdwClientInterfaceInfoSize, LPWSTR *lplpwsDLLPath
MprConfigTransportSetInfo;The MprConfigTransportSetInfo function changes the configuration for the specified transport protocol in the specified router configuration.;HANDLE hMprConfig, HANDLE hRouterTransport, LPBYTE pGlobalInfo, DWORD dwGlobalInfoSize, LPBYTE pClientInterfaceInfo, DWORD dwClientInterfaceInfoSize, LPWSTR lpwsDLLPath
MprInfoBlockAdd;The MprInfoBlockAdd function creates a new header that is identical to an existing header with the addition of a new block.;LPVOID lpHeader, DWORD dwInfoType, DWORD dwItemSize, DWORD dwItemCount, LPBYTE lpItemData, LPVOID *lplpNewHeader
MprInfoBlockFind;The MprInfoBlockFind function locates a specified block in an information header, and retrieves information about the block.;LPVOID lpHeader, DWORD dwInfoType, LPDWORD lpdwItemSize, LPDWORD lpdwItemCount, LPBYTE *lplpItemData
MprInfoBlockQuerySize;The MprInfoBlockQuerySize function returns the returns the size of the information header.;LPVOID lpHeader
MprInfoBlockRemove;The MprInfoBlockRemove function creates a new header that is identical to an existing header with a specified block removed.;LPVOID lpHeader, DWORD dwInfoType, LPVOID *lplpNewHeader
MprInfoBlockSet;The MprInfoBlockSet creates a new header that is identical to an existing header with a specified block modified.;LPVOID lpHeader, DWORD dwInfoType, DWORD dwItemSize, DWORD dwItemCount, LPBYTE lpItemData, LPVOID *lplpNewHeader
MprInfoCreate;The MprInfoCreate function creates a new information header.;DWORD dwVersion, LPVOID *lplpNewHeader
MprInfoDelete;The MprInfoDelete function deletes an information header created using MprInfoCreate, or retrieved by MprInfoBlockAdd, MprInfoBlockRemove, or MprInfoBlockSet.;LPVOID lpHeader
MprInfoDuplicate;The MprInfoDuplicate function duplicates an existing information header.;LPVOID lpHeader, LPVOID *lplpNewHeader
MprInfoRemoveAll;The MprInfoRemoveAll function removes all information blocks from the specified header.;LPVOID lpHeader, LPVOID *lplpNewHeader
MsgWaitForMultipleObjectsEx;Waits until one or all of the specified objects are in the signaled state, an I/O completion routine or asynchronous procedure call (APC) is queued to the thread, or the time-out interval elapses. The array of objects can include input event objects.;DWORD nCount, const HANDLE *pHandles, DWORD dwMilliseconds, DWORD dwWakeMask, DWORD dwFlags
MsgWaitForMultipleObjects;Waits until one or all of the specified objects are in the signaled state or the time-out interval elapses. The objects can include input event objects.;DWORD nCount, const HANDLE *pHandles, BOOL fWaitAll, DWORD dwMilliseconds, DWORD dwWakeMask
Msv1_0SubAuthenticationFilter;Performs user logon authentication that is specific to domain controllers.;NETLOGON_LOGON_INFO_CLASS LogonLevel, PVOID LogonInformation, ULONG Flags, PUSER_ALL_INFORMATION UserAll, PULONG WhichFields, PULONG UserFlags, PBOOLEAN Authoritative, PLARGE_INTEGER LogoffTime, PLARGE_INTEGER KickoffTime
Msv1_0SubAuthenticationRoutineEx;Performs Remote Access Service authentication when subauthentication is requested by calling the LogonUser function.;NETLOGON_LOGON_INFO_CLASS LogonLevel, PVOID LogonInformation, ULONG Flags, PUSER_ALL_INFORMATION UserAll, SAM_HANDLE UserHandle, PMSV1_0_VALIDATION_INFO ValidationInfo, PULONG ActionsPerformed
Msv1_0SubAuthenticationRoutineGeneric;Performs Remote Access Service authentication when subauthentication is requested by calling the LsaCallAuthenticationPackage function.;PVOID SubmitBuffer, ULONG SubmitBufferLength, PULONG ReturnBufferLength, PVOID *ReturnBuffer
Msv1_0SubAuthenticationRoutine;Performs client/server-specific authentication.;NETLOGON_LOGON_INFO_CLASS LogonLevel, PVOID LogonInformation, ULONG Flags, PUSER_ALL_INFORMATION UserAll, PULONG WhichFields, PULONG UserFlags, PBOOLEAN Authoritative, PLARGE_INTEGER LogoffTime, PLARGE_INTEGER KickoffTime
MulDiv;Multiplies two 32-bit values and then divides the 64-bit result by a third 32-bit value.;int nNumber, int nNumerator, int nDenominator
MultinetGetConnectionPerformanceA;Returns information about the expected performance of a connection used to access a network resource.;LPNETRESOURCEA lpNetResource, LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct
MultinetGetConnectionPerformanceW;Returns information about the expected performance of a connection used to access a network resource.;LPNETRESOURCEW lpNetResource, LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct
NameFromSid;Gets the display name that corresponds to the specified security identifier (SID).;BSTR bstrSid, long *pSidType, BSTR *pbstrName
NamesFromSids;Gets the display names that correspond to the specified security identifiers (SIDs).;VARIANT vSids, VARIANT *pvSidTypes, VARIANT *pvNames
NCryptCloseProtectionDescriptor;Zeros and frees a protection descriptor object and releases its handle.;NCRYPT_DESCRIPTOR_HANDLE hDescriptor
NCryptCreateClaim;Creates a key attestation claim.;NCRYPT_KEY_HANDLE hSubjectKey, NCRYPT_KEY_HANDLE hAuthorityKey, DWORD dwClaimType, NCryptBufferDesc *pParameterList, PBYTE pbClaimBlob, DWORD cbClaimBlob, DWORD *pcbResult, DWORD dwFlags
NCryptCreatePersistedKey;Creates a new key and stores it in the specified key storage provider.;NCRYPT_PROV_HANDLE hProvider, NCRYPT_KEY_HANDLE *phKey, LPCWSTR pszAlgId, LPCWSTR pszKeyName, DWORD dwLegacyKeySpec, DWORD dwFlags
NCryptCreateProtectionDescriptor;Retrieves a handle to a protection descriptor object.;LPCWSTR pwszDescriptorString, DWORD dwFlags, NCRYPT_DESCRIPTOR_HANDLE *phDescriptor
NCryptDecrypt;Decrypts a block of encrypted data.;NCRYPT_KEY_HANDLE hKey, PBYTE pbInput, DWORD cbInput, VOID *pPaddingInfo, PBYTE pbOutput, DWORD cbOutput, DWORD *pcbResult, DWORD dwFlags
NCryptDeleteKey;Deletes a CNG key.;NCRYPT_KEY_HANDLE hKey, DWORD dwFlags
NCryptDeriveKey;Derives a key from a secret agreement value.;NCRYPT_SECRET_HANDLE hSharedSecret, LPCWSTR pwszKDF, NCryptBufferDesc *pParameterList, PBYTE pbDerivedKey, DWORD cbDerivedKey, DWORD *pcbResult, ULONG dwFlags
NCryptEncrypt;Encrypts a block of data.;NCRYPT_KEY_HANDLE hKey, PBYTE pbInput, DWORD cbInput, VOID *pPaddingInfo, PBYTE pbOutput, DWORD cbOutput, DWORD *pcbResult, DWORD dwFlags
NCryptEnumAlgorithms;Obtains the names of the algorithms that are supported by the specified key storage provider.;NCRYPT_PROV_HANDLE hProvider, DWORD dwAlgOperations, DWORD *pdwAlgCount, NCryptAlgorithmName **ppAlgList, DWORD dwFlags
NCryptEnumKeys;Obtains the names of the keys that are stored by the provider.;NCRYPT_PROV_HANDLE hProvider, LPCWSTR pszScope, NCryptKeyName **ppKeyName, PVOID *ppEnumState, DWORD dwFlags
NCryptEnumStorageProviders;Obtains the names of the registered key storage providers.;DWORD *pdwProviderCount, NCryptProviderName **ppProviderList, DWORD dwFlags
NCryptExportKey;Exports a CNG key to a memory BLOB.;NCRYPT_KEY_HANDLE hKey, NCRYPT_KEY_HANDLE hExportKey, LPCWSTR pszBlobType, NCryptBufferDesc *pParameterList, PBYTE pbOutput, DWORD cbOutput, DWORD *pcbResult, DWORD dwFlags
NCryptFinalizeKey;Completes a CNG key storage key.;NCRYPT_KEY_HANDLE hKey, DWORD dwFlags
NCryptFreeBuffer;Releases a block of memory allocated by a CNG key storage provider.;PVOID pvInput
NCryptFreeObject;Frees a CNG key storage object.;NCRYPT_HANDLE hObject
NCryptGetProperty;Retrieves the value of a named property for a key storage object.;NCRYPT_HANDLE hObject, LPCWSTR pszProperty, PBYTE pbOutput, DWORD cbOutput, DWORD *pcbResult, DWORD dwFlags
NCryptGetProtectionDescriptorInfo;Retrieves a protection descriptor rule string.;NCRYPT_DESCRIPTOR_HANDLE hDescriptor, const NCRYPT_ALLOC_PARA *pMemPara, DWORD dwInfoType, void **ppvInfo
NCryptImportKey;Imports a Cryptography API:_Next Generation (CNG) key from a memory BLOB.;NCRYPT_PROV_HANDLE hProvider, NCRYPT_KEY_HANDLE hImportKey, LPCWSTR pszBlobType, NCryptBufferDesc *pParameterList, NCRYPT_KEY_HANDLE *phKey, PBYTE pbData, DWORD cbData, DWORD dwFlags
NCryptIsAlgSupported;Determines if a CNG key storage provider supports a specific cryptographic algorithm.;NCRYPT_PROV_HANDLE hProvider, LPCWSTR pszAlgId, DWORD dwFlags
NCryptIsKeyHandle;Determines if the specified handle is a CNG key handle.;NCRYPT_KEY_HANDLE hKey
NCryptKeyDerivation;Creates a key from another key by using the specified key derivation function.;NCRYPT_KEY_HANDLE hKey, NCryptBufferDesc *pParameterList, PUCHAR pbDerivedKey, DWORD cbDerivedKey, DWORD *pcbResult, ULONG dwFlags
NCryptNotifyChangeKey;Creates or removes a key change notification.;NCRYPT_PROV_HANDLE hProvider, HANDLE *phEvent, DWORD dwFlags
NCryptOpenKey;Opens a key that exists in the specified CNG key storage provider.;NCRYPT_PROV_HANDLE hProvider, NCRYPT_KEY_HANDLE *phKey, LPCWSTR pszKeyName, DWORD dwLegacyKeySpec, DWORD dwFlags
NCryptOpenStorageProvider;Loads and initializes a CNG key storage provider.;NCRYPT_PROV_HANDLE *phProvider, LPCWSTR pszProviderName, DWORD dwFlags
NCryptProtectSecret;Encrypts data to a specified protection descriptor.;NCRYPT_DESCRIPTOR_HANDLE hDescriptor, DWORD dwFlags, const BYTE *pbData, ULONG cbData, const NCRYPT_ALLOC_PARA *pMemPara, HWND hWnd, BYTE **ppbProtectedBlob, ULONG *pcbProtectedBlob
NCryptQueryProtectionDescriptorName;Retrieves the protection descriptor rule string associated with a registered descriptor display name.;LPCWSTR pwszName, LPWSTR pwszDescriptorString, SIZE_T *pcDescriptorString, DWORD dwFlags
NCryptRegisterProtectionDescriptorName;Registers the display name and the associated rule string for a protection descriptor.;LPCWSTR pwszName, LPCWSTR pwszDescriptorString, DWORD dwFlags
NCryptSecretAgreement;Creates a secret agreement value from a private and a public key.;NCRYPT_KEY_HANDLE hPrivKey, NCRYPT_KEY_HANDLE hPubKey, NCRYPT_SECRET_HANDLE *phAgreedSecret, DWORD dwFlags
NCryptSetProperty;Sets the value for a named property for a CNG key storage object.;NCRYPT_HANDLE hObject, LPCWSTR pszProperty, PBYTE pbInput, DWORD cbInput, DWORD dwFlags
NCryptSignHash;Creates a signature of a hash value.;NCRYPT_KEY_HANDLE hKey, VOID *pPaddingInfo, PBYTE pbHashValue, DWORD cbHashValue, PBYTE pbSignature, DWORD cbSignature, DWORD *pcbResult, DWORD dwFlags
NCryptStreamClose;Closes a data protection stream object opened by using the NCryptStreamOpenToProtect or NCryptStreamOpenToUnprotect functions.;NCRYPT_STREAM_HANDLE hStream
NCryptStreamOpenToProtect;Opens a stream object that can be used to encrypt large amounts of data to a given protection descriptor.;NCRYPT_DESCRIPTOR_HANDLE hDescriptor, DWORD dwFlags, HWND hWnd, NCRYPT_PROTECT_STREAM_INFO *pStreamInfo, NCRYPT_STREAM_HANDLE *phStream
NCryptStreamOpenToUnprotectEx;Opens a stream object that can be used to decrypt large amounts of data to the same protection descriptor used for encryption.;NCRYPT_PROTECT_STREAM_INFO_EX *pStreamInfo, DWORD dwFlags, HWND hWnd, NCRYPT_STREAM_HANDLE *phStream
NCryptStreamOpenToUnprotect;Opens a stream object that can be used to decrypt large amounts of data to the same protection descriptor used for encryption.;NCRYPT_PROTECT_STREAM_INFO *pStreamInfo, DWORD dwFlags, HWND hWnd, NCRYPT_STREAM_HANDLE *phStream
NCryptStreamUpdate;Encrypts and decrypts blocks of data.;NCRYPT_STREAM_HANDLE hStream, const BYTE *pbData, SIZE_T cbData, BOOL fFinal
NCryptTranslateHandle;Translates a CryptoAPI handle into a CNG key handle.;NCRYPT_PROV_HANDLE *phProvider, NCRYPT_KEY_HANDLE *phKey, HCRYPTPROV hLegacyProv, HCRYPTKEY hLegacyKey, DWORD dwLegacyKeySpec, DWORD dwFlags
NCryptUnprotectSecret;Decrypts data to a specified protection descriptor.;NCRYPT_DESCRIPTOR_HANDLE *phDescriptor, DWORD dwFlags, const BYTE *pbProtectedBlob, ULONG cbProtectedBlob, const NCRYPT_ALLOC_PARA *pMemPara, HWND hWnd, BYTE **ppbData, ULONG *pcbData
NCryptVerifyClaim;Verifies a key attestation claim.;NCRYPT_KEY_HANDLE hSubjectKey, NCRYPT_KEY_HANDLE hAuthorityKey, DWORD dwClaimType, NCryptBufferDesc *pParameterList, PBYTE pbClaimBlob, DWORD cbClaimBlob, NCryptBufferDesc *pOutput, DWORD dwFlags
NCryptVerifySignature;Verifies that the specified signature matches the specified hash.;NCRYPT_KEY_HANDLE hKey, VOID *pPaddingInfo, PBYTE pbHashValue, DWORD cbHashValue, PBYTE pbSignature, DWORD cbSignature, DWORD dwFlags
NdfCancelIncident;Used to cancel unneeded functions which have been previously called on an existing incident.;NDFHANDLE Handle
NdfCloseIncident;Used to close an Network Diagnostics Framework (NDF) incident following its resolution.;NDFHANDLE handle
NdfCreateConnectivityIncident;Diagnoses generic Internet connectivity problems.;NDFHANDLE *handle
NdfCreateDNSIncident;Diagnoses name resolution issues in resolving a specific host name.;LPCWSTR hostname, WORD queryType, NDFHANDLE *handle
NdfCreateGroupingIncident;Creates a session to diagnose peer-to-peer grouping functionality issues.;LPCWSTR CloudName, LPCWSTR GroupName, LPCWSTR Identity, LPCWSTR Invitation, SOCKET_ADDRESS_LIST *Addresses, LPCWSTR appId, NDFHANDLE *handle
NdfCreateInboundIncident;Creates a session to diagnose inbound connectivity for a specific application or service.;LPCWSTR applicationID, LPCWSTR serviceID, SID *userID, const SOCKADDR_STORAGE *localTarget, IPPROTO protocol, DWORD dwFlags, NDFHANDLE *handle
NdfCreateIncident;To test the NDF functionality incorporated into their application.;LPCWSTR helperClassName, ULONG celt, HELPER_ATTRIBUTE *attributes, NDFHANDLE *handle
NdfCreateNetConnectionIncident;Diagnoses connectivity issues using the NetConnection helper class.;NDFHANDLE *handle, GUID id
NdfCreatePnrpIncident;Creates a session to diagnose issues with the Peer Name Resolution Protocol (PNRP) service.;LPCWSTR cloudname, LPCWSTR peername, BOOL diagnosePublish, LPCWSTR appId, NDFHANDLE *handle
NdfCreateSharingIncident;Diagnoses network problems in accessing a specific network share.;LPCWSTR UNCPath, NDFHANDLE *handle
NdfCreateWebIncident;Diagnoses web connectivity problems.;LPCWSTR url, NDFHANDLE *handle
NdfCreateWebIncidentEx;Diagnoses web connectivity problems.;LPCWSTR url, BOOL useWinHTTP, LPWSTR moduleName, NDFHANDLE *handle
NdfCreateWinSockIncident;Provides access to the Winsock Helper Class provided by Microsoft.;SOCKET sock, LPCWSTR host, USHORT port, LPCWSTR appId, SID *userId, NDFHANDLE *handle
NdfDiagnoseIncident;Diagnoses the root cause of an incident without displaying a user interface.;NDFHANDLE Handle, ULONG *RootCauseCount, RootCauseInfo **RootCauses, DWORD dwWait, DWORD dwFlags
NdfExecuteDiagnosis;The NdfExecuteDiagnosis function is used to diagnose the root cause of the incident that has occurred.;NDFHANDLE handle, HWND hwnd
NdfGetTraceFile;Used to retrieve the path containing an Event Trace Log (ETL) file that contains Event Tracing for Windows (ETW) events from a diagnostic session.;NDFHANDLE Handle, LPCWSTR *TraceFileLocation
NdfRepairIncident;Repairs an incident without displaying a user interface.;NDFHANDLE Handle, RepairInfoEx *RepairEx, DWORD dwWait
Ndr64AsyncClientCall;Ndr64AsyncClientCall is not intended to be directly called by applications.;MIDL_STUBLESS_PROXY_INFO *pProxyInfo, unsigned long nProcNum, void *pReturnValue, ...
Ndr64AsyncServerCallAll;Ndr64AsyncServerCallAll is not intended to be directly called by applications.;PRPC_MESSAGE pRpcMsg
NdrAsyncClientCall2;NdrAsyncClientCall2 may be altered or unavailable.;PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, ...
NdrAsyncClientCall;The NdrAsyncClientCall function is the asynchronous client-side entry point for the /Oi and /Oic mode stub.;PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, ...
NdrAsyncServerCall;NdrAsyncServerCall is not intended to be directly called by applications.;PRPC_MESSAGE pRpcMsg
NdrClearOutParameters;The NdrClearOutParameters function frees resources of the out parameter and clears its memory if the RPC call to the server fails.;PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat, void *ArgAddr
NdrClientCall2;The NdrClientCall2 function is the client-side entry point for the /Oicf mode stub.;PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, ...
NdrClientCall3;NdrClientCall3 may be altered or unavailable.;MIDL_STUBLESS_PROXY_INFO *pProxyInfo, unsigned long nProcNum, void *pReturnValue, ...
NdrClientCall4;NdrClientCall4 may be altered or unavailable.;PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, ...
NdrClientCall;The NdrClientCall function is the client-side entry point for the /Oicf mode stub.;PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, ...
NdrConformantArrayUnmarshall;The NdrConformantArrayUnmarshall function unmarshals a conformant array.;PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc
NdrConformantStringBufferSize;The NdrConformantStringBufferSize function calculates the size of the buffer, in bytes, needed to marshal the conformant string.;PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat
NdrConformantStringMarshall;The NdrConformantStringMarshall function marshals the conformant string into a network buffer to be sent to the server.;PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat
NdrConformantStringUnmarshall;The NdrConformantStringUnmarshall function unmarshals the conformant string from the network buffer to memory.;PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc
NdrContextHandleInitialize;Initializes a new RPC context handle.;PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat
NdrContextHandleMemorySize;Returns the size of the supplied RPC context handle as represented in local memory.;PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat
NdrContextHandleSize;The NdrContextHandleSize function returns the size of the supplied RPC context handle.;PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat
NdrConvert;The NdrConvert function converts the network buffer from the data representation of the sender to the data representation of the receiver if they are different.;PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat
NdrCStdStubBuffer2_Release;The NdrCStdStubBuffer2_Release function implements the IRpcStubBuffer::Release method.;IRpcStubBuffer *This, IPSFactoryBuffer *pPSF
NdrCStdStubBuffer_Release;The NdrCStdStubBuffer_Release function implements the IRpcStubBuffer::Release method.;IRpcStubBuffer *This, IPSFactoryBuffer *pPSF
NdrDcomAsyncClientCall2;NdrDcomAsyncClientCall2 may be altered or unavailable.;PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, ...
NdrDcomAsyncClientCall;NdrDcomAsyncClientCall may be altered or unavailable.;PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, ...
NdrDllCanUnloadNow;The NdrDllCanUnloadNow function determines whether the DLL that implements the proxy and stub is still in use. If not, the caller can safely unload the DLL from memory.;CStdPSFactoryBuffer *pPSFactoryBuffer
NdrDllGetClassObject;The NdrDllGetClassObject function retrieves the class object of the proxy or stub.;REFCLSID rclsid, REFIID riid, void **ppv, const ProxyFileInfo **pProxyFileList, const CLSID *pclsid, CStdPSFactoryBuffer *pPSFactoryBuffer
NdrDllRegisterProxy;The NdrDllRegisterProxy function creates a registry entry for the interfaces contained in the proxy DLL.;HMODULE hDll, const ProxyFileInfo **pProxyFileList, const CLSID *pclsid
NdrDllUnregisterProxy;The NdrDllUnregisterProxy function removes a registry entry for the interfaces contained in the proxy DLL.;HMODULE hDll, const ProxyFileInfo **pProxyFileList, const CLSID *pclsid
NdrGetUserMarshalInfo;The NdrGetUserMarshalInfo function provides additional information to wire_marshal and user_marshal helper functions.;unsigned long *pFlags, unsigned long InformationLevel, NDR_USER_MARSHAL_INFO *pMarshalInfo
NdrInterfacePointerBufferSize;The NdrInterfacePointerBufferSize function calculates the size of the buffer, in bytes, needed to marshal the interface pointer.;PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat
NdrInterfacePointerFree;The NdrInterfacePointerFree function releases the interface pointer.;PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat
NdrInterfacePointerMarshall;The NdrInterfacePointerMarshall function marshals the interface pointer into a network buffer to be sent to the server.;PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat
NdrInterfacePointerUnmarshall;The NdrInterfacePointerUnmarshall function unmarshalls the data referenced by the interface pointer from the network buffer to memory.;PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc
NdrMesProcEncodeDecode2;NdrMesProcEncodeDecode2 may be altered or unavailable.;handle_t Handle, const MIDL_STUB_DESC *pStubDesc, PFORMAT_STRING pFormatString, ...
NdrMesProcEncodeDecode4;NdrMesProcEncodeDecode4 may be altered or unavailable.;handle_t Handle, const MIDL_STUB_DESC *pStubDescriptor, PFORMAT_STRING pFormat, ...
NdrOleAllocate;The NdrOleAllocate function is used by RPC to allocate memory for an object interface. This function is a wrapper for the CoTaskMemAlloc function.;size_t Size
NdrOleFree;The NdrOleFree function is a wrapper for the CoTaskMemFree function.;void *NodeToFree
NdrPointerBufferSize;The NdrPointerBufferSize function computes the needed buffer size, in bytes, for a top-level pointer to anything.;PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat
NdrPointerFree;The NdrPointerFree function frees memory.;PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat
NdrPointerMarshall;The NdrPointerMarshall function marshalls a top level pointer to anything. Pointers embedded in structures, arrays, or unions call NdrPointerMarshall directly.;PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat
NdrPointerUnmarshall;The NdrPointerUnmarshall function unmarshalls a top level pointer to anything. Pointers embedded in structures, arrays, or unions call NdrPointerUnmarshall directly.;PMIDL_STUB_MESSAGE pStubMsg, unsigned char **ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc
NdrProxyErrorHandler;The NdrProxyErrorHandler function maps an exception into an HRESULT, with RPC facility code.;DWORD dwExceptionCode
NdrProxyForwardingFunction10;Stub function for COM proxies.;
NdrProxyForwardingFunction11;Stub function for COM proxies.;
NdrProxyForwardingFunction12;Stub function for COM proxies.;
NdrProxyForwardingFunction13;Stub function for COM proxies.;
NdrProxyForwardingFunction14;Stub function for COM proxies.;
NdrProxyForwardingFunction15;Stub function for COM proxies.;
NdrProxyForwardingFunction16;Stub function for COM proxies.;
NdrProxyForwardingFunction17;Stub function for COM proxies.;
NdrProxyForwardingFunction18;Stub function for COM proxies.;
NdrProxyForwardingFunction19;Stub function for COM proxies.;
NdrProxyForwardingFunction20;Stub function for COM proxies.;
NdrProxyForwardingFunction21;Stub function for COM proxies.;
NdrProxyForwardingFunction22;Stub function for COM proxies.;
NdrProxyForwardingFunction23;Stub function for COM proxies.;
NdrProxyForwardingFunction24;Stub function for COM proxies.;
NdrProxyForwardingFunction25;Stub function for COM proxies.;
NdrProxyForwardingFunction26;Stub function for COM proxies.;
NdrProxyForwardingFunction27;Stub function for COM proxies.;
NdrProxyForwardingFunction28;Stub function for COM proxies.;
NdrProxyForwardingFunction29;Stub function for COM proxies.;
NdrProxyForwardingFunction30;Stub function for COM proxies.;
NdrProxyForwardingFunction31;Stub function for COM proxies.;
NdrProxyForwardingFunction32;Stub function for COM proxies.;
NdrProxyForwardingFunction3;Stub function for COM proxies.;
NdrProxyForwardingFunction4;Stub function for COM proxies.;
NdrProxyForwardingFunction5;Stub function for COM proxies.;
NdrProxyForwardingFunction6;Stub function for COM proxies.;
NdrProxyForwardingFunction7;Stub function for COM proxies.;
NdrProxyForwardingFunction8;Stub function for COM proxies.;
NdrProxyForwardingFunction9;Stub function for COM proxies.;
NdrProxyFreeBuffer;The NdrProxyFreeBuffer function frees an RPC buffer.;void *This, MIDL_STUB_MESSAGE *pStubMsg
NdrProxyGetBuffer;The NdrProxyGetBuffer function obtains a network buffer from COM through the use of an IRpcChannelBuffer::GetBuffer method call.;void *This, PMIDL_STUB_MESSAGE pStubMsg
NdrProxyInitialize;The NdrProxyInitialize function initializes the proxy for an object method.;void *This, PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, unsigned int ProcNum
NdrProxySendReceive;The NdrProxySendReceive function sends a message to the server then waits for a reply.;void *This, MIDL_STUB_MESSAGE *pStubMsg
NdrServerCall2;NdrServerCall2 is not intended to be directly called by applications.;PRPC_MESSAGE pRpcMsg
NdrServerCallAll;NdrServerCallAll is not intended to be directly called by applications.;PRPC_MESSAGE pRpcMsg
NdrSimpleTypeMarshall;The NdrSimpleTypeMarshall function marshalls a simple type.;PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, unsigned char FormatChar
NdrSimpleTypeUnmarshall;The NdrSimpleTypeUnmarshall function unmarshalls a simple type.;PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, unsigned char FormatChar
NdrStubCall2;The NdrStubCall2 function is the server-side entry point for /Oicf mode stubs.;void *pThis, void *pChannel, PRPC_MESSAGE pRpcMsg, unsigned long *pdwStubPhase
NdrStubCall3;NdrStubCall3 is not intended to be directly called by applications.;void *pThis, void *pChannel, PRPC_MESSAGE pRpcMsg, unsigned long *pdwStubPhase
NdrStubForwardingFunction;The NdrStubForwardingFunction function is the entry point for server-side object methods that are defined in a base interface.;IRpcStubBuffer *This, IRpcChannelBuffer *pChannel, PRPC_MESSAGE pmsg, DWORD *pdwStubPhase
NdrStubGetBuffer;The NdrStubGetBuffer function retrieves a buffer from the RPC channel.;IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PMIDL_STUB_MESSAGE pStubMsg
NdrStubInitialize;The NdrStubInitialize function is called by the server stub before unmarshalling. It sets up some stub message fields.;PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, IRpcChannelBuffer *pRpcChannelBuffer
NdrUserMarshalBufferSize;The NdrUserMarshalBufferSize function calculates the size of the buffer, in bytes, needed to marshal the user marshal object.;PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat
NdrUserMarshalFree;The NdrUserMarshalFree function frees the user marshal object.;PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat
NdrUserMarshalMarshall;The NdrUserMarshalMarshall function marshals the supplied data buffer.;PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat
NetAccessAdd;Not supported.;LPCWSTR servername, DWORD level, LPBYTE buf, LPDWORD parm_err
NetAccessDel;Not supported.;LPCWSTR servername, LPCWSTR resource
NetAccessEnum;Not supported.;LPCWSTR servername, LPCWSTR BasePath, DWORD Recursive, DWORD level, LPBYTE *bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, LPDWORD resume_handle
NetAccessGetInfo;Not supported.;LPCWSTR servername, LPCWSTR resource, DWORD level, LPBYTE *bufptr
NetAccessGetUserPerms;Not supported.;LPCWSTR servername, LPCWSTR UGname, LPCWSTR resource, LPDWORD Perms
NetAccessSetInfo;Not supported.;LPCWSTR servername, LPCWSTR resource, DWORD level, LPBYTE buf, LPDWORD parm_err
NetAddAlternateComputerName;Adds an alternate name for the specified computer.;LPCWSTR Server, LPCWSTR AlternateName, LPCWSTR DomainAccount, LPCWSTR DomainAccountPassword, ULONG Reserved
NetAddr_DisplayErrorTip;Displays an error message in the balloon tip associated with the network address control.;hwnd
NetAddr_GetAddress;Indicates whether a network address conforms to a specified type and format.;hwnd, pv
NetAddr_GetAllowType;Retrieves the network address types that a specified network address control accepts.;hwnd
NetAddr_SetAllowType;Sets the network address types that a specified network address control accepts.;hwnd, addrMask
NetAddServiceAccount;Creates a standalone managed service account (sMSA) or retrieves the credentials for a group managed service account (gMSA) and stores the account information on the local computer.;LPWSTR ServerName, LPWSTR AccountName, LPWSTR Password, DWORD Flags
NetAlertRaiseEx;The NetAlertRaiseEx function notifies all registered clients when a particular event occurs. You can call this extended function to simplify the sending of an alert message because NetAlertRaiseEx does not require that you specify a STD_ALERT structure.;LPCWSTR AlertType, LPVOID VariableInfo, DWORD VariableInfoSize, LPCWSTR ServiceName
NetAlertRaise;The NetAlertRaise function notifies all registered clients when a particular event occurs.;LPCWSTR AlertType, LPVOID Buffer, DWORD BufferSize
NetApiBufferAllocate;The NetApiBufferAllocate function allocates memory from the heap. Use this function only when compatibility with the NetApiBufferFree function is required. Otherwise, use the memory management functions.;DWORD ByteCount, LPVOID *Buffer
NetApiBufferFree;The NetApiBufferFree function frees the memory that the NetApiBufferAllocate function allocates. Applications should also call NetApiBufferFree to free the memory that other network management functions use internally to return information.;_Frees_ptr_opt_ LPVOID Buffer
NetApiBufferReallocate;The NetApiBufferReallocate function changes the size of a buffer allocated by a previous call to the NetApiBufferAllocate function.;_Frees_ptr_opt_ LPVOID OldBuffer, DWORD NewByteCount, LPVOID *NewBuffer
NetApiBufferSize;The NetApiBufferSize function returns the size, in bytes, of a buffer allocated by a call to the NetApiBufferAllocate function.;LPVOID Buffer, LPDWORD ByteCount
NetAuditClear;The NetAuditClear function is obsolete. It is included for compatibility with 16-bit versions of Windows. Other applications should use event logging.;LPCWSTR server, LPCWSTR backupfile, LPCWSTR service
NetAuditRead;The NetAuditRead function is obsolete. It is included for compatibility with 16-bit versions of Windows. Other applications should use event logging.;LPCWSTR server, LPCWSTR service, LPHLOG auditloghandle, DWORD offset, LPDWORD reserved1, DWORD reserved2, DWORD offsetflag, LPBYTE *bufptr, DWORD prefmaxlen, LPDWORD bytesread, LPDWORD totalavailable
NetAuditWrite;The NetAuditWrite function is obsolete. It is included for compatibility with 16-bit versions of Windows. Other applications should use event logging.;DWORD type, LPBYTE buf, DWORD numbytes, LPCWSTR service, LPBYTE reserved
NetConfigGetAll;The NetConfigGetAll function is obsolete. It is included for compatibility with 16-bit versions of Windows. Other applications should use the registry.;LPCWSTR server, LPCWSTR component, LPBYTE *bufptr
NetConfigGet;The NetConfigGet function is obsolete. It is included for compatibility with 16-bit versions of Windows. Other applications should use the registry.;LPCWSTR server, LPCWSTR component, LPCWSTR parameter, LPBYTE *bufptr
NetConfigSet;The NetConfigSet function is obsolete. It is included for compatibility with 16-bit versions of Windows. Other applications should use the registry.;LPCWSTR server, LPCWSTR reserved1, LPCWSTR component, DWORD level, DWORD reserved2, LPBYTE buf, DWORD reserved3
NetCreateProvisioningPackage;Creates a provisioning package that provisions a computer account for later use in an offline domain join operation. The package may also contain information about certificates and policies to add to the machine during provisioning.;PNETSETUP_PROVISIONING_PARAMS pProvisioningParams, PBYTE *ppPackageBinData, DWORD *pdwPackageBinDataSize, LPWSTR *ppPackageTextData
NetEnumerateComputerNames;Enumerates names for the specified computer.;LPCWSTR Server, NET_COMPUTER_NAME_TYPE NameType, ULONG Reserved, PDWORD EntryCount, LPWSTR **ComputerNames
NetEnumerateServiceAccounts;Enumerates the standalone managed service accounts (sMSA) on the specified server.;LPWSTR ServerName, DWORD Flags, DWORD *AccountsCount, PZPWSTR *Accounts
NetErrorLogClear;The NetErrorLogClear function is obsolete. It is included for compatibility with 16-bit versions of Windows. Other applications should use event logging.;LPCWSTR UncServerName, LPCWSTR BackupFile, LPBYTE Reserved
NetErrorLogRead;The NetErrorLogRead function is obsolete. It is included for compatibility with 16-bit versions of Windows. Other applications should use event logging.;LPCWSTR UncServerName, LPWSTR Reserved1, LPHLOG ErrorLogHandle, DWORD Offset, LPDWORD Reserved2, DWORD Reserved3, DWORD OffsetFlag, LPBYTE *BufPtr, DWORD PrefMaxSize, LPDWORD BytesRead, LPDWORD TotalAvailable
NetErrorLogWrite;The NetErrorLogWrite function is obsolete. It is included for compatibility with 16-bit versions of Windows. Other applications should use event logging.;LPBYTE Reserved1, DWORD Code, LPCWSTR Component, LPBYTE Buffer, DWORD NumBytes, LPBYTE MsgBuf, DWORD StrCount, LPBYTE Reserved2
NetFreeAadJoinInformation;Frees the memory allocated for the specified DSREG_JOIN_INFO structure, which contains join information for a tenant and which you retrieved by calling the NetGetAadJoinInformation function.;PDSREG_JOIN_INFO pJoinInfo
NetGetAadJoinInformation;Retrieves the join information for the specified tenant. This function examines the join information for Microsoft Azure Active Directory and the work account that the current user added.;LPCWSTR pcszTenantId, PDSREG_JOIN_INFO *ppJoinInfo
NetGetAnyDCName;The NetGetAnyDCName function returns the name of any domain controller (DC) for a domain that is directly trusted by the specified server.;LPCWSTR ServerName, LPCWSTR DomainName, LPBYTE *Buffer
NetGetDCName;The NetGetDCName function returns the name of the primary domain controller (PDC). It does not return the name of the backup domain controller (BDC) for the specified domain. Also, you cannot remote this function to a non-PDC server.;LPCWSTR ServerName, LPCWSTR DomainName, LPBYTE *Buffer
NetGetDisplayInformationIndex;The NetGetDisplayInformationIndex function returns the index of the first display information entry whose name begins with a specified string or whose name alphabetically follows the string.;LPCWSTR ServerName, DWORD Level, LPCWSTR Prefix, LPDWORD Index
NetGetJoinableOUs;The NetGetJoinableOUs function retrieves a list of organizational units (OUs) in which a computer account can be created.;LPCWSTR lpServer, LPCWSTR lpDomain, LPCWSTR lpAccount, LPCWSTR lpPassword, DWORD *OUCount, LPWSTR **OUs
NetGetJoinInformation;The NetGetJoinInformation function retrieves join status information for the specified computer.;LPCWSTR lpServer, LPWSTR *lpNameBuffer, PNETSETUP_JOIN_STATUS BufferType
NetGroupAdd;The NetGroupAdd function creates a global group in the security database, which is the security accounts manager (SAM) database or, in the case of domain controllers, the Active Directory.;LPCWSTR servername, DWORD level, LPBYTE buf, LPDWORD parm_err
NetGroupAddUser;The NetGroupAddUser function gives an existing user account membership in an existing global group in the security database, which is the security accounts manager (SAM) database or, in the case of domain controllers, the Active Directory.;LPCWSTR servername, LPCWSTR GroupName, LPCWSTR username
NetGroupDel;The NetGroupDel function deletes a global group from the security database, which is the security accounts manager (SAM) database or, in the case of domain controllers, the Active Directory.;LPCWSTR servername, LPCWSTR groupname
NetGroupDelUser;The NetGroupDelUser function removes a user from a particular global group in the security database, which is the security accounts manager (SAM) database or, in the case of domain controllers, the Active Directory.;LPCWSTR servername, LPCWSTR GroupName, LPCWSTR Username
NetGroupEnum;The NetGroupEnum function retrieves information about each global group in the security database, which is the security accounts manager (SAM) database or, in the case of domain controllers, the Active Directory.;LPCWSTR servername, DWORD level, LPBYTE *bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, PDWORD_PTR resume_handle
NetGroupGetInfo;The NetGroupGetInfo function retrieves information about a particular global group in the security database, which is the security accounts manager (SAM) database or, in the case of domain controllers, the Active Directory.;LPCWSTR servername, LPCWSTR groupname, DWORD level, LPBYTE *bufptr
NetGroupGetUsers;The NetGroupGetUsers function retrieves a list of the members in a particular global group in the security database, which is the security accounts manager (SAM) database or, in the case of domain controllers, the Active Directory.;LPCWSTR servername, LPCWSTR groupname, DWORD level, LPBYTE *bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, PDWORD_PTR ResumeHandle
NetGroupSetInfo;The NetGroupSetInfo function sets the parameters of a global group in the security database, which is the security accounts manager (SAM) database or, in the case of domain controllers, the Active Directory.;LPCWSTR servername, LPCWSTR groupname, DWORD level, LPBYTE buf, LPDWORD parm_err
NetGroupSetUsers;The NetGroupSetUsers function sets the membership for the specified global group.;LPCWSTR servername, LPCWSTR groupname, DWORD level, LPBYTE buf, DWORD totalentries
NetIsServiceAccount;Tests whether the specified standalone managed service account (sMSA) or group managed service account (gMSA) exists in the Netlogon store on the specified server.;LPWSTR ServerName, LPWSTR AccountName, BOOL *IsService
NetJoinDomain;The NetJoinDomain function joins a computer to a workgroup or domain.;LPCWSTR lpServer, LPCWSTR lpDomain, LPCWSTR lpMachineAccountOU, LPCWSTR lpAccount, LPCWSTR lpPassword, DWORD fJoinOptions
NetLocalGroupAddMembers;The NetLocalGroupAddMembers function adds membership of one or more existing user accounts or global group accounts to an existing local group.;LPCWSTR servername, LPCWSTR groupname, DWORD level, LPBYTE buf, DWORD totalentries
NetLocalGroupAddMember;The NetLocalGroupAddMember function is obsolete. You should use the NetLocalGroupAddMembers function instead.;LPCWSTR servername, LPCWSTR groupname, PSID membersid
NetLocalGroupAdd;The NetLocalGroupAdd function creates a local group in the security database, which is the security accounts manager (SAM) database or, in the case of domain controllers, the Active Directory.;LPCWSTR servername, DWORD level, LPBYTE buf, LPDWORD parm_err
NetLocalGroupDelMembers;The NetLocalGroupDelMembers function removes one or more members from an existing local group. Local group members can be users or global groups.;LPCWSTR servername, LPCWSTR groupname, DWORD level, LPBYTE buf, DWORD totalentries
NetLocalGroupDelMember;The NetLocalGroupDelMember function is obsolete. You should use the NetLocalGroupDelMembers function instead.;LPCWSTR servername, LPCWSTR groupname, PSID membersid
NetLocalGroupDel;The NetLocalGroupDel function deletes a local group account and all its members from the security database, which is the security accounts manager (SAM) database or, in the case of domain controllers, the Active Directory.;LPCWSTR servername, LPCWSTR groupname
NetLocalGroupEnum;The NetLocalGroupEnum function returns information about each local group account on the specified server.;LPCWSTR servername, DWORD level, LPBYTE *bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, PDWORD_PTR resumehandle
NetLocalGroupGetInfo;The NetLocalGroupGetInfo function retrieves information about a particular local group account on a server.;LPCWSTR servername, LPCWSTR groupname, DWORD level, LPBYTE *bufptr
NetLocalGroupGetMembers;The NetLocalGroupGetMembers function retrieves a list of the members of a particular local group in the security database, which is the security accounts manager (SAM) database or, in the case of domain controllers, the Active Directory.;LPCWSTR servername, LPCWSTR localgroupname, DWORD level, LPBYTE *bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, PDWORD_PTR resumehandle
NetLocalGroupSetInfo;The NetLocalGroupSetInfo function changes the name of an existing local group. The function also associates a comment with a local group.;LPCWSTR servername, LPCWSTR groupname, DWORD level, LPBYTE buf, LPDWORD parm_err
NetLocalGroupSetMembers;The NetLocalGroupSetMembers function sets the membership for the specified local group.;LPCWSTR servername, LPCWSTR groupname, DWORD level, LPBYTE buf, DWORD totalentries
NetMessageBufferSend;The NetMessageBufferSend function sends a buffer of information to a registered message alias.;LPCWSTR servername, LPCWSTR msgname, LPCWSTR fromname, LPBYTE buf, DWORD buflen
NetMessageNameAdd;The NetMessageNameAdd function registers a message alias in the message name table. The function requires that the messenger service be started.;LPCWSTR servername, LPCWSTR msgname
NetMessageNameDel;The NetMessageNameDel function deletes a message alias in the message name table. The function requires that the messenger service be started.;LPCWSTR servername, LPCWSTR msgname
NetMessageNameEnum;The NetMessageNameEnum function lists the message aliases that receive messages on a specified computer. The function requires that the messenger service be started.;LPCWSTR servername, DWORD level, LPBYTE *bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, LPDWORD resume_handle
NetMessageNameGetInfo;The NetMessageNameGetInfo function retrieves information about a particular message alias in the message name table. The function requires that the messenger service be started.;LPCWSTR servername, LPCWSTR msgname, DWORD level, LPBYTE *bufptr
NetProvisionComputerAccount;Provisions a computer account for later use in an offline domain join operation.;LPCWSTR lpDomain, LPCWSTR lpMachineName, LPCWSTR lpMachineAccountOU, LPCWSTR lpDcName, DWORD dwOptions, PBYTE *pProvisionBinData, DWORD *pdwProvisionBinDataSize, LPWSTR *pProvisionTextData
NetQueryDisplayInformation;The NetQueryDisplayInformation function returns user account, computer, or group account information. Call this function to quickly enumerate account information for display in user interfaces.;LPCWSTR ServerName, DWORD Level, DWORD Index, DWORD EntriesRequested, DWORD PreferredMaximumLength, LPDWORD ReturnedEntryCount, PVOID *SortedBuffer
NetQueryServiceAccount;Gets information about the specified managed service account.;LPWSTR ServerName, LPWSTR AccountName, DWORD InfoLevel, PBYTE *Buffer
NetRemoteComputerSupports;The NetRemoteComputerSupports function queries the redirector to retrieve the optional features the remote system supports.;LPCWSTR UncServerName, DWORD OptionsWanted, LPDWORD OptionsSupported
NetRemoteTOD;The NetRemoteTOD function returns the time of day information from a specified server.;LPCWSTR UncServerName, LPBYTE *BufferPtr
NetRemoveAlternateComputerName;Removes an alternate name for the specified computer.;LPCWSTR Server, LPCWSTR AlternateName, LPCWSTR DomainAccount, LPCWSTR DomainAccountPassword, ULONG Reserved
NetRemoveServiceAccount;Deletes the specified service account from the Active Directory database if the account is a standalone managed service account (sMSA).;LPWSTR ServerName, LPWSTR AccountName, DWORD Flags
NetRenameMachineInDomain;The NetRenameMachineInDomain function changes the name of a computer in a domain.;LPCWSTR lpServer, LPCWSTR lpNewMachineName, LPCWSTR lpAccount, LPCWSTR lpPassword, DWORD fRenameOptions
NetRequestOfflineDomainJoin;Executes locally on a machine to modify a Windows operating system image mounted on a volume.;BYTE *pProvisionBinData, DWORD cbProvisionBinDataSize, DWORD dwOptions, LPCWSTR lpWindowsPath
NetRequestProvisioningPackageInstall;Executes locally on a machine to modify a Windows operating system image mounted on a volume.;BYTE *pPackageBinData, DWORD dwPackageBinDataSize, DWORD dwProvisionOptions, LPCWSTR lpWindowsPath, PVOID pvReserved
NetScheduleJobAdd;The NetScheduleJobAdd function submits a job to run at a specified future time and date. This function requires that the schedule service be started on the computer to which the job is submitted.;LPCWSTR Servername, LPBYTE Buffer, LPDWORD JobId
NetScheduleJobDel;The NetScheduleJobDel function deletes a range of jobs queued to run at a computer. This function requires that the schedule service be started at the computer to which the job deletion request is being sent.;LPCWSTR Servername, DWORD MinJobId, DWORD MaxJobId
NetScheduleJobEnum;The NetScheduleJobEnum function lists the jobs queued on a specified computer. This function requires that the schedule service be started.;LPCWSTR Servername, LPBYTE *PointerToBuffer, DWORD PrefferedMaximumLength, LPDWORD EntriesRead, LPDWORD TotalEntries, LPDWORD ResumeHandle
NetScheduleJobGetInfo;The NetScheduleJobGetInfo function retrieves information about a particular job queued on a specified computer. This function requires that the schedule service be started.;LPCWSTR Servername, DWORD JobId, LPBYTE *PointerToBuffer
NetServerComputerNameAdd;The NetServerComputerNameAdd function enumerates the transports on which the specified server is active, and binds the emulated server name to each of the transports.;LMSTR ServerName, LMSTR EmulatedDomainName, LMSTR EmulatedServerName
NetServerComputerNameDel;The NetServerComputerNameDel function causes the specified server to cease supporting the emulated server name set by a previous call to the NetServerComputerNameAdd function. The function does this by unbinding network transports from the emulated name.;LMSTR ServerName, LMSTR EmulatedServerName
NetServerDiskEnum;The NetServerDiskEnum function retrieves a list of disk drives on a server. The function returns an array of three-character strings (a drive letter, a colon, and a terminating null character).;LMSTR servername, DWORD level, LPBYTE *bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, LPDWORD resume_handle
NetServerEnum;The NetServerEnum function lists all servers of the specified type that are visible in a domain.;LMCSTR servername, DWORD level, LPBYTE *bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, DWORD servertype, LMCSTR domain, LPDWORD resume_handle
NetServerGetInfo;The NetServerGetInfo function retrieves current configuration information for the specified server.;LMSTR servername, DWORD level, LPBYTE *bufptr
NetServerSetInfo;The NetServerSetInfo function sets a server's operating parameters; it can set them individually or collectively. The information is stored in a way that allows it to remain in effect after the system has been reinitialized.;LMSTR servername, DWORD level, LPBYTE buf, LPDWORD ParmError
NetServerTransportAddEx;The NetServerTransportAddEx function binds the specified server to the transport protocol.;LMSTR servername, DWORD level, LPBYTE bufptr
NetServerTransportAdd;The NetServerTransportAdd function binds the server to the transport protocol.;LMSTR servername, DWORD level, LPBYTE bufptr
NetServerTransportDel;The NetServerTransportDel function unbinds (or disconnects) the transport protocol from the server. Effectively, the server can no longer communicate with clients using the specified transport protocol (such as TCP or XNS).;LMSTR servername, DWORD level, LPBYTE bufptr
NetServerTransportEnum;The NetServerTransportEnum function supplies information about transport protocols that are managed by the server.;LMSTR servername, DWORD level, LPBYTE *bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, LPDWORD resume_handle
NetServiceControl;The NetServiceControl function is obsolete. It is included for compatibility with 16-bit versions of Windows. Other applications should use the service functions.;LPCWSTR servername, LPCWSTR service, DWORD opcode, DWORD arg, LPBYTE *bufptr
NetServiceEnum;The NetServiceEnum function is obsolete. It is included for compatibility with 16-bit versions of Windows. Other applications should use the service functions.;LPCWSTR servername, DWORD level, LPBYTE *bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, LPDWORD resume_handle
NetServiceGetInfo;The NetServiceGetInfo function is obsolete. It is included for compatibility with 16-bit versions of Windows. Other applications should use the service functions.;LPCWSTR servername, LPCWSTR service, DWORD level, LPBYTE *bufptr
NetServiceInstall;The NetServiceInstall function is obsolete. It is included for compatibility with 16-bit versions of Windows. Other applications should use the service functions.;LPCWSTR servername, LPCWSTR service, DWORD argc, LPCWSTR [] argv, LPBYTE *bufptr
NetSetPrimaryComputerName;Sets the primary computer name for the specified computer.;LPCWSTR Server, LPCWSTR PrimaryName, LPCWSTR DomainAccount, LPCWSTR DomainAccountPassword, ULONG Reserved
NetUnjoinDomain;The NetUnjoinDomain function unjoins a computer from a workgroup or a domain.;LPCWSTR lpServer, LPCWSTR lpAccount, LPCWSTR lpPassword, DWORD fUnjoinOptions
NetUseAdd;The NetUseAdd function establishes a connection between the local computer and a remote server.;LPTSTR servername, DWORD LevelFlags, LPBYTE buf, LPDWORD parm_err
NetUseDel;The NetUseDel function ends a connection to a shared resource.;LMSTR UncServerName, LMSTR UseName, DWORD ForceLevelFlags
NetUseEnum;The NetUseEnum function lists all current connections between the local computer and resources on remote servers.;LMSTR UncServerName, DWORD LevelFlags, LPBYTE *BufPtr, DWORD PreferedMaximumSize, LPDWORD EntriesRead, LPDWORD TotalEntries, LPDWORD ResumeHandle
NetUseGetInfo;The NetUseGetInfo function retrieves information about a connection to a shared resource.;LMSTR UncServerName, LMSTR UseName, DWORD LevelFlags, LPBYTE *bufptr
NetUserAdd;The NetUserAdd function adds a user account and assigns a password and privilege level.;LPCWSTR servername, DWORD level, LPBYTE buf, LPDWORD parm_err
NetUserChangePassword;The NetUserChangePassword function changes a user's password for a specified network server or domain.;LPCWSTR domainname, LPCWSTR username, LPCWSTR oldpassword, LPCWSTR newpassword
NetUserDel;The NetUserDel function deletes a user account from a server.;LPCWSTR servername, LPCWSTR username
NetUserEnum;The NetUserEnum function retrieves information about all user accounts on a server.;LPCWSTR servername, DWORD level, DWORD filter, LPBYTE *bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, PDWORD resume_handle
NetUserGetGroups;The NetUserGetGroups function retrieves a list of global groups to which a specified user belongs.;LPCWSTR servername, LPCWSTR username, DWORD level, LPBYTE *bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries
NetUserGetInfo;The NetUserGetInfo function retrieves information about a particular user account on a server.;LPCWSTR servername, LPCWSTR username, DWORD level, LPBYTE *bufptr
NetUserGetLocalGroups;The NetUserGetLocalGroups function retrieves a list of local groups to which a specified user belongs.;LPCWSTR servername, LPCWSTR username, DWORD level, DWORD flags, LPBYTE *bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries
NetUserModalsGet;The NetUserModalsGet function retrieves global information for all users and global groups in the security database, which is the security accounts manager (SAM) database or, in the case of domain controllers, the Active Directory.;LPCWSTR servername, DWORD level, LPBYTE *bufptr
NetUserModalsSet;The NetUserModalsSet function sets global information for all users and global groups in the security database, which is the security accounts manager (SAM) database or, in the case of domain controllers, the Active Directory.;LPCWSTR servername, DWORD level, LPBYTE buf, LPDWORD parm_err
NetUserSetGroups;The NetUserSetGroups function sets global group memberships for a specified user account.;LPCWSTR servername, LPCWSTR username, DWORD level, LPBYTE buf, DWORD num_entries
NetUserSetInfo;The NetUserSetInfo function sets the parameters of a user account.;LPCWSTR servername, LPCWSTR username, DWORD level, LPBYTE buf, LPDWORD parm_err
NetValidateName;The NetValidateName function verifies that a name is valid for name type specified(computer name, workgroup name, domain name, or DNS computer name).;LPCWSTR lpServer, LPCWSTR lpName, LPCWSTR lpAccount, LPCWSTR lpPassword, NETSETUP_NAME_TYPE NameType
NetValidatePasswordPolicyFree;The NetValidatePasswordPolicyFree function frees the memory that the NetValidatePasswordPolicy function allocates for the OutputArg parameter, which is a NET_VALIDATE_OUTPUT_ARG structure.;LPVOID *OutputArg
NetValidatePasswordPolicy;The NetValidatePasswordPolicy function allows an application to check password compliance against an application-provided account database and verify that passwords meet the complexity, aging, minimum length, and history reuse requirements of a password policy.;LPCWSTR ServerName, LPVOID Qualifier, NET_VALIDATE_PASSWORD_TYPE ValidationType, LPVOID InputArg, LPVOID *OutputArg
NetWkstaGetInfo;The NetWkstaGetInfo function returns information about the configuration of a workstation.;LMSTR servername, DWORD level, LPBYTE *bufptr
NetWkstaSetInfo;The NetWkstaSetInfo function configures a workstation with information that remains in effect after the system has been reinitialized.;LMSTR servername, DWORD level, LPBYTE buffer, LPDWORD parm_err
NetWkstaTransportAdd;Not supported.;LPTSTR servername, DWORD level, LPBYTE buf, LPDWORD parm_err
NetWkstaTransportDel;Not supported.;LMSTR servername, LMSTR transportname, DWORD ucond
NetWkstaTransportEnum;The NetWkstaTransportEnum function supplies information about transport protocols that are managed by the redirector, which is the software on the client computer that generates file requests to the server computer.;LPTSTR servername, DWORD level, LPBYTE *bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, LPDWORD resume_handle
NetWkstaUserEnum;The NetWkstaUserEnum function lists information about all users currently logged on to the workstation. This list includes interactive, service and batch logons.;LMSTR servername, DWORD level, LPBYTE *bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, LPDWORD resumehandle
NetWkstaUserGetInfo;The NetWkstaUserGetInfo function returns information about the currently logged-on user. This function must be called in the context of the logged-on user.;LMSTR reserved, DWORD level, LPBYTE *bufptr
NetWkstaUserSetInfo;The NetWkstaUserSetInfo function sets the user-specific information about the configuration elements for a workstation.;LMSTR reserved, DWORD level, LPBYTE buf, LPDWORD parm_err
New;The New method creates a new GPO in the Active Directory with the specified display name. The method opens the GPO using the OpenDSGPO method.;LPOLESTR pszDomainName, LPOLESTR pszDisplayName, DWORD dwFlags
Next;Moves to the next attribute in the attribute-enumeration sequence.;LONG *pIndex
Next;Moves to the next column in the column-enumeration sequence.;LONG *pIndex
Next;Moves to the next extension in the extension-enumeration sequence.;LONG *pIndex
Next;Moves to the next row in the row-enumeration sequence.;LONG *pIndex
NEXTRAWINPUTBLOCK;Retrieves the location of the next structure in an array of RAWINPUT structures.;ptr
Next;Retrieves the index of the next available Certificate Services server configuration in the configuration point. This method was first defined in the ICertConfig interface.;LONG *pIndex
NhpAllocateAndGetInterfaceInfoFromStack;The NhpAllocateAndGetInterfaceInfoFromStack function obtains adapter information about the local computer.;IP_INTERFACE_NAME_INFO **ppTable, PDWORD pdwCount, BOOL bOrder, HANDLE hHeap, DWORD dwFlags
NormalizeString;Normalizes characters of a text string according to Unicode 4.0 TR#15. For more information, see Using Unicode Normalization to Represent Strings.;NORM_FORM NormForm, LPCWSTR lpSrcString, int cwSrcLength, LPWSTR lpDstString, int cwDstLength
NotifyAddrChange;The NotifyAddrChange function causes a notification to be sent to the caller whenever a change occurs in the table that maps IPv4 addresses to interfaces.;PHANDLE Handle, LPOVERLAPPED overlapped
NotifyBootConfigStatus;Reports the boot status to the service control manager. It is used by boot verification programs.;BOOL BootAcceptable
Notify;Called by the server engine to notify an exit module that an event has occurred.;LONG ExitEvent, LONG Context
NotifyChangeEventLog;Enables an application to receive notification when an event is written to the specified event log.;HANDLE hEventLog, HANDLE hEvent
NotifyIfTimestampConfigChange;This function is reserved for system use, and you should not call it from your code.;PVOID CallerContext, PINTERFACE_TIMESTAMP_CONFIG_CHANGE_CALLBACK Callback, HIFTIMESTAMPCHANGE *NotificationHandle
NotifyIpInterfaceChange;Registers to be notified for changes to all IP interfaces, IPv4 interfaces, or IPv6 interfaces on a local computer.;ADDRESS_FAMILY Family, PIPINTERFACE_CHANGE_CALLBACK Callback, PVOID CallerContext, BOOLEAN InitialNotification, HANDLE *NotificationHandle
NotifyNetworkConnectivityHintChange;Registers an application-defined callback function, to be called when the aggregate network connectivity level and cost hints change.;PNETWORK_CONNECTIVITY_HINT_CHANGE_CALLBACK Callback, PVOID CallerContext, BOOLEAN InitialNotification, PHANDLE NotificationHandle
Notify;Notifies the plug-in of the transaction status of the SCEP certificate request.;PCWSTR pwszChallenge, PCWSTR pwszTransactionId, X509SCEPDisposition disposition, LONG lastHResult, CERTTRANSBLOB *pctbIssuedCertEncoded
NotifyRouteChange2;Registers to be notified for changes to IP route entries on a local computer.;ADDRESS_FAMILY AddressFamily, PIPFORWARD_CHANGE_CALLBACK Callback, PVOID CallerContext, BOOLEAN InitialNotification, HANDLE *NotificationHandle
NotifyRouteChange;The NotifyRouteChange function causes a notification to be sent to the caller whenever a change occurs in the IPv4 routing table.;PHANDLE Handle, LPOVERLAPPED overlapped
NotifyServiceStatusChangeA;Enables an application to receive notification when the specified service is created or deleted or when its status changes.;SC_HANDLE hService, DWORD dwNotifyMask, PSERVICE_NOTIFYA pNotifyBuffer
NotifyServiceStatusChangeW;Enables an application to receive notification when the specified service is created or deleted or when its status changes.;SC_HANDLE hService, DWORD dwNotifyMask, PSERVICE_NOTIFYW pNotifyBuffer
NotifyStableUnicastIpAddressTable;Retrieves the stable unicast IP address table on a local computer.;ADDRESS_FAMILY Family, PMIB_UNICASTIPADDRESS_TABLE *Table, PSTABLE_UNICAST_IPADDRESS_TABLE_CALLBACK CallerCallback, PVOID CallerContext, HANDLE *NotificationHandle
NotifyTeredoPortChange;Registers to be notified for changes to the UDP port number used by the Teredo client for the Teredo service port on a local computer.;PTEREDO_PORT_CHANGE_CALLBACK Callback, PVOID CallerContext, BOOLEAN InitialNotification, HANDLE *NotificationHandle
NotifyUILanguageChange;Unsupported. NotifyUILanguageChange may be altered or unavailable.;DWORD dwFlags, PCWSTR pcwstrNewLanguage, PCWSTR pcwstrPreviousLanguage, DWORD dwReserved, PDWORD pdwStatusRtrn
NotifyUnicastIpAddressChange;Registers to be notified for changes to all unicast IP interfaces, unicast IPv4 addresses, or unicast IPv6 addresses on a local computer.;ADDRESS_FAMILY Family, PUNICAST_IPADDRESS_CHANGE_CALLBACK Callback, PVOID CallerContext, BOOLEAN InitialNotification, HANDLE *NotificationHandle
NotifyWinEvent;Signals the system that a predefined event occurred. If any client applications have registered a hook function for the event, the system calls the client's hook function.;DWORD event, HWND hwnd, LONG idObject, LONG idChild
NPAddConnection3;Connects a local device to a network resource.;HWND hwndOwner, LPNETRESOURCEW lpNetResource, LPWSTR lpPassword, LPWSTR lpUserName, DWORD dwFlags
NPAddConnection;Connects a local device to a network resource.;LPNETRESOURCEW lpNetResource, LPWSTR lpPassword, LPWSTR lpUserName
NPCancelConnection;Disconnects a network connection.;LPWSTR lpName, BOOL fForce
NPCloseEnum;Closes an enumeration.;HANDLE hEnum
NPDeviceMode;Specifies the parent window of a device. This window owns any dialog boxes that originate from the device.;HWND hParent
NPDirectoryNotify;Notifies the network provider of certain directory operations.;HWND hwnd, LPWSTR lpDir, DWORD dwOper
NPEnumResource;Performs an enumeration based on a handle returned by NPOpenEnum.;HANDLE hEnum, LPDWORD lpcCount, LPVOID lpBuffer, LPDWORD lpBufferSize
NPFMXEditPerm;Enables network vendors to supply their own permission editor dialog boxes.;LPWSTR lpDriveName, HWND hwndFMX, DWORD nDialogType
NPFMXGetPermCaps;Retrieves the capabilities of the permission editor. The return value is a bitmask that indicates which of the Security menu items in File Manager are to be enabled.;LPWSTR lpDriveName
NPFMXGetPermHelp;Retrieves the help file and help context of the permission editor dialog boxes when a menu item in the Security menu of File Manager is selected and F1 is pressed.;LPWSTR lpDriveName, DWORD nDialogType, BOOL fDirectory, LPVOID lpFileNameBuffer, LPDWORD lpBufferSize, LPDWORD lpnHelpContext
NPFormatNetworkName;Formats a network name in a provider-specific format for display in a control.;LPWSTR lpRemoteName, LPWSTR lpFormattedName, LPDWORD lpnLength, DWORD dwFlags, DWORD dwAveCharPerLine
NPGetCaps;Returns information about which services are supported on the network.;DWORD ndex
NPGetConnection3;Retrieves information about a network connection, even if it is currently disconnected.;LPCWSTR lpLocalName, DWORD dwLevel, LPVOID lpBuffer, LPDWORD lpBufferSize
NPGetConnectionPerformance;Returns information about the expected performance of a connection used to access a network resource. The request can only be for a network resource that is currently connected.;LPCWSTR lpRemoteName, LPNETCONNECTINFOSTRUCT lpNetConnectInfo
NPGetConnection;Retrieves information about a connection.;LPWSTR lpLocalName, LPWSTR lpRemoteName, LPDWORD lpnBufferLen
NPGetDirectoryType;Determines the type of a network directory.;LPWSTR lpName, LPINT lpType, BOOL bFlushCache
NPGetPropertyText;Retrieves the names of buttons to add to a property dialog box for a network resource.;DWORD iButton, DWORD nPropSel, LPWSTR lpName, LPWSTR lpButtonName, DWORD nButtonNameLen, DWORD nType
NPGetResourceInformation;Separates the part of a network resource accessed through the WNet API from the part accessed through APIs specific to the resource type.;LPNETRESOURCEW lpNetResource, LPVOID lpBuffer, LPDWORD lpBufferSize, LPWSTR *lplpSystem
NPGetResourceParent;Retrieves the parent of a specified network resource in the browse hierarchy.;LPNETRESOURCEW lpNetResource, LPVOID lpBuffer, LPDWORD lpBufferSize
NPGetUniversalName;Retrieves the universal name of a network resource. The NPGetUniversalName function can retrieve this universal name in UNC format or in the older, remote-name format.;LPCWSTR lpLocalPath, DWORD dwInfoLevel, LPVOID lpBuffer, LPDWORD lpBufferSize
NPGetUser;Retrieves the value of the current default user name or the user name used to establish a network connection.;LPWSTR lpName, LPWSTR lpUserName, LPDWORD lpnBufferLen
NPLogonNotify;MPR calls this function to notify the credential manager that a logon event has occurred, allowing the credential manager to return a logon script.;PLUID lpLogonId, LPCWSTR lpAuthentInfoType, LPVOID lpAuthentInfo, LPCWSTR lpPreviousAuthentInfoType, LPVOID lpPreviousAuthentInfo, LPWSTR lpStationName, LPVOID StationHandle, LPWSTR *lpLogonScript
NPOpenEnum;Opens an enumeration of network resources or existing connections. The NPOpenEnum function must be called to obtain a valid handle for an enumeration.;DWORD dwScope, DWORD dwType, DWORD dwUsage, LPNETRESOURCEW lpNetResource, LPHANDLE lphEnum
NPPasswordChangeNotify;MPR calls this function to notify the credential manager of a password change event.;LPCWSTR lpAuthentInfoType, LPVOID lpAuthentInfo, LPCWSTR lpPreviousAuthentInfoType, LPVOID lpPreviousAuthentInfo, LPWSTR lpStationName, LPVOID StationHandle, DWORD dwChangeInfo
NPPropertyDialog;Called when the user clicks a button added by using the NPPropertyDialog function. The NPPropertyDialog function is called only for file and directory network properties.;HWND hwndParent, DWORD iButtonDlg, DWORD nPropSel, LPWSTR lpFileName, DWORD nType
NPSearchDialog;Enables network vendors to supply their own form of browsing and search, beyond the hierarchical view presented in the Connection dialog box.;HWND hwndParent, LPNETRESOURCEW lpNetResource, LPVOID lpBuffer, DWORD cbBuffer, LPDWORD lpnFlags
NtClose;Deprecated. Closes the specified handle. NtClose is superseded by CloseHandle.;HANDLE Handle
NtCreateFile;Creates a new file or directory, or opens an existing file, device, directory, or volume.;PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER AllocationSize, ULONG FileAttributes, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, PVOID EaBuffer, ULONG EaLength
NtDeviceIoControlFile;Deprecated. Builds descriptors for the supplied buffer(s) and passes the untyped data to the device driver associated with the file handle. NtDeviceIoControlFile is superseded by DeviceIoControl.;HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG IoControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength
NtNotifyChangeMultipleKeys;Requests notification when a registry key or any of its subkeys changes.;HANDLE MasterKeyHandle, ULONG Count, OBJECT_ATTRIBUTES [] SubordinateObjects, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG CompletionFilter, BOOLEAN WatchTree, PVOID Buffer, ULONG BufferSize, BOOLEAN Asynchronous
ntohd;Converts an unsigned __int64 from TCP/IP network order to host byte order (which is little-endian on Intel processors) and returns a double.;unsigned __int64 Value
ntohf;Converts an unsigned __int32 from TCP/IP network order to host byte order (which is little-endian on Intel processors) and returns a float.;unsigned __int32 Value
ntohll;Converts an unsigned __int64 from TCP/IP network order to host byte order (which is little-endian on Intel processors).;unsigned __int64 Value
ntohl;The ntohl function converts a u_long from TCP/IP network order to host byte order (which is little-endian on Intel processors).;u_long netlong
ntohs;The ntohs function converts a u_short from TCP/IP network byte order to host byte order (which is little-endian on Intel processors).;u_short netshort
NtOpenFile;Opens an existing file, device, directory, or volume, and returns a handle for the file object.;PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG OpenOptions
NtQueryInformationProcess;Retrieves information about the specified process.;HANDLE ProcessHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength, PULONG ReturnLength
NtQueryInformationThread;Retrieves information about the specified thread.;HANDLE ThreadHandle, THREADINFOCLASS ThreadInformationClass, PVOID ThreadInformation, ULONG ThreadInformationLength, PULONG ReturnLength
NtQueryMultipleValueKey;Retrieves values for the specified multiple-value key.;HANDLE KeyHandle, PKEY_VALUE_ENTRY ValueEntries, ULONG EntryCount, PVOID ValueBuffer, PULONG BufferLength, PULONG RequiredBufferLength
NtQueryObject;Retrieves various kinds of object information.;HANDLE Handle, OBJECT_INFORMATION_CLASS ObjectInformationClass, PVOID ObjectInformation, ULONG ObjectInformationLength, PULONG ReturnLength
NtQuerySystemInformation;Retrieves the specified system information.;SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength, PULONG ReturnLength
NtQuerySystemTime;Retrieves the current system time.;PLARGE_INTEGER SystemTime
NtRenameKey;Changes the name of the specified registry key.;HANDLE KeyHandle, PUNICODE_STRING NewName
NtSetInformationKey;Sets information for the specified registry key.;HANDLE KeyHandle, KEY_SET_INFORMATION_CLASS KeySetInformationClass, PVOID KeySetInformation, ULONG KeySetInformationLength
ObjectCloseAuditAlarmA;Generates an audit message in the security event log when a handle to a private object is deleted.;LPCSTR SubsystemName, LPVOID HandleId, BOOL GenerateOnClose
ObjectDeleteAuditAlarmA;Generates audit messages when an object is deleted.;LPCSTR SubsystemName, LPVOID HandleId, BOOL GenerateOnClose
ObjectOpenAuditAlarmA;Generates audit messages when a client application attempts to gain access to an object or to create a new one.;LPCSTR SubsystemName, LPVOID HandleId, LPSTR ObjectTypeName, LPSTR ObjectName, PSECURITY_DESCRIPTOR pSecurityDescriptor, HANDLE ClientToken, DWORD DesiredAccess, DWORD GrantedAccess, PPRIVILEGE_SET Privileges, BOOL ObjectCreation, BOOL AccessGranted, LPBOOL GenerateOnClose
ObjectPrivilegeAuditAlarmA;Generates an audit message in the security event log.;LPCSTR SubsystemName, LPVOID HandleId, HANDLE ClientToken, DWORD DesiredAccess, PPRIVILEGE_SET Privileges, BOOL AccessGranted
ObjectStublessClient10;Stub function for COM proxies.;
ObjectStublessClient11;Stub function for COM proxies.;
ObjectStublessClient12;Stub function for COM proxies.;
ObjectStublessClient13;Stub function for COM proxies.;
ObjectStublessClient14;Stub function for COM proxies.;
ObjectStublessClient15;Stub function for COM proxies.;
ObjectStublessClient16;Stub function for COM proxies.;
ObjectStublessClient17;Stub function for COM proxies.;
ObjectStublessClient18;Stub function for COM proxies.;
ObjectStublessClient19;Stub function for COM proxies.;
ObjectStublessClient20;Stub function for COM proxies.;
ObjectStublessClient21;Stub function for COM proxies.;
ObjectStublessClient22;Stub function for COM proxies.;
ObjectStublessClient23;Stub function for COM proxies.;
ObjectStublessClient24;Stub function for COM proxies.;
ObjectStublessClient25;Stub function for COM proxies.;
ObjectStublessClient26;Stub function for COM proxies.;
ObjectStublessClient27;Stub function for COM proxies.;
ObjectStublessClient28;Stub function for COM proxies.;
ObjectStublessClient29;Stub function for COM proxies.;
ObjectStublessClient30;Stub function for COM proxies.;
ObjectStublessClient31;Stub function for COM proxies.;
ObjectStublessClient32;Stub function for COM proxies.;
ObjectStublessClient3;Stub function for COM proxies.;
ObjectStublessClient4;Stub function for COM proxies.;
ObjectStublessClient5;;
ObjectStublessClient6;Stub function for COM proxies.;
ObjectStublessClient7;Stub function for COM proxies.;
ObjectStublessClient8;Stub function for COM proxies.;
ObjectStublessClient9;Stub function for COM proxies.;
OemKeyScan;Maps OEMASCII codes 0 through 0x0FF into the OEM scan codes and shift states. The function provides information that allows a program to send OEM text to another program by simulating keyboard input.;WORD wOemChar
OemToCharA;Translates a string from the OEM-defined character set into either an ANSI or a wide-character string.Warning  Do not use.;LPCSTR pSrc, LPSTR pDst
OemToCharBuffA;Translates a specified number of characters in a string from the OEM-defined character set into either an ANSI or a wide-character string.;LPCSTR lpszSrc, LPSTR lpszDst, DWORD cchDstLength
OemToCharBuffW;Translates a specified number of characters in a string from the OEM-defined character set into either an ANSI or a wide-character string.;LPCSTR lpszSrc, LPWSTR lpszDst, DWORD cchDstLength
OemToCharW;Translates a string from the OEM-defined character set into either an ANSI or a wide-character string.Warning  Do not use.;LPCSTR pSrc, LPWSTR pDst
OfferVirtualMemory;Indicates that the data contained in a range of memory pages is no longer needed by the application and can be discarded by the system if necessary.;PVOID VirtualAddress, SIZE_T Size, OFFER_PRIORITY Priority
OfflineFilesEnable;Enables or disables the Offline Files feature.;BOOL bEnable, BOOL *pbRebootRequired
OfflineFilesQueryStatus;Determines whether the Offline Files feature is enabled and, if so, whether it is active.;BOOL *pbActive, BOOL *pbEnabled
OfflineFilesQueryStatusEx;Determines whether the Offline Files feature is enabled and, if so, whether it is active and available. This function is identical to the OfflineFilesQueryStatus function, except that it has an additional output parameter.;BOOL *pbActive, BOOL *pbEnabled, BOOL *pbAvailable
OfflineFilesStart;Starts the Offline Files service.;
OffsetClipRgn;The OffsetClipRgn function moves the clipping region of a device context by the specified offsets.;HDC hdc, int x, int y
OffsetRect;The OffsetRect function moves the specified rectangle by the specified offsets.;LPRECT lprc, int dx, int dy
OffsetRgn;The OffsetRgn function moves a region by the specified offsets.;HRGN hrgn, int x, int y
OffsetViewportOrgEx;The OffsetViewportOrgEx function modifies the viewport origin for a device context using the specified horizontal and vertical offsets.;HDC hdc, int x, int y, LPPOINT lppt
OffsetWindowOrgEx;The OffsetWindowOrgEx function modifies the window origin for a device context using the specified horizontal and vertical offsets.;HDC hdc, int x, int y, LPPOINT lppt
OpenApplication2;Opens the IAzApplication2 object with the specified name.;BSTR bstrApplicationName, VARIANT varReserved, IAzApplication2 **ppApplication
OpenApplicationGroup;Opens an IAzApplicationGroup object by specifying its name.;BSTR bstrGroupName, VARIANT varReserved, IAzApplicationGroup **ppGroup
OpenApplication;Opens the IAzApplication object with the specified name.;BSTR bstrApplicationName, VARIANT varReserved, IAzApplication **ppApplication
OpenBackupEventLogA;Opens a handle to a backup event log created by the BackupEventLog function.;LPCSTR lpUNCServerName, LPCSTR lpFileName
OpenBackupEventLogW;Opens a handle to a backup event log created by the BackupEventLog function.;LPCWSTR lpUNCServerName, LPCWSTR lpFileName
OpenClipboard;Opens the clipboard for examination and prevents other applications from modifying the clipboard content.;HWND hWndNewOwner
OpenClusterCryptProvider;Opens a handle to a Cryptographic Service Provider (CSP) in order to manage the encryption of Checkpointing data for a cluster resource. The POPEN_CLUSTER_CRYPT_PROVIDER type defines a pointer to this function.;LPCWSTR lpszResource, LPCTSTR lpszProvider, DWORD dwType, DWORD dwFlags
OpenCommPort;Attempts to open a communication device.;ULONG uPortNumber, DWORD dwDesiredAccess, DWORD dwFlagsAndAttributes
OpenConnection;Establishes a connection with a Certificate Services server.;const BSTR strConfig
OpenDesktopA;Opens the specified desktop object.;LPCSTR lpszDesktop, DWORD dwFlags, BOOL fInherit, ACCESS_MASK dwDesiredAccess
OpenDesktopW;Opens the specified desktop object.;LPCWSTR lpszDesktop, DWORD dwFlags, BOOL fInherit, ACCESS_MASK dwDesiredAccess
OpenDriver;Opens an instance of an installable driver and initializes the instance using either the driver's default settings or a driver-specific value.;LPCWSTR szDriverName, LPCWSTR szSectionName, LPARAM lParam2
OpenDSGPO;The OpenDSGPO method opens the specified GPO and optionally loads the registry information.;LPOLESTR pszPath, DWORD dwFlags
OpenElevatedEditor;Opens an access control editor when a user clicks the Edit button on an access control editor page that displays an image of a shield on that Edit button.;HWND hWnd, SI_PAGE_TYPE uPage
OpenEncryptedFileRawA;Opens an encrypted file in order to backup (export) or restore (import) the file.;LPCSTR lpFileName, ULONG ulFlags, PVOID *pvContext
OpenEncryptedFileRawW;Opens an encrypted file in order to backup (export) or restore (import) the file.;LPCWSTR lpFileName, ULONG ulFlags, PVOID *pvContext
OpenEventA;Opens an existing named event object.;DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpName
OpenEventLogA;Opens a handle to the specified event log.;LPCSTR lpUNCServerName, LPCSTR lpSourceName
OpenEventLogW;Opens a handle to the specified event log.;LPCWSTR lpUNCServerName, LPCWSTR lpSourceName
OpenEventW;Opens an existing named event object.;DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName
OpenFileById;Opens the file that matches the specified identifier.;HANDLE hVolumeHint, LPFILE_ID_DESCRIPTOR lpFileId, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwFlagsAndAttributes
OpenFile;Creates, opens, reopens, or deletes a file.;LPCSTR lpFileName, LPOFSTRUCT lpReOpenBuff, UINT uStyle
OpenFileMappingA;Opens a named file mapping object.;DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpName
OpenFileMappingFromApp;Opens a named file mapping object.;ULONG DesiredAccess, BOOL InheritHandle, PCWSTR Name
OpenFileMappingW;Opens a named file mapping object.;DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName
OpenIcon;Restores a minimized (iconic) window to its previous size and position; it then activates the window.;HWND hWnd
OpenInputDesktop;Opens the desktop that receives user input.;DWORD dwFlags, BOOL fInherit, ACCESS_MASK dwDesiredAccess
OpenJobObjectA;Opens an existing job object.;DWORD dwDesiredAccess, BOOL bInheritHandle, LPCSTR lpName
OpenLocalMachineGPO;The OpenLocalMachineGPO method opens the default GPO for the computer and optionally loads the registry information.;DWORD dwFlags
OpenMutexW;Opens an existing named mutex object.;DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName
OpenNtmsNotification;The OpenNtmsNotification function opens a channel to receive RSM object change notifications for objects of the specified type.;HANDLE hSession, DWORD dwType
OpenNtmsSessionA;The OpenNtmsSession function sets up a session with a RSM server.;LPCSTR lpServer, LPCSTR lpApplication, DWORD dwOptions
OpenNtmsSessionW;The OpenNtmsSession function sets up a session with a RSM server.;LPCWSTR lpServer, LPCWSTR lpApplication, DWORD dwOptions
Open;Opens an existing private key.;
Open;Opens the endorsement key. The endorsement key must be open before you can retrieve an information from the endorsement key, add or remove certificates, or export the endorsement key.;
OpenOperation;Opens an IAzOperation object with the specified name.;BSTR bstrOperationName, VARIANT varReserved, IAzOperation **ppOperation
OpenPackageInfoByFullName;Opens the package information of the specified package.;PCWSTR packageFullName, const UINT32 reserved, PACKAGE_INFO_REFERENCE *packageInfoReference
OpenPersonalTrustDBDialog;Displays the Certificates dialog box.;HWND hwndParent
OpenPersonalTrustDBDialogEx;Displays the Certificates dialog box.;HWND hwndParent, DWORD dwFlags, PVOID *pvReserved
OpenPrivateNamespaceA;Opens a private namespace.;LPVOID lpBoundaryDescriptor, LPCSTR lpAliasPrefix
OpenProcess;Opens an existing local process object.;DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwProcessId
OpenProcessToken;Opens the access token associated with a process.;HANDLE ProcessHandle, DWORD DesiredAccess, PHANDLE TokenHandle
OpenRemoteMachineGPO;The OpenRemoteMachineGPO method opens the default GPO for the specified remote computer and optionally loads the registry information.;LPOLESTR pszComputerName, DWORD dwFlags
OpenRoleAssignment;Opens an IAzRoleAssignment object with the specified name.;BSTR bstrRoleAssignmentName, IAzRoleAssignment **ppRoleAssignment
OpenRoleAssignment;Opens an IAzRoleAssignment object with the specified name in this scope.;BSTR bstrRoleAssignmentName, IAzRoleAssignment **ppRoleAssignment
OpenRoleDefinition;Opens an IAzRoleDefinition object with the specified name.;BSTR bstrRoleDefinitionName, IAzRoleDefinition **ppRoleDefinitions
OpenRoleDefinition;Opens an IAzRoleDefinition object with the specified name in this scope.;BSTR bstrRoleDefinitionName, IAzRoleDefinition **ppRoleDefinitions
OpenRole;Opens an IAzRole object with the specified name.;BSTR bstrRoleName, VARIANT varReserved, IAzRole **ppRole
OpenSCManagerA;Establishes a connection to the service control manager on the specified computer and opens the specified service control manager database.;LPCSTR lpMachineName, LPCSTR lpDatabaseName, DWORD dwDesiredAccess
OpenSCManagerW;Establishes a connection to the service control manager on the specified computer and opens the specified service control manager database.;LPCWSTR lpMachineName, LPCWSTR lpDatabaseName, DWORD dwDesiredAccess
OpenScope2;Opens an IAzScope2 object with the specified name.;BSTR bstrScopeName, IAzScope2 **ppScope2
OpenScope;Opens an IAzScope object with the specified name.;BSTR bstrScopeName, VARIANT varReserved, IAzScope **ppScope
OpenSemaphoreW;Opens an existing named semaphore object.;DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName
OpenServiceA;Opens an existing service.;SC_HANDLE hSCManager, LPCSTR lpServiceName, DWORD dwDesiredAccess
OpenServiceW;Opens an existing service.;SC_HANDLE hSCManager, LPCWSTR lpServiceName, DWORD dwDesiredAccess
OpenTask;Opens an IAzTask object with the specified name.;BSTR bstrTaskName, VARIANT varReserved, IAzTask **ppTask
OpenThread;Opens an existing thread object.;DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwThreadId
OpenThreadToken;Opens the access token associated with a thread.;HANDLE ThreadHandle, DWORD DesiredAccess, BOOL OpenAsSelf, PHANDLE TokenHandle
OpenView;Opens a view to a Certificate Services database and instantiates an instance of an IEnumCERTVIEWROW object.;IEnumCERTVIEWROW **ppenum
OpenWaitableTimerW;Opens an existing named waitable timer object.;DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpTimerName
OpenWindowStationA;Opens the specified window station.;LPCSTR lpszWinSta, BOOL fInherit, ACCESS_MASK dwDesiredAccess
OpenWindowStationW;Opens the specified window station.;LPCWSTR lpszWinSta, BOOL fInherit, ACCESS_MASK dwDesiredAccess
OperationEnd;Notifies the system that the application is about to end an operation.;OPERATION_END_PARAMETERS *OperationEndParams
OperationStart;Notifies the system that the application is about to start an operation.;OPERATION_START_PARAMETERS *OperationStartParams
OPMGetVideoOutputForTarget;Returns a video output object for the VidPN target on the specified adapter.;LUID *pAdapterLuid, ULONG VidPnTarget, OPM_VIDEO_OUTPUT_SEMANTICS vos, IOPMVideoOutput **ppOPMVideoOutput
OPMGetVideoOutputsFromHMONITOR;Creates an Output Protection Manager (OPM) object for each physical monitor that is associated with a particular HMONITOR handle.;HMONITOR hMonitor, OPM_VIDEO_OUTPUT_SEMANTICS vos, ULONG *pulNumVideoOutputs, IOPMVideoOutput ***pppOPMVideoOutputArray
OPMGetVideoOutputsFromIDirect3DDevice9Object;Creates an Output Protection Manager (OPM) object for each physical monitor that is associated with a particular Direct3D device.;IDirect3DDevice9 *pDirect3DDevice9, OPM_VIDEO_OUTPUT_SEMANTICS vos, ULONG *pulNumVideoOutputs, IOPMVideoOutput ***pppOPMVideoOutputArray
OutputDebugStringA;Sends a string to the debugger for display.;LPCSTR lpOutputString
OutputDebugStringW;Sends a string to the debugger for display.;LPCWSTR lpOutputString
PackageFamilyNameFromFullName;Gets the package family name for the specified package full name.;PCWSTR packageFullName, UINT32 *packageFamilyNameLength, PWSTR packageFamilyName
PackageFamilyNameFromId;Gets the package family name for the specified package identifier.;const PACKAGE_ID *packageId, UINT32 *packageFamilyNameLength, PWSTR packageFamilyName
PackageFullNameFromId;Gets the package full name for the specified package identifier (ID).;const PACKAGE_ID *packageId, UINT32 *packageFullNameLength, PWSTR packageFullName
PackageIdFromFullName;Gets the package identifier (ID) for the specified package full name.;PCWSTR packageFullName, const UINT32 flags, UINT32 *bufferLength, BYTE *buffer
PackageNameAndPublisherIdFromFamilyName;Gets the package name and publisher identifier (ID) for the specified package family name.;PCWSTR packageFamilyName, UINT32 *packageNameLength, PWSTR packageName, UINT32 *packagePublisherIdLength, PWSTR packagePublisherId
PackTouchHitTestingProximityEvaluation;Returns the proximity evaluation score and the adjusted touch-point coordinates as a packed value for the WM_TOUCHHITTESTING callback.;const TOUCH_HIT_TESTING_INPUT *pHitTestingInput, const TOUCH_HIT_TESTING_PROXIMITY_EVALUATION *pProximityEval
PaintDesktop;The PaintDesktop function fills the clipping region in the specified device context with the desktop pattern or wallpaper. The function is provided primarily for shell desktops.;HDC hdc
PaintRgn;The PaintRgn function paints the specified region by using the brush currently selected into the device context.;HDC hdc, HRGN hrgn
PALETTEINDEX;The PALETTEINDEX macro accepts an index to a logical-color palette entry and returns a palette-entry specifier consisting of a COLORREF value that specifies the color associated with the given index.;i
PALETTERGB;The PALETTERGB macro accepts three values that represent the relative intensities of red, green, and blue and returns a palette-relative red, green, blue (RGB) specifier consisting of 2 in the high-order byte and an RGB value in the three low-order bytes. An application using a color palette can pass this specifier, instead of an explicit RGB value, to functions that expect a color.;r, g, b
ParseApplicationUserModelId;Deconstructs an application user model ID to its package family name and package relative application ID (PRAID).;PCWSTR applicationUserModelId, UINT32 *packageFamilyNameLength, PWSTR packageFamilyName, UINT32 *packageRelativeApplicationIdLength, PWSTR packageRelativeApplicationId
ParseNetworkString;Parses the input network string and checks whether it is a legal representation of the specified IP network string type. If the string matches a type and its specification, the function can optionally return the parsed result.;const WCHAR *NetworkString, DWORD Types, PNET_ADDRESS_INFO AddressInfo, USHORT *PortNumber, BYTE *PrefixLength
ParseURLA;Performs rudimentary parsing of a URL.;LPCSTR pcszURL, PARSEDURLA *ppu
ParseURLW;Performs rudimentary parsing of a URL.;LPCWSTR pcszURL, PARSEDURLW *ppu
PatBlt;The PatBlt function paints the specified rectangle using the brush that is currently selected into the specified device context. The brush color and the surface color or colors are combined by using the specified raster operation.;HDC hdc, int x, int y, int w, int h, DWORD rop
PathAddBackslashA;Adds a backslash to the end of a string to create the correct syntax for a path.;LPSTR pszPath
PathAddBackslashW;Adds a backslash to the end of a string to create the correct syntax for a path.;LPWSTR pszPath
PathAddExtensionA;Adds a file name extension to a path string.;LPSTR pszPath, LPCSTR pszExt
PathAddExtensionW;Adds a file name extension to a path string.;LPWSTR pszPath, LPCWSTR pszExt
PathAppendA;Appends one path to the end of another.;LPSTR pszPath, LPCSTR pszMore
PathAppendW;Appends one path to the end of another.;LPWSTR pszPath, LPCWSTR pszMore
PathBuildRootA;Creates a root path from a given drive number.;LPSTR pszRoot, int iDrive
PathBuildRootW;Creates a root path from a given drive number.;LPWSTR pszRoot, int iDrive
PathCanonicalizeA;Simplifies a path by removing navigation elements such as &quot;.&quot; and &quot;..&quot; to produce a direct, well-formed path.;LPSTR pszBuf, LPCSTR pszPath
PathCanonicalizeW;Simplifies a path by removing navigation elements such as &quot;.&quot; and &quot;..&quot; to produce a direct, well-formed path.;LPWSTR pszBuf, LPCWSTR pszPath
PathCombineA;Concatenates two strings that represent properly formed paths into one path; also concatenates any relative path elements.;LPSTR pszDest, LPCSTR pszDir, LPCSTR pszFile
PathCombineW;Concatenates two strings that represent properly formed paths into one path; also concatenates any relative path elements.;LPWSTR pszDest, LPCWSTR pszDir, LPCWSTR pszFile
PathCommonPrefixA;Compares two paths to determine if they share a common prefix. A prefix is one of these types:_&quot;C:\&quot;, &quot;.&quot;, &quot;..&quot;, &quot;..\&quot;.;LPCSTR pszFile1, LPCSTR pszFile2, LPSTR achPath
PathCommonPrefixW;Compares two paths to determine if they share a common prefix. A prefix is one of these types:_&quot;C:\&quot;, &quot;.&quot;, &quot;..&quot;, &quot;..\&quot;.;LPCWSTR pszFile1, LPCWSTR pszFile2, LPWSTR achPath
PathCompactPathA;Truncates a file path to fit within a given pixel width by replacing path components with ellipses.;HDC hDC, LPSTR pszPath, UINT dx
PathCompactPathExA;Truncates a path to fit within a certain number of characters by replacing path components with ellipses.;LPSTR pszOut, LPCSTR pszSrc, UINT cchMax, DWORD dwFlags
PathCompactPathExW;Truncates a path to fit within a certain number of characters by replacing path components with ellipses.;LPWSTR pszOut, LPCWSTR pszSrc, UINT cchMax, DWORD dwFlags
PathCompactPathW;Truncates a file path to fit within a given pixel width by replacing path components with ellipses.;HDC hDC, LPWSTR pszPath, UINT dx
PathCreateFromUrlA;Converts a file URL to a Microsoft MS-DOS path.;PCSTR pszUrl, PSTR pszPath, DWORD *pcchPath, DWORD dwFlags
PathCreateFromUrlAlloc;Creates a path from a file URL.;PCWSTR pszIn, PWSTR *ppszOut, DWORD dwFlags
PathCreateFromUrlW;Converts a file URL to a Microsoft MS-DOS path.;PCWSTR pszUrl, PWSTR pszPath, DWORD *pcchPath, DWORD dwFlags
PathFileExistsA;Determines whether a path to a file system object such as a file or folder is valid.;LPCSTR pszPath
PathFileExistsW;Determines whether a path to a file system object such as a file or folder is valid.;LPCWSTR pszPath
PathFindExtensionA;Searches a path for an extension.;LPCSTR pszPath
PathFindExtensionW;Searches a path for an extension.;LPCWSTR pszPath
PathFindFileNameA;Searches a path for a file name.;LPCSTR pszPath
PathFindFileNameW;Searches a path for a file name.;LPCWSTR pszPath
PathFindNextComponentA;Parses a path and returns the portion of that path that follows the first backslash.;LPCSTR pszPath
PathFindNextComponentW;Parses a path and returns the portion of that path that follows the first backslash.;LPCWSTR pszPath
PathFindOnPathA;Searches for a file.;LPSTR pszPath, PZPCSTR ppszOtherDirs
PathFindOnPathW;Searches for a file.;LPWSTR pszPath, PZPCWSTR ppszOtherDirs
PathFindSuffixArrayA;Determines whether a given file name has one of a list of suffixes.;LPCSTR pszPath, const LPCSTR *apszSuffix, int iArraySize
PathFindSuffixArrayW;Determines whether a given file name has one of a list of suffixes.;LPCWSTR pszPath, const LPCWSTR *apszSuffix, int iArraySize
PathGetArgsA;Finds the command line arguments within a given path.;LPCSTR pszPath
PathGetArgsW;Finds the command line arguments within a given path.;LPCWSTR pszPath
PathGetCharTypeA;Determines the type of character in relation to a path.;UCHAR ch
PathGetCharTypeW;Determines the type of character in relation to a path.;WCHAR ch
PathGetDriveNumberA;Searches a path for a drive letter within the range of 'A' to 'Z' and returns the corresponding drive number.;LPCSTR pszPath
PathGetDriveNumberW;Searches a path for a drive letter within the range of 'A' to 'Z' and returns the corresponding drive number.;LPCWSTR pszPath
PathIsContentTypeA;Determines if a file's registered content type matches the specified content type. This function obtains the content type for the specified file type and compares that string with the pszContentType. The comparison is not case-sensitive.;LPCSTR pszPath, LPCSTR pszContentType
PathIsContentTypeW;Determines if a file's registered content type matches the specified content type. This function obtains the content type for the specified file type and compares that string with the pszContentType. The comparison is not case-sensitive.;LPCWSTR pszPath, LPCWSTR pszContentType
PathIsDirectoryA;Verifies that a path is a valid directory.;LPCSTR pszPath
PathIsDirectoryEmptyA;Determines whether a specified path is an empty directory.;LPCSTR pszPath
PathIsDirectoryEmptyW;Determines whether a specified path is an empty directory.;LPCWSTR pszPath
PathIsDirectoryW;Verifies that a path is a valid directory.;LPCWSTR pszPath
PathIsFileSpecA;Searches a path for any path-delimiting characters (for example, ':' or '' ). If there are no path-delimiting characters present, the path is considered to be a File Spec path.;LPCSTR pszPath
PathIsFileSpecW;Searches a path for any path-delimiting characters (for example, ':' or '' ). If there are no path-delimiting characters present, the path is considered to be a File Spec path.;LPCWSTR pszPath
PathIsHTMLFileA;Determines if a file is an HTML file. The determination is made based on the content type that is registered for the file's extension.;pszPath
PathIsHTMLFileW;Determines if a file is an HTML file. The determination is made based on the content type that is registered for the file's extension.;pszPath
PathIsLFNFileSpecA;Determines whether a file name is in long format.;LPCSTR pszName
PathIsLFNFileSpecW;Determines whether a file name is in long format.;LPCWSTR pszName
PathIsNetworkPathA;Determines whether a path string represents a network resource.;LPCSTR pszPath
PathIsNetworkPathW;Determines whether a path string represents a network resource.;LPCWSTR pszPath
PathIsPrefixA;Searches a path to determine if it contains a valid prefix of the type passed by pszPrefix. A prefix is one of these types:_&quot;C:\&quot;, &quot;.&quot;, &quot;..&quot;, &quot;..\&quot;.;LPCSTR pszPrefix, LPCSTR pszPath
PathIsPrefixW;Searches a path to determine if it contains a valid prefix of the type passed by pszPrefix. A prefix is one of these types:_&quot;C:\&quot;, &quot;.&quot;, &quot;..&quot;, &quot;..\&quot;.;LPCWSTR pszPrefix, LPCWSTR pszPath
PathIsRelativeA;Searches a path and determines if it is relative.;LPCSTR pszPath
PathIsRelativeW;Searches a path and determines if it is relative.;LPCWSTR pszPath
PathIsRootA;Determines whether a path string refers to the root of a volume.;LPCSTR pszPath
PathIsRootW;Determines whether a path string refers to the root of a volume.;LPCWSTR pszPath
PathIsSameRootA;Compares two paths to determine if they have a common root component.;LPCSTR pszPath1, LPCSTR pszPath2
PathIsSameRootW;Compares two paths to determine if they have a common root component.;LPCWSTR pszPath1, LPCWSTR pszPath2
PathIsSystemFolderA;Determines if an existing folder contains the attributes that make it a system folder. Alternately, this function indicates if certain attributes qualify a folder to be a system folder.;LPCSTR pszPath, DWORD dwAttrb
PathIsSystemFolderW;Determines if an existing folder contains the attributes that make it a system folder. Alternately, this function indicates if certain attributes qualify a folder to be a system folder.;LPCWSTR pszPath, DWORD dwAttrb
PathIsUNCA;Determines if a path string is a valid Universal Naming Convention (UNC) path, as opposed to a path based on a drive letter.;LPCSTR pszPath
PathIsUNCServerA;Determines if a string is a valid Universal Naming Convention (UNC) for a server path only.;LPCSTR pszPath
PathIsUNCServerShareA;Determines if a string is a valid Universal Naming Convention (UNC) share path, \server\share.;LPCSTR pszPath
PathIsUNCServerShareW;Determines if a string is a valid Universal Naming Convention (UNC) share path, \server\share.;LPCWSTR pszPath
PathIsUNCServerW;Determines if a string is a valid Universal Naming Convention (UNC) for a server path only.;LPCWSTR pszPath
PathIsUNCW;Determines if a path string is a valid Universal Naming Convention (UNC) path, as opposed to a path based on a drive letter.;LPCWSTR pszPath
PathIsURLA;Tests a given string to determine if it conforms to a valid URL format.;LPCSTR pszPath
PathIsURLW;Tests a given string to determine if it conforms to a valid URL format.;LPCWSTR pszPath
PathMakePrettyA;Converts an all-uppercase path to all lowercase characters to give the path a consistent appearance.;LPSTR pszPath
PathMakePrettyW;Converts an all-uppercase path to all lowercase characters to give the path a consistent appearance.;LPWSTR pszPath
PathMakeSystemFolderA;Gives an existing folder the proper attributes to become a system folder.;LPCSTR pszPath
PathMakeSystemFolderW;Gives an existing folder the proper attributes to become a system folder.;LPCWSTR pszPath
PathMatchSpecA;Searches a string using a Microsoft MS-DOS wildcard match type.;LPCSTR pszFile, LPCSTR pszSpec
PathMatchSpecExA;Matches a file name from a path against one or more file name patterns.;LPCSTR pszFile, LPCSTR pszSpec, DWORD dwFlags
PathMatchSpecExW;Matches a file name from a path against one or more file name patterns.;LPCWSTR pszFile, LPCWSTR pszSpec, DWORD dwFlags
PathMatchSpecW;Searches a string using a Microsoft MS-DOS wildcard match type.;LPCWSTR pszFile, LPCWSTR pszSpec
PathParseIconLocationA;Parses a file location string that contains a file location and icon index, and returns separate values.;LPSTR pszIconFile
PathParseIconLocationW;Parses a file location string that contains a file location and icon index, and returns separate values.;LPWSTR pszIconFile
PathQuoteSpacesA;Searches a path for spaces. If spaces are found, the entire path is enclosed in quotation marks.;LPSTR lpsz
PathQuoteSpacesW;Searches a path for spaces. If spaces are found, the entire path is enclosed in quotation marks.;LPWSTR lpsz
PathRelativePathToA;Creates a relative path from one file or folder to another.;LPSTR pszPath, LPCSTR pszFrom, DWORD dwAttrFrom, LPCSTR pszTo, DWORD dwAttrTo
PathRelativePathToW;Creates a relative path from one file or folder to another.;LPWSTR pszPath, LPCWSTR pszFrom, DWORD dwAttrFrom, LPCWSTR pszTo, DWORD dwAttrTo
PathRemoveArgsA;Removes any arguments from a given path.;LPSTR pszPath
PathRemoveArgsW;Removes any arguments from a given path.;LPWSTR pszPath
PathRemoveBackslashA;Removes the trailing backslash from a given path.;LPSTR pszPath
PathRemoveBackslashW;Removes the trailing backslash from a given path.;LPWSTR pszPath
PathRemoveBlanksA;Removes all leading and trailing spaces from a string.;LPSTR pszPath
PathRemoveBlanksW;Removes all leading and trailing spaces from a string.;LPWSTR pszPath
PathRemoveExtensionA;Removes the file name extension from a path, if one is present.;LPSTR pszPath
PathRemoveExtensionW;Removes the file name extension from a path, if one is present.;LPWSTR pszPath
PathRemoveFileSpecA;Removes the trailing file name and backslash from a path, if they are present.;LPSTR pszPath
PathRemoveFileSpecW;Removes the trailing file name and backslash from a path, if they are present.;LPWSTR pszPath
PathRenameExtensionA;Replaces the extension of a file name with a new extension. If the file name does not contain an extension, the extension will be attached to the end of the string.;LPSTR pszPath, LPCSTR pszExt
PathRenameExtensionW;Replaces the extension of a file name with a new extension. If the file name does not contain an extension, the extension will be attached to the end of the string.;LPWSTR pszPath, LPCWSTR pszExt
PathSearchAndQualifyA;Determines if a given path is correctly formatted and fully qualified.;LPCSTR pszPath, LPSTR pszBuf, UINT cchBuf
PathSearchAndQualifyW;Determines if a given path is correctly formatted and fully qualified.;LPCWSTR pszPath, LPWSTR pszBuf, UINT cchBuf
PathSetDlgItemPathA;Sets the text of a child control in a window or dialog box, using PathCompactPath to ensure the path fits in the control.;HWND hDlg, int id, LPCSTR pszPath
PathSetDlgItemPathW;Sets the text of a child control in a window or dialog box, using PathCompactPath to ensure the path fits in the control.;HWND hDlg, int id, LPCWSTR pszPath
PathSkipRootA;Retrieves a pointer to the first character in a path following the drive letter or Universal Naming Convention (UNC) server/share path elements.;LPCSTR pszPath
PathSkipRootW;Retrieves a pointer to the first character in a path following the drive letter or Universal Naming Convention (UNC) server/share path elements.;LPCWSTR pszPath
PathStripPathA;Removes the path portion of a fully qualified path and file.;LPSTR pszPath
PathStripPathW;Removes the path portion of a fully qualified path and file.;LPWSTR pszPath
PathStripToRootA;Removes all file and directory elements in a path except for the root information.;LPSTR pszPath
PathStripToRootW;Removes all file and directory elements in a path except for the root information.;LPWSTR pszPath
PathToRegion;The PathToRegion function creates a region from the path that is selected into the specified device context. The resulting region uses device coordinates.;HDC hdc
PathUndecorateA;Removes the decoration from a path string.;LPSTR pszPath
PathUndecorateW;Removes the decoration from a path string.;LPWSTR pszPath
PathUnExpandEnvStringsA;Replaces certain folder names in a fully qualified path with their associated environment string.;LPCSTR pszPath, LPSTR pszBuf, UINT cchBuf
PathUnExpandEnvStringsW;Replaces certain folder names in a fully qualified path with their associated environment string.;LPCWSTR pszPath, LPWSTR pszBuf, UINT cchBuf
PathUnmakeSystemFolderA;Removes the attributes from a folder that make it a system folder. This folder must actually exist in the file system.;LPCSTR pszPath
PathUnmakeSystemFolderW;Removes the attributes from a folder that make it a system folder. This folder must actually exist in the file system.;LPCWSTR pszPath
PathUnquoteSpacesA;Removes quotes from the beginning and end of a path.;LPSTR lpsz
PathUnquoteSpacesW;Removes quotes from the beginning and end of a path.;LPWSTR lpsz
PCRYPT_DECRYPT_PRIVATE_KEY_FUNC;Decrypts the private key and returns the decrypted key in the pbClearTextKey parameter.;CRYPT_ALGORITHM_IDENTIFIER Algorithm, CRYPT_DATA_BLOB EncryptedPrivateKey, BYTE *pbClearTextKey, DWORD *pcbClearTextKey, LPVOID pVoidDecryptFunc ) {...}
PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC;Encrypts the private key and returns the encrypted contents in the pbEncryptedKey parameter.;CRYPT_ALGORITHM_IDENTIFIER *pAlgorithm, CRYPT_DATA_BLOB *pClearTextPrivateKey, BYTE *pbEncryptedKey, DWORD *pcbEncryptedKey, LPVOID pVoidEncryptFunc ) {...}
PCRYPT_RESOLVE_HCRYPTPROV_FUNC;Returns a handle to a cryptographic service provider (CSP) by using the phCryptProv parameter to receive the key being imported.;CRYPT_PRIVATE_KEY_INFO *pPrivateKeyInfo, HCRYPTPROV *phCryptProv, LPVOID pVoidResolveFunc ) {...}
pCryptSIPGetCaps;Is implemented by an subject interface package (SIP) to report capabilities.;SIP_SUBJECTINFO *pSubjInfo, SIP_CAP_SET *pCaps ) {...}
PeekMessageA;Dispatches incoming sent messages, checks the thread message queue for a posted message, and retrieves the message (if any exist).;LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax, UINT wRemoveMsg
PeekMessageW;Dispatches incoming sent messages, checks the thread message queue for a posted message, and retrieves the message (if any exist).;LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax, UINT wRemoveMsg
PeekNamedPipe;Copies data from a named or anonymous pipe into a buffer without removing it from the pipe.;HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage
PFN_CDF_PARSE_ERROR_CALLBACK;Called for Catalog Definition Function errors while parsing a catalog definition file (CDF).;DWORD dwErrorArea, DWORD dwLocalError, WCHAR *pwszLine ) {...}
PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK;An application-defined callback function that allows the application to filter certificates that might be added to the certificate chain.;PCCERT_CONTEXT pCert, void *pvFindArg ) {...}
PFN_CERT_CREATE_CONTEXT_SORT_FUNC;Called for each sorted context entry when a context is created.;DWORD cbTotalEncoded, DWORD cbRemainEncoded, DWORD cEntry, void *pvSort ) {...}
PFN_CERT_DLL_OPEN_STORE_PROV_FUNC;Implemented by a store-provider and is used to open a store.;LPCSTR lpszStoreProvider, DWORD dwEncodingType, HCRYPTPROV_LEGACY hCryptProv, DWORD dwFlags, const void *pvPara, HCERTSTORE hCertStore, PCERT_STORE_PROV_INFO pStoreProvInfo ) {...}
PFN_CERT_ENUM_PHYSICAL_STORE;The CertEnumPhysicalStoreCallback callback function formats and presents information on each physical store found by a call to CertEnumPhysicalStore.;const void *pvSystemStore, DWORD dwFlags, LPCWSTR pwszStoreName, PCERT_PHYSICAL_STORE_INFO pStoreInfo, void *pvReserved, void *pvArg ) {...}
PFN_CERT_ENUM_SYSTEM_STORE_LOCATION;The CertEnumSystemStoreLocationCallback callback function formats and presents information on each system store location found by a call to CertEnumSystemStoreLocation.;LPCWSTR pwszStoreLocation, DWORD dwFlags, void *pvReserved, void *pvArg ) {...}
PFN_CERT_ENUM_SYSTEM_STORE;The CertEnumSystemStoreCallback callback function formats and presents information on each system store found by a call to CertEnumSystemStore.;const void *pvSystemStore, DWORD dwFlags, PCERT_SYSTEM_STORE_INFO pStoreInfo, void *pvReserved, void *pvArg ) {...}
PFN_CERT_STORE_PROV_CLOSE;An application-defined callback function that is called by CertCloseStore when the store's reference count is decremented to zero.;HCERTSTOREPROV hStoreProv, DWORD dwFlags ) {...}
PFN_CERT_STORE_PROV_CONTROL;The CertStoreProvControl callback function supports the CertControlStore API. All of the API's parameters are passed straight through to the callback. For details, see CertControlStore.;HCERTSTOREPROV hStoreProv, DWORD dwFlags, DWORD dwCtrlType, void const *pvCtrlPara ) {...}
PFN_CERT_STORE_PROV_DELETE_CERT;An application-defined callback function that is called by CertDeleteCertificateFromStore before deleting a certificate from the store.;HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, DWORD dwFlags ) {...}
PFN_CERT_STORE_PROV_DELETE_CRL;An application-defined callback function that is called by CertDeleteCRLFromStore before deleting the CRL from the store.;HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, DWORD dwFlags ) {...}
PFN_CERT_STORE_PROV_READ_CERT;An application-defined callback function that reads the provider's copy of the certificate context.;HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pStoreCertContext, DWORD dwFlags, PCCERT_CONTEXT *ppProvCertContext ) {...}
PFN_CERT_STORE_PROV_READ_CRL;An application-defined callback function that reads the provider's copy of the CRL context.;HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pStoreCrlContext, DWORD dwFlags, PCCRL_CONTEXT *ppProvCrlContext ) {...}
PFN_CERT_STORE_PROV_READ_CTL;The CertStoreProvReadCTL callback function is called to read the provider's copy of the CTL context and, if it exists, to create a new CTL context.;HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pStoreCtlContext, DWORD dwFlags, PCCTL_CONTEXT *ppProvCtlContext ) {...}
PFN_CERT_STORE_PROV_SET_CERT_PROPERTY;An application-defined callback function that is called by CertSetCertificateContextProperty before setting the certificate's property.;HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, DWORD dwPropId, DWORD dwFlags, const void *pvData ) {...}
PFN_CERT_STORE_PROV_SET_CRL_PROPERTY;An application-defined callback function that is called by CertSetCRLContextProperty before setting the CRL's property.;HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, DWORD dwPropId, DWORD dwFlags, const void *pvData ) {...}
PFN_CERT_STORE_PROV_SET_CTL_PROPERTY;The CertStoreProvSetCTLProperty callback function determines whether a property can be set on a CTL.;HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, DWORD dwPropId, DWORD dwFlags, const void *pvData ) {...}
PFN_CERT_STORE_PROV_WRITE_CERT;An application-defined callback function that is called by CertAddEncodedCertificateToStore, CertAddCertificateContextToStore and CertAddSerializedElementToStore before adding to the store.;HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, DWORD dwFlags ) {...}
PFN_CERT_STORE_PROV_WRITE_CRL;An application-defined callback function that is called by CertAddEncodedCRLToStore, CertAddCRLContextToStore and CertAddSerializedElementToStore before adding to the store.;HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, DWORD dwFlags ) {...}
PFN_CERT_STORE_PROV_WRITE_CTL;The CertStoreProvWriteCTL callback function can be called by CertAddEncodedCTLToStore, CertAddCTLContextToStore or CertAddSerializedElementToStore before a CTL is added to the store.;HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, DWORD dwFlags ) {...}
PFNCFILTERPROC;An application-defined callback function that filters the certificates that appear in the digital signature wizard that are displayed by the CryptUIWizDigitalSign function.;PCCERT_CONTEXT pCertContext, BOOL *pfInitialSelectedCert, void *pvCallbackData ) {...}
PFNCMFILTERPROC;Filters each certificate to determine whether it will appear in the certificate selection dialog box that is displayed by the CertSelectCertificate function.;PCCERT_CONTEXT pCertContext, LPARAM Arg2, DWORD Arg3, DWORD Arg4 ) {...}
PFNCMHOOKPROC;Called before messages are processed by the certificate selection dialog box produced by the CertSelectCertificate function.;HWND hwndDialog, UINT message, WPARAM wParam, LPARAM lParam ) {...}
PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY;Imports an already decrypted content encryption key (CEK).;PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo, DWORD dwFlags, void *pvReserved ) {...}
PFN_CMSG_CNG_IMPORT_KEY_AGREE;Decrypts a content encryption key (CEK) that is intended for a key agreement recipient.;PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo, PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA pKeyAgreeDecryptPara, DWORD dwFlags, void *pvReserved ) {...}
PFN_CMSG_CNG_IMPORT_KEY_TRANS;Imports and decrypts a content encryption key (CEK) that is intended for a key transport recipient.;PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo, PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA pKeyTransDecryptPara, DWORD dwFlags, void *pvReserved ) {...}
PFN_CMSG_EXPORT_KEY_AGREE;Encrypts and exports the content encryption key for a key agreement recipient of an enveloped message.;PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo, PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO pKeyAgreeEncodeInfo, PCMSG_KEY_AGREE_ENCRYPT_INFO pKeyAgreeEncryptInfo, DWORD dwFlags, void *pvReserved ) {...}
PFN_CMSG_EXPORT_KEY_TRANS;Encrypts and exports the content encryption key for a key transport recipient of an enveloped message.;PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo, PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO pKeyTransEncodeInfo, PCMSG_KEY_TRANS_ENCRYPT_INFO pKeyTransEncryptInfo, DWORD dwFlags, void *pvReserved ) {...}
PFN_CMSG_EXPORT_MAIL_LIST;Encrypts and exports the content encryption key for a mailing list recipient of an enveloped message.;PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo, PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO pMailListEncodeInfo, PCMSG_MAIL_LIST_ENCRYPT_INFO pMailListEncryptInfo, DWORD dwFlags, void *pvReserved ) {...}
PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY;Generates the symmetric key used to encrypt content for an enveloped message.;PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo, DWORD dwFlags, void *pvReserved ) {...}
PFN_CMSG_IMPORT_KEY_AGREE;Imports a content encryption key for a key transport recipient of an enveloped message.;PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm, PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA pKeyAgreeDecryptPara, DWORD dwFlags, void *pvReserved, HCRYPTKEY *phContentEncryptKey ) {...}
PFN_CMSG_IMPORT_KEY_TRANS;Imports a content encryption key for a key transport recipient of an enveloped message.;PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm, PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA pKeyTransDecryptPara, DWORD dwFlags, void *pvReserved, HCRYPTKEY *phContentEncryptKey ) {...}
PFN_CMSG_IMPORT_MAIL_LIST;Imports a content encryption key for a key transport recipient of an enveloped message.;PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm, PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA pMailListDecryptPara, DWORD dwFlags, void *pvReserved, HCRYPTKEY *phContentEncryptKey ) {...}
PFN_CRYPT_ENUM_KEYID_PROP;The CRYPT_ENUM_KEYID_PROP callback function is used with the CryptEnumKeyIdentifierProperties function.;const CRYPT_HASH_BLOB *pKeyIdentifier, DWORD dwFlags, void *pvReserved, void *pvArg, DWORD cProp, DWORD *rgdwPropId, void **rgpvData, DWORD *rgcbData ) {...}
PFN_CRYPT_ENUM_OID_FUNC;The CRYPT_ENUM_OID_FUNCTION callback function is used with the CryptEnumOIDFunction function.;DWORD dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID, DWORD cValue, const DWORD rgdwValueType[], LPCWSTR const rgpwszValueName[], const BYTE * const rgpbValueData[], const DWORD rgcbValueData[], void *pvArg ) {...}
PFN_CRYPT_ENUM_OID_INFO;The CRYPT_ENUM_OID_INFO callback function is used with the CryptEnumOIDInfo function.;PCCRYPT_OID_INFO pInfo, void *pvArg ) {...}
PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC;Called by CryptExportPublicKeyInfoEx to export a public key BLOB and encode it.;NCRYPT_KEY_HANDLE hNCryptKey, DWORD dwCertEncodingType, LPSTR pszPublicKeyObjId, DWORD dwFlags, void *pvAuxInfo, PCERT_PUBLIC_KEY_INFO pInfo, DWORD *pcbInfo ) {...}
PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC;Called to decode and return the hash algorithm identifier and optionally the signature parameters.;DWORD dwCertEncodingType, PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm, void **ppvDecodedSignPara, LPWSTR *ppwszCNGHashAlgid ) {...}
PFN_CRYPT_GET_SIGNER_CERTIFICATE;The CryptGetSignerCertificateCallback user supplied callback function is used with the CRYPT_VERIFY_MESSAGE_PARA structure to get and verify a message signer's certificate.;void *pvGetArg, DWORD dwCertEncodingType, PCERT_INFO pSignerId, HCERTSTORE hMsgCertStore ) {...}
PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH;Specifies that an object has changed.;LPVOID pContext, PCERT_NAME_BLOB *rgIdentifierOrNameList, DWORD dwIdentifierOrNameListCount ) {...}
PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER;Releases memory for an object identifier.;LPVOID pPluginContext, PCRYPT_DATA_BLOB pIdentifier ) {...}
PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD;Releases the password used to encrypt a personal information exchange (PFX) byte array.;LPVOID pPluginContext, PCWSTR pwszPassword ) {...}
PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE;Releases the object returned by the provider.;LPVOID pPluginContext, PBYTE pbData ) {...}
PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET;Retrieves an object.;LPVOID pPluginContext, PCRYPT_DATA_BLOB pIdentifier, DWORD dwNameType, PCERT_NAME_BLOB pNameBlob, PBYTE *ppbContent, DWORD *pcbContent, PCWSTR *ppwszPassword, PCRYPT_DATA_BLOB *ppIdentifier ) {...}
PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE;Initializes the provider.;PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH pfnFlush, LPVOID pContext, DWORD *pdwExpectedObjectCount, PCRYPT_OBJECT_LOCATOR_PROVIDER_TABLE *ppFuncTable, void **ppPluginContext ) {...}
PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE;Releases the provider.;DWORD dwReason, LPVOID pPluginContext ) {...}
PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC;Called to sign and encode a computed hash.;NCRYPT_KEY_HANDLE hKey, DWORD dwCertEncodingType, PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm, void *pvDecodedSignPara, LPCWSTR pwszCNGPubKeyAlgid, LPCWSTR pwszCNGHashAlgid, BYTE *pbComputedHash, DWORD cbComputedHash, BYTE *pbSignature, DWORD *pcbSignature ) {...}
PFNCryptStreamOutputCallback;Receives encrypted or decrypted data from tasks started by using the NCryptStreamOpenToProtect or NCryptStreamOpenToUnprotect functions.;void *pvCallbackCtxt, const BYTE *pbData, SIZE_T cbData, BOOL fFinal ) {...}
PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC;Called to decrypt an encoded signature and compare it to a computed hash.;DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pPubKeyInfo, PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm, void *pvDecodedSignPara, LPCWSTR pwszCNGPubKeyAlgid, LPCWSTR pwszCNGHashAlgid, BYTE *pbComputedHash, DWORD cbComputedHash, BYTE *pbSignature, DWORD cbSignature ) {...}
PFN_CRYPT_XML_CREATE_TRANSFORM;Creates a transform for a specified data provider.;const CRYPT_XML_ALGORITHM *pTransform, CRYPT_XML_DATA_PROVIDER *pProviderIn, CRYPT_XML_DATA_PROVIDER *pProviderOut ) {...}
PFN_CRYPT_XML_DATA_PROVIDER_CLOSE;Releases the data provider.;void *pvCallbackState ) {...}
PFN_CRYPT_XML_DATA_PROVIDER_READ;Reads XML data.;void *pvCallbackState, BYTE *pbData, ULONG cbData, ULONG *pcbRead ) {...}
PFN_CRYPT_XML_ENUM_ALG_INFO;Enumerates predefined and registered CRYPT_XML_ALGORITHM_INFO entries.;const CRYPT_XML_ALGORITHM_INFO *pInfo, void *pvArg ) {...}
PFN_CRYPT_XML_WRITE_CALLBACK;Writes XML data.;void *pvCallbackState, const BYTE *pbData, ULONG cbData ) {...}
PFNGENERATEGROUPPOLICY;The GenerateGroupPolicy callback function is an application-defined callback function that each policy extension must export when generating RSoP data in the planning mode.;DWORD dwFlags, BOOL *pbAbort, WCHAR *pwszSite, PRSOP_TARGET pComputerTarget, PRSOP_TARGET pUserTarget ) {...}
PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC;Called by CryptImportPublicKeyInfoEx2 to decode the public key algorithm identifier, load the algorithm provider, and import the key pair.;DWORD dwCertEncodingType, PCERT_PUBLIC_KEY_INFO pInfo, DWORD dwFlags, void *pvAuxInfo, BCRYPT_KEY_HANDLE *phKey ) {...}
pfnIsFileSupportedName;Queries the subject interface packages (SIPs) listed in the registry to determine which SIP handles the file type.;WCHAR *pwszFileName, GUID *pgSubject ) {...}
pfnIsFileSupported;Queries the subject interface packages (SIPs) listed in the registry to determine which SIP handles the file type.;HANDLE hFile, GUID *pgSubject ) {...}
PFNPROCESSGROUPPOLICYEX;The ProcessGroupPolicyEx function is an application-defined callback function used when applying policy.;DWORD dwFlags, HANDLE hToken, HKEY hKeyRoot, PGROUP_POLICY_OBJECT pDeletedGPOList, PGROUP_POLICY_OBJECT pChangedGPOList, ASYNCCOMPLETIONHANDLE pHandle, BOOL *pbAbort, PFNSTATUSMESSAGECALLBACK pStatusCallback, IWbemServices *pWbemServices, HRESULT *pRsopStatus ) {...}
PFNPROCESSGROUPPOLICY;The ProcessGroupPolicy function is an application-defined callback function used when applying policy.;DWORD dwFlags, HANDLE hToken, HKEY hKeyRoot, PGROUP_POLICY_OBJECT pDeletedGPOList, PGROUP_POLICY_OBJECT pChangedGPOList, ASYNCCOMPLETIONHANDLE pHandle, BOOL *pbAbort, PFNSTATUSMESSAGECALLBACK pStatusCallback ) {...}
PFNSTATUSMESSAGECALLBACK;The StatusMessageCallback function is an application-defined callback function used to display status messages when applying policy.;BOOL bVerbose, LPWSTR lpMessage ) {...}
PFSCE_FREE_INFO;Frees the memory for buffers allocated by the Security Configuration tool set when it calls PFSCE_QUERY_INFO.;PVOID pvServiceInfo ) {...}
PFSCE_LOG_INFO;Logs messages to the configuration log file or analysis log file.;INT ErrLevel, DWORD Win32rc, LPTSTR pErrFmt, ... Arg4 ) {...}
PFSCE_QUERY_INFO;Queries service-specific information from the Security Configuration file or analysis database.;SCE_HANDLE sceHandle, SCESVC_INFO_TYPE sceType, LPTSTR lpPrefix, BOOL bExact, PVOID *ppvInfo, PSCE_ENUMERATION_CONTEXT psceEnumHandle ) {...}
PFSCE_SET_INFO;Sets or overwrites service-specific configuration and analysis information.;SCE_HANDLE sceHandle, SCESVC_INFO_TYPE sceType, LPTSTR lpPrefix, BOOL bExact, PVOID pvInfo ) {...}
PFXExportCertStoreEx;Exports the certificates and, if available, their associated private keys from the referenced certificate store.;HCERTSTORE hStore, CRYPT_DATA_BLOB *pPFX, LPCWSTR szPassword, void *pvPara, DWORD dwFlags
PFXExportCertStore;Exports the certificates and, if available, the associated private keys from the referenced certificate store.;HCERTSTORE hStore, CRYPT_DATA_BLOB *pPFX, LPCWSTR szPassword, DWORD dwFlags
PFXImportCertStore;Imports a PFX BLOB and returns the handle of a store that contains certificates and any associated private keys.;CRYPT_DATA_BLOB *pPFX, LPCWSTR szPassword, DWORD dwFlags
PFXIsPFXBlob;The PFXIsPFXBlob function attempts to decode the outer layer of a BLOB as a PFX packet.;CRYPT_DATA_BLOB *pPFX
PFXVerifyPassword;The PFXVerifyPassword function attempts to decode the outer layer of a BLOB as a Personal Information Exchange (PFX) packet and to decrypt it with the given password. No data from the BLOB is imported.;CRYPT_DATA_BLOB *pPFX, LPCWSTR szPassword, DWORD dwFlags
phoneClose;The phoneClose function closes the specified open phone device.;HPHONE hPhone
phoneConfigDialogA;The phoneConfigDialog function causes the provider of the specified phone device to display a modal dialog box that allows the user to configure parameters related to the phone device.;DWORD dwDeviceID, HWND hwndOwner, LPCSTR lpszDeviceClass
phoneConfigDialog;The phoneConfigDialog function causes the provider of the specified phone device to display a modal dialog box that allows the user to configure parameters related to the phone device.;DWORD dwDeviceID, HWND hwndOwner, LPCSTR lpszDeviceClass
phoneConfigDialogW;The phoneConfigDialog function causes the provider of the specified phone device to display a modal dialog box that allows the user to configure parameters related to the phone device.;DWORD dwDeviceID, HWND hwndOwner, LPCWSTR lpszDeviceClass
phoneDevSpecific;The phoneDevSpecific function is used as a general extension mechanism to enable a Telephony API implementation to provide features not described in the other TAPI functions. The meanings of these extensions are device specific.;HPHONE hPhone, LPVOID lpParams, DWORD dwSize
phoneGetButtonInfoA;The phoneGetButtonInfo function returns information about the specified button.;HPHONE hPhone, DWORD dwButtonLampID, LPPHONEBUTTONINFO lpButtonInfo
phoneGetButtonInfo;The phoneGetButtonInfo function returns information about the specified button.;HPHONE hPhone, DWORD dwButtonLampID, LPPHONEBUTTONINFO lpButtonInfo
phoneGetButtonInfoW;The phoneGetButtonInfo function returns information about the specified button.;HPHONE hPhone, DWORD dwButtonLampID, LPPHONEBUTTONINFO lpButtonInfo
phoneGetData;The phoneGetData function uploads the information from the specified location in the open phone device to the specified buffer.;HPHONE hPhone, DWORD dwDataID, LPVOID lpData, DWORD dwSize
phoneGetDevCapsA;The phoneGetDevCaps function queries a specified phone device to determine its telephony capabilities.;HPHONEAPP hPhoneApp, DWORD dwDeviceID, DWORD dwAPIVersion, DWORD dwExtVersion, LPPHONECAPS lpPhoneCaps
phoneGetDevCaps;The phoneGetDevCaps function queries a specified phone device to determine its telephony capabilities.;HPHONEAPP hPhoneApp, DWORD dwDeviceID, DWORD dwAPIVersion, DWORD dwExtVersion, LPPHONECAPS lpPhoneCaps
phoneGetDevCapsW;The phoneGetDevCaps function queries a specified phone device to determine its telephony capabilities.;HPHONEAPP hPhoneApp, DWORD dwDeviceID, DWORD dwAPIVersion, DWORD dwExtVersion, LPPHONECAPS lpPhoneCaps
phoneGetDisplay;The phoneGetDisplay function returns the current contents of the specified phone display.;HPHONE hPhone, LPVARSTRING lpDisplay
phoneGetGain;The phoneGetGain function returns the gain setting of the microphone of the specified phone's hookswitch device.;HPHONE hPhone, DWORD dwHookSwitchDev, LPDWORD lpdwGain
phoneGetHookSwitch;The phoneGetHookSwitch function returns the current hookswitch mode of the specified open phone device.;HPHONE hPhone, LPDWORD lpdwHookSwitchDevs
phoneGetIconA;The phoneGetIcon function allows an application to retrieve a service phone device-specific (or provider-specific) icon that can be displayed to the user.;DWORD dwDeviceID, LPCSTR lpszDeviceClass, LPHICON lphIcon
phoneGetIcon;The phoneGetIcon function allows an application to retrieve a service phone device-specific (or provider-specific) icon that can be displayed to the user.;DWORD dwDeviceID, LPCSTR lpszDeviceClass, LPHICON lphIcon
phoneGetIconW;The phoneGetIcon function allows an application to retrieve a service phone device-specific (or provider-specific) icon that can be displayed to the user.;DWORD dwDeviceID, LPCWSTR lpszDeviceClass, LPHICON lphIcon
phoneGetIDA;The phoneGetID function returns a device identifier for the given device class associated with the specified phone device.;HPHONE hPhone, LPVARSTRING lpDeviceID, LPCSTR lpszDeviceClass
phoneGetID;The phoneGetID function returns a device identifier for the given device class associated with the specified phone device.;HPHONE hPhone, LPVARSTRING lpDeviceID, LPCSTR lpszDeviceClass
phoneGetIDW;The phoneGetID function returns a device identifier for the given device class associated with the specified phone device.;HPHONE hPhone, LPVARSTRING lpDeviceID, LPCWSTR lpszDeviceClass
phoneGetLamp;The phoneGetLamp function returns the current lamp mode of the specified lamp.;HPHONE hPhone, DWORD dwButtonLampID, LPDWORD lpdwLampMode
phoneGetMessage;The phoneGetMessage function returns the next TAPI message that is queued for delivery to an application that is using the Event Handle notification mechanism (see phoneInitializeEx for further details).;HPHONEAPP hPhoneApp, LPPHONEMESSAGE lpMessage, DWORD dwTimeout
phoneGetRing;The phoneGetRing function enables an application to query the specified open phone device as to its current ring mode.;HPHONE hPhone, LPDWORD lpdwRingMode, LPDWORD lpdwVolume
phoneGetStatusA;The phoneGetStatus function enables an application to query the specified open phone device for its overall status.;HPHONE hPhone, LPPHONESTATUS lpPhoneStatus
phoneGetStatusMessages;The phoneGetStatusMessages function returns which phone-state changes on the specified phone device generate a callback to the application.;HPHONE hPhone, LPDWORD lpdwPhoneStates, LPDWORD lpdwButtonModes, LPDWORD lpdwButtonStates
phoneGetStatus;The phoneGetStatus function enables an application to query the specified open phone device for its overall status.;HPHONE hPhone, LPPHONESTATUS lpPhoneStatus
phoneGetStatusW;The phoneGetStatus function enables an application to query the specified open phone device for its overall status.;HPHONE hPhone, LPPHONESTATUS lpPhoneStatus
phoneGetVolume;The phoneGetVolume function returns the volume setting of the specified phone's hookswitch device.;HPHONE hPhone, DWORD dwHookSwitchDev, LPDWORD lpdwVolume
phoneInitializeExA;The phoneInitializeEx function initializes the application's use of TAPI for subsequent use of the phone abstraction.;LPHPHONEAPP lphPhoneApp, HINSTANCE hInstance, PHONECALLBACK lpfnCallback, LPCSTR lpszFriendlyAppName, LPDWORD lpdwNumDevs, LPDWORD lpdwAPIVersion, LPPHONEINITIALIZEEXPARAMS lpPhoneInitializeExParams
phoneInitializeExW;The phoneInitializeEx function initializes the application's use of TAPI for subsequent use of the phone abstraction.;LPHPHONEAPP lphPhoneApp, HINSTANCE hInstance, PHONECALLBACK lpfnCallback, LPCWSTR lpszFriendlyAppName, LPDWORD lpdwNumDevs, LPDWORD lpdwAPIVersion, LPPHONEINITIALIZEEXPARAMS lpPhoneInitializeExParams
phoneInitialize;The phoneInitialize function is obsolete. It continues to be exported by Tapi.dll and Tapi32.dll for backward compatibility with applications using TAPI versions 1.3 and 1.4.;LPHPHONEAPP lphPhoneApp, HINSTANCE hInstance, PHONECALLBACK lpfnCallback, LPCSTR lpszAppName, LPDWORD lpdwNumDevs
phoneNegotiateAPIVersion;The phoneNegotiateAPIVersion allows an application to negotiate an API version to use for the specified phone device.;HPHONEAPP hPhoneApp, DWORD dwDeviceID, DWORD dwAPILowVersion, DWORD dwAPIHighVersion, LPDWORD lpdwAPIVersion, LPPHONEEXTENSIONID lpExtensionID
phoneNegotiateExtVersion;The phoneNegotiateExtVersion function allows an application to negotiate an extension version to use with the specified phone device. This operation need not be called if the application does not support extensions.;HPHONEAPP hPhoneApp, DWORD dwDeviceID, DWORD dwAPIVersion, DWORD dwExtLowVersion, DWORD dwExtHighVersion, LPDWORD lpdwExtVersion
phoneOpen;The phoneOpen function opens the specified phone device.;HPHONEAPP hPhoneApp, DWORD dwDeviceID, LPHPHONE lphPhone, DWORD dwAPIVersion, DWORD dwExtVersion, DWORD_PTR dwCallbackInstance, DWORD dwPrivilege
phoneSetButtonInfoA;The phoneSetButtonInfo function sets information about the specified button on the specified phone.;HPHONE hPhone, DWORD dwButtonLampID, LPPHONEBUTTONINFO const lpButtonInfo
phoneSetButtonInfo;The phoneSetButtonInfo function sets information about the specified button on the specified phone.;HPHONE hPhone, DWORD dwButtonLampID, LPPHONEBUTTONINFO const lpButtonInfo
phoneSetButtonInfoW;The phoneSetButtonInfo function sets information about the specified button on the specified phone.;HPHONE hPhone, DWORD dwButtonLampID, LPPHONEBUTTONINFO const lpButtonInfo
phoneSetData;The phoneSetData function downloads the information in the specified buffer to the opened phone device at the selected data identifier.;HPHONE hPhone, DWORD dwDataID, LPVOID const lpData, DWORD dwSize
phoneSetDisplay;The phoneSetDisplay function causes the specified string to be displayed on the specified open phone device.;HPHONE hPhone, DWORD dwRow, DWORD dwColumn, LPCSTR lpsDisplay, DWORD dwSize
phoneSetGain;The phoneSetGain function sets the gain of the microphone of the specified hookswitch device to the specified gain level.;HPHONE hPhone, DWORD dwHookSwitchDev, DWORD dwGain
phoneSetHookSwitch;The phoneSetHookSwitch function sets the hook state of the specified open phone's hookswitch devices to the specified mode. Only the hookswitch state of the hookswitch devices listed is affected.;HPHONE hPhone, DWORD dwHookSwitchDevs, DWORD dwHookSwitchMode
phoneSetLamp;The phoneSetLamp function causes the specified lamp to be lit on the specified open phone device in the specified lamp mode.;HPHONE hPhone, DWORD dwButtonLampID, DWORD dwLampMode
phoneSetRing;The phoneSetRing function rings the specified open phone device using the specified ring mode and volume.;HPHONE hPhone, DWORD dwRingMode, DWORD dwVolume
phoneSetStatusMessages;The phoneSetStatusMessages function enables an application to monitor the specified phone device for selected status events.;HPHONE hPhone, DWORD dwPhoneStates, DWORD dwButtonModes, DWORD dwButtonStates
phoneSetVolume;The phoneSetVolume function sets the volume of the speaker component of the specified hookswitch device to the specified level.;HPHONE hPhone, DWORD dwHookSwitchDev, DWORD dwVolume
phoneShutdown;The phoneShutdown function shuts down the application's usage of TAPI's phone abstraction.;HPHONEAPP hPhoneApp
PhysicalToLogicalPoint;Converts the physical coordinates of a point in a window to logical coordinates.;HWND hWnd, LPPOINT lpPoint
PhysicalToLogicalPointForPerMonitorDPI;Converts a point in a window from physical coordinates into logical coordinates, regardless of the dots per inch (dpi) awareness of the caller.;HWND hWnd, LPPOINT lpPoint
Pie;The Pie function draws a pie-shaped wedge bounded by the intersection of an ellipse and two radials. The pie is outlined by using the current pen and filled by using the current brush.;HDC hdc, int left, int top, int right, int bottom, int xr1, int yr1, int xr2, int yr2
Ping;Tests a DCOM connection with an Online Certificate Status Protocol (OCSP) responder service.;const BSTR bstrServerName
PlayEnhMetaFileRecord;The PlayEnhMetaFileRecord function plays an enhanced-metafile record by executing the graphics device interface (GDI) functions identified by the record.;HDC hdc, LPHANDLETABLE pht, const ENHMETARECORD *pmr, UINT cht
PlayEnhMetaFile;The PlayEnhMetaFile function displays the picture stored in the specified enhanced-format metafile.;HDC hdc, HENHMETAFILE hmf, const RECT *lprect
PlayMetaFileRecord;The PlayMetaFileRecord function plays a Windows-format metafile record by executing the graphics device interface (GDI) function contained within that record.;HDC hdc, LPHANDLETABLE lpHandleTable, LPMETARECORD lpMR, UINT noObjs
PlayMetaFile;The PlayMetaFile function displays the picture stored in the given Windows-format metafile on the specified device.;HDC hdc, HMETAFILE hmf
PlgBlt;The PlgBlt function performs a bit-block transfer of the bits of color data from the specified rectangle in the source device context to the specified parallelogram in the destination device context.;HDC hdcDest, const POINT *lpPoint, HDC hdcSrc, int xSrc, int ySrc, int width, int height, HBITMAP hbmMask, int xMask, int yMask
PNETWORK_CONNECTIVITY_HINT_CHANGE_CALLBACK;An application-defined function called whenever there's a change in the network aggregate connectivity level and cost hints.;PVOID CallerContext, NL_NETWORK_CONNECTIVITY_HINT ConnectivityHint ) {...}
POINTSTOPOINT;The POINTSTOPOINT macro copies the contents of a POINTS structure into a POINT structure.;pt, pts
POINTTOPOINTS;The POINTTOPOINTS macro converts a POINT structure to a POINTS structure.;pt
PolicyChanged;The PolicyChanged method informs the Group Policy Object Editor that policy settings have changed.;BOOL bMachine, BOOL bAdd, GUID *pGuidExtension, GUID *pGuidSnapin
PolyBezier;The PolyBezier function draws one or more B�zier curves.;HDC hdc, const POINT *apt, DWORD cpt
PolyBezierTo;The PolyBezierTo function draws one or more B�zier curves.;HDC hdc, const POINT *apt, DWORD cpt
PolyDraw;The PolyDraw function draws a set of line segments and B�zier curves.;HDC hdc, const POINT *apt, const BYTE *aj, int cpt
Polygon;The Polygon function draws a polygon consisting of two or more vertices connected by straight lines. The polygon is outlined by using the current pen and filled by using the current brush and polygon fill mode.;HDC hdc, const POINT *apt, int cpt
Polyline;The Polyline function draws a series of line segments by connecting the points in the specified array.;HDC hdc, const POINT *apt, int cpt
PolylineTo;The PolylineTo function draws one or more straight lines.;HDC hdc, const POINT *apt, DWORD cpt
PolyPolygon;The PolyPolygon function draws a series of closed polygons. Each polygon is outlined by using the current pen and filled by using the current brush and polygon fill mode. The polygons drawn by this function can overlap.;HDC hdc, const POINT *apt, const INT *asz, int csz
PolyPolyline;The PolyPolyline function draws multiple series of connected line segments.;HDC hdc, const POINT *apt, const DWORD *asz, DWORD csz
PolyTextOutA;The PolyTextOut function draws several strings using the font and text colors currently selected in the specified device context.;HDC hdc, const POLYTEXTA *ppt, int nstrings
PolyTextOutW;The PolyTextOut function draws several strings using the font and text colors currently selected in the specified device context.;HDC hdc, const POLYTEXTW *ppt, int nstrings
PostMessageA;Places (posts) a message in the message queue associated with the thread that created the specified window and returns without waiting for the thread to process the message.;HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam
PostMessageW;Places (posts) a message in the message queue associated with the thread that created the specified window and returns without waiting for the thread to process the message.;HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam
PostQuitMessage;Indicates to the system that a thread has made a request to terminate (quit). It is typically used in response to a WM_DESTROY message.;int nExitCode
PostThreadMessageA;Posts a message to the message queue of the specified thread. It returns without waiting for the thread to process the message.;DWORD idThread, UINT Msg, WPARAM wParam, LPARAM lParam
PostThreadMessageW;Posts a message to the message queue of the specified thread. It returns without waiting for the thread to process the message.;DWORD idThread, UINT Msg, WPARAM wParam, LPARAM lParam
PostUnInstall;Is not implemented and is reserved for future use.;
PostUnInstall;Is not implemented. It is reserved for future use.;
PowerClearRequest;Decrements the count of power requests of the specified type for a power request object.;HANDLE PowerRequest, POWER_REQUEST_TYPE RequestType
PowerCreateRequest;Creates a new power request object.;PREASON_CONTEXT Context
PowerSetRequest;Increments the count of power requests of the specified type for a power request object.;HANDLE PowerRequest, POWER_REQUEST_TYPE RequestType
PrefetchVirtualMemory;Provides an efficient mechanism to bring into memory potentially discontiguous virtual address ranges in a process address space.;HANDLE hProcess, ULONG_PTR NumberOfEntries, PWIN32_MEMORY_RANGE_ENTRY VirtualAddresses, ULONG Flags
PrepareTape;Prepares the tape to be accessed or removed.;HANDLE hDevice, DWORD dwOperation, BOOL bImmediate
PreUnInstall;Removes registry and IIS settings for the Network Device Enrollment Service (NDES) role.;
PreUnInstall;Temporarily saves role-specific state information and then it uninstalls the role.;VARIANT_BOOL bClientOnly
PrintWindow;The PrintWindow function copies a visual window into the specified device context (DC), typically a printer DC.;HWND hwnd, HDC hdcBlt, UINT nFlags
PrivacyGetZonePreferenceW;Retrieves the privacy settings for a given URLZONE and PrivacyType.;DWORD dwZone, DWORD dwType, LPDWORD pdwTemplate, LPWSTR pszBuffer, LPDWORD pdwBufferLength
PrivacySetZonePreferenceW;Sets the privacy settings for a given URLZONE and PrivacyType.;DWORD dwZone, DWORD dwType, DWORD dwTemplate, LPCWSTR pszPreference
PrivateExtractIconsA;Creates an array of handles to icons that are extracted from a specified file.;LPCSTR szFileName, int nIconIndex, int cxIcon, int cyIcon, HICON *phicon, UINT *piconid, UINT nIcons, UINT flags
PrivateExtractIconsW;Creates an array of handles to icons that are extracted from a specified file.;LPCWSTR szFileName, int nIconIndex, int cxIcon, int cyIcon, HICON *phicon, UINT *piconid, UINT nIcons, UINT flags
PrivilegeCheck;Determines whether a specified set of privileges are enabled in an access token.;HANDLE ClientToken, PPRIVILEGE_SET RequiredPrivileges, LPBOOL pfResult
PrivilegedServiceAuditAlarmA;Generates an audit message in the security event log.;LPCSTR SubsystemName, LPCSTR ServiceName, HANDLE ClientToken, PPRIVILEGE_SET Privileges, BOOL AccessGranted
ProcessGroupPolicyCompletedEx;The ProcessGroupPolicyCompletedEx function notifies the system that the specified policy extension has finished applying policy. The function also reports the status of Resultant Set of Policy (RSoP) logging.;REFGPEXTENSIONID extensionId, ASYNCCOMPLETIONHANDLE pAsyncHandle, DWORD dwStatus, HRESULT RsopStatus
ProcessGroupPolicyCompleted;The ProcessGroupPolicyCompleted function notifies the system that the specified extension has finished applying policy.;REFGPEXTENSIONID extensionId, ASYNCCOMPLETIONHANDLE pAsyncHandle, DWORD dwStatus
ProcessIdToSessionId;Retrieves the Remote Desktop Services session associated with a specified process.;DWORD dwProcessId, DWORD *pSessionId
Process;Performs ink recognition synchronously.;HRECOCONTEXT hrc, BOOL *pbPartialProcessing
ProcessResponseMessage;Process a response message and return the disposition of the message.;BSTR strResponse, EncodingType Encoding, X509SCEPDisposition *pDisposition
ProgIDFromCLSID;Retrieves the ProgID for a given CLSID.;REFCLSID clsid, LPOLESTR *lplpszProgID
PROPENUMPROCA;An application-defined callback function used with the EnumProps function.;HWND Arg1, LPCSTR Arg2, HANDLE Arg3 ) {...}
PROPENUMPROCEXA;Application-defined callback function used with the EnumPropsEx function.;HWND Arg1, LPSTR Arg2, HANDLE Arg3, ULONG_PTR Arg4 ) {...}
PROPENUMPROCEXW;Application-defined callback function used with the EnumPropsEx function.;HWND Arg1, LPWSTR Arg2, HANDLE Arg3, ULONG_PTR Arg4 ) {...}
PROPENUMPROCW;An application-defined callback function used with the EnumProps function.;HWND Arg1, LPCWSTR Arg2, HANDLE Arg3 ) {...}
PropertySheetPageCallback;The PropertySheetPageCallback method notifies an EditSecurity or CreateSecurityPage caller that an access control editor property page is being created or destroyed.;HWND hwnd, UINT uMsg, SI_PAGE_TYPE uPage
PropStgNameToFmtId;Converts a property set storage or stream name to its format identifier.;const LPOLESTR oszName, FMTID *pfmtid
PropVariantClear;Frees all elements that can be freed in a given PROPVARIANT structure.;PROPVARIANT *pvar
PropVariantCopy;The PropVariantCopy function copies the contents of one PROPVARIANT structure to another.;PROPVARIANT *pvarDest, const PROPVARIANT *pvarSrc
PSAM_INIT_NOTIFICATION_ROUTINE;The InitializeChangeNotify function is implemented by a password filter DLL. This function initializes the DLL.;) {...}
PSAM_PASSWORD_FILTER_ROUTINE;Implemented by a password filter DLL. The value returned by this function determines whether the new password is accepted by the system.;PUNICODE_STRING AccountName, PUNICODE_STRING FullName, PUNICODE_STRING Password, BOOLEAN SetOperation ) {...}
PSAM_PASSWORD_NOTIFICATION_ROUTINE;Is implemented by a password filter DLL. It notifies the DLL that a password was changed.;PUNICODE_STRING UserName, ULONG RelativeId, PUNICODE_STRING NewPassword ) {...}
PstAcquirePrivateKey;Associates the caller's private key with the specified certificate.;PCCERT_CONTEXT pCert
PstGetCertificates;Retrieves certificate chains that specify certificates that can be used to authenticate a user on the specified server.;PUNICODE_STRING pTargetName, DWORD cCriteria, PCCERT_SELECT_CRITERIA rgpCriteria, BOOL bIsClient, PDWORD pdwCertChainContextCount, PCCERT_CHAIN_CONTEXT **ppCertChainContexts
PstGetTrustAnchors;Retrieves a list of certification authorities (CAs) trusted by the specified server.;PUNICODE_STRING pTargetName, DWORD cCriteria, PCCERT_SELECT_CRITERIA rgpCriteria, PSecPkgContext_IssuerListInfoEx *ppTrustedIssuers
PstGetUserNameForCertificate;Retrieves the user name associated with the specified certificate.;PCCERT_CONTEXT pCertContext, PUNICODE_STRING UserName
PstMapCertificate;Retrieves a structure that specifies information that can be used to create a user token associated with the specified certificate.;PCCERT_CONTEXT pCert, LSA_TOKEN_INFORMATION_TYPE *pTokenInformationType, PVOID *ppTokenInformation
PstValidate;Validates the specified certificate.;PUNICODE_STRING pTargetName, BOOL bIsClient, CERT_USAGE_MATCH *pRequestedIssuancePolicy, HCERTSTORE *phAdditionalCertStore, PCCERT_CONTEXT pCert, GUID *pProvGUID
PtInRect;The PtInRect function determines whether the specified point lies within the specified rectangle.;const RECT *lprc, POINT pt
PtInRegion;The PtInRegion function determines whether the specified point is inside the specified region.;HRGN hrgn, int x, int y
PtVisible;The PtVisible function determines whether the specified point is within the clipping region of a device context.;HDC hdc, int x, int y
PublishCRL;Sends a request to the Certificate Services certification authority (CA) to publish a new certificate revocation list (CRL). This method was first introduced in the ICertAdmin interface.;const BSTR strConfig, DATE Date
PublishCRLs;Publishes certificate revocation lists (CRLs) for a certification authority (CA).;const BSTR strConfig, DATE Date, LONG CRLFlags
PulseEvent;Sets the specified event object to the signaled state and then resets it to the nonsignaled state after releasing the appropriate number of waiting threads.;HANDLE hEvent
PurgeComm;Discards all characters from the output or input buffer of a specified communications resource. It can also terminate pending read or write operations on the resource.;HANDLE hFile, DWORD dwFlags
put_Algorithm;Specifies or retrieves an object identifier (OID) for the public key algorithm.;IObjectId *pValue
put_AlternateSignatureAlgorithm;Specifies and retrieves a Boolean value that indicates whether the signature algorithm object identifier (OID) for a PKCS;VARIANT_BOOL Value
put_AlternateSignatureAlgorithm;Specifies and retrieves a Boolean value that specifies whether the GetSignatureAlgorithm method should retrieve a discrete or combined algorithm object identifier (OID) for a PKCS;VARIANT_BOOL Value
put_ApplicationData;Sets or retrieves an opaque field that can be used by the application to store information.;BSTR bstrApplicationData
put_ApplicationData;The ApplicationData property of IAzOperation sets or retrieves an opaque field that can be used by the application to store information.;BSTR bstrApplicationData
put_ApplicationData;The ApplicationData property of IAzRole sets or retrieves an opaque field that can be used by the application to store information.;BSTR bstrApplicationData
put_ApplicationData;The ApplicationData property of IAzScope sets or retrieves an opaque field that can be used by the application to store information.;BSTR bstrApplicationData
put_ApplicationData;The ApplicationData property of IAzTask sets or retrieves an opaque field that can be used by the application to store information.;BSTR bstrApplicationData
put_ApplyStoreSacl;Sets or retrieves a value that indicates whether policy audits should be generated when the authorization store is modified.;BOOL bApplyStoreSacl
put_ApplyStoreSacl;Sets or retrieves a value that indicates whether policy audits should be generated when the authorization store is modified.;BOOL bProp
put_ArchivePrivateKey;Specifies or retrieves a Boolean value that indicates whether to archive a private key on the certification authority (CA).;VARIANT_BOOL Value
put_AttestationEncryptionCertificate;The certificate used to encrypt the EKPUB and EKCERT values from the client. This property must be set to a valid certificate that chains to a trusted machine root.;EncodingType Encoding, BSTR Value
put_AttestPrivateKey;True if the created private key needs to be attested; otherwise false. If true, it is expected that the AttestationEncryptionCertificate property has been set.;VARIANT_BOOL Value
put_AuthFlags;Specifies and retrieves a value that indicates the authentication type used by the client to authenticate itself to the certificate enrollment policy (CEP) server.;X509EnrollmentAuthFlags Flags
put_AuthzInterfaceClsid;Sets or retrieves the class identifier (CLSID) of the interface that the user interface (UI) uses to perform application-specific operations.;BSTR bstrProp
put_BizRule;Gets or sets the script that determines membership for this application group.;BSTR bstrProp
put_BizRuleImportedPath;Gets or sets the path of the file that contains the business rule script associated with this application group.;BSTR bstrProp
put_BizRuleImportedPath;Sets or retrieves the path to the file from which the business rule (BizRule) is imported.;BSTR bstrProp
put_BizRuleLanguage;Gets or sets the programming language of the business rule script associated with this application group.;BSTR bstrProp
put_BizRuleLanguage;Sets or retrieves the scripting language in which the business rule (BizRule) is implemented.;BSTR bstrProp
put_BizRulesEnabled;Gets or sets a value that indicates whether business rules are enabled for this application.;VARIANT_BOOL bEnabled
put_BizRule;Sets or retrieves the text of the script that implements the business rule (BizRule).;BSTR bstrProp
put_BusinessRuleResult;Sets a value that indicates whether the Business Rule (BizRule) allows the user to perform the requested task.;BOOL bResult
put_BusinessRuleString;Sets or retrieves an application-specific string for the Business Rule (BizRule).;BSTR bstrBusinessRuleString
put_CAConfig;Gets or sets a certification authority (CA) name with which a signing certificate must be signed.;const BSTR newVal
put_CAStoreFlags;Sets or retrieves a flag that controls the certification authority (CA) store when the store is opened.;LONG dwFlags
put_CAStoreFlags;The CAStoreFlags property of IEnroll4 sets or retrieves a flag that controls the certification authority (CA) store when the store is opened.;LONG dwFlags
put_CAStoreName;Sets or retrieves the name of the store where all non-&quot;ROOT&quot; and non-&quot;MY&quot; certificates are kept.;BSTR bstrName
put_CAStoreNameWStr;The CAStoreNameWStr property of IEnroll4 sets or retrieves the name of the store where all non-&quot;ROOT&quot; and non-&quot;MY&quot; certificates are kept.;LPWSTR szwName
put_CAStoreType;Sets or retrieves the type of store to use for the store specified by the CAStoreName property.;BSTR bstrType
put_CAStoreTypeWStr;Sets or retrieves the type of store to use for the store specified by the CAStoreNameWStr property.;LPWSTR szwType
put_CertificateDescription;Specifies or retrieves a string that contains a description of the certificate.;BSTR strValue
put_CertificateFriendlyName;Gets or sets the friendly name for the certificate.;BSTR Value
put_CertificateFriendlyName;Specifies or retrieves the display name of a certificate.;BSTR strValue
put_Certificate;Specifies or retrieves a byte array that contains the certificate associated with the private key.;EncodingType Encoding, BSTR Value
put_ChallengePassword;The password to use when creating a request with a challenge. To create a request without a challenge, do not set the ChallengePassword property.;BSTR Value
put_ClientId;Sets or retrieves a client ID request attribute. The client ID request attribute indicates the source of the certificate request. This property was first defined in the ICEnroll4 interface.;LONG lClientId
put_ClientId;Specifies and retrieves a value that identifies the executable that created the request.;RequestClientInfoClientId Value
put_ClientId;The ClientId property sets or retrieves a client ID request attribute. The client ID request attribute indicates the source of the certificate request. This property was first defined in the IEnroll4 interface.;LONG lClientId
put_ContainerName;Gets or sets the name used by the cryptographic service provider (CSP) to generate, store, or access the key.;const BSTR bstrVal
put_ContainerNamePrefix;Specifies or retrieves a prefix added to the name of the key container.;BSTR Value
put_ContainerName;Specifies or retrieves the name of the key container.;BSTR Value
put_ContainerName;The ContainerName property of ICEnroll4 sets or retrieves the name of the key container to use.;BSTR bstrContainer
put_ContainerNameWStr;Sets or retrieves the name of the key container to use.;LPWSTR szwContainer
put_Cost;Specifies and retrieves an arbitrary cost for contacting the certificate enrollment policy server.;DWORD value
put_Critical;Specifies and retrieves a Boolean value that identifies whether the certificate extension is critical.;VARIANT_BOOL Value
put_CspInformations;Specifies and retrieves a collection of cryptographic providers available for use by the request object.;ICspInformations *pValue
put_CspInformations;Specifies or retrieves a collection of ICspInformation objects that contain information about the available cryptographic providers that support the public key algorithm associated with the private key.;ICspInformations *pValue
put_CspStatus;Specifies or retrieves an ICspStatus object that contains information about the cryptographic provider and algorithm pair associated with the private key.;ICspStatus *pValue
put_Default;Specifies and retrieves a Boolean value that indicates whether this is the default certificate enrollment policy (CEP) server.;VARIANT_BOOL value
put_DeleteRequestCert;Sets or retrieves a Boolean value that determines whether dummy certificates in the request store are deleted.;BOOL fDelete
put_DeleteRequestCert;The DeleteRequestCert property of IEnroll4 sets or retrieves a Boolean value that determines whether dummy certificates in the request store are deleted.;BOOL fDelete
put_Description;Sets or retrieves a comment that describes the application.;BSTR bstrDescription
put_Description;Sets or retrieves a comment that describes the application group.;BSTR bstrDescription
put_Description;Sets or retrieves a comment that describes the operation.;BSTR bstrDescription
put_Description;Sets or retrieves a comment that describes the role.;BSTR bstrDescription
put_Description;Sets or retrieves a comment that describes the scope.;BSTR bstrDescription
put_Description;Sets or retrieves a comment that describes the task.;BSTR bstrDescription
put_Description;Specifies or retrieves a string that contains a description of the private key.;BSTR Value
put_Description;The Description property of IAzOperation sets or retrieves a comment that describes the operation.;BSTR bstrDescription
put_Display;Specifies or retrieves a value that indicates whether to display the status information in a user interface.;EnrollmentDisplayStatus Value
put_DomainTimeout;Sets or retrieves the time in milliseconds after which a domain is determined to be unreachable.;LONG lProp
put_EnableSMIMECapabilities;Controls whether the PKCS;BOOL fEnableSMIMECapabilities
put_EnableSMIMECapabilities;The ICEnroll4::EnableSMIMECapabilities property controls whether the PKCS;BOOL fEnableSMIMECapabilities
put_EnableT61DNEncoding;Sets or retrieves a Boolean value that determines whether the distinguished name in the request is encoded as a T61 string instead of as a Unicode string.;BOOL fBool
put_EnableT61DNEncoding;The EnableT61DNEncoding property of ICEnroll4 sets or retrieves a Boolean value that determines whether the distinguished name in the request is encoded as a T61 string instead of as a Unicode string.;BOOL fBool
put_EncryptionAlgorithm;Specifies or retrieves an object identifier (OID) of the algorithm used to encrypt the private key to be archived.;IObjectId *pValue
put_EncryptionAlgorithm;The encryption algorithm used to encrypt the EKPUB and EKCERT values from the client.;IObjectId *pValue
put_EncryptionStrength;Identifies the bit length for the EncryptionAlgorithm to use for encryption. If the EncryptionAlgorithm only supports one bit length, then you do not need to specify a value for the EncryptionStrength property.;LONG Value
put_EncryptionStrength;Specifies or retrieves the relative encryption level applied to the private key to be archived.;LONG Value
put_Error;Specifies and retrieves a value that identifies the error status of the certificate enrollment process.;HRESULT Value
put_ExistingCACertificate;Gets or sets the binary value that has been encoded by using Distinguished Encoding Rules (DER) and that is the binary value of the certification authority (CA) certificate that corresponds to an existing key.;VARIANT varVal
put_Existing;Gets or sets a value that indicates whether the private key already exists.;VARIANT_BOOL bVal
put_Existing;Specifies or retrieves a Boolean value that indicates whether the private key has been created or imported.;VARIANT_BOOL Value
put_ExportPolicy;Specifies or retrieves export constraints for a private key.;X509PrivateKeyExportFlags Value
put_Flags;Specifies or retrieves a value that indicates whether the certificate enrollment policy (CEP) server policy information can be loaded from group policy, from the registry, or both.;PolicyServerUrlFlags Flags
put_FriendlyName;Specifies and retrieves a display name for the object identifier.;BSTR Value
put_FriendlyName;Specifies or retrieves a display name for the private key.;BSTR Value
put_GenerateAudits;Sets or retrieves a value that indicates whether run-time audits should be generated.;BOOL bProp
put_GenerateAudits;The GenerateAudits property of IAzApplication sets or retrieves a value that indicates whether run-time audits should be generated.;BOOL bProp
put_GenKeyFlags;Sets or retrieves the values passed to CryptGenKey when the certificate request is generated.;LONG dwFlags
put_GenKeyFlags;Sets or retrieves the values passed to the CryptGenKey function when the certificate request is generated.;LONG dwFlags
put_HashAlgID;Sets or retrieves the hash algorithm used when signing a PKCS;LONG hashAlgID
put_HashAlgID;The HashAlgID property of IEnroll4 sets or retrieves the hash algorithm used when signing a PKCS;LONG hashAlgID
put_HashAlgorithm;Gets or sets an identifier for the hash algorithm used to sign a certificate.;const BSTR newVal
put_HashAlgorithm;Gets or sets the name of the hashing algorithm used to sign or verify the certification authority (CA) certificate for the key.;const BSTR bstrVal
put_HashAlgorithm;Sets or retrieves only the signature hashing algorithm used to sign the PKCS;BSTR bstr
put_HashAlgorithm;Specifies and retrieves an object identifier (OID) for the hashing algorithm used in the GetSignatureAlgorithm method.;IObjectId *pValue
put_HashAlgorithm;Specifies and retrieves the object identifier (OID) of the hash algorithm used to sign the certificate request.;IObjectId *pValue
put_HashAlgorithmWStr;Sets or retrieves only the signature hashing algorithm used to sign the PKCS;LPWSTR szw
put_IncludeSubjectKeyID;Determines whether the subject key ID extension is added to the certificate request that is generated.;BOOL fInclude
put_IncludeSubjectKeyID;The IncludeSubjectKeyID property of IEnroll4 determines whether the subject key ID extension is added to the certificate request that is generated.;BOOL fInclude
put_IsRoleDefinition;Sets or retrieves a value that indicates whether the task is a role definition.;BOOL fProp
put_Issuer;Specifies or retrieves the name of the certificate issuer.;IX500DistinguishedName *pValue
put_KeyArchivalCertificate;Specifies or retrieves a certification authority (CA) encryption certificate.;EncodingType Encoding, BSTR Value
put_KeyContainerNamePrefix;Specifies or retrieves a prefix used to create the container name for a new private key.;BSTR Value
put_KeyProtection;Specifies or retrieves a value that indicates how a private key is protected before use.;X509PrivateKeyProtection Value
put_KeySpec;Sets or retrieves the type of key generated.;LONG dw
put_KeySpec;Specifies or retrieves a value that identifies whether a private key can be used for signing, or encryption, or both.;X509KeySpec Value
put_KeySpec;The KeySpec property of ICEnroll4 sets or retrieves the type of key generated.;LONG dw
put_KeyUsage;Specifies or retrieves a value that identifies the specific purpose for which a private key can be used.;X509PrivateKeyUsageFlags Value
put_LDAPQueryDN;Retrieves or sets the domain name of the directory object to be used during evaluation of LDAP query groups.;BSTR bstrLDAPQueryDN
put_LdapQuery;Sets or retrieves the Lightweight Directory Access Protocol (LDAP) query used to define membership for an LDAP query application group.;BSTR bstrProp
put_LegacyCsp;Specifies or retrieves a Boolean value that indicates whether the provider is a CryptoAPI (legacy) cryptographic service provider (CSP).;VARIANT_BOOL Value
put_Length;Gets or sets the strength of the key to one of the values supported by the cryptographic service provider (CSP).;LONG lVal
put_Length;Specifies or retrieves the length, in bits, of the private key.;LONG Value
put_LimitExchangeKeyToEncipherment;Sets or retrieves a Boolean value that determines whether an AT_KEYEXCHANGE request contains digital signature and nonrepudiation key usages.;BOOL fLimitExchangeKeyToEncipherment
put_LimitExchangeKeyToEncipherment;The LimitExchangeKeyToEncipherment property of IEnroll4 sets or retrieves a Boolean value that determines whether an AT_KEYEXCHANGE request contains digital signature and nonrepudiation key usages.;BOOL fLimitExchangeKeyToEncipherment
put_LocalRevocationInformation;Gets or sets the certificate revocation list (CRL) of the local machine.;VARIANT newVal
put_MachineContext;Specifies or retrieves a Boolean value that identifies the local certificate store context.;VARIANT_BOOL Value
put_MaxScriptEngines;Sets or retrieves the maximum number of Business Rule (BizRule) script engines that will be cached.;LONG lProp
put_MyStoreFlags;Sets or retrieves the registry location used for MY store.;LONG dwFlags
put_MyStoreFlags;Sets or retrieves the registry location used for the MY store.;LONG dwFlags
put_MyStoreName;Sets or retrieves the name of the store where certificates with linked private keys are kept.;BSTR bstrName
put_MyStoreNameWStr;The MyStoreNameWStr property of IEnroll4 sets or retrieves the name of the store where certificates with linked private keys are kept.;LPWSTR szwName
put_MyStoreType;Sets or retrieves the type of store specified by the MyStoreName property.;BSTR bstrType
put_MyStoreTypeWStr;Sets or retrieves the type of store specified by the MyStoreTypeWStr property.;LPWSTR szwType
put_Name;Sets or retrieves the name of the application.;BSTR bstrName
put_Name;Sets or retrieves the name of the application group.;BSTR bstrName
put_Name;Sets or retrieves the name of the operation.;BSTR bstrName
put_Name;Sets or retrieves the name of the role.;BSTR bstrName
put_Name;Sets or retrieves the name of the scope.;BSTR bstrName
put_Name;Sets or retrieves the name of the task.;BSTR bstrName
put_NotAfter;Specifies or retrieves the date and time after which the certificate is no longer valid.;DATE Value
put_NotBefore;Specifies or retrieves the date and time before which the certificate is not valid.;DATE Value
put_NullSigned;Specifies and retrieves a Boolean value that indicates whether the certificate request is null-signed.;VARIANT_BOOL Value
put_OldCertificate;Gets or sets an old certificate that a request is intended to replace.;ISignerCertificate *pValue
put_OperationID;Sets or retrieves an application-specific value that uniquely identifies the operation within the application.;LONG lProp
put_Ordinal;Specifies or retrieves the position of the ICspStatus object in the ICspStatuses collection.;LONG Value
put_Parameters;Retrieves a byte array that contains the parameters associated with the signature algorithm.;EncodingType Encoding, BSTR Value
put_ParentWindow;Specifies and retrieves the ID of the window used by key-related user interface dialogs.;LONG Value
put_ParentWindow;Specifies or retrieves the ID of the window used to display key information.;LONG Value
put_ParentWindow;Specifies or retrieves the ID of the window used to display signing certificate information.;LONG Value
put_ParentWindow;Specifies or retrieves the ID of the window used to display the enrollment information.;LONG Value
put_Pin;Specifies a personal identification number (PIN) that is used to authenticate users prior to accessing a private key container on a smart card.;BSTR Value
put_Pin;Specifies a personal identification number (PIN) used to authenticate a smart card user.;BSTR Value
put_PrivateKeyArchiveCertificate;Sets or retrieves the certificate that is used to archive a private key with a PKCS;BSTR bstrCert
put_PropertyId;Specifies or retrieves a value of the CERTENROLL_PROPERTYID enumeration that identifies an external certificate property.;CERTENROLL_PROPERTYID Value
put_Property;Specifies or retrieves a property value for the IX509CertificateTemplateWritable object.;EnrollmentTemplateProperty property , VARIANT value
put_ProviderCLSID;Gets or sets the CLSID of the revocation information provider used by the CA configuration.;const BSTR newVal
put_ProviderFlags;Sets or retrieves the provider type.;LONG dwFlags
put_ProviderFlags;The ProviderFlags property of IEnroll4 sets or retrieves the provider type.;LONG dwFlags
put_ProviderName;Gets or sets the name of the cryptographic service provider (CSP) or key storage provider (KSP) that is used to generate or store the private key.;const BSTR bstrVal
put_ProviderName;Specifies or retrieves the name of the cryptographic provider.;BSTR Value
put_ProviderName;The name of the encryption provider. The default is the Microsoft Platform Crypto Provider. You must set the ProviderName property before you call the Open method. You cannot change the ProviderName property after you have called the Open method.;BSTR Value
put_ProviderName;The ProviderName property of ICEnroll4 sets or retrieves the name of the cryptographic service provider (CSP) to use.;BSTR bstrProvider
put_ProviderNameWStr;Sets or retrieves the name of the cryptographic service provider (CSP) to use.;LPWSTR szwProvider
put_ProviderProperties;Gets or sets information that provides certificate status responses.;VARIANT newVal
put_ProviderType;Sets or retrieves the type of provider.;LONG dwType
put_ProviderType;Specifies or retrieves the type of cryptographic provider associated with the private key.;X509ProviderType Value
put_ProviderType;The ProviderType property of ICEnroll4 sets or retrieves the type of provider.;LONG dwType
put_PublicKeyAlgorithm;Specifies and retrieves an object identifier (OID) for the public key algorithm used in the GetSignatureAlgorithm method.;IObjectId *pValue
put_PVKFileName;The PVKFileName property of ICEnroll4 sets or retrieves the name of the file that will contain exported keys.;BSTR bstr
put_PVKFileNameWStr;Sets or retrieves the name of the file that will contain exported keys.;LPWSTR szw
put_ReaderName;Specifies or retrieves the name of a smart card reader.;BSTR Value
put_ReminderDuration;Gets or sets the percentage of a signing certificate lifetime after which a warning event is logged.;ULONG newVal
put_RenewalCertificate;Specifies or retrieves a byte array that contains the Distinguished Encoding Rules (DER) encoded certificate that is being renewed.;EncodingType Encoding, BSTR Value
put_RenewalCertificate;Specifies the certificate context for the renewal certificate.;PCCERT_CONTEXT pCertContext
put_RequesterName;Specifies or retrieves a string that contains the Security Account Manager (SAM) name of the end-entity requesting the certificate.;BSTR Value
put_RequestStoreFlags;Sets or retrieves the registry location used for the request store.;LONG dwFlags
put_RequestStoreFlags;The RequestStoreFlags property of IEnroll4 sets or retrieves the registry location used for the request store.;LONG dwFlags
put_RequestStoreName;Sets or retrievesICEnroll the name of the store that contains the dummy certificate.;BSTR bstrName
put_RequestStoreNameWStr;The RequestStoreNameWStr property of IEnroll4 sets or retrieves the name of the store that contains the dummy certificate.;LPWSTR szwName
put_RequestStoreType;Sets or retrieves the type of store to use for the store specified by the RequestStoreName property. This store type is passed directly to the CertOpenStore function.;BSTR bstrType
put_RequestStoreTypeWStr;Sets or retrieves the type of store to use for the store specified by the RequestStoreNameWStr property. This store type is passed directly to the CertOpenStore function.;LPWSTR szwType
put_ReuseHardwareKeyIfUnableToGenNew;Sets or retrieves a Boolean value that determines the action taken by the certificate enrollment control object if an error is encountered when generating a new key.;BOOL fReuseHardwareKeyIfUnableToGenNew
put_ReuseHardwareKeyIfUnableToGenNew;The ReuseHardwareKeyIfUnableToGenNew property of IEnroll4 sets or retrieves a Boolean value that determines the action taken by the certificate enrollment control object if an error is encountered when generating a new key.;BOOL fReuseHardwareKeyIfUnableToGenNew
put_RoleForAccessCheck;Sets or retrieves the role that is used to perform the access check.;BSTR bstrProp
put_RootStoreFlags;Sets or retrieves the registry location used for the root store.;LONG dwFlags
put_RootStoreFlags;The RootStoreFlags property of ICEnroll4 sets or retrieves the registry location used for the root store.;LONG dwFlags
put_RootStoreName;Sets or retrieves the name of the root store where all intrinsically trusted, self-signed root certificates are kept.;BSTR bstrName
put_RootStoreNameWStr;The RootStoreNameWStr property of IEnroll4 sets or retrieves the name of the root store where all intrinsically trusted, self-signed root certificates are kept.;LPWSTR szwName
put_RootStoreType;Sets or retrieves the type of store to use for the store specified by the RootStoreName property.;BSTR bstrType
put_RootStoreTypeWStr;Sets or retrieves the type of store to use for the store specified by the RootStoreNameWStr property.;LPWSTR szwType
put_ScriptEngineTimeout;Sets or retrieves the time in milliseconds that the IAzClientContext::AccessCheck method will wait for a Business Rule (BizRule) to complete execution before canceling it.;LONG lProp
put_SecurityDescriptor;Specifies or retrieves the security descriptor for the private key.;BSTR Value
put_Selected;Specifies or retrieves a value that indicates whether an item can be used during the enrollment process.;EnrollmentSelectionStatus Value
put_SenderNonce;Specifies or retrieves a byte array that contains a nonce.;EncodingType Encoding, BSTR Value
put_SerialNumber;Specifies and retrieves the certificate serial number.;EncodingType Encoding, BSTR Value
put_ServerCapabilities;Sets the preferred hash and encryption algorithms for the request.;BSTR Value
put_SignerCertificate;Gets or sets the signer certificate for the request.;ISignerCertificate *pValue
put_SignerCertificate;Sets the signer's certificate.;BSTR bstrCert
put_SignerCertificate;Specifies or retrieves a certificate used to sign the certificate request.;ISignerCertificate *pValue
put_SignerCertificate;Specifies or retrieves the ISignerCertificate object used to sign the certificate.;ISignerCertificate *pValue
put_SigningCertificate;Gets or sets a signing certificate that has been encoded by using Distinguished Encoding Rules (DER). An Online Certificate Status Protocol (OCSP) responder service uses this certificate to sign its responses to certificate status requests.;VARIANT newVal
put_SigningCertificateTemplate;Gets or sets the template name for a signing certificate.;const BSTR newVal
put_SigningFlags;Gets or sets a combination of flag values. These values specify the management of signing certificates that belong to a certification authority (CA) configuration.;ULONG newVal
put_Silent;Gets or sets whether to allow UI during the request.;VARIANT_BOOL Value
put_Silent;Specifies or retrieves a Boolean value that indicates whether any of the key-related modal dialogs are displayed during the certificate enrollment process.;VARIANT_BOOL Value
put_Silent;Specifies or retrieves a Boolean value that indicates whether a user interface is displayed during the certificate enrollment process.;VARIANT_BOOL Value
put_Silent;Specifies or retrieves a Boolean value that indicates whether the Certificate Enrollment Control is allowed to display a dialog box when the private key is accessed.;VARIANT_BOOL Value
put_Silent;Specifies or retrieves a Boolean value that indicates whether the user is notified when the private key is used to sign a certificate request.;VARIANT_BOOL Value
put_SmimeCapabilities;Specifies or retrieves a Boolean value that tells the Encode method whether to create an IX509ExtensionSmimeCapabilities collection that identifies the encryption capabilities supported by the computer.;VARIANT_BOOL Value
put_SPCFileName;Sets or retrieves the name of the file to which to write the base64-encoded PKCS;BSTR bstr
put_SPCFileNameWStr;The SPCFileNameWStr property of IEnroll4 sets or retrieves the name of the file to which to write the base64-encoded PKCS;LPWSTR szw
put_Status;Specifies or retrieves a value that indicates the status of the enrollment process.;EnrollmentEnrollStatus Value
put_Subject;Specifies or retrieves the X.500 distinguished name of the entity requesting the certificate.;IX500DistinguishedName *pValue
put_SuppressDefaults;Specifies or retrieves a Boolean value that indicates whether the default extensions and attributes are included in the request.;VARIANT_BOOL Value
put_Text;Specifies or retrieves a string that contains a message associated with the status of the enrollment process.;BSTR Value
put_ThumbPrint;Sets or retrieves a hash of the certificate data.;BSTR bstrThumbPrint
put_ThumbPrintWStr;Sets or retrieves a hash of the certificate data. The thumbprint is used to point to the pending certificate.;CRYPT_DATA_BLOB thumbPrintBlob
put_TransactionId;Gets or sets the transaction id for the request.;EncodingType Encoding, BSTR Value
put_TransactionId;Specifies or retrieves a transaction identifier that can be used to track a certificate request or response.;LONG Value
put_Type;Sets or retrieves the group type of the application group.;LONG lProp
put_UIContextMessage;Specifies or retrieves a context string to display in the user interface.;BSTR Value
put_UIContextMessage;Specifies or retrieves a string that contains user interface text associated with the private key.;BSTR Value
put_UIContextMessage;Specifies or retrieves a string that contains user interface text associated with the signing certificate.;BSTR Value
put_Url;Specifies or retrieves the URL for the certificate enrollment policy (CEP) server.;BSTR pValue
put_UseExistingKeySet;Sets or retrieves a Boolean value that determines whether the existing keys should be used.;BOOL fUseExistingKeys
put_UseExistingKeySet;The UseExistingKeySet property of IEnroll4 sets or retrieves a Boolean value that determines whether the existing keys should be used.;BOOL fUseExistingKeys
put_Value;Gets or sets the data part of the name-value pair represented by an OCSPProperty object.;VARIANT newVal
put_Version;Sets or retrieves the version of the application.;BSTR bstrProp
put_WriteCertToCSP;Sets or retrieves a Boolean value that determines whether a certificate should be written to the cryptographic service provider (CSP).;BOOL fBool
put_WriteCertToCSP;The WriteCertToCSP property of ICEnroll4 sets or retrieves a Boolean value that determines whether a certificate should be written to the cryptographic service provider (CSP).;BOOL fBool
put_WriteCertToUserDS;Sets or retrieves a Boolean value that determines whether the certificate is written to the user's Active Directory store.;BOOL fBool
put_WriteCertToUserDS;The WriteCertToUserDS property of IEnroll4 sets or retrieves a Boolean value that determines whether the certificate is written to the user's Active Directory store.;BOOL fBool
PWLX_ASSIGN_SHELL_PROTECTION;Called by GINA to assign protection to the shell program of a newly logged-on user.;HANDLE hWlx, HANDLE hToken, HANDLE hProcess, HANDLE hThread ) {...}
PWLX_CHANGE_PASSWORD_NOTIFY;Called by GINA to indicate it has changed a password.;HANDLE hWlx, PWLX_MPR_NOTIFY_INFO pMprInfo, DWORD dwChangeInfo ) {...}
PWLX_CHANGE_PASSWORD_NOTIFY_EX;Called by GINA to tell a specific network provider (or all network providers) that a password has changed.;HANDLE hWlx, PWLX_MPR_NOTIFY_INFO pMprInfo, DWORD dwChangeInfo, PWSTR ProviderName, PVOID Reserved ) {...}
PWLX_CLOSE_USER_DESKTOP;Called by GINA to close an alternate user desktop and clean up after the desktop is closed.;HANDLE hWlx, PWLX_DESKTOP pDesktop, HANDLE hToken ) {...}
PWLX_CREATE_USER_DESKTOP;Called by GINA to create alternate application desktops for the user.;HANDLE hWlx, HANDLE hToken, DWORD Flags, PWSTR pszDesktopName, PWLX_DESKTOP *ppDesktop ) {...}
PWLX_DIALOG_BOX;Called by the GINA to create a modal dialog box from a dialog box template.;HANDLE hWlx, HANDLE hInst, LPWSTR lpszTemplate, HWND hwndOwner, DLGPROC dlgprc ) {...}
PWLX_DIALOG_BOX_INDIRECT;Called by GINA to create a modal dialog box from a dialog box template in memory.;HANDLE hWlx, HANDLE hInst, LPCDLGTEMPLATE hDialogTemplate, HWND hwndOwner, DLGPROC dlgprc ) {...}
PWLX_DIALOG_BOX_INDIRECT_PARAM;Called by GINA to initialize dialog box controls and then create a modal dialog box from a dialog box template in memory.;HANDLE hWlx, HANDLE hInst, LPCDLGTEMPLATE hDialogTemplate, HWND hwndOwner, DLGPROC dlgprc, LPARAM dwInitParam ) {...}
PWLX_DIALOG_BOX_PARAM;Called by GINA to initialize dialog box controls and then create a modal dialog box from a dialog box template resource.;HANDLE hWlx, HANDLE hInst, LPWSTR lpszTemplate, HWND hwndOwner, DLGPROC dlgprc, LPARAM dwInitParam ) {...}
PWLX_DISCONNECT;Called by a replacement GINA DLL if Terminal Services is enabled. GINA calls this function to disconnect from a Terminal Services network session.;Arg1 ) {...}
PWLX_GET_OPTION;Called by GINA to retrieve the current value of an option.;HANDLE hWlx, DWORD Option, ULONG_PTR *Value ) {...}
PWLX_GET_SOURCE_DESKTOP;Called by GINA to determine the name and handle of the desktop that was current before Winlogon switched to the Winlogon desktop.;HANDLE hWlx, PWLX_DESKTOP *ppDesktop ) {...}
PWLX_MESSAGE_BOX;Called by GINA to create, display, and operate a message box.;HANDLE hWlx, HWND hwndOwner, LPWSTR lpszText, LPWSTR lpszTitle, UINT fuStyle ) {...}
PWLX_QUERY_CLIENT_CREDENTIALS;Called by a replacement GINA DLL if Terminal Services is enabled. GINA calls this function to retrieve the credentials of remote Terminal Services clients that are not using an Internet connector license.;PWLX_CLIENT_CREDENTIALS_INFO_V1_0 pCred ) {...}
PWLX_QUERY_CONSOLESWITCH_CREDENTIALS;Called by GINA to read the credentials transferred from the Winlogon of the temporary session to the Winlogon of the destination session.;PWLX_CONSOLESWITCH_CREDENTIALS_INFO_V1_0 pCred ) {...}
PWLX_QUERY_IC_CREDENTIALS;Called by a replacement GINA DLL if Terminal Services is enabled. GINA calls this function to determine whether the terminal server is using Internet connector licensing and to retrieve credentials information.;PWLX_CLIENT_CREDENTIALS_INFO_V1_0 pCred ) {...}
PWLX_QUERY_TERMINAL_SERVICES_DATA;Called by GINA to retrieve Terminal Services user configuration information after a user has logged on.;HANDLE hWlx, PWLX_TERMINAL_SERVICES_DATA pTSData, WCHAR *UserName, WCHAR *Domain ) {...}
PWLX_QUERY_TS_LOGON_CREDENTIALS;Called by a replacement GINA DLL to retrieve credentials information if Terminal Services is enabled. The GINA DLL can then use this information to fill in a logon box automatically and attempt to log the user in.;PWLX_CLIENT_CREDENTIALS_INFO_V2_0 pCred ) {...}
PWLX_SAS_NOTIFY;Called by GINA to notify Winlogon of a secure attention sequence (SAS) event.;HANDLE hWlx, DWORD dwSasType ) {...}
PWLX_SET_CONTEXT_POINTER;Called by GINA to specify the context pointer passed by Winlogon as the first parameter to all future calls to GINA functions.;HANDLE hWlx, PVOID pWlxContext ) {...}
PWLX_SET_OPTION;Called by GINA to set the value of an option.;HANDLE hWlx, DWORD Option, ULONG_PTR Value, ULONG_PTR *OldValue ) {...}
PWLX_SET_RETURN_DESKTOP;Called by GINA to specify the alternate application desktop that Winlogon will switch to when the current secure attention sequence (SAS) event processing function is complete.;HANDLE hWlx, PWLX_DESKTOP pDesktop ) {...}
PWLX_SET_TIMEOUT;Called by GINA to change the time-out associated with a dialog box. The default time-out is two minutes.;HANDLE hWlx, DWORD Timeout ) {...}
PWLX_SWITCH_DESKTOP_TO_USER;Called by GINA to switch to the application desktop.;HANDLE hWlx ) {...}
PWLX_SWITCH_DESKTOP_TO_WINLOGON;Allows the GINA DLL switch to the Winlogon desktop.;HANDLE hWlx ) {...}
PWLX_USE_CTRL_ALT_DEL;Called by GINA to tell Winlogon to use the standard CTRL+ALT+DEL key combination as a secure attention sequence (SAS).;HANDLE hWlx ) {...}
PWLX_WIN31_MIGRATE;Called by a replacement GINA DLL if Terminal Services is enabled. GINA calls this function to complete the setup of the Terminal Services client.;HANDLE hWlx ) {...}
QISearch;A table-driven implementation of the IUnknown::QueryInterface method.;void *that, LPCQITAB pqit, REFIID riid, void **ppv
QueryActCtxSettingsW;The QueryActCtxSettingsW function specifies the activation context, and the namespace and name of the attribute that is to be queried.;DWORD dwFlags, HANDLE hActCtx, PCWSTR settingsNameSpace, PCWSTR settingName, PWSTR pvBuffer, SIZE_T dwBuffer, SIZE_T *pdwWrittenOrRequired
QueryActCtxW;The QueryActCtxW function queries the activation context.;DWORD dwFlags, HANDLE hActCtx, PVOID pvSubInstance, ULONG ulInfoClass, PVOID pvBuffer, SIZE_T cbBuffer, SIZE_T *pcbWrittenOrRequired
QueryChanges;Retrieves a value that specifies whether the template or certification authority collections have changed in Active Directory.;VARIANT_BOOL *pValue
QueryCompressorInformation;Queries a compressor for information for a particular compression algorithm.;COMPRESSOR_HANDLE CompressorHandle, COMPRESS_INFORMATION_CLASS CompressInformationClass, PVOID CompressInformation, SIZE_T CompressInformationSize
QueryContextAttributesA;Lets a transport application query the Credential Security Support Provider (CredSSP) security package for certain attributes of a security context.;PCtxtHandle phContext, unsigned long ulAttribute, void *pBuffer
QueryContextAttributesExA;Enables a transport application to query a security package for certain attributes of a security context.;PCtxtHandle phContext, unsigned long ulAttribute, void *pBuffer, unsigned long cbBuffer
QueryContextAttributesExW;Enables a transport application to query a security package for certain attributes of a security context.;PCtxtHandle phContext, unsigned long ulAttribute, void *pBuffer, unsigned long cbBuffer
QueryContextAttributesW;Lets a transport application query the Credential Security Support Provider (CredSSP) security package for certain attributes of a security context.;PCtxtHandle phContext, unsigned long ulAttribute, void *pBuffer
QueryCredentialsAttributesA;Retrieves the attributes of a credential, such as the name associated with the credential.;PCredHandle phCredential, unsigned long ulAttribute, void *pBuffer
QueryCredentialsAttributesW;Retrieves the attributes of a credential, such as the name associated with the credential.;PCredHandle phCredential, unsigned long ulAttribute, void *pBuffer
QueryDecompressorInformation;Use this function to query information about a particular compression algorithm.;DECOMPRESSOR_HANDLE DecompressorHandle, COMPRESS_INFORMATION_CLASS CompressInformationClass, PVOID CompressInformation, SIZE_T CompressInformationSize
QueryDepthSList;Retrieves the number of entries in the specified singly linked list.;PSLIST_HEADER ListHead
QueryDisplayConfig;The QueryDisplayConfig function retrieves information about all possible display paths for all display devices, or views, in the current setting.;UINT32 flags, UINT32 *numPathArrayElements, DISPLAYCONFIG_PATH_INFO *pathArray, UINT32 *numModeInfoArrayElements, DISPLAYCONFIG_MODE_INFO *modeInfoArray, DISPLAYCONFIG_TOPOLOGY_ID *currentTopologyId
QueryDosDeviceA;Retrieves information about MS-DOS device names.;LPCSTR lpDeviceName, LPSTR lpTargetPath, DWORD ucchMax
QueryDosDeviceW;Retrieves information about MS-DOS device names.;LPCWSTR lpDeviceName, LPWSTR lpTargetPath, DWORD ucchMax
QueryFullProcessImageNameA;Retrieves the full name of the executable image for the specified process.;HANDLE hProcess, DWORD dwFlags, LPSTR lpExeName, PDWORD lpdwSize
QueryFullProcessImageNameW;Retrieves the full name of the executable image for the specified process.;HANDLE hProcess, DWORD dwFlags, LPWSTR lpExeName, PDWORD lpdwSize
QueryMemoryResourceNotification;Retrieves the state of the specified memory resource object.;HANDLE ResourceNotificationHandle, PBOOL ResourceState
QueryOptionalDelayLoadedAPI;Determines whether the specified function in a delay-loaded DLL is available on the system.;HMODULE hParentModule, LPCSTR lpDllName, LPCSTR lpProcName, DWORD Reserved
QueryPerformanceCounter;Retrieves the current value of the performance counter, which is a high resolution (&lt;1us) time stamp that can be used for time-interval measurements.;LARGE_INTEGER *lpPerformanceCount
QueryPerformanceFrequency;Retrieves the frequency of the performance counter.;LARGE_INTEGER *lpFrequency
QueryProcessAffinityUpdateMode;Retrieves the affinity update mode of the specified process.;HANDLE hProcess, LPDWORD lpdwFlags
QueryProtectedPolicy;Queries the value associated with a protected policy.;LPCGUID PolicyGuid, PULONG_PTR PolicyValue
QuerySecurityAccessMask;Creates an access mask that represents the access permissions necessary to query the specified object security information.;SECURITY_INFORMATION SecurityInformation, LPDWORD DesiredAccess
QuerySecurityContextToken;Obtains the access token for a client security context and uses it directly.;PCtxtHandle phContext, void **Token
QuerySecurityPackageInfoA;Retrieves information about a specified security package. This information includes the bounds on sizes of authentication information, credentials, and contexts.;LPSTR pszPackageName, PSecPkgInfoA *ppPackageInfo
QuerySecurityPackageInfoW;Retrieves information about a specified security package. This information includes the bounds on sizes of authentication information, credentials, and contexts.;PSECURITY_STRING pPackageName, PSecPkgInfoW *ppPackageInfo
QueryServiceConfig2A;Retrieves the optional configuration parameters of the specified service.;SC_HANDLE hService, DWORD dwInfoLevel, LPBYTE lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded
QueryServiceConfig2W;Retrieves the optional configuration parameters of the specified service.;SC_HANDLE hService, DWORD dwInfoLevel, LPBYTE lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded
QueryServiceConfigA;Retrieves the configuration parameters of the specified service.;SC_HANDLE hService, LPQUERY_SERVICE_CONFIGA lpServiceConfig, DWORD cbBufSize, LPDWORD pcbBytesNeeded
QueryServiceConfigW;Retrieves the configuration parameters of the specified service.;SC_HANDLE hService, LPQUERY_SERVICE_CONFIGW lpServiceConfig, DWORD cbBufSize, LPDWORD pcbBytesNeeded
QueryServiceDynamicInformation;Retrieves dynamic information related to the current service start.;SERVICE_STATUS_HANDLE hServiceStatus, DWORD dwInfoLevel, PVOID *ppDynamicInfo
QueryServiceLockStatusA;Retrieves the lock status of the specified service control manager database.;SC_HANDLE hSCManager, LPQUERY_SERVICE_LOCK_STATUSA lpLockStatus, DWORD cbBufSize, LPDWORD pcbBytesNeeded
QueryServiceLockStatusW;Retrieves the lock status of the specified service control manager database.;SC_HANDLE hSCManager, LPQUERY_SERVICE_LOCK_STATUSW lpLockStatus, DWORD cbBufSize, LPDWORD pcbBytesNeeded
QueryServiceObjectSecurity;Retrieves a copy of the security descriptor associated with a service object.;SC_HANDLE hService, SECURITY_INFORMATION dwSecurityInformation, PSECURITY_DESCRIPTOR lpSecurityDescriptor, DWORD cbBufSize, LPDWORD pcbBytesNeeded
QueryServiceStatusEx;Retrieves the current status of the specified service based on the specified information level.;SC_HANDLE hService, SC_STATUS_TYPE InfoLevel, LPBYTE lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded
QueryServiceStatus;Retrieves the current status of the specified service.;SC_HANDLE hService, LPSERVICE_STATUS lpServiceStatus
QueryThreadpoolStackInformation;Retrieves the stack reserve and commit sizes for threads in the specified thread pool.;PTP_POOL ptpp, PTP_POOL_STACK_INFORMATION ptpsi
QueryThreadProfiling;Determines whether thread profiling is enabled for the specified thread.;HANDLE ThreadHandle, PBOOLEAN Enabled
QueryUmsThreadInformation;Retrieves information about the specified user-mode scheduling (UMS) worker thread.;PUMS_CONTEXT UmsThread, UMS_THREAD_INFO_CLASS UmsThreadInfoClass, PVOID UmsThreadInformation, ULONG UmsThreadInformationLength, PULONG ReturnLength
QueryVirtualMemoryInformation;The QueryVirtualMemoryInformation function returns information about a page or a set of pages within the virtual address space of the specified process.;HANDLE Process, const VOID *VirtualAddress, WIN32_MEMORY_INFORMATION_CLASS MemoryInformationClass, PVOID MemoryInformation, SIZE_T MemoryInformationSize, PSIZE_T ReturnSize
QueryWorkingSetEx;Retrieves extended information about the pages at specific virtual addresses in the address space of the specified process.;HANDLE hProcess, PVOID pv, DWORD cb
QueryWorkingSet;Retrieves information about the pages currently added to the working set of the specified process.;HANDLE hProcess, PVOID pv, DWORD cb
QueueUserAPC;Adds a user-mode asynchronous procedure call (APC) object to the APC queue of the specified thread.;PAPCFUNC pfnAPC, HANDLE hThread, ULONG_PTR dwData
RaiseException;Raises an exception in the calling thread.;DWORD dwExceptionCode, DWORD dwExceptionFlags, DWORD nNumberOfArguments, const ULONG_PTR *lpArguments
RaiseFailFastException;Raises an exception that bypasses all exception handlers (frame or vector based).;PEXCEPTION_RECORD pExceptionRecord, PCONTEXT pContextRecord, DWORD dwFlags
ReadClassStg;The ReadClassStg function reads the CLSID previously written to a storage object with the WriteClassStg function.;LPSTORAGE pStg, CLSID *pclsid
ReadClassStm;Reads the CLSID previously written to a stream object with the WriteClassStm function.;LPSTREAM pStm, CLSID *pclsid
ReadDirectoryChangesExW;Retrieves information that describes the changes within the specified directory, which can include extended information if that information type is specified.;HANDLE hDirectory, LPVOID lpBuffer, DWORD nBufferLength, BOOL bWatchSubtree, DWORD dwNotifyFilter, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped, LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine, READ_DIRECTORY_NOTIFY_INFORMATION_CLASS ReadDirectoryNotifyInformationClass
ReadDirectoryChangesW;Retrieves information that describes the changes within the specified directory.;HANDLE hDirectory, LPVOID lpBuffer, DWORD nBufferLength, BOOL bWatchSubtree, DWORD dwNotifyFilter, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped, LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
ReadEncryptedFileRaw;Backs up (export) encrypted files.;PFE_EXPORT_FUNC pfExportCallback, PVOID pvCallbackContext, PVOID pvContext
ReadEventLogA;Reads the specified number of entries from the specified event log.;HANDLE hEventLog, DWORD dwReadFlags, DWORD dwRecordOffset, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, DWORD *pnBytesRead, DWORD *pnMinNumberOfBytesNeeded
ReadEventLogW;Reads the specified number of entries from the specified event log.;HANDLE hEventLog, DWORD dwReadFlags, DWORD dwRecordOffset, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, DWORD *pnBytesRead, DWORD *pnMinNumberOfBytesNeeded
ReadFileEx;Reads data from the specified file or input/output (I/O) device. It reports its completion status asynchronously, calling the specified completion routine when reading is completed or canceled and the calling thread is in an alertable wait state.;HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPOVERLAPPED lpOverlapped, LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
ReadFile;Reads data from the specified file or input/output (I/O) device. Reads occur at the position specified by the file pointer if supported by the device.;HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped
ReadFileScatter;Reads data from a file and stores it in an array of buffers.;HANDLE hFile, FILE_SEGMENT_ELEMENT [] aSegmentArray, DWORD nNumberOfBytesToRead, LPDWORD lpReserved, LPOVERLAPPED lpOverlapped
ReadProcessMemory;Reads data from an area of memory in a specified process. The entire area to be read must be accessible or the operation fails.;HANDLE hProcess, LPCVOID lpBaseAddress, LPVOID lpBuffer, SIZE_T nSize, SIZE_T *lpNumberOfBytesRead
ReadThreadProfilingData;Reads the specified profiling data associated with the thread.;HANDLE PerformanceDataHandle, DWORD Flags, PPERFORMANCE_DATA PerformanceData
ReadUrlCacheEntryStream;Reads the cached data from a stream that has been opened using the RetrieveUrlCacheEntryStream function.;HANDLE hUrlCacheStream, DWORD dwLocation, LPVOID lpBuffer, LPDWORD lpdwLen, DWORD Reserved
RealChildWindowFromPoint;Retrieves a handle to the child window at the specified point. The search is restricted to immediate child windows; grandchildren and deeper descendant windows are not searched.;HWND hwndParent, POINT ptParentClientCoords
RealGetWindowClassW;Retrieves a string that specifies the window type.;HWND hwnd, LPWSTR ptszClassName, UINT cchClassNameMax
RealizePalette;The RealizePalette function maps palette entries from the current logical palette to the system palette.;HDC hdc
ReallocADsMem;Reallocates and copies an existing memory block.;LPVOID pOldMem, DWORD cbOld, DWORD cbNew
ReallocADsStr;Creates a copy of a Unicode string.;LPWSTR *ppStr, LPWSTR pStr
ReclaimVirtualMemory;Reclaims a range of memory pages that were offered to the system with OfferVirtualMemory.;void const *VirtualAddress, SIZE_T Size
RecordFeatureError;This function is intended for infrastructure use only.;UINT32 featureId, const FEATURE_ERROR *error
RecordFeatureUsage;This function is intended for infrastructure use only.;UINT32 featureId, UINT32 kind, UINT32 addend, PCSTR originName
Rectangle;The Rectangle function draws a rectangle. The rectangle is outlined by using the current pen and filled by using the current brush.;HDC hdc, int left, int top, int right, int bottom
RectInRegion;The RectInRegion function determines whether any part of the specified rectangle is within the boundaries of a region.;HRGN hrgn, const RECT *lprect
RectVisible;The RectVisible function determines whether any part of the specified rectangle lies within the clipping region of a device context.;HDC hdc, const RECT *lprect
recvfrom;The recvfrom function receives a datagram and stores the source address.;SOCKET s, char *buf, int len, int flags, sockaddr *from, int *fromlen
recvfrom;The recvfrom function receives a datagram, and stores the source address.;SOCKET s, char *buf, int len, int flags, sockaddr *from, int *fromlen
recv;Receives data from a connected socket or a bound connectionless socket.;SOCKET s, char *buf, int len, int flags
RedrawWindow;The RedrawWindow function updates the specified rectangle or region in a window's client area.;HWND hWnd, const RECT *lprcUpdate, HRGN hrgnUpdate, UINT flags
RefreshPolicyEx;The RefreshPolicyEx function causes policy to be applied immediately on the computer. The extended function allows you to specify the type of policy refresh to apply.;BOOL bMachine, DWORD dwOptions
RefreshPolicy;The RefreshPolicy function causes policy to be applied immediately on the client computer.;BOOL bMachine
RegCloseKey;Closes a handle to the specified registry key.;HKEY hKey
RegConnectRegistryA;Establishes a connection to a predefined registry key on another computer.;LPCSTR lpMachineName, HKEY hKey, PHKEY phkResult
RegConnectRegistryW;Establishes a connection to a predefined registry key on another computer.;LPCWSTR lpMachineName, HKEY hKey, PHKEY phkResult
RegCopyTreeA;Copies the specified registry key, along with its values and subkeys, to the specified destination key.;HKEY hKeySrc, LPCSTR lpSubKey, HKEY hKeyDest
RegCopyTreeW;Copies the specified registry key, along with its values and subkeys, to the specified destination key.;HKEY hKeySrc, LPCWSTR lpSubKey, HKEY hKeyDest
RegCreateKeyA;Creates the specified registry key. If the key already exists in the registry, the function opens it.;HKEY hKey, LPCSTR lpSubKey, PHKEY phkResult
RegCreateKeyExA;Creates the specified registry key. If the key already exists, the function opens it. Note that key names are not case sensitive.;HKEY hKey, LPCSTR lpSubKey, DWORD Reserved, LPSTR lpClass, DWORD dwOptions, REGSAM samDesired, const LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult, LPDWORD lpdwDisposition
RegCreateKeyExW;Creates the specified registry key. If the key already exists, the function opens it. Note that key names are not case sensitive.;HKEY hKey, LPCWSTR lpSubKey, DWORD Reserved, LPWSTR lpClass, DWORD dwOptions, REGSAM samDesired, const LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult, LPDWORD lpdwDisposition
RegCreateKeyTransactedA;Creates the specified registry key and associates it with a transaction.;HKEY hKey, LPCSTR lpSubKey, DWORD Reserved, LPSTR lpClass, DWORD dwOptions, REGSAM samDesired, const LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult, LPDWORD lpdwDisposition, HANDLE hTransaction, PVOID pExtendedParemeter
RegCreateKeyTransactedW;Creates the specified registry key and associates it with a transaction.;HKEY hKey, LPCWSTR lpSubKey, DWORD Reserved, LPWSTR lpClass, DWORD dwOptions, REGSAM samDesired, const LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult, LPDWORD lpdwDisposition, HANDLE hTransaction, PVOID pExtendedParemeter
RegCreateKeyW;Creates the specified registry key. If the key already exists in the registry, the function opens it.;HKEY hKey, LPCWSTR lpSubKey, PHKEY phkResult
RegDeleteKeyA;Deletes a subkey and its values.;HKEY hKey, LPCSTR lpSubKey
RegDeleteKeyExA;Deletes a subkey and its values from the specified platform-specific view of the registry.;HKEY hKey, LPCSTR lpSubKey, REGSAM samDesired, DWORD Reserved
RegDeleteKeyExW;Deletes a subkey and its values from the specified platform-specific view of the registry.;HKEY hKey, LPCWSTR lpSubKey, REGSAM samDesired, DWORD Reserved
RegDeleteKeyTransactedA;Deletes a subkey and its values from the specified platform-specific view of the registry as a transacted operation.;HKEY hKey, LPCSTR lpSubKey, REGSAM samDesired, DWORD Reserved, HANDLE hTransaction, PVOID pExtendedParameter
RegDeleteKeyTransactedW;Deletes a subkey and its values from the specified platform-specific view of the registry as a transacted operation.;HKEY hKey, LPCWSTR lpSubKey, REGSAM samDesired, DWORD Reserved, HANDLE hTransaction, PVOID pExtendedParameter
RegDeleteKeyValueA;Removes the specified value from the specified registry key and subkey.;HKEY hKey, LPCSTR lpSubKey, LPCSTR lpValueName
RegDeleteKeyValueW;Removes the specified value from the specified registry key and subkey.;HKEY hKey, LPCWSTR lpSubKey, LPCWSTR lpValueName
RegDeleteKeyW;Deletes a subkey and its values.;HKEY hKey, LPCWSTR lpSubKey
RegDeleteTreeA;Deletes the subkeys and values of the specified key recursively.;HKEY hKey, LPCSTR lpSubKey
RegDeleteTreeW;Deletes the subkeys and values of the specified key recursively.;HKEY hKey, LPCWSTR lpSubKey
RegDeleteValueA;Removes a named value from the specified registry key.;HKEY hKey, LPCSTR lpValueName
RegDeleteValueW;Removes a named value from the specified registry key.;HKEY hKey, LPCWSTR lpValueName
RegDisablePredefinedCache;Disables handle caching of the predefined registry handle for HKEY_CURRENT_USER for the current process.;
RegDisablePredefinedCacheEx;Disables handle caching for all predefined registry handles for the current process.;
RegDisableReflectionKey;Disables registry reflection for the specified key. Disabling reflection for a key does not affect reflection of any subkeys.;HKEY hBase
RegEnableReflectionKey;Restores registry reflection for the specified disabled key. Restoring reflection for a key does not affect reflection of any subkeys.;HKEY hBase
RegEnumKeyA;Enumerates the subkeys of the specified open registry key.;HKEY hKey, DWORD dwIndex, LPSTR lpName, DWORD cchName
RegEnumKeyExA;Enumerates the subkeys of the specified open registry key. The function retrieves information about one subkey each time it is called.;HKEY hKey, DWORD dwIndex, LPSTR lpName, LPDWORD lpcchName, LPDWORD lpReserved, LPSTR lpClass, LPDWORD lpcchClass, PFILETIME lpftLastWriteTime
RegEnumKeyExW;Enumerates the subkeys of the specified open registry key. The function retrieves information about one subkey each time it is called.;HKEY hKey, DWORD dwIndex, LPWSTR lpName, LPDWORD lpcchName, LPDWORD lpReserved, LPWSTR lpClass, LPDWORD lpcchClass, PFILETIME lpftLastWriteTime
RegEnumKeyW;Enumerates the subkeys of the specified open registry key.;HKEY hKey, DWORD dwIndex, LPWSTR lpName, DWORD cchName
RegEnumValueA;Enumerates the values for the specified open registry key. The function copies one indexed value name and data block for the key each time it is called.;HKEY hKey, DWORD dwIndex, LPSTR lpValueName, LPDWORD lpcchValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData
RegEnumValueW;Enumerates the values for the specified open registry key. The function copies one indexed value name and data block for the key each time it is called.;HKEY hKey, DWORD dwIndex, LPWSTR lpValueName, LPDWORD lpcchValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData
RegFlushKey;Writes all the attributes of the specified open registry key into the registry.;HKEY hKey
RegGetKeySecurity;Retrieves a copy of the security descriptor protecting the specified open registry key.;HKEY hKey, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, LPDWORD lpcbSecurityDescriptor
RegGetValueA;Retrieves the type and data for the specified registry value.;HKEY hkey, LPCSTR lpSubKey, LPCSTR lpValue, DWORD dwFlags, LPDWORD pdwType, PVOID pvData, LPDWORD pcbData
RegGetValueW;Retrieves the type and data for the specified registry value.;HKEY hkey, LPCWSTR lpSubKey, LPCWSTR lpValue, DWORD dwFlags, LPDWORD pdwType, PVOID pvData, LPDWORD pcbData
RegInstallA;Updates the string registry values in the provided table.;HMODULE hmod, LPCSTR pszSection, const STRTABLEA *pstTable
RegInstallW;Updates the string registry values in the provided table.;HMODULE hmod, LPCWSTR pszSection, const STRTABLEW *pstTable
RegisterApplicationRecoveryCallback;Registers the active instance of an application for recovery.;APPLICATION_RECOVERY_CALLBACK pRecoveyCallback, PVOID pvParameter, DWORD dwPingInterval, DWORD dwFlags
RegisterApplicationRestart;Registers the active instance of an application for restart.;PCWSTR pwzCommandline, DWORD dwFlags
RegisterAppStateChangeNotification;Enables an app to register a callback function through which it can be notified that its library is going into or coming out of a suspended state.;PAPPSTATE_CHANGE_ROUTINE Routine, PVOID Context, PAPPSTATE_REGISTRATION *Registration
RegisterBadMemoryNotification;Registers a bad memory notification that is called when one or more bad memory pages are detected.;PBAD_MEMORY_CALLBACK_ROUTINE Callback
RegisterClassA;Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function.;const WNDCLASSA *lpWndClass
RegisterClassExA;Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function.;const WNDCLASSEXA *Arg1
RegisterClassExW;Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function.;const WNDCLASSEXW *Arg1
RegisterClassW;Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function.;const WNDCLASSW *lpWndClass
RegisterClipboardFormatA;Registers a new clipboard format. This format can then be used as a valid clipboard format.;LPCSTR lpszFormat
RegisterClipboardFormatW;Registers a new clipboard format. This format can then be used as a valid clipboard format.;LPCWSTR lpszFormat
RegisterDeviceNotificationA;Registers the device or type of device for which a window will receive notifications.;HANDLE hRecipient, LPVOID NotificationFilter, DWORD Flags
RegisterDeviceNotificationW;Registers the device or type of device for which a window will receive notifications.;HANDLE hRecipient, LPVOID NotificationFilter, DWORD Flags
RegisterEventSourceA;Retrieves a registered handle to the specified event log.;LPCSTR lpUNCServerName, LPCSTR lpSourceName
RegisterEventSourceW;Retrieves a registered handle to the specified event log.;LPCWSTR lpUNCServerName, LPCWSTR lpSourceName
RegisterGPNotification;The RegisterGPNotification function enables an application to receive notification when there is a change in policy. When a policy change occurs, the specified event object is set to the signaled state.;HANDLE hEvent, BOOL bMachine
RegisterHotKey;Defines a system-wide hot key.;HWND hWnd, int id, UINT fsModifiers, UINT vk
RegisterPointerDeviceNotifications;Registers a window to process the WM_POINTERDEVICECHANGE, WM_POINTERDEVICEINRANGE, and WM_POINTERDEVICEOUTOFRANGE pointer device notifications.;HWND window, BOOL notifyRange
RegisterPointerInputTarget;Allows the caller to register a target window to which all pointer input of the specified type is redirected.;HWND hwnd, POINTER_INPUT_TYPE pointerType
RegisterPointerInputTargetEx;RegisterPointerInputTargetEx may be altered or unavailable. Instead, use RegisterPointerInputTarget.;HWND hwnd, POINTER_INPUT_TYPE pointerType, BOOL fObserve
RegisterPowerSettingNotification;Registers the application to receive power setting notifications for the specific power setting event.;HANDLE hRecipient, LPCGUID PowerSettingGuid, DWORD Flags
RegisterRawInputDevices;Registers the devices that supply the raw input data.;PCRAWINPUTDEVICE pRawInputDevices, UINT uiNumDevices, UINT cbSize
RegisterScaleChangeEvent;Registers for an event that is triggered when the scale has possibly changed. This function replaces RegisterScaleChangeNotifications.;HANDLE hEvent, DWORD_PTR *pdwCookie
RegisterScaleChangeNotifications;Registers a window to receive callbacks when scaling information changes.;DISPLAY_DEVICE_TYPE displayDevice, HWND hwndNotify, UINT uMsgNotify, DWORD *pdwCookie
RegisterServiceCtrlHandlerA;Registers a function to handle service control requests.;LPCSTR lpServiceName, LPHANDLER_FUNCTION lpHandlerProc
RegisterServiceCtrlHandlerExA;Registers a function to handle extended service control requests.;LPCSTR lpServiceName, LPHANDLER_FUNCTION_EX lpHandlerProc, LPVOID lpContext
RegisterServiceCtrlHandlerExW;Registers a function to handle extended service control requests.;LPCWSTR lpServiceName, LPHANDLER_FUNCTION_EX lpHandlerProc, LPVOID lpContext
RegisterServiceCtrlHandlerW;Registers a function to handle service control requests.;LPCWSTR lpServiceName, LPHANDLER_FUNCTION lpHandlerProc
RegisterShellHookWindow;Registers a specified Shell window to receive certain messages for events or notifications that are useful to Shell applications.;HWND hwnd
RegisterSuspendResumeNotification;Registers to receive notification when the system is suspended or resumed. Similar to PowerRegisterSuspendResumeNotification, but operates in user mode and can take a window handle.;HANDLE hRecipient, DWORD Flags
RegisterTouchHitTestingWindow;Registers a window to process the WM_TOUCHHITTESTING notification.;HWND hwnd, ULONG value
RegisterTouchWindow;Registers a window as being touch-capable.;HWND hwnd, ULONG ulFlags
RegisterWaitForSingleObject;Directs a wait thread in the thread pool to wait on the object.;PHANDLE phNewWaitObject, HANDLE hObject, WAITORTIMERCALLBACK Callback, PVOID Context, ULONG dwMilliseconds, ULONG dwFlags
RegisterWindowMessageA;Defines a new window message that is guaranteed to be unique throughout the system. The message value can be used when sending or posting messages.;LPCSTR lpString
RegisterWindowMessageW;Defines a new window message that is guaranteed to be unique throughout the system. The message value can be used when sending or posting messages.;LPCWSTR lpString
RegLoadAppKeyA;Loads the specified registry hive as an application hive.;LPCSTR lpFile, PHKEY phkResult, REGSAM samDesired, DWORD dwOptions, DWORD Reserved
RegLoadAppKeyW;Loads the specified registry hive as an application hive.;LPCWSTR lpFile, PHKEY phkResult, REGSAM samDesired, DWORD dwOptions, DWORD Reserved
RegLoadKeyA;Creates a subkey under HKEY_USERS or HKEY_LOCAL_MACHINE and loads the data from the specified registry hive into that subkey.;HKEY hKey, LPCSTR lpSubKey, LPCSTR lpFile
RegLoadKeyW;Creates a subkey under HKEY_USERS or HKEY_LOCAL_MACHINE and loads the data from the specified registry hive into that subkey.;HKEY hKey, LPCWSTR lpSubKey, LPCWSTR lpFile
RegLoadMUIStringA;Loads the specified string from the specified key and subkey.;HKEY hKey, LPCSTR pszValue, LPSTR pszOutBuf, DWORD cbOutBuf, LPDWORD pcbData, DWORD Flags, LPCSTR pszDirectory
RegLoadMUIStringW;Loads the specified string from the specified key and subkey.;HKEY hKey, LPCWSTR pszValue, LPWSTR pszOutBuf, DWORD cbOutBuf, LPDWORD pcbData, DWORD Flags, LPCWSTR pszDirectory
RegNotifyChangeKeyValue;Notifies the caller about changes to the attributes or contents of a specified registry key.;HKEY hKey, BOOL bWatchSubtree, DWORD dwNotifyFilter, HANDLE hEvent, BOOL fAsynchronous
RegOpenCurrentUser;Retrieves a handle to the HKEY_CURRENT_USER key for the user the current thread is impersonating.;REGSAM samDesired, PHKEY phkResult
RegOpenKeyA;Opens the specified registry key.;HKEY hKey, LPCSTR lpSubKey, PHKEY phkResult
RegOpenKeyExA;Opens the specified registry key. Note that key names are not case sensitive.;HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult
RegOpenKeyExW;Opens the specified registry key. Note that key names are not case sensitive.;HKEY hKey, LPCWSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult
RegOpenKeyTransactedA;Opens the specified registry key and associates it with a transaction.;HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult, HANDLE hTransaction, PVOID pExtendedParemeter
RegOpenKeyTransactedW;Opens the specified registry key and associates it with a transaction.;HKEY hKey, LPCWSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult, HANDLE hTransaction, PVOID pExtendedParemeter
RegOpenKeyW;Opens the specified registry key.;HKEY hKey, LPCWSTR lpSubKey, PHKEY phkResult
RegOpenUserClassesRoot;Retrieves a handle to the HKEY_CLASSES_ROOT key for a specified user. The user is identified by an access token.;HANDLE hToken, DWORD dwOptions, REGSAM samDesired, PHKEY phkResult
RegOverridePredefKey;Maps a predefined registry key to the specified registry key.;HKEY hKey, HKEY hNewHKey
RegQueryInfoKeyA;Retrieves information about the specified registry key.;HKEY hKey, LPSTR lpClass, LPDWORD lpcchClass, LPDWORD lpReserved, LPDWORD lpcSubKeys, LPDWORD lpcbMaxSubKeyLen, LPDWORD lpcbMaxClassLen, LPDWORD lpcValues, LPDWORD lpcbMaxValueNameLen, LPDWORD lpcbMaxValueLen, LPDWORD lpcbSecurityDescriptor, PFILETIME lpftLastWriteTime
RegQueryInfoKeyW;Retrieves information about the specified registry key.;HKEY hKey, LPWSTR lpClass, LPDWORD lpcchClass, LPDWORD lpReserved, LPDWORD lpcSubKeys, LPDWORD lpcbMaxSubKeyLen, LPDWORD lpcbMaxClassLen, LPDWORD lpcValues, LPDWORD lpcbMaxValueNameLen, LPDWORD lpcbMaxValueLen, LPDWORD lpcbSecurityDescriptor, PFILETIME lpftLastWriteTime
RegQueryMultipleValuesA;Retrieves the type and data for a list of value names associated with an open registry key.;HKEY hKey, PVALENTA val_list, DWORD num_vals, LPSTR lpValueBuf, LPDWORD ldwTotsize
RegQueryMultipleValuesW;Retrieves the type and data for a list of value names associated with an open registry key.;HKEY hKey, PVALENTW val_list, DWORD num_vals, LPWSTR lpValueBuf, LPDWORD ldwTotsize
RegQueryReflectionKey;Determines whether reflection has been disabled or enabled for the specified key.;HKEY hBase, BOOL *bIsReflectionDisabled
RegQueryValueA;Retrieves the data associated with the default or unnamed value of a specified registry key. The data must be a null-terminated string.;HKEY hKey, LPCSTR lpSubKey, LPSTR lpData, PLONG lpcbData
RegQueryValueExA;Retrieves the type and data for the specified value name associated with an open registry key.;HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData
RegQueryValueExW;Retrieves the type and data for the specified value name associated with an open registry key.;HKEY hKey, LPCWSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData
RegQueryValueW;Retrieves the data associated with the default or unnamed value of a specified registry key. The data must be a null-terminated string.;HKEY hKey, LPCWSTR lpSubKey, LPWSTR lpData, PLONG lpcbData
RegReplaceKeyA;Replaces the file backing a registry key and all its subkeys with another file, so that when the system is next started, the key and subkeys will have the values stored in the new file.;HKEY hKey, LPCSTR lpSubKey, LPCSTR lpNewFile, LPCSTR lpOldFile
RegReplaceKeyW;Replaces the file backing a registry key and all its subkeys with another file, so that when the system is next started, the key and subkeys will have the values stored in the new file.;HKEY hKey, LPCWSTR lpSubKey, LPCWSTR lpNewFile, LPCWSTR lpOldFile
RegRestoreKeyA;Reads the registry information in a specified file and copies it over the specified key. This registry information may be in the form of a key and multiple levels of subkeys.;HKEY hKey, LPCSTR lpFile, DWORD dwFlags
RegRestoreKeyW;Reads the registry information in a specified file and copies it over the specified key. This registry information may be in the form of a key and multiple levels of subkeys.;HKEY hKey, LPCWSTR lpFile, DWORD dwFlags
RegSaveKeyA;Saves the specified key and all of its subkeys and values to a new file, in the standard format.;HKEY hKey, LPCSTR lpFile, const LPSECURITY_ATTRIBUTES lpSecurityAttributes
RegSaveKeyExA;Saves the specified key and all of its subkeys and values to a registry file, in the specified format.;HKEY hKey, LPCSTR lpFile, const LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD Flags
RegSaveKeyExW;Saves the specified key and all of its subkeys and values to a registry file, in the specified format.;HKEY hKey, LPCWSTR lpFile, const LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD Flags
RegSaveKeyW;Saves the specified key and all of its subkeys and values to a new file, in the standard format.;HKEY hKey, LPCWSTR lpFile, const LPSECURITY_ATTRIBUTES lpSecurityAttributes
RegSetKeySecurity;Sets the security of an open registry key.;HKEY hKey, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor
RegSetKeyValueA;Sets the data for the specified value in the specified registry key and subkey.;HKEY hKey, LPCSTR lpSubKey, LPCSTR lpValueName, DWORD dwType, LPCVOID lpData, DWORD cbData
RegSetKeyValueW;Sets the data for the specified value in the specified registry key and subkey.;HKEY hKey, LPCWSTR lpSubKey, LPCWSTR lpValueName, DWORD dwType, LPCVOID lpData, DWORD cbData
RegSetValueA;Sets the data for the default or unnamed value of a specified registry key. The data must be a text string.;HKEY hKey, LPCSTR lpSubKey, DWORD dwType, LPCSTR lpData, DWORD cbData
RegSetValueExA;Sets the data and type of a specified value under a registry key.;HKEY hKey, LPCSTR lpValueName, DWORD Reserved, DWORD dwType, const BYTE *lpData, DWORD cbData
RegSetValueExW;Sets the data and type of a specified value under a registry key.;HKEY hKey, LPCWSTR lpValueName, DWORD Reserved, DWORD dwType, const BYTE *lpData, DWORD cbData
RegSetValueW;Sets the data for the default or unnamed value of a specified registry key. The data must be a text string.;HKEY hKey, LPCWSTR lpSubKey, DWORD dwType, LPCWSTR lpData, DWORD cbData
RegUnLoadKeyA;Unloads the specified registry key and its subkeys from the registry.;HKEY hKey, LPCSTR lpSubKey
RegUnLoadKeyW;Unloads the specified registry key and its subkeys from the registry.;HKEY hKey, LPCWSTR lpSubKey
ReleaseActCtx;The ReleaseActCtx function decrements the reference count of the specified activation context.;HANDLE hActCtx
ReleaseCapture;Releases the mouse capture from a window in the current thread and restores normal mouse input processing.;
ReleaseDC;The ReleaseDC function releases a device context (DC), freeing it for use by other applications. The effect of the ReleaseDC function depends on the type of DC. It frees only common and window DCs. It has no effect on class or private DCs.;HWND hWnd, HDC hDC
ReleaseMutex;Releases ownership of the specified mutex object.;HANDLE hMutex
ReleaseMutexWhenCallbackReturns;Specifies the mutex that the thread pool will release when the current callback completes.;PTP_CALLBACK_INSTANCE pci, HANDLE mut
ReleaseNtmsCleanerSlot;The ReleaseNtmsCleanerSlot function removes an existing slot reservation for a cleaning cartridge. The slot can then be used for data cartridges.;HANDLE hSession, LPNTMS_GUID lpLibrary
ReleaseSemaphore;Increases the count of the specified semaphore object by a specified amount.;HANDLE hSemaphore, LONG lReleaseCount, LPLONG lpPreviousCount
ReleaseSemaphoreWhenCallbackReturns;Specifies the semaphore that the thread pool will release when the current callback completes.;PTP_CALLBACK_INSTANCE pci, HANDLE sem, DWORD crel
ReleaseSRWLockExclusive;Releases a slim reader/writer (SRW) lock that was acquired in exclusive mode.;PSRWLOCK SRWLock
ReleaseSRWLockShared;Releases a slim reader/writer (SRW) lock that was acquired in shared mode.;PSRWLOCK SRWLock
RemoveAll;Removes all interfaces from the list of interfaces that can be called by business rule (BizRule) scripts.;
RemoveAll;Removes all parameters from the list of parameters available to business rule (BizRule) scripts.;
RemoveCertificate;Removes an endorsement certificate related to the endorsement key from the key storage provider. You can only call the RemoveCertificate method after the Open method has been successfully called.;EncodingType Encoding, BSTR strCertificate
RemoveClipboardFormatListener;Removes the given window from the system-maintained clipboard format listener list.;HWND hwnd
RemoveDirectoryA;Deletes an existing empty directory.;LPCSTR lpPathName
RemoveDirectoryTransactedA;Deletes an existing empty directory as a transacted operation.;LPCSTR lpPathName, HANDLE hTransaction
RemoveDirectoryTransactedW;Deletes an existing empty directory as a transacted operation.;LPCWSTR lpPathName, HANDLE hTransaction
RemoveDirectoryW;Deletes an existing empty directory.;LPCWSTR lpPathName
RemoveDllDirectory;Removes a directory that was added to the process DLL search path by using AddDllDirectory.;DLL_DIRECTORY_COOKIE Cookie
RemoveFontMemResourceEx;The RemoveFontMemResourceEx function removes the fonts added from a memory image file.;HANDLE h
RemoveFontResourceA;The RemoveFontResource function removes the fonts in the specified file from the system font table.;LPCSTR lpFileName
RemoveFontResourceExA;The RemoveFontResourceEx function removes the fonts in the specified file from the system font table.;LPCSTR name, DWORD fl, PVOID pdv
RemoveFontResourceExW;The RemoveFontResourceEx function removes the fonts in the specified file from the system font table.;LPCWSTR name, DWORD fl, PVOID pdv
RemoveFontResourceW;The RemoveFontResource function removes the fonts in the specified file from the system font table.;LPCWSTR lpFileName
RemoveFromCertificate;Disassociates a property from a certificate.;VARIANT_BOOL MachineContext, EncodingType Encoding, BSTR strCertificate
RemoveFromRegistry;Unregisters a certificate enrollment policy (CEP) server.;X509CertificateEnrollmentContext context
RemoveMenu;Deletes a menu item or detaches a submenu from the specified menu.;HMENU hMenu, UINT uPosition, UINT uFlags
removePendingRequest;Removes a pending request from the client's request store. This method was first defined in the ICEnroll4 interface.;BSTR strThumbprint
removePendingRequestWStr;Removes a pending request from the client's request store.;CRYPT_DATA_BLOB thumbPrintBlob
RemovePropA;Removes an entry from the property list of the specified window. The specified character string identifies the entry to be removed.;HWND hWnd, LPCSTR lpString
RemovePropW;Removes an entry from the property list of the specified window. The specified character string identifies the entry to be removed.;HWND hWnd, LPCWSTR lpString
Remove;Removes an ICertificationAuthority object from the collection by index number.;LONG Index
Remove;Removes an ICryptAttribute object from the collection by index number.;LONG Index
Remove;Removes an ICspAlgorithm object from the collection by index number.;LONG Index
Remove;Removes an ICspInformation object from the collection by index number.;LONG Index
Remove;Removes an ICspStatus object from the collection by index number.;LONG Index
Remove;Removes an IObjectId object from the collection by index value.;LONG Index
Remove;Removes an ISignerCertificate object from the collection by index number.;LONG Index
Remove;Removes an IX509Attribute object from the collection by index number.;LONG Index
Remove;Removes an IX509CertificateTemplate object from the collection by index number.;LONG Index
Remove;Removes an IX509Extension object from the collection by index number.;LONG Index
Remove;Removes an IX509NameValuePair object from the collection by index number.;LONG Index
Remove;Removes an IX509PolicyServerUrl object from the collection by index number.;LONG Index
Remove;Removes an object from the collection by index number.;LONG Index
Remove;Removes an object from the collection by index value.;LONG Index
Remove;Removes a property from the collection by index value.;LONG Index
Remove;Removes the specified interface from the list of interfaces The number of interfaces in the list of interfaces that can be called by BizRule scripts.;BSTR bstrInterfaceName
Remove;Removes the specified parameter from the list of parameters available to business rule (BizRule) scripts.;BSTR varParameterName
RemoveSecureMemoryCacheCallback;Unregisters a callback function that was previously registered with the AddSecureMemoryCacheCallback function.;PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack
RemoveVectoredContinueHandler;Unregisters a vectored continue handler.;PVOID Handle
RemoveVectoredExceptionHandler;Unregisters a vectored exception handler.;PVOID Handle
ReOpenFile;Reopens the specified file system object with different access rights, sharing mode, and flags.;HANDLE hOriginalFile, DWORD dwDesiredAccess, DWORD dwShareMode, DWORD dwFlagsAndAttributes
ReplaceFileA;Replaces one file with another file, with the option of creating a backup copy of the original file.;LPCSTR lpReplacedFileName, LPCSTR lpReplacementFileName, LPCSTR lpBackupFileName, DWORD dwReplaceFlags, LPVOID lpExclude, LPVOID lpReserved
ReplaceFileW;Replaces one file with another file, with the option of creating a backup copy of the original file.;LPCWSTR lpReplacedFileName, LPCWSTR lpReplacementFileName, LPCWSTR lpBackupFileName, DWORD dwReplaceFlags, LPVOID lpExclude, LPVOID lpReserved
ReplyMessage;Replies to a message sent from another thread by the SendMessage function.;LRESULT lResult
ReportError;Reports any errors from the requested operation.;TPMVSCMGR_ERROR Error
ReportEventA;Writes an entry at the end of the specified event log.;HANDLE hEventLog, WORD wType, WORD wCategory, DWORD dwEventID, PSID lpUserSid, WORD wNumStrings, DWORD dwDataSize, LPCSTR *lpStrings, LPVOID lpRawData
ReportEventW;Writes an entry at the end of the specified event log.;HANDLE hEventLog, WORD wType, WORD wCategory, DWORD dwEventID, PSID lpUserSid, WORD wNumStrings, DWORD dwDataSize, LPCWSTR *lpStrings, LPVOID lpRawData
ReportProgress;Reports the progress of the current operation.;TPMVSCMGR_STATUS Status
RequestWakeupLatency;Has no effect and returns STATUS_NOT_SUPPORTED. This function is provided only for compatibility with earlier versions of Windows.Windows Server 2008 and Windows Vista:  Has no effect and always returns success.;LATENCY_TIME latency
ReserveNtmsCleanerSlot;The ReserveNtmsCleanerSlot function reserves a single slot in a library unit for a drive cleaner cartridge.;HANDLE hSession, LPNTMS_GUID lpLibrary, LPNTMS_GUID lpSlot
resetAttributes;Removes all attributes from the request.;
resetAttributes;Removes all attributes from the request. This method was first defined in the ICEnroll4 interface.;
resetBlobProperties;Resets the properties of a BLOB.;
ResetCompressor;Prepares the compressor for the compression of a new stream.;COMPRESSOR_HANDLE CompressorHandle
ResetContext;Deletes the current ink and recognition results from the context.The current settings of the recognizer context are preserved.;HRECOCONTEXT hrc
ResetDCA;The ResetDC function updates the specified printer or plotter device context (DC) using the specified information.;HDC hdc, const DEVMODEA *lpdm
ResetDCW;The ResetDC function updates the specified printer or plotter device context (DC) using the specified information.;HDC hdc, const DEVMODEW *lpdm
ResetDecompressor;Prepares the decompressor for the decompression of a new stream.;DECOMPRESSOR_HANDLE DecompressorHandle
ResetEvent;Sets the specified event object to the nonsignaled state.;HANDLE hEvent
resetExtensions;Removes all extensions from the request.;
resetExtensions;Removes all extensions from the request. This method was first defined in the ICEnroll4 interface.;
ResetForEncode;Restores the state of the request object to that which existed before the Encode method was called.;
Reset;Moves to the beginning of the attribute-enumeration sequence.;
Reset;Moves to the beginning of the column-enumeration sequence.;
Reset;Moves to the beginning of the extension-enumeration sequence.;
Reset;Moves to the beginning of the row-enumeration sequence.;
Reset;Resets a certificate revocation list (CRL) distribution information array to a specified number of distribution point structures.;LONG DistPointCount
Reset;Resets the configuration query state to point at the Certificate Services server configuration indexed on the specified configuration point. This method was first defined in the ICertConfig interface.;LONG Index, LONG *pCount
Reset;Returns the certificate enrollment control object to its initial state and thereby allow reuse of the control. This method was first defined in the ICEnroll3 interface.;
Reset;Returns the certificate enrollment control object to its initial state and thereby allows reuse of the control.;
Reset;Sets the current index of the identity enumeration to zero.;
Reset;Specifies the size of DATE array in this object.;LONG Count
Reset;Specifies the size of the alternate name array in this object. The value of all elements in the array are set to zero.;LONG NameCount
Reset;Specifies the size of the array in this object.;LONG Count
Reset;Specifies the size of the string array and the type of strings the array will contain.;LONG Count, LONG StringType
ResetWriteWatch;Resets the write-tracking state for a region of virtual memory. Subsequent calls to the GetWriteWatch function only report pages that are written to since the reset operation.;LPVOID lpBaseAddress, SIZE_T dwRegionSize
ResizePalette;The ResizePalette function increases or decreases the size of a logical palette based on the specified value.;HPALETTE hpal, UINT n
ResolveIpNetEntry2;Resolves the physical address for a neighbor IP address entry on the local computer.;PMIB_IPNET_ROW2 Row, const SOCKADDR_INET *SourceAddress
ResolveLocaleName;Finds a possible locale name match for the supplied name.;LPCWSTR lpNameToResolve, LPWSTR lpLocaleName, int cchLocaleName
ResolveNeighbor;Resolves the physical address for a neighbor IP address entry on the local computer.;SOCKADDR *NetworkAddress, PVOID PhysicalAddress, PULONG PhysicalAddressLength
RestoreDC;The RestoreDC function restores a device context (DC) to the specified state. The DC is restored by popping state information off a stack created by earlier calls to the SaveDC function.;HDC hdc, int nSavedDC
RestoreMediaSense;The RestoreMediaSense function restores the media sensing capability of the TCP/IP stack on a local computer on which the DisableMediaSense function was previously called.;OVERLAPPED *pOverlapped, LPDWORD lpdwEnableCount
RestoreMonitorFactoryColorDefaults;Restores a monitor's color settings to their factory defaults.;HANDLE hMonitor
RestoreMonitorFactoryDefaults;Restores a monitor's settings to their factory defaults.;HANDLE hMonitor
ResubmitRequest;Submits the specified certificate request to the policy module for the specified certification authority. This method was first introduced in the ICertAdmin interface.;const BSTR strConfig, LONG RequestId, LONG *pDisposition
ResumeSuspendedDownload;The ResumeSuspendedDownload function resumes a request that is suspended by a user interface dialog box.;HINTERNET hRequest, DWORD dwResultCode
ResumeThread;Decrements a thread's suspend count. When the suspend count is decremented to zero, the execution of the thread is resumed.;HANDLE hThread
ResUtilAddUnknownProperties;Retrieves a set of unknown properties from the cluster database and appends them to the end of a property list.;HKEY hkeyClusterKey, const PRESUTIL_PROPERTY_ITEM pPropertyTable, PVOID pOutPropertyList, DWORD pcbOutPropertyListSize, LPDWORD pcbBytesReturned, LPDWORD pcbRequired
ResUtilCreateDirectoryTree;Creates every directory specified in a path, skipping directories that already exist. The PRESUTIL_CREATE_DIRECTORY_TREE type defines a pointer to this function.;LPCWSTR pszPath
ResUtilDupParameterBlock;Performs a member-wise copy of the data from one parameter block to another.;LPBYTE pOutParams, const LPBYTE pInParams, const PRESUTIL_PROPERTY_ITEM pPropertyTable
ResUtilDupString;Duplicates a null-terminated Unicode string.;LPCWSTR pszInString
ResUtilEnumPrivateProperties;Retrieves the names of a cluster object's private properties. The PRESUTIL_ENUM_PRIVATE_PROPERTIES type defines a pointer to this function.;HKEY hkeyClusterKey, LPWSTR pszOutProperties, DWORD cbOutPropertiesSize, LPDWORD pcbBytesReturned, LPDWORD pcbRequired
ResUtilEnumProperties;Enumerates the property names of a cluster object. The PRESUTIL_ENUM_PROPERTIES type defines a pointer to this function.;const PRESUTIL_PROPERTY_ITEM pPropertyTable, LPWSTR pszOutProperties, DWORD cbOutPropertiesSize, LPDWORD pcbBytesReturned, LPDWORD pcbRequired
ResUtilEnumResources;Enumerates all of the resources in the local cluster and initiates a user-defined operation for each resource. The PRESUTIL_ENUM_RESOURCES type defines a pointer to this function.;HRESOURCE hSelf, LPCWSTR lpszResTypeName, LPRESOURCE_CALLBACK pResCallBack, PVOID pParameter
ResUtilEnumResourcesEx2;Enumerates all of the resources in a specified cluster and initiates a user-defined operation for each resource. The PRESUTIL_ENUM_RESOURCES_EX2 type defines a pointer to this function.;HCLUSTER hCluster, HRESOURCE hSelf, LPCWSTR lpszResTypeName, LPRESOURCE_CALLBACK_EX pResCallBack, PVOID pParameter, DWORD dwDesiredAccess
ResUtilEnumResourcesEx;Enumerates all of the resources in a specified cluster and initiates a user-defined operation for each resource. The PRESUTIL_ENUM_RESOURCES_EX type defines a pointer to this function.;HCLUSTER hCluster, HRESOURCE hSelf, LPCWSTR lpszResTypeName, LPRESOURCE_CALLBACK_EX pResCallBack, PVOID pParameter
ResUtilExpandEnvironmentStrings;Expands strings containing unexpanded references to environment variables. The PRESUTIL_EXPAND_ENVIRONMENT_STRINGS type defines a pointer to this function.;LPCWSTR pszSrc
ResUtilFindBinaryProperty;Locates a specified binary property in a property list and can also return the value of the property. The PRESUTIL_FIND_BINARY_PROPERTY type defines a pointer to this function.;const PVOID pPropertyList, DWORD cbPropertyListSize, LPCWSTR pszPropertyName, LPBYTE *pbPropertyValue, LPDWORD pcbPropertyValueSize
ResUtilFindDependentDiskResourceDriveLetter;Retrieves the drive letter associated with a Physical Disk dependency of a resource. The PRESUTIL_FIND_DEPENDENT_DISK_RESOURCE_DRIVE_LETTER type defines a pointer to this function.;HCLUSTER hCluster, HRESOURCE hResource, LPWSTR pszDriveLetter, DWORD *pcchDriveLetter
ResUtilFindDwordProperty;Locates an unsigned long property value in a property list. The PRESUTIL_FIND_DWORD_PROPERTY type defines a pointer to this function.;const PVOID pPropertyList, DWORD cbPropertyListSize, LPCWSTR pszPropertyName, LPDWORD pdwPropertyValue
ResUtilFindExpandedSzProperty;Locates an expanded string property value in a property list. The PRESUTIL_FIND_EXPANDED_SZ_PROPERTY type defines a pointer to this function.;const PVOID pPropertyList, DWORD cbPropertyListSize, LPCWSTR pszPropertyName, LPWSTR *pszPropertyValue
ResUtilFindExpandSzProperty;Locates an expandable string property in a property list. The PRESUTIL_FIND_EXPAND_SZ_PROPERTY type defines a pointer to this function.;const PVOID pPropertyList, DWORD cbPropertyListSize, LPCWSTR pszPropertyName, LPWSTR *pszPropertyValue
ResUtilFindFileTimeProperty;TBD. The PRESUTIL_FIND_FILETIME_PROPERTY type defines a pointer to this function.;const PVOID pPropertyList, DWORD cbPropertyListSize, LPCWSTR pszPropertyName, LPFILETIME pftPropertyValue
ResUtilFindLongProperty;Locates a signed long property value in a property list. The PRESUTIL_FIND_LONG_PROPERTY type defines a pointer to this function.;const PVOID pPropertyList, DWORD cbPropertyListSize, LPCWSTR pszPropertyName, LPLONG plPropertyValue
ResUtilFindMultiSzProperty;Locates a multiple string property in a property list. The PRESUTIL_FIND_MULTI_SZ_PROPERTY type defines a pointer to this function.;const PVOID pPropertyList, DWORD cbPropertyListSize, LPCWSTR pszPropertyName, LPWSTR *pszPropertyValue, LPDWORD pcbPropertyValueSize
ResUtilFindSzProperty;Locates a string property in a property list. The PRESUTIL_FIND_SZ_PROPERTY type defines a pointer to this function.;const PVOID pPropertyList, DWORD cbPropertyListSize, LPCWSTR pszPropertyName, LPWSTR *pszPropertyValue
ResUtilFindULargeIntegerProperty;Gets a large integer property value from a property list. The PRESUTIL_FIND_ULARGEINTEGER_PROPERTY type defines a pointer to this function.;const PVOID pPropertyList, DWORD cbPropertyListSize, LPCWSTR pszPropertyName, ULONGLONG *plPropertyValue
ResUtilFreeEnvironment;Destroys the environment variable block created with ResUtilGetEnvironmentWithNetName. The PRESUTIL_FREE_ENVIRONMENT type defines a pointer to this function.;LPVOID lpEnvironment
ResUtilFreeParameterBlock;Deallocates memory that has been allocated for a parameter block by ResUtilDupParameterBlock.;LPBYTE pOutParams, const LPBYTE pInParams, const PRESUTIL_PROPERTY_ITEM pPropertyTable
ResUtilGetAllProperties;Returns a property list that includes all of the default and unknown properties for a cluster object. The PRESUTIL_GET_ALL_PROPERTIES type defines a pointer to this function.;HKEY hkeyClusterKey, const PRESUTIL_PROPERTY_ITEM pPropertyTable, PVOID pOutPropertyList, DWORD cbOutPropertyListSize, LPDWORD pcbBytesReturned, LPDWORD pcbRequired
ResUtilGetBinaryProperty;Retrieves a binary property from a property list and advances a pointer to the next property in the list. The PRESUTIL_GET_BINARY_PROPERTY type defines a pointer to this function.;LPBYTE *ppbOutValue, LPDWORD pcbOutValueSize, const PCLUSPROP_BINARY pValueStruct, const LPBYTE pbOldValue, DWORD cbOldValueSize, LPBYTE *ppPropertyList, LPDWORD pcbPropertyListSize
ResUtilGetBinaryValue;Returns a binary value from the cluster database.;HKEY hkeyClusterKey, LPCWSTR pszValueName, LPBYTE *ppbOutValue, LPDWORD pcbOutValueSize
ResUtilGetClusterRoleState;Determines whether or not a specific role has been assigned to a cluster.;HCLUSTER hCluster, CLUSTER_ROLE eClusterRole
ResUtilGetCoreClusterResourcesEx;Returns handles to the core,  Network Name, IP Address, and quorum resources. The PRESUTIL_GET_CORE_CLUSTER_RESOURCES_EX type defines a pointer to this function.;HCLUSTER hClusterIn, HRESOURCE *phClusterNameResourceOut, HRESOURCE *phClusterQuorumResourceOut, DWORD dwDesiredAccess
ResUtilGetCoreClusterResources;Returns handles to the core Network Name, IP Address and quorum resources. The PRESUTIL_GET_CORE_CLUSTER_RESOURCES type defines a pointer to this function.;HCLUSTER hCluster, HRESOURCE *phClusterNameResource, HRESOURCE *phClusterIPAddressResource, HRESOURCE *phClusterQuorumResource
ResUtilGetDwordProperty;Retrieves a DWORD property from a property list and advances a pointer to the next property in the list. The PRESUTIL_GET_DWORD_PROPERTY type defines a pointer to this function.;LPDWORD pdwOutValue, const PCLUSPROP_DWORD pValueStruct, DWORD dwOldValue, DWORD dwMinimum, DWORD dwMaximum, LPBYTE *ppPropertyList, LPDWORD pcbPropertyListSize
ResUtilGetDwordValue;Returns a numeric value from the cluster database.;HKEY hkeyClusterKey, LPCWSTR pszValueName, LPDWORD pdwOutValue, DWORD dwDefaultValue
ResUtilGetEnvironmentWithNetName;Adjusts environment data for a resource so that the resource uses a cluster network name to identify its location.;HRESOURCE hResource
ResUtilGetExpandSzValue;Returns a expandable string value from the cluster database.;HKEY hkeyClusterKey, LPCWSTR pszValueName, BOOL bExpand
ResUtilGetFileTimeProperty;TBD. The PRESUTIL_GET_FILETIME_PROPERTY type defines a pointer to this function.;LPFILETIME pftOutValue, const PCLUSPROP_FILETIME pValueStruct, FILETIME ftOldValue, FILETIME ftMinimum, FILETIME ftMaximum, LPBYTE *ppPropertyList, LPDWORD pcbPropertyListSize
ResUtilGetLongProperty;TBD. The PRESUTIL_GET_LONG_PROPERTY type defines a pointer to this function.;LPLONG plOutValue, const PCLUSPROP_LONG pValueStruct, LONG lOldValue, LONG lMinimum, LONG lMaximum, LPBYTE *ppPropertyList, LPDWORD pcbPropertyListSize
ResUtilGetMultiSzProperty;Retrieves a multiple string property from a property list and advances a pointer to the next property in the list. The PRESUTIL_GET_MULTI_SZ_PROPERTY type defines a pointer to this function.;LPWSTR *ppszOutValue, LPDWORD pcbOutValueSize, const PCLUSPROP_SZ pValueStruct, LPCWSTR pszOldValue, DWORD cbOldValueSize, LPBYTE *ppPropertyList, LPDWORD pcbPropertyListSize
ResUtilGetMultiSzValue;Returns a multiple string value from the cluster database.;HKEY hkeyClusterKey, LPCWSTR pszValueName, LPWSTR *ppszOutValue, LPDWORD pcbOutValueSize
ResUtilGetPrivateProperties;Returns private properties for a cluster object. The PRESUTIL_GET_PRIVATE_PROPERTIES type defines a pointer to this function.;HKEY hkeyClusterKey, PVOID pOutPropertyList, DWORD cbOutPropertyListSize, LPDWORD pcbBytesReturned, LPDWORD pcbRequired
ResUtilGetProperties;Retrieves properties specified by a property table from the cluster database and returns them in a property list. The PRESUTIL_GET_PROPERTIES type defines a pointer to this function.;HKEY hkeyClusterKey, const PRESUTIL_PROPERTY_ITEM pPropertyTable, PVOID pOutPropertyList, DWORD cbOutPropertyListSize, LPDWORD pcbBytesReturned, LPDWORD pcbRequired
ResUtilGetPropertiesToParameterBlock;Retrieves properties specified by a property table from the cluster database and returns them in a parameter block.;HKEY hkeyClusterKey, const PRESUTIL_PROPERTY_ITEM pPropertyTable, LPBYTE pOutParams, BOOL bCheckForRequiredProperties, LPWSTR *pszNameOfPropInError
ResUtilGetPropertyFormats;Returns a property format list describing the format of a specified set of properties. The PRESUTIL_GET_PROPERTY_FORMATS type defines a pointer to this function.;const PRESUTIL_PROPERTY_ITEM pPropertyTable, PVOID pOutPropertyFormatList, DWORD cbPropertyFormatListSize, LPDWORD pcbBytesReturned, LPDWORD pcbRequired
ResUtilGetProperty;Returns a specified property from the cluster database. The PRESUTIL_GET_PROPERTY type defines a pointer to this function.;HKEY hkeyClusterKey, const PRESUTIL_PROPERTY_ITEM pPropertyTableItem, PVOID *pOutPropertyItem, LPDWORD pcbOutPropertyItemSize
ResUtilGetPropertySize;Returns the total number of bytes required for a specified property.;HKEY hkeyClusterKey, const PRESUTIL_PROPERTY_ITEM pPropertyTableItem, LPDWORD pcbOutPropertyListSize, LPDWORD pnPropertyCount
ResUtilGetQwordValue;TBD.;HKEY hkeyClusterKey, LPCWSTR pszValueName, PULONGLONG pqwOutValue, ULONGLONG qwDefaultValue
ResUtilGetResourceDependencyByClass;Enumerates the dependencies of a specified resource in a specified cluster and returns a handle to a dependency that matches a specified resource class. The PRESUTIL_GET_RESOURCE_DEPENDENCY_BY_CLASS type defines a pointer to this function.;HCLUSTER hCluster, HANDLE hSelf, PCLUS_RESOURCE_CLASS_INFO prci, BOOL bRecurse
ResUtilGetResourceDependencyByClassEx;Enumerates the dependencies of a specified resource in a specified cluster and returns a handle to a dependency that matches a specified resource class. The PRESUTIL_GET_RESOURCE_DEPENDENCY_BY_CLASS_EX type defines a pointer to this function.;HCLUSTER hCluster, HANDLE hSelf, PCLUS_RESOURCE_CLASS_INFO prci, BOOL bRecurse, DWORD dwDesiredAccess
ResUtilGetResourceDependencyByName;Enumerates the dependencies of a specified resource in a specified cluster and returns a handle to a dependency of a specified type. The PRESUTIL_GET_RESOURCE_DEPENDENCY_BY_NAME type defines a pointer to this function.;HCLUSTER hCluster, HANDLE hSelf, LPCWSTR lpszResourceType, BOOL bRecurse
ResUtilGetResourceDependencyByNameEx;Enumerates the dependencies of a specified resource in a specified cluster and returns a handle to a dependency of a specified type. The PRESUTIL_GET_RESOURCE_DEPENDENCY_BY_NAME_EX type defines a pointer to this function.;HCLUSTER hCluster, HANDLE hSelf, LPCWSTR lpszResourceType, BOOL bRecurse, DWORD dwDesiredAccess
ResUtilGetResourceDependency;Enumerates the dependencies of a specified resource and returns a handle to a dependency of a specified type. The PRESUTIL_GET_RESOURCE_DEPENDENCY type defines a pointer to this function.;HANDLE hSelf, LPCWSTR lpszResourceType
ResUtilGetResourceDependencyEx;Enumerates the dependencies of a specified resource and returns a handle to a dependency of a specified type. The PRESUTIL_GET_RESOURCE_DEPENDENCY_EX type defines a pointer to this function.;HANDLE hSelf, LPCWSTR lpszResourceType, DWORD dwDesiredAccess
ResUtilGetResourceDependentIPAddressProps;Retrieves the private properties of the first IP Address dependency found for a specified resource. The PRESUTIL_GET_RESOURCE_DEPENDENTIP_ADDRESS_PROPS type defines a pointer to this function.;HRESOURCE hResource, LPWSTR pszAddress, DWORD *pcchAddress, LPWSTR pszSubnetMask, DWORD *pcchSubnetMask, LPWSTR pszNetwork, DWORD *pcchNetwork
ResUtilGetResourceNameDependency;Enumerates the dependencies of a specified resource in the local cluster and returns a handle to a dependency of a specified resource type. The PRESUTIL_GET_RESOURCE_NAME_DEPENDENCY type defines a pointer to this function.;LPCWSTR lpszResourceName, LPCWSTR lpszResourceType
ResUtilGetResourceNameDependencyEx;Enumerates the dependencies of a specified resource in the local cluster and returns a handle to a dependency of a specified resource type. The PRESUTIL_GET_RESOURCE_NAME_DEPENDENCY_EX type defines a pointer to this function.;LPCWSTR lpszResourceName, LPCWSTR lpszResourceType, DWORD dwDesiredAccess
ResUtilGetResourceName;Returns the name of a resource. The PRESUTIL_GET_RESOURCE_NAME type defines a pointer to this function.;HRESOURCE hResource, PWSTR pszResourceName, DWORD *pcchResourceNameInOut
ResUtilGetSzProperty;Retrieves a string property from a property list and advances a pointer to the next property in the list. The PRESUTIL_GET_SZ_PROPERTY type defines a pointer to this function.;LPWSTR *ppszOutValue, const PCLUSPROP_SZ pValueStruct, LPCWSTR pszOldValue, LPBYTE *ppPropertyList, LPDWORD pcbPropertyListSize
ResUtilGetSzValue;Returns a string value from the cluster database.;HKEY hkeyClusterKey, LPCWSTR pszValueName
ResUtilInitializeResourceStatus;Initializes a RESOURCE_STATUS structure.;_resource_status_
ResUtilIsPathValid;Checks whether a path is syntactically valid.;LPCWSTR pszPath
ResUtilIsResourceClassEqual;Tests whether the resource class of a specified resource is equal to a specified resource class. The PRESUTIL_IS_RESOURCE_CLASS_EQUAL type defines a pointer to this function.;PCLUS_RESOURCE_CLASS_INFO prci, HRESOURCE hResource
ResUtilLeftPaxosIsLessThanRight;Indicates whether a specified Paxos tag contains older cluster configuration information than another specified Paxos tag.;const PaxosTagCStruct * const left, const PaxosTagCStruct * const right
ResUtilPaxosComparer;Compares two Paxos tags and indicates whether they have the same values.;const PaxosTagCStruct * const left, const PaxosTagCStruct * const right
ResUtilPropertyListFromParameterBlock;Constructs a property list from a property table and a parameter block.;const PRESUTIL_PROPERTY_ITEM pPropertyTable, PVOID pOutPropertyList, LPDWORD pcbOutPropertyListSize, const LPBYTE pInParams, LPDWORD pcbBytesReturned, LPDWORD pcbRequired
ResUtilRemoveResourceServiceEnvironment;Removes the environment data from a service. This function must be called from a resource DLL. The PRESUTIL_REMOVE_RESOURCE_SERVICE_ENVIRONMENT type defines a pointer to this function.;LPCWSTR pszServiceName, PLOG_EVENT_ROUTINE pfnLogEvent, RESOURCE_HANDLE hResourceHandle
ResUtilResourcesEqual;Tests whether two resource handles represent the same resource. The PRESUTIL_RESOURCES_EQUAL type defines a pointer to this function.;HRESOURCE hSelf, HRESOURCE hResource
ResUtilResourceTypesEqual;Tests whether a resource type matches the resource type name of a specified resource. The PRESUTIL_RESOURCE_TYPES_EQUAL type defines a pointer to this function.;LPCWSTR lpszResourceTypeName, HRESOURCE hResource
ResUtilSetBinaryValue;Sets a binary value in the cluster database.;HKEY hkeyClusterKey, LPCWSTR pszValueName, const LPBYTE pbNewValue, DWORD cbNewValueSize, LPBYTE *ppbOutValue, LPDWORD pcbOutValueSize
ResUtilSetDwordValue;Sets a numeric value in the cluster database. The PRESUTIL_SET_DWORD_VALUE type defines a pointer to this function.;HKEY hkeyClusterKey, LPCWSTR pszValueName, DWORD dwNewValue, LPDWORD pdwOutValue
ResUtilSetExpandSzValue;Sets an expandable string value in the cluster database. The PRESUTIL_SET_EXPAND_SZ_VALUE type defines a pointer to this function.;HKEY hkeyClusterKey, LPCWSTR pszValueName, LPCWSTR pszNewValue, LPWSTR *ppszOutString
ResUtilSetMultiSzValue;Sets a multiple string value in the cluster database. The PRESUTIL_SET_MULTI_SZ_VALUE type defines a pointer to this function.;HKEY hkeyClusterKey, LPCWSTR pszValueName, LPCWSTR pszNewValue, DWORD cbNewValueSize, LPWSTR *ppszOutValue, LPDWORD pcbOutValueSize
ResUtilSetPrivatePropertyList;Sets the private properties of a cluster object.;HKEY hkeyClusterKey, const PVOID pInPropertyList, DWORD cbInPropertyListSize
ResUtilSetPropertyParameterBlockEx;Sets properties in the cluster database from a parameter block.;HKEY hkeyClusterKey, const PRESUTIL_PROPERTY_ITEM pPropertyTable, PVOID Reserved, const LPBYTE pInParams, const PVOID pInPropertyList, DWORD cbInPropertyListSize, BOOL bForceWrite, LPBYTE pOutParams
ResUtilSetPropertyParameterBlock;Sets properties in the cluster database from a parameter block.;HKEY hkeyClusterKey, const PRESUTIL_PROPERTY_ITEM pPropertyTable, PVOID Reserved, const LPBYTE pInParams, const PVOID pInPropertyList, DWORD cbInPropertyListSize, LPBYTE pOutParams
ResUtilSetPropertyTableEx;Sets properties in the cluster database based on a property list from a property table.;HKEY hkeyClusterKey, const PRESUTIL_PROPERTY_ITEM pPropertyTable, PVOID Reserved, BOOL bAllowUnknownProperties, const PVOID pInPropertyList, DWORD cbInPropertyListSize, BOOL bForceWrite, LPBYTE pOutParams
ResUtilSetPropertyTable;Sets properties in the cluster database based on a property list from a property table..;HKEY hkeyClusterKey, const PRESUTIL_PROPERTY_ITEM pPropertyTable, PVOID Reserved, BOOL bAllowUnknownProperties, const PVOID pInPropertyList, DWORD cbInPropertyListSize, LPBYTE pOutParams
ResUtilSetQwordValue;TBD. The PRESUTIL_SET_QWORD_VALUE type defines a pointer to this function.;HKEY hkeyClusterKey, LPCWSTR pszValueName, ULONGLONG qwNewValue, PULONGLONG pqwOutValue
ResUtilSetResourceServiceEnvironment;Adjusts the environment data for a service so that the service uses a cluster network name to identify its location. This function must be called from a resource DLL. The PRESUTIL_SET_RESOURCE_SERVICE_ENVIRONMENT type defines a pointer to this function.;LPCWSTR pszServiceName, HRESOURCE hResource, PLOG_EVENT_ROUTINE pfnLogEvent, RESOURCE_HANDLE hResourceHandle
ResUtilSetResourceServiceStartParameters;Adjusts the start parameters of a specified service so that it will operate correctly as a cluster resource. It must be called from a resource DLL. The PRESUTIL_SET_RESOURCE_SERVICE_START_PARAMETERS type defines a pointer to this function.;LPCWSTR pszServiceName, SC_HANDLE schSCMHandle, LPSC_HANDLE phService, PLOG_EVENT_ROUTINE pfnLogEvent, RESOURCE_HANDLE hResourceHandle
ResUtilSetResourceServiceStartParametersEx;Adjusts the start parameters of a specified service so that it operates correctly as a cluster resource. It must be called from a resource DLL. The PRESUTIL_SET_RESOURCE_SERVICE_START_PARAMETERS_EX type defines a pointer to this function.;LPCWSTR pszServiceName, SC_HANDLE schSCMHandle, LPSC_HANDLE phService, DWORD dwDesiredAccess, PLOG_EVENT_ROUTINE pfnLogEvent, RESOURCE_HANDLE hResourceHandle
ResUtilSetSzValue;Sets a string value in the cluster database. The PRESUTIL_SET_SZ_VALUE type defines a pointer to this function.;HKEY hkeyClusterKey, LPCWSTR pszValueName, LPCWSTR pszNewValue, LPWSTR *ppszOutString
ResUtilSetUnknownProperties;Stores a cluster object's unknown properties in the cluster database.;HKEY hkeyClusterKey, const PRESUTIL_PROPERTY_ITEM pPropertyTable, const PVOID pInPropertyList, DWORD cbInPropertyListSize
ResUtilSetValueEx;Sets a value in the cluster database.;HKEY hkeyClusterKey, LPCWSTR valueName, DWORD valueType, const LPBYTE valueData, DWORD valueSize, DWORD flags
ResUtilStartResourceService;Starts a service. The PRESUTIL_START_RESOURCE_SERVICE type defines a pointer to this function.;LPCWSTR pszServiceName, LPSC_HANDLE phServiceHandle
ResUtilStopResourceService;Stops a named service. The PRESUTIL_STOP_RESOURCE_SERVICE type defines a pointer to this function.;LPCWSTR pszServiceName
ResUtilStopService;Stops a service identified by a handle. The PRESUTIL_STOP_SERVICE type defines a pointer to this function.;SC_HANDLE hServiceHandle
ResUtilTerminateServiceProcessFromResDll;Attempts to terminate the process of a service being managed as a cluster resource by a resource DLL. The PRESUTIL_TERMINATE_SERVICE_PROCESS_FROM_RES_DLL type defines a pointer to this function.;DWORD dwServicePid, BOOL bOffline, PDWORD pdwResourceState, PLOG_EVENT_ROUTINE pfnLogEvent, RESOURCE_HANDLE hResourceHandle
ResUtilVerifyPrivatePropertyList;Verifies that a property list is correctly formatted.;const PVOID pInPropertyList, DWORD cbInPropertyListSize
ResUtilVerifyPropertyTable;Uses a property table to verify that a property list is correctly formatted.;const PRESUTIL_PROPERTY_ITEM pPropertyTable, PVOID Reserved, BOOL bAllowUnknownProperties, const PVOID pInPropertyList, DWORD cbInPropertyListSize, LPBYTE pOutParams
ResUtilVerifyResourceService;Verifies that a named service is starting or currently running. The PRESUTIL_VERIFY_RESOURCE_SERVICE type defines a pointer to this function.;LPCWSTR pszServiceName
ResUtilVerifyService;Checks if a service identified by a handle is starting or currently running. The PRESUTIL_VERIFY_SERVICE type defines a pointer to this function.;SC_HANDLE hServiceHandle
RetrievePending;Retrieves a certificate's disposition status from an earlier request that may have previously returned CR_DISP_INCOMPLETE or CR_DISP_UNDER_SUBMISSION.;LONG RequestId, const BSTR strConfig, LONG *pDisposition
RetrieveUrlCacheEntryFileA;Locks the cache entry file associated with the specified URL.;LPCSTR lpszUrlName, LPINTERNET_CACHE_ENTRY_INFOA lpCacheEntryInfo, LPDWORD lpcbCacheEntryInfo, DWORD dwReserved
RetrieveUrlCacheEntryFileW;Locks the cache entry file associated with the specified URL.;LPCWSTR lpszUrlName, LPINTERNET_CACHE_ENTRY_INFOW lpCacheEntryInfo, LPDWORD lpcbCacheEntryInfo, DWORD dwReserved
RetrieveUrlCacheEntryStreamA;Provides the most efficient and implementation-independent way to access the cache data.;LPCSTR lpszUrlName, LPINTERNET_CACHE_ENTRY_INFOA lpCacheEntryInfo, LPDWORD lpcbCacheEntryInfo, BOOL fRandomRead, DWORD dwReserved
RetrieveUrlCacheEntryStreamW;Provides the most efficient and implementation-independent way to access the cache data.;LPCWSTR lpszUrlName, LPINTERNET_CACHE_ENTRY_INFOW lpCacheEntryInfo, LPDWORD lpcbCacheEntryInfo, BOOL fRandomRead, DWORD dwReserved
RevertSecurityContext;Allows a security package to discontinue the impersonation of the caller and restore its own security context.;PCtxtHandle phContext
RevertToSelf;Terminates the impersonation of a client application.;
RevokeCertificate;Revokes a certificate either on a specified date or immediately. This method was first defined in the ICertAdmin interface.;const BSTR strConfig, const BSTR strSerialNumber, LONG Reason, DATE Date
RevokeScaleChangeNotifications;Revokes the registration of a window, preventing it from receiving callbacks when scaling information changes.;DISPLAY_DEVICE_TYPE displayDevice, DWORD dwCookie
RGB;The RGB macro selects a red, green, blue (RGB) color based on the arguments supplied and the color capabilities of the output device.;r, g, b
RoActivateInstance;Activates the specified Windows Runtime class.;HSTRING activatableClassId, IInspectable **instance
RoCaptureErrorContext;Saves the current error context so that it's available for later calls to the RoFailFastWithErrorContext function.;HRESULT hr
RoClearError;Removes existing error information from the current thread environment block (TEB).;
RoFailFastWithErrorContext;Raises a non-continuable exception in the current process.;HRESULT hrError
RoGetActivatableClassRegistration;Enables retrieving class registration information.;HSTRING activatableClassId, PActivatableClassRegistration *activatableClassRegistration
RoGetActivationFactory;Gets the activation factory for the specified runtime class.;HSTRING activatableClassId, REFIID iid, void **factory
RoGetAgileReference;Creates an agile reference for an object specified by the given interface.;AgileReferenceOptions options , REFIID riid, IUnknown *pUnk, IAgileReference **ppAgileReference
RoGetApartmentIdentifier;Gets a unique identifier for the current apartment.;UINT64 *apartmentIdentifier
RoGetErrorReportingFlags;Gets the current reporting behavior of Windows Runtime error functions.;UINT32 *pflags
RoGetServerActivatableClasses;Retrieves the activatable classes that are registered for a given executable (EXE) server, which was registered under the package ID of the calling process.;HSTRING serverName, HSTRING **activatableClassIds, DWORD *count
RoInitialize;Initializes the Windows Runtime on the current thread with the specified concurrency model.;RO_INIT_TYPE initType
RoInspectCapturedStackBackTrace;Provides a way to for debuggers to inspect a call stack from a target process.;UINT_PTR targetErrorInfoAddress, USHORT machine, PINSPECT_MEMORY_CALLBACK readMemoryCallback, PVOID context, UINT32 *frameCount, UINT_PTR *targetBackTraceAddress
RoInspectThreadErrorInfo;Gets the error object that represents the call stack at the point where the error originated.;UINT_PTR targetTebAddress, USHORT machine, PINSPECT_MEMORY_CALLBACK readMemoryCallback, PVOID context, UINT_PTR *targetErrorInfoAddress
RoleAssignments;Gets a collection of IAzRoleAssignment objects associated with this application group.;BSTR bstrScopeName, VARIANT_BOOL bRecursive, IAzRoleAssignments **ppRoleAssignments
RoleAssignments;Retrieves a collection of IAzRoleAssignment objects that represent the role assignments associated with this IAzRoleDefinition object.;BSTR bstrScopeName, VARIANT_BOOL bRecursive, IAzRoleAssignments **ppRoleAssignments
RoleAssignments;Returns a collection of the role assignments associated with this operation.;BSTR bstrScopeName, VARIANT_BOOL bRecursive, IAzRoleAssignments **ppRoleAssignments
RoleAssignments;Returns a collection of the role assignments associated with this task.;BSTR bstrScopeName, VARIANT_BOOL bRecursive, IAzRoleAssignments **ppRoleAssignments
RoOriginateError;Reports an error and an informative string to an attached debugger.;HRESULT error, HSTRING message
RoOriginateErrorW;Reports an error and an informative string to an attached debugger.;HRESULT error, UINT cchMax, PCWSTR message
RoOriginateLanguageException;Reports an error, an informative string, and an error object to an attached debugger.;HRESULT error, HSTRING message, IUnknown *languageException
RoRegisterActivationFactories;Registers an array out-of-process activation factories for a Windows Runtime exe server.;HSTRING *activatableClassIds, PFNGETACTIVATIONFACTORY *activationFactoryCallbacks, UINT32 count, RO_REGISTRATION_COOKIE *cookie
RoRegisterForApartmentShutdown;Registers an IApartmentShutdown callback to be invoked when the current apartment shuts down.;IApartmentShutdown *callbackObject, UINT64 *apartmentIdentifier, APARTMENT_SHUTDOWN_REGISTRATION_COOKIE *regCookie
RoReportFailedDelegate;Triggers the Global Error Handler when a delegate failure occurs.;IUnknown *punkDelegate, IRestrictedErrorInfo *pRestrictedErrorInfo
RoReportUnhandledError;Triggers the Global Error Handler when an unhandled exception occurs.;IRestrictedErrorInfo *pRestrictedErrorInfo
RoResolveRestrictedErrorInfoReference;Returns the IRestrictedErrorInfo interface pointer based on the given reference.;PCWSTR reference, IRestrictedErrorInfo **ppRestrictedErrorInfo
RoRevokeActivationFactories;Removes an array of registered activation factories from the Windows Runtime.;RO_REGISTRATION_COOKIE cookie
RoSetErrorReportingFlags;Sets the reporting behavior of Windows Runtime error functions.;UINT32 flags
RoTransformError;Reports a modified error and an informative string to an attached debugger.;HRESULT oldError, HRESULT newError, HSTRING message
RoTransformErrorW;Reports a transformed error and an informative string to an attached debugger.;HRESULT oldError, HRESULT newError, UINT cchMax, PCWSTR message
RoundRect;The RoundRect function draws a rectangle with rounded corners. The rectangle is outlined by using the current pen and filled by using the current brush.;HDC hdc, int left, int top, int right, int bottom, int width, int height
RoUninitialize;Closes the Windows Runtime on the current thread.;
RoUnregisterForApartmentShutdown;Unregisters a previously registered IApartmentShutdown interface.;APARTMENT_SHUTDOWN_REGISTRATION_COOKIE regCookie
RpcAsyncAbortCall;The server calls RpcAsyncAbortCall to abort an asynchronous call.;PRPC_ASYNC_STATE pAsync, unsigned long ExceptionCode
RpcAsyncCancelCall;The client calls the RpcAsyncCancelCall function to cancel an asynchronous call.;PRPC_ASYNC_STATE pAsync, BOOL fAbort
RpcAsyncCompleteCall;The client and the server call the RpcAsyncCompleteCall function to complete an asynchronous remote procedure call.;PRPC_ASYNC_STATE pAsync, void *Reply
RpcAsyncGetCallHandle;The RpcAsyncGetCallHandle macro returns the binding handle on an asynchronous remote procedure call.;pAsync
RpcAsyncGetCallStatus;The client calls the RpcAsyncGetCallStatus function to determine the current status of an asynchronous remote call.;PRPC_ASYNC_STATE pAsync
RpcAsyncInitializeHandle;The client calls the RpcAsyncInitializeHandle function to initialize the RPC_ASYNC_STATE structure to be used to make an asynchronous call.;PRPC_ASYNC_STATE pAsync, unsigned int Size
RpcAsyncRegisterInfo;The RpcAsyncRegisterInfo function is obsolete.;PRPC_ASYNC_STATE pAsync
RPC_AUTH_KEY_RETRIEVAL_FN;The RPC_AUTH_KEY_RETRIEVAL_FN function is a prototype for a function that specifies the address of a server-application-provided routine returning encryption keys.;void *Arg, RPC_WSTR ServerPrincName, unsigned long KeyVer, void **Key, RPC_STATUS *Status ) {...}
RpcBindingBind;The RpcBindingBind function contacts an RPC server and binds to it.;PRPC_ASYNC_STATE pAsync, RPC_BINDING_HANDLE Binding, RPC_IF_HANDLE IfSpec
RpcBindingCopy;The RpcBindingCopy function copies binding information and creates a new binding handle.;RPC_BINDING_HANDLE SourceBinding, RPC_BINDING_HANDLE *DestinationBinding
RpcBindingCreateA;The RpcBindingCreate function creates a new fast RPC binding handle based on a supplied template.;RPC_BINDING_HANDLE_TEMPLATE_V1_A *Template, RPC_BINDING_HANDLE_SECURITY_V1_A *Security, RPC_BINDING_HANDLE_OPTIONS_V1 *Options, RPC_BINDING_HANDLE *Binding
RpcBindingCreateW;The RpcBindingCreate function creates a new fast RPC binding handle based on a supplied template.;RPC_BINDING_HANDLE_TEMPLATE_V1_W *Template, RPC_BINDING_HANDLE_SECURITY_V1_W *Security, RPC_BINDING_HANDLE_OPTIONS_V1 *Options, RPC_BINDING_HANDLE *Binding
RpcBindingFree;The RpcBindingFree function releases binding-handle resources.;RPC_BINDING_HANDLE *Binding
RpcBindingFromStringBindingA;Returns a binding handle from a string representation of a binding handle.;RPC_CSTR StringBinding, RPC_BINDING_HANDLE *Binding
RpcBindingFromStringBinding;Returns a binding handle from a string representation of a binding handle.;RPC_CSTR StringBinding, RPC_BINDING_HANDLE *Binding
RpcBindingFromStringBindingW;Returns a binding handle from a string representation of a binding handle.;RPC_WSTR StringBinding, RPC_BINDING_HANDLE *Binding
RpcBindingInqAuthClientA;A server application calls the RpcBindingInqAuthClient function to obtain the principal name or privilege attributes of the authenticated client that made the remote procedure call.;RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc
RpcBindingInqAuthClient;A server application calls the RpcBindingInqAuthClient function to obtain the principal name or privilege attributes of the authenticated client that made the remote procedure call.;RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc
RpcBindingInqAuthClientExA;A server application calls the RpcBindingInqAuthClientEx function to obtain extended information about the client program that made the remote procedure call.;RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc, unsigned long Flags
RpcBindingInqAuthClientEx;A server application calls the RpcBindingInqAuthClientEx function to obtain extended information about the client program that made the remote procedure call.;RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc, unsigned long Flags
RpcBindingInqAuthClientExW;A server application calls the RpcBindingInqAuthClientEx function to obtain extended information about the client program that made the remote procedure call.;RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc, unsigned long Flags
RpcBindingInqAuthClientW;A server application calls the RpcBindingInqAuthClient function to obtain the principal name or privilege attributes of the authenticated client that made the remote procedure call.;RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc
RpcBindingInqAuthInfoA;The RpcBindingInqAuthInfo function returns authentication and authorization information from a binding handle.;RPC_BINDING_HANDLE Binding, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc
RpcBindingInqAuthInfoExA;The RpcBindingInqAuthInfoEx function returns authentication, authorization, and security quality-of-service information from a binding handle.;RPC_BINDING_HANDLE Binding, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc, unsigned long RpcQosVersion, RPC_SECURITY_QOS *SecurityQOS
RpcBindingInqAuthInfoExW;The RpcBindingInqAuthInfoEx function returns authentication, authorization, and security quality-of-service information from a binding handle.;RPC_BINDING_HANDLE Binding, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc, unsigned long RpcQosVersion, RPC_SECURITY_QOS *SecurityQOS
RpcBindingInqAuthInfo;The RpcBindingInqAuthInfo function returns authentication and authorization information from a binding handle.;RPC_BINDING_HANDLE Binding, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc
RpcBindingInqAuthInfoW;The RpcBindingInqAuthInfo function returns authentication and authorization information from a binding handle.;RPC_BINDING_HANDLE Binding, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc
RpcBindingInqObject;The RpcBindingInqObject function returns the object UUID from a binding handle.;RPC_BINDING_HANDLE Binding, UUID *ObjectUuid
RpcBindingInqOption;RPC client processes use RpcBindingInqOption to determine current values of the binding options for a given binding handle.;RPC_BINDING_HANDLE hBinding, unsigned long option, ULONG_PTR *pOptionValue
RpcBindingReset;The RpcBindingReset function resets a binding handle so that the host is specified but the server on that host is unspecified.;RPC_BINDING_HANDLE Binding
RpcBindingServerFromClient;An application calls RpcBindingServerFromClient to convert a client binding handle into a partially-bound server binding handle.;RPC_BINDING_HANDLE ClientBinding, RPC_BINDING_HANDLE *ServerBinding
RpcBindingSetAuthInfoA;The RpcBindingSetAuthInfo function sets a binding handle's authentication and authorization information.;RPC_BINDING_HANDLE Binding, RPC_CSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc
RpcBindingSetAuthInfoExA;The RpcBindingSetAuthInfoEx function sets a binding handle's authentication, authorization, and security quality-of-service information.;RPC_BINDING_HANDLE Binding, RPC_CSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc, RPC_SECURITY_QOS *SecurityQos
RpcBindingSetAuthInfoExW;The RpcBindingSetAuthInfoEx function sets a binding handle's authentication, authorization, and security quality-of-service information.;RPC_BINDING_HANDLE Binding, RPC_WSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc, RPC_SECURITY_QOS *SecurityQOS
RpcBindingSetAuthInfo;The RpcBindingSetAuthInfo function sets a binding handle's authentication and authorization information.;RPC_BINDING_HANDLE Binding, RPC_CSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc
RpcBindingSetAuthInfoW;The RpcBindingSetAuthInfo function sets a binding handle's authentication and authorization information.;RPC_BINDING_HANDLE Binding, RPC_WSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc
RpcBindingSetObject;The RpcBindingSetObject function sets the object UUID value in a binding handle.;RPC_BINDING_HANDLE Binding, UUID *ObjectUuid
RpcBindingSetOption;The RpcBindingSetOption function enables client applications to specify message-queuing options on a binding handle.;RPC_BINDING_HANDLE hBinding, unsigned long option, ULONG_PTR optionValue
RpcBindingToStringBindingA;The RpcBindingToStringBinding function returns a string representation of a binding handle.;RPC_BINDING_HANDLE Binding, RPC_CSTR *StringBinding
RpcBindingToStringBinding;The RpcBindingToStringBinding function returns a string representation of a binding handle.;RPC_BINDING_HANDLE Binding, RPC_CSTR *StringBinding
RpcBindingToStringBindingW;The RpcBindingToStringBinding function returns a string representation of a binding handle.;RPC_BINDING_HANDLE Binding, RPC_WSTR *StringBinding
RpcBindingUnbind;Unbinds a binding handle previously bound by RpcBindingBind.;RPC_BINDING_HANDLE Binding
RpcBindingVectorFree;The RpcBindingVectorFree function frees the binding handles contained in the vector and the vector itself.;RPC_BINDING_VECTOR **BindingVector
RpcCancelThreadEx;The RpcCancelThreadEx function stops the execution of a thread.;void *Thread, long Timeout
RpcCancelThread;The RpcCancelThread function cancels a thread. The RpcCancelThread function should not be used to cancel asynchronous RPC calls; instead, use the RpcAsyncCancelCall function to cancel an asynchronous RPC call.;void *Thread
RpcCertGeneratePrincipalNameA;Server programs use the RpcCertGeneratePrincipalName function to generate principal names for security certificates.;PCCERT_CONTEXT Context, DWORD Flags, RPC_CSTR *pBuffer
RpcCertGeneratePrincipalName;Server programs use the RpcCertGeneratePrincipalName function to generate principal names for security certificates.;PCCERT_CONTEXT Context, DWORD Flags, RPC_CSTR *pBuffer
RpcCertGeneratePrincipalNameW;Server programs use the RpcCertGeneratePrincipalName function to generate principal names for security certificates.;PCCERT_CONTEXT Context, DWORD Flags, RPC_WSTR *pBuffer
RpcEpRegisterA;The RpcEpRegister function adds to or replaces server address information in the local endpoint-map database.;RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_CSTR Annotation
RpcEpRegisterNoReplaceA;The RpcEpRegisterNoReplace function adds server-address information to the local endpoint-map database.;RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_CSTR Annotation
RpcEpRegisterNoReplace;The RpcEpRegisterNoReplace function adds server-address information to the local endpoint-map database.;RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_CSTR Annotation
RpcEpRegisterNoReplaceW;The RpcEpRegisterNoReplace function adds server-address information to the local endpoint-map database.;RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_WSTR Annotation
RpcEpRegister;The RpcEpRegister function adds to or replaces server address information in the local endpoint-map database.;RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_CSTR Annotation
RpcEpRegisterW;The RpcEpRegister function adds to or replaces server address information in the local endpoint-map database.;RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_WSTR Annotation
RpcEpResolveBinding;The RpcEpResolveBinding function resolves a partially-bound server binding handle into a fully-bound server binding handle.;RPC_BINDING_HANDLE Binding, RPC_IF_HANDLE IfSpec
RpcEpUnregister;The RpcEpUnregister function removes server-address information from the local endpoint-map database.;RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector
RpcErrorAddRecord;The RpcErrorAddRecord function adds extended error information to a chain of extended error information records.;RPC_EXTENDED_ERROR_INFO *ErrorInfo
RpcErrorClearInformation;The RpcErrorClearInformation function clears all extended error information on the current thread.;
RpcErrorEndEnumeration;The RpcErrorEndEnumeration function ends enumeration of extended error information and frees all resources allocated by RPC for the enumeration.;RPC_ERROR_ENUM_HANDLE *EnumHandle
RpcErrorGetNextRecord;The RpcErrorGetNextRecord function retrieves the next extended error information record for an enumeration handle.;RPC_ERROR_ENUM_HANDLE *EnumHandle, BOOL CopyStrings, RPC_EXTENDED_ERROR_INFO *ErrorInfo
RpcErrorGetNumberOfRecords;The RpcErrorGetNumberOfRecords function returns the number of records in the extended error information.;RPC_ERROR_ENUM_HANDLE *EnumHandle, int *Records
RpcErrorLoadErrorInfo;The RpcErrorLoadErrorInfo function converts a BLOB obtained by a call to RpcErrorSaveErrorInfo into extended error information.;PVOID ErrorBlob, size_t BlobSize, RPC_ERROR_ENUM_HANDLE *EnumHandle
RpcErrorResetEnumeration;The RpcErrorResetEnumeration function resets an enumeration cursor for any in-process enumeration, resetting the process such that a subsequent call to the RpcErrorGetNextRecord retrieves the first extended error information record.;RPC_ERROR_ENUM_HANDLE *EnumHandle
RpcErrorSaveErrorInfo;The RpcErrorSaveErrorInfo function returns all error information for an enumeration handle as a BLOB.;RPC_ERROR_ENUM_HANDLE *EnumHandle, PVOID *ErrorBlob, size_t *BlobSize
RpcErrorStartEnumeration;The RpcErrorStartEnumeration function begins enumeration of extended error information.;RPC_ERROR_ENUM_HANDLE *EnumHandle
RpcExceptionFilter;A default exception filter that determines whether an exception is fatal or non-fatal.;unsigned long ExceptionCode
RpcExcept;The RpcExcept statement provides structured exception handling for RPC applications.;expr
RpcFreeAuthorizationContext;The RpcFreeAuthorizationContext function frees an Authz context obtained by a previous call to the RpcGetAuthorizationContextForClient function.;PVOID *pAuthzClientContext
RpcGetAuthorizationContextForClient;The RpcGetAuthorizationContextForClient function returns the Authz context for an RPC client that can be used with Authz functions for high-performance authentication. Supported for ncalrpc and ncacn_* protocol sequences only.;RPC_BINDING_HANDLE ClientBinding, BOOL ImpersonateOnReturn, PVOID Reserved1, PLARGE_INTEGER pExpirationTime, LUID Reserved2, DWORD Reserved3, PVOID Reserved4, PVOID *pAuthzClientContext
RPC_IF_CALLBACK_FN;The RPC_IF_CALLBACK_FN is a prototype for a security-callback function that your application supplies. Your program can provide a callback function for each interface it defines.;RPC_IF_HANDLE InterfaceUuid, void *Context ) {...}
RpcIfIdVectorFree;The RpcIfIdVectorFree function frees the vector and the interface-identification structures contained in the vector.;RPC_IF_ID_VECTOR **IfIdVector
RpcIfInqId;The RpcIfInqId function returns the interface-identification part of an interface specification.;RPC_IF_HANDLE RpcIfHandle, RPC_IF_ID *RpcIfId
RpcImpersonateClient;A server thread that is processing client remote procedure calls can call the RpcImpersonateClient function to impersonate the active client.;RPC_BINDING_HANDLE BindingHandle
RpcImpersonateClientContainer;RpcImpersonateClientContainer may be altered or unavailable.;RPC_BINDING_HANDLE BindingHandle
RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN;The RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN is a user-defined callback that can be implemented for each defined interface group. This callback is invoked by the RPC runtime when it detects that the idle state of an interface group has changed.;RPC_INTERFACE_GROUP IfGroup, void *IdleCallbackContext, unsigned long IsGroupIdle ) {...}
RPC_MGMT_AUTHORIZATION_FN;The RPC_MGMT_AUTHORIZATION_FN enables server programs to implement custom RPC authorization techniques.;RPC_BINDING_HANDLE ClientBinding, unsigned long RequestedMgmtOperation, RPC_STATUS *Status ) {...}
RpcMgmtEnableIdleCleanup;The RpcMgmtEnableIdleCleanup function enables RPC to close idle resources, such as network connections, on the client.;
RpcMgmtEpEltInqBegin;The RpcMgmtEpEltInqBegin function creates an inquiry context for viewing the elements in an endpoint map.;RPC_BINDING_HANDLE EpBinding, unsigned long InquiryType, RPC_IF_ID *IfId, unsigned long VersOption, UUID *ObjectUuid, RPC_EP_INQ_HANDLE *InquiryContext
RpcMgmtEpEltInqDone;The RpcMgmtEpEltInqDone function deletes the inquiry context for viewing the elements in an endpoint map.;RPC_EP_INQ_HANDLE *InquiryContext
RpcMgmtEpEltInqNextA;The RpcMgmtEpEltInqNext function returns one element from an endpoint map.;RPC_EP_INQ_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_BINDING_HANDLE *Binding, UUID *ObjectUuid, RPC_CSTR *Annotation
RpcMgmtEpEltInqNext;The RpcMgmtEpEltInqNext function returns one element from an endpoint map.;RPC_EP_INQ_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_BINDING_HANDLE *Binding, RPC_CSTR *Annotation
RpcMgmtEpEltInqNextW;The RpcMgmtEpEltInqNext function returns one element from an endpoint map.;RPC_EP_INQ_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_BINDING_HANDLE *Binding, UUID *ObjectUuid, RPC_WSTR *Annotation
RpcMgmtEpUnregister;The RpcMgmtEpUnregister function removes server address information from an endpoint map.;RPC_BINDING_HANDLE EpBinding, RPC_IF_ID *IfId, RPC_BINDING_HANDLE Binding, UUID *ObjectUuid
RpcMgmtInqComTimeout;The RpcMgmtInqComTimeout function returns the binding-communications time-out value in a binding handle.;RPC_BINDING_HANDLE Binding, unsigned int *Timeout
RpcMgmtInqDefaultProtectLevel;The RpcMgmtInqDefaultProtectLevel function returns the default authentication level for an authentication service.;unsigned long AuthnSvc, unsigned long *AuthnLevel
RpcMgmtInqIfIds;The RpcMgmtInqIfIds function returns a vector containing the identifiers of the interfaces offered by the server.;RPC_BINDING_HANDLE Binding, RPC_IF_ID_VECTOR **IfIdVector
RpcMgmtInqServerPrincNameA;The RpcMgmtInqServerPrincName function returns a server's principal name.;RPC_BINDING_HANDLE Binding, unsigned long AuthnSvc, RPC_CSTR *ServerPrincName
RpcMgmtInqServerPrincName;The RpcMgmtInqServerPrincName function returns a server's principal name.;RPC_BINDING_HANDLE Binding, unsigned long AuthnSvc, RPC_WSTR *ServerPrincName
RpcMgmtInqServerPrincNameW;The RpcMgmtInqServerPrincName function returns a server's principal name.;RPC_BINDING_HANDLE Binding, unsigned long AuthnSvc, RPC_WSTR *ServerPrincName
RpcMgmtInqStats;The RpcMgmtInqStats function returns RPC run-time statistics.;RPC_BINDING_HANDLE Binding, RPC_STATS_VECTOR **Statistics
RpcMgmtIsServerListening;The RpcMgmtIsServerListening function tells whether a server is listening for remote procedure calls.;RPC_BINDING_HANDLE Binding
RpcMgmtSetAuthorizationFn;The RpcMgmtSetAuthorizationFn function establishes an authorization function for processing remote calls to a server's management functions.;RPC_MGMT_AUTHORIZATION_FN AuthorizationFn
RpcMgmtSetCancelTimeout;The RpcMgmtSetCancelTimeout function sets the lower bound on the time to wait before timing out after forwarding a cancel.;long Timeout
RpcMgmtSetComTimeout;The RpcMgmtSetComTimeout function sets the binding-communications time-out value in a binding handle.;RPC_BINDING_HANDLE Binding, unsigned int Timeout
RpcMgmtSetServerStackSize;The RpcMgmtSetServerStackSize function specifies the stack size for server threads created by the RPC run time.;unsigned long ThreadStackSize
RpcMgmtStatsVectorFree;The RpcMgmtStatsVectorFree function frees a statistics vector.;RPC_STATS_VECTOR **StatsVector
RpcMgmtStopServerListening;The RpcMgmtStopServerListening function tells a server to stop listening for remote procedure calls. This function will not affect auto-listen interfaces. See RpcServerRegisterIfEx for more details.;RPC_BINDING_HANDLE Binding
RpcMgmtWaitServerListen;The RpcMgmtWaitServerListen function performs the wait operation usually associated with RpcServerListen.;
RpcNetworkInqProtseqsA;The RpcNetworkInqProtseqs function returns all protocol sequences supported by both the RPC run-time library and the operating system.;RPC_PROTSEQ_VECTORA **ProtseqVector
RpcNetworkInqProtseqs;The RpcNetworkInqProtseqs function returns all protocol sequences supported by both the RPC run-time library and the operating system.;RPC_PROTSEQ_VECTOR **ProtseqVector
RpcNetworkInqProtseqsW;The RpcNetworkInqProtseqs function returns all protocol sequences supported by both the RPC run-time library and the operating system.;RPC_PROTSEQ_VECTORW **ProtseqVector
RpcNetworkIsProtseqValidA;The RpcNetworkIsProtseqValid function tells whether the specified protocol sequence is supported by both the RPC run-time library and the operating system. Server applications often use RpcNetworkInqProtseqs.;RPC_CSTR Protseq
RpcNetworkIsProtseqValid;The RpcNetworkIsProtseqValid function tells whether the specified protocol sequence is supported by both the RPC run-time library and the operating system. Server applications often use RpcNetworkInqProtseqs.;RPC_CSTR Protseq
RpcNetworkIsProtseqValidW;The RpcNetworkIsProtseqValid function tells whether the specified protocol sequence is supported by both the RPC run-time library and the operating system. Server applications often use RpcNetworkInqProtseqs.;RPC_WSTR Protseq
RPCNOTIFICATION_ROUTINE;The RPCNOTIFICATION_ROUTINE function provides programs that utilize asynchronous RPC with the ability to customize responses to asynchronous events.;_RPC_ASYNC_STATE *pAsync, void *Context, RPC_ASYNC_EVENT Event ) {...}
RpcNsBindingExportA;The RpcNsBindingExport function establishes a name service�database entry with multiple binding handles and multiple objects for a server.;unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVec, UUID_VECTOR *ObjectUuidVec
RpcNsBindingExportPnPA;The RpcNsBindingExportPnP function establishes a name-service database entry with multiple binding handles and multiple objects for a server that supports Plug and Play.;unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector
RpcNsBindingExportPnPW;The RpcNsBindingExportPnP function establishes a name-service database entry with multiple binding handles and multiple objects for a server that supports Plug and Play.;unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector
RpcNsBindingExportW;The RpcNsBindingExport function establishes a name service�database entry with multiple binding handles and multiple objects for a server.;unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVec, UUID_VECTOR *ObjectUuidVec
RpcNsBindingImportBeginA;The RpcNsBindingImportBegin function creates an import context for importing client-compatible binding handles for servers that offer the specified interface and object.;unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, RPC_NS_HANDLE *ImportContext
RpcNsBindingImportBeginW;The RpcNsBindingImportBegin function creates an import context for importing client-compatible binding handles for servers that offer the specified interface and object.;unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, RPC_NS_HANDLE *ImportContext
RpcNsBindingImportDone;The RpcNsBindingImportDone function signals that a client has finished looking for a compatible server and deletes the import context.;RPC_NS_HANDLE *ImportContext
RpcNsBindingImportNext;The RpcNsBindingImportNext function looks up an interface (and optionally an object from a name-service database) and returns a binding handle of a compatible server, if found.;RPC_NS_HANDLE ImportContext, RPC_BINDING_HANDLE *Binding
RpcNsBindingInqEntryNameA;The RpcNsBindingInqEntryName function returns the entry name from which the binding handle came.;RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_CSTR *EntryName
RpcNsBindingInqEntryName;The RpcNsBindingInqEntryName function returns the entry name from which the binding handle came.;RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_CSTR *EntryName
RpcNsBindingInqEntryNameW;The RpcNsBindingInqEntryName function returns the entry name from which the binding handle came.;RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_WSTR *EntryName
RpcNsBindingLookupBeginA;The RpcNsBindingLookupBegin function creates a lookup context for an interface and an object.;unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, unsigned long BindingMaxCount, RPC_NS_HANDLE *LookupContext
RpcNsBindingLookupBeginW;The RpcNsBindingLookupBegin function creates a lookup context for an interface and an object.;unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, unsigned long BindingMaxCount, RPC_NS_HANDLE *LookupContext
RpcNsBindingLookupDone;The RpcNsBindingLookupDone function signifies that a client has finished looking for compatible servers and deletes the lookup context.;RPC_NS_HANDLE *LookupContext
RpcNsBindingLookupNext;The RpcNsBindingLookupNext function returns a list of compatible binding handles for a specified interface and optionally an object.;RPC_NS_HANDLE LookupContext, RPC_BINDING_VECTOR **BindingVec
RpcNsBindingSelect;The RpcNsBindingSelect function returns a binding handle from a list of compatible binding handles.;RPC_BINDING_VECTOR *BindingVec, RPC_BINDING_HANDLE *Binding
RpcNsBindingUnexportA;The RpcNsBindingUnexport function removes the binding handles for an interface and objects from an entry in the name-service database.;unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectUuidVec
RpcNsBindingUnexportPnPA;The RpcNsBindingUnexportPnP function removes the binding handles for Plug and Play interfaces and objects from an entry in the name-service database.;unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector
RpcNsBindingUnexportPnPW;The RpcNsBindingUnexportPnP function removes the binding handles for Plug and Play interfaces and objects from an entry in the name-service database.;unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector
RpcNsBindingUnexportW;The RpcNsBindingUnexport function removes the binding handles for an interface and objects from an entry in the name-service database.;unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectUuidVec
RpcNsEntryExpandNameA;The RpcNsEntryExpandName function expands a name-service entry name. This function is supported by Active Directory.;unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_CSTR *ExpandedName
RpcNsEntryExpandNameW;The RpcNsEntryExpandName function expands a name-service entry name. This function is supported by Active Directory.;unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_WSTR *ExpandedName
RpcNsEntryObjectInqBeginA;The RpcNsEntryObjectInqBegin function creates an inquiry context for the objects of a name-service database entry.;unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_NS_HANDLE *InquiryContext
RpcNsEntryObjectInqBeginW;The RpcNsEntryObjectInqBegin function creates an inquiry context for the objects of a name-service database entry.;unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_NS_HANDLE *InquiryContext
RpcNsEntryObjectInqDone;The RpcNsEntryObjectInqDone function deletes the inquiry context for a name-service database entry's objects.;RPC_NS_HANDLE *InquiryContext
RpcNsEntryObjectInqNext;The RpcNsEntryObjectInqNext function returns one object at a time from a name-service database entry.;RPC_NS_HANDLE InquiryContext, UUID *ObjUuid
RpcNsGroupDeleteA;The RpcNsGroupDelete function deletes a group attribute.;unsigned long GroupNameSyntax, RPC_CSTR GroupName
RpcNsGroupDeleteW;The RpcNsGroupDelete function deletes a group attribute.;unsigned long GroupNameSyntax, RPC_WSTR GroupName
RpcNsGroupMbrAddA;The RpcNsGroupMbrAdd function adds an entry name to a group. If necessary, it creates the entry.;unsigned long GroupNameSyntax, RPC_CSTR GroupName, unsigned long MemberNameSyntax, RPC_CSTR MemberName
RpcNsGroupMbrAddW;The RpcNsGroupMbrAdd function adds an entry name to a group. If necessary, it creates the entry.;unsigned long GroupNameSyntax, RPC_WSTR GroupName, unsigned long MemberNameSyntax, RPC_WSTR MemberName
RpcNsGroupMbrInqBeginA;The RpcNsGroupMbrInqBegin function creates an inquiry context for viewing group members.;unsigned long GroupNameSyntax, RPC_CSTR GroupName, unsigned long MemberNameSyntax, RPC_NS_HANDLE *InquiryContext
RpcNsGroupMbrInqBeginW;The RpcNsGroupMbrInqBegin function creates an inquiry context for viewing group members.;unsigned long GroupNameSyntax, RPC_WSTR GroupName, unsigned long MemberNameSyntax, RPC_NS_HANDLE *InquiryContext
RpcNsGroupMbrInqDone;The RpcNsGroupMbrInqDone function deletes the inquiry context for a group.;RPC_NS_HANDLE *InquiryContext
RpcNsGroupMbrInqNextA;The RpcNsGroupMbrInqNext function returns one entry name from a group at a time.;RPC_NS_HANDLE InquiryContext, RPC_CSTR *MemberName
RpcNsGroupMbrInqNextW;The RpcNsGroupMbrInqNext function returns one entry name from a group at a time.;RPC_NS_HANDLE InquiryContext, RPC_WSTR *MemberName
RpcNsGroupMbrRemoveA;The RpcNsGroupMbrRemove function removes an entry name from a group.;unsigned long GroupNameSyntax, RPC_CSTR GroupName, unsigned long MemberNameSyntax, RPC_CSTR MemberName
RpcNsGroupMbrRemoveW;The RpcNsGroupMbrRemove function removes an entry name from a group.;unsigned long GroupNameSyntax, RPC_WSTR GroupName, unsigned long MemberNameSyntax, RPC_WSTR MemberName
RpcNsMgmtBindingUnexportA;The RpcNsMgmtBindingUnexport function removes multiple binding handles and objects from an entry in the name-service database.;unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_ID *IfId, unsigned long VersOption, UUID_VECTOR *ObjectUuidVec
RpcNsMgmtBindingUnexportW;The RpcNsMgmtBindingUnexport function removes multiple binding handles and objects from an entry in the name-service database.;unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_ID *IfId, unsigned long VersOption, UUID_VECTOR *ObjectUuidVec
RpcNsMgmtEntryCreateA;The RpcNsMgmtEntryCreate function creates a name service�database entry.;unsigned long EntryNameSyntax, RPC_CSTR EntryName
RpcNsMgmtEntryCreateW;The RpcNsMgmtEntryCreate function creates a name service�database entry.;unsigned long EntryNameSyntax, RPC_WSTR EntryName
RpcNsMgmtEntryDeleteA;The RpcNsMgmtEntryDelete function deletes a name service�database entry.;unsigned long EntryNameSyntax, RPC_CSTR EntryName
RpcNsMgmtEntryDeleteW;The RpcNsMgmtEntryDelete function deletes a name service�database entry.;unsigned long EntryNameSyntax, RPC_WSTR EntryName
RpcNsMgmtEntryInqIfIdsA;The RpcNsMgmtEntryInqIfIds function returns the list of interfaces exported to a name service�database entry.;unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_ID_VECTOR **IfIdVec
RpcNsMgmtEntryInqIfIdsW;The RpcNsMgmtEntryInqIfIds function returns the list of interfaces exported to a name service�database entry.;unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_ID_VECTOR **IfIdVec
RpcNsMgmtHandleSetExpAge;The RpcNsMgmtHandleSetExpAge function sets the expiration age of a name-service handle for local copies of name-service data.;RPC_NS_HANDLE NsHandle, unsigned long ExpirationAge
RpcNsMgmtInqExpAge;The RpcNsMgmtInqExpAge function returns the global expiration age for local copies of name-service data.;unsigned long *ExpirationAge
RpcNsMgmtSetExpAge;The RpcNsMgmtSetExpAge function modifies the application's global expiration age for local copies of name-service data.;unsigned long ExpirationAge
RpcNsProfileDeleteA;The RpcNsProfileDelete function deletes a profile attribute.;unsigned long ProfileNameSyntax, RPC_CSTR ProfileName
RpcNsProfileDeleteW;The RpcNsProfileDelete function deletes a profile attribute.;unsigned long ProfileNameSyntax, RPC_WSTR ProfileName
RpcNsProfileEltAddA;The RpcNsProfileEltAdd function adds an element to a profile. If necessary, it creates the entry.;unsigned long ProfileNameSyntax, RPC_CSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_CSTR MemberName, unsigned long Priority, RPC_CSTR Annotation
RpcNsProfileEltAddW;The RpcNsProfileEltAdd function adds an element to a profile. If necessary, it creates the entry.;unsigned long ProfileNameSyntax, RPC_WSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_WSTR MemberName, unsigned long Priority, RPC_WSTR Annotation
RpcNsProfileEltInqBeginA;The RpcNsProfileEltInqBegin function creates an inquiry context for viewing the elements in a profile.;unsigned long ProfileNameSyntax, RPC_CSTR ProfileName, unsigned long InquiryType, RPC_IF_ID *IfId, unsigned long VersOption, unsigned long MemberNameSyntax, RPC_CSTR MemberName, RPC_NS_HANDLE *InquiryContext
RpcNsProfileEltInqBeginW;The RpcNsProfileEltInqBegin function creates an inquiry context for viewing the elements in a profile.;unsigned long ProfileNameSyntax, RPC_WSTR ProfileName, unsigned long InquiryType, RPC_IF_ID *IfId, unsigned long VersOption, unsigned long MemberNameSyntax, RPC_WSTR MemberName, RPC_NS_HANDLE *InquiryContext
RpcNsProfileEltInqDone;The RpcNsProfileEltInqDone function deletes the inquiry context for viewing the elements in a profile.;RPC_NS_HANDLE *InquiryContext
RpcNsProfileEltInqNextA;The RpcNsProfileEltInqNext function returns one element at a time from a profile.;RPC_NS_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_CSTR *MemberName, unsigned long *Priority, RPC_CSTR *Annotation
RpcNsProfileEltInqNextW;The RpcNsProfileEltInqNext function returns one element at a time from a profile.;RPC_NS_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_WSTR *MemberName, unsigned long *Priority, RPC_WSTR *Annotation
RpcNsProfileEltRemoveA;The RpcNsProfileEltRemove function removes an element from a profile.;unsigned long ProfileNameSyntax, RPC_CSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_CSTR MemberName
RpcNsProfileEltRemoveW;The RpcNsProfileEltRemove function removes an element from a profile.;unsigned long ProfileNameSyntax, RPC_WSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_WSTR MemberName
RPC_OBJECT_INQ_FN;The RPC_OBJECT_INQ_FN function is a prototype for a function that facilitates replacement of the default object UUID to type UUID mapping.;UUID *ObjectUuid, UUID *TypeUuid, RPC_STATUS *Status ) {...}
RpcObjectInqType;The RpcObjectInqType function returns the type of an object.;UUID *ObjUuid, UUID *TypeUuid
RpcObjectSetInqFn;The RpcObjectSetInqFn function registers an object-inquiry function. A null value turns off a previously registered object-inquiry function.;RPC_OBJECT_INQ_FN *InquiryFn
RpcObjectSetType;The RpcObjectSetType function assigns the type of an object.;UUID *ObjUuid, UUID *TypeUuid
RpcProtseqVectorFreeA;The RpcProtseqVectorFree function frees the protocol sequences contained in the vector and the vector itself.;RPC_PROTSEQ_VECTORA **ProtseqVector
RpcProtseqVectorFree;The RpcProtseqVectorFree function frees the protocol sequences contained in the vector and the vector itself.;RPC_PROTSEQ_VECTOR **ProtseqVector
RpcProtseqVectorFreeW;The RpcProtseqVectorFree function frees the protocol sequences contained in the vector and the vector itself.;RPC_PROTSEQ_VECTORW **ProtseqVector
RpcRaiseException;Use the RpcRaiseException function to raise an exception. The function does not return to the caller.;RPC_STATUS exception
RpcRevertContainerImpersonation;RpcRevertContainerImpersonation may be altered or unavailable.;
RpcRevertToSelf;After calling RpcImpersonateClient and completing any tasks that require client impersonation, the server calls RpcRevertToSelf to end impersonation and to reestablish its own security identity.;
RpcRevertToSelfEx;The RpcRevertToSelfEx function allows a server to impersonate a client and then revert in a multithreaded operation where the call to impersonate a client can come from a thread other than the thread originally dispatched from the RPC.;RPC_BINDING_HANDLE BindingHandle
RpcServerCompleteSecurityCallback;The RpcServerCompleteSecurityCallback function completes an asynchronous security callback.;RPC_BINDING_HANDLE BindingHandle, RPC_STATUS Status
RpcServerInqBindingHandle;Obtains the binding handle for RPC calls serviced by the thread in which RpcServerInqBindingHandle is called.;RPC_BINDING_HANDLE *Binding
RpcServerInqBindings;The RpcServerInqBindings function returns the binding handles over which remote procedure calls can be received.;RPC_BINDING_VECTOR **BindingVector
RpcServerInqCallAttributesA;The RpcServerInqCallAttributes function is an RPC server call that obtains client security context attributes.;RPC_BINDING_HANDLE ClientBinding, void *RpcCallAttributes
RpcServerInqCallAttributesW;The RpcServerInqCallAttributes function is an RPC server call that obtains client security context attributes.;RPC_BINDING_HANDLE ClientBinding, void *RpcCallAttributes
RpcServerInqDefaultPrincNameA;The RpcServerInqDefaultPrincName function obtains the default principal name for a given authentication service.;unsigned long AuthnSvc, RPC_CSTR *PrincName
RpcServerInqDefaultPrincName;The RpcServerInqDefaultPrincName function obtains the default principal name for a given authentication service.;unsigned long AuthnSvc, RPC_WSTR *PrincName
RpcServerInqDefaultPrincNameW;The RpcServerInqDefaultPrincName function obtains the default principal name for a given authentication service.;unsigned long AuthnSvc, RPC_WSTR *PrincName
RpcServerInqIf;The RpcServerInqIf function returns the manager entry-point vector (EPV) registered for an interface.;RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, RPC_MGR_EPV **MgrEpv
RpcServerInterfaceGroupActivate;The RpcServerInterfaceGroupActivate function tells the RPC server runtime to register the interface group’s interfaces and endpoints and begin listening for calls.;RPC_INTERFACE_GROUP IfGroup
RpcServerInterfaceGroupClose;The RpcServerInterfaceGroupClose function is used to free an interface group.;RPC_INTERFACE_GROUP IfGroup
RpcServerInterfaceGroupCreateA;The RpcServerInterfaceGroupCreate function creates an RPC server interface group for the server application.;RPC_INTERFACE_TEMPLATEA *Interfaces, unsigned long NumIfs, RPC_ENDPOINT_TEMPLATEA *Endpoints, unsigned long NumEndpoints, unsigned long IdlePeriod, RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN IdleCallbackFn, void *IdleCallbackContext, PRPC_INTERFACE_GROUP IfGroup
RpcServerInterfaceGroupCreate;The RpcServerInterfaceGroupCreate function creates an RPC server interface group for the server application.;RPC_INTERFACE_TEMPLATE *Interfaces, unsigned long NumIfs, RPC_ENDPOINT_TEMPLATE *Endpoints, unsigned long NumEndpoints, unsigned long IdlePeriod, RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN IdleCallbackFn, void *IdleCallbackContext, PRPC_INTERFACE_GROUP IfGroup
RpcServerInterfaceGroupCreateW;The RpcServerInterfaceGroupCreate function creates an RPC server interface group for the server application.;RPC_INTERFACE_TEMPLATEW *Interfaces, unsigned long NumIfs, RPC_ENDPOINT_TEMPLATEW *Endpoints, unsigned long NumEndpoints, unsigned long IdlePeriod, RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN IdleCallbackFn, void *IdleCallbackContext, PRPC_INTERFACE_GROUP IfGroup
RpcServerInterfaceGroupDeactivate;The RpcServerInterfaceGroupDeactivate function tells the RPC runtime to attempt to close the given interface group, optionally aborting the operation if there is outstanding client activity.;RPC_INTERFACE_GROUP IfGroup, unsigned long ForceDeactivation
RpcServerInterfaceGroupInqBindings;The RpcServerInterfaceGroupInqBindings function returns the binding handles over which remote procedure calls can be received for the given interface group.;RPC_INTERFACE_GROUP IfGroup, RPC_BINDING_VECTOR **BindingVector
RpcServerListen;The RpcServerListen function signals the RPC run-time library to listen for remote procedure calls. This function will not affect auto-listen interfaces; use RpcServerRegisterIfEx if you need that functionality.;unsigned int MinimumCallThreads, unsigned int MaxCalls, unsigned int DontWait
RpcServerRegisterAuthInfoA;The RpcServerRegisterAuthInfo function registers authentication information with the RPC run-time library.;RPC_CSTR ServerPrincName, unsigned long AuthnSvc, RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn, void *Arg
RpcServerRegisterAuthInfo;The RpcServerRegisterAuthInfo function registers authentication information with the RPC run-time library.;RPC_CSTR ServerPrincName, unsigned long AuthnSvc, RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn, void *Arg
RpcServerRegisterAuthInfoW;The RpcServerRegisterAuthInfo function registers authentication information with the RPC run-time library.;RPC_WSTR ServerPrincName, unsigned long AuthnSvc, RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn, void *Arg
RpcServerRegisterIf2;The RpcServerRegisterIf2 function registers an interface with the RPC run-time library.;RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, RPC_MGR_EPV *MgrEpv, unsigned int Flags, unsigned int MaxCalls, unsigned int MaxRpcSize, RPC_IF_CALLBACK_FN *IfCallbackFn
RpcServerRegisterIf3;The RpcServerRegisterIf3 function registers an interface with the RPC run-time library.;RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, RPC_MGR_EPV *MgrEpv, unsigned int Flags, unsigned int MaxCalls, unsigned int MaxRpcSize, RPC_IF_CALLBACK_FN *IfCallback, void *SecurityDescriptor
RpcServerRegisterIfEx;The RpcServerRegisterIfEx function registers an interface with the RPC run-time library.;RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, RPC_MGR_EPV *MgrEpv, unsigned int Flags, unsigned int MaxCalls, RPC_IF_CALLBACK_FN *IfCallback
RpcServerRegisterIf;The RpcServerRegisterIf function registers an interface with the RPC run-time library.;RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, RPC_MGR_EPV *MgrEpv
RpcServerSubscribeForNotification;Subscribes the server for RPC notifications.;RPC_BINDING_HANDLE Binding, RPC_NOTIFICATIONS Notification, RPC_NOTIFICATION_TYPES NotificationType, RPC_ASYNC_NOTIFICATION_INFO *NotificationInfo
RpcServerTestCancel;The server calls RpcServerTestCancel to test for client cancel requests.;RPC_BINDING_HANDLE BindingHandle
RpcServerUnregisterIfEx;The RpcServerUnregisterIfEx function removes an interface from the RPC run-time library registry. This function extends the functionality of the RpcServerUnregisterIf function.;RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, int RundownContextHandles
RpcServerUnregisterIf;The RpcServerUnregisterIf function removes an interface from the RPC run-time library registry.;RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, unsigned int WaitForCallsToComplete
RpcServerUnsubscribeForNotification;Unsubscribes the server from RPC notifications.;RPC_BINDING_HANDLE Binding, RPC_NOTIFICATIONS Notification, unsigned long *NotificationsQueued
RpcServerUseAllProtseqsEx;The RpcServerUseAllProtseqsEx function tells the RPC run-time library to use all supported protocol sequences for receiving remote procedure calls.;unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy
RpcServerUseAllProtseqsIfEx;The RpcServerUseAllProtseqsIfEx function tells the RPC run-time library to use all the specified protocol sequences and endpoints in the interface specification for receiving remote procedure calls.;unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy
RpcServerUseAllProtseqsIf;The RpcServerUseAllProtseqsIf function tells the RPC run-time library to use all specified protocol sequences and endpoints in the interface specification for receiving remote procedure calls.;unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor
RpcServerUseAllProtseqs;The RpcServerUseAllProtseqs function tells the RPC run-time library to use all supported protocol sequences for receiving remote procedure calls.;unsigned int MaxCalls, void *SecurityDescriptor
RpcServerUseProtseqA;The RpcServerUseProtseq function tells the RPC run-time library to use the specified protocol sequence for receiving remote procedure calls.;RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor
RpcServerUseProtseqEpA;The RpcServerUseProtseqEp function tells the RPC run-time library to use the specified protocol sequence combined with the specified endpoint for receiving remote procedure calls.;RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor
RpcServerUseProtseqEpExA;The RpcServerUseProtseqEpEx function tells the RPC run-time library to use the specified protocol sequence combined with the specified endpoint for receiving remote procedure calls.;RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor, PRPC_POLICY Policy
RpcServerUseProtseqEpEx;The RpcServerUseProtseqEpEx function tells the RPC run-time library to use the specified protocol sequence combined with the specified endpoint for receiving remote procedure calls.;RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor, PRPC_POLICY Policy
RpcServerUseProtseqEpExW;The RpcServerUseProtseqEpEx function tells the RPC run-time library to use the specified protocol sequence combined with the specified endpoint for receiving remote procedure calls.;RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor, PRPC_POLICY Policy
RpcServerUseProtseqEp;The RpcServerUseProtseqEp function tells the RPC run-time library to use the specified protocol sequence combined with the specified endpoint for receiving remote procedure calls.;RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor
RpcServerUseProtseqEpW;The RpcServerUseProtseqEp function tells the RPC run-time library to use the specified protocol sequence combined with the specified endpoint for receiving remote procedure calls.;RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor
RpcServerUseProtseqExA;The RpcServerUseProtseqEx function tells the RPC run-time library to use the specified protocol sequence for receiving remote procedure calls.;RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy
RpcServerUseProtseqEx;The RpcServerUseProtseqEx function tells the RPC run-time library to use the specified protocol sequence for receiving remote procedure calls.;RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy
RpcServerUseProtseqExW;The RpcServerUseProtseqEx function tells the RPC run-time library to use the specified protocol sequence for receiving remote procedure calls.;RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy
RpcServerUseProtseqIfA;The RpcServerUseProtseqIf function tells the RPC run-time library to use the specified protocol sequence combined with the endpoints in the interface specification for receiving remote procedure calls.;RPC_CSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor
RpcServerUseProtseqIfExA;The RpcServerUseProtseqIfEx function tells the RPC run-time library to use the specified protocol sequence combined with the endpoints in the interface specification for receiving remote procedure calls.;RPC_CSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy
RpcServerUseProtseqIfEx;The RpcServerUseProtseqIfEx function tells the RPC run-time library to use the specified protocol sequence combined with the endpoints in the interface specification for receiving remote procedure calls.;RPC_CSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy
RpcServerUseProtseqIfExW;The RpcServerUseProtseqIfEx function tells the RPC run-time library to use the specified protocol sequence combined with the endpoints in the interface specification for receiving remote procedure calls.;RPC_WSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy
RpcServerUseProtseqIf;The RpcServerUseProtseqIf function tells the RPC run-time library to use the specified protocol sequence combined with the endpoints in the interface specification for receiving remote procedure calls.;RPC_CSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor
RpcServerUseProtseqIfW;The RpcServerUseProtseqIf function tells the RPC run-time library to use the specified protocol sequence combined with the endpoints in the interface specification for receiving remote procedure calls.;RPC_WSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor
RpcServerUseProtseq;The RpcServerUseProtseq function tells the RPC run-time library to use the specified protocol sequence for receiving remote procedure calls.;RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor
RpcServerUseProtseqW;The RpcServerUseProtseq function tells the RPC run-time library to use the specified protocol sequence for receiving remote procedure calls.;RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor
RpcSmAllocate;The RpcSmAllocate function allocates memory within the RPC stub memory management function and returns a pointer to the allocated memory or NULL.;size_t Size, RPC_STATUS *pStatus
RpcSmClientFree;The RpcSmClientFree function frees memory returned from a client stub.;void *pNodeToFree
RpcSmDestroyClientContext;The RpcSmDestroyClientContext function reclaims the client memory resources for a context handle and makes the context handle NULL.;void **ContextHandle
RpcSmDisableAllocate;The RpcSmDisableAllocate function frees resources and memory within the stub memory�management environment.;
RpcSmEnableAllocate;The RpcSmEnableAllocate function establishes the stub memory�management environment.;
RpcSmFree;The RpcSmFree function releases memory allocated by RpcSmAllocate.;void *NodeToFree
RpcSmGetThreadHandle;The RpcSmGetThreadHandle function returns a thread handle, or NULL, for the stub memory�management environment.;RPC_STATUS *pStatus
RpcSmSetClientAllocFree;The RpcSmSetClientAllocFree function enables the memory allocation and release mechanisms used by the client stubs.;RPC_CLIENT_ALLOC *ClientAlloc, RPC_CLIENT_FREE *ClientFree
RpcSmSetThreadHandle;The RpcSmSetThreadHandle function sets a thread handle for the stub memory�management environment.;RPC_SS_THREAD_HANDLE Id
RpcSmSwapClientAllocFree;The RpcSmSwapClientAllocFree function exchanges the client stub's memory-allocation and memory-freeing mechanisms with those supplied by the client.;RPC_CLIENT_ALLOC *ClientAlloc, RPC_CLIENT_FREE *ClientFree, RPC_CLIENT_ALLOC **OldClientAlloc, RPC_CLIENT_FREE **OldClientFree
RpcSsAllocate;The RpcSsAllocate function allocates memory within the RPC stub memory-management function, and returns a pointer to the allocated memory or NULL.;size_t Size
RpcSsContextLockExclusive;The RpcSsContextLockExclusive function enables an application to begin using a context handle in exclusive mode.;RPC_BINDING_HANDLE ServerBindingHandle, PVOID UserContext
RpcSsContextLockShared;The RpcSsContextLockShared function enables an application to begin using a context handle in shared mode.;RPC_BINDING_HANDLE ServerBindingHandle, PVOID UserContext
RpcSsDestroyClientContext;The RpcSsDestroyClientContext function destroys a context handle no longer needed by the client, without contacting the server.;void **ContextHandle
RpcSsDisableAllocate;The RpcSsDisableAllocate function frees resources and memory within the stub memory�management environment.;
RpcSsDontSerializeContext;The RpcSsDontSerializeContext function disables run-time serialization of multiple calls dispatched to server-manager routines on the same context handle.;
RpcSsEnableAllocate;The RpcSsEnableAllocate function establishes the stub memory�management environment.;
RpcSsFree;The RpcSsFree function releases memory allocated by RpcSsAllocate.;void *NodeToFree
RpcSsGetThreadHandle;The RpcSsGetThreadHandle function returns a thread handle for the stub memory�management environment.;
RpcSsSetClientAllocFree;The RpcSsSetClientAllocFree function enables the memory allocation and release mechanisms used by the client stubs.;RPC_CLIENT_ALLOC *ClientAlloc, RPC_CLIENT_FREE *ClientFree
RpcSsSetThreadHandle;The RpcSsSetThreadHandle function sets a thread handle for the stub memory–management environment.;RPC_SS_THREAD_HANDLE Id
RpcSsSwapClientAllocFree;The RpcSsSwapClientAllocFree function exchanges the memory allocation and release mechanisms used by the client stubs with those supplied by the client.;RPC_CLIENT_ALLOC *ClientAlloc, RPC_CLIENT_FREE *ClientFree, RPC_CLIENT_ALLOC **OldClientAlloc, RPC_CLIENT_FREE **OldClientFree
RpcStringBindingComposeA;The RpcStringBindingCompose function creates a string binding handle.;RPC_CSTR ObjUuid, RPC_CSTR ProtSeq, RPC_CSTR NetworkAddr, RPC_CSTR Endpoint, RPC_CSTR Options, RPC_CSTR *StringBinding
RpcStringBindingCompose;The RpcStringBindingCompose function creates a string binding handle.;RPC_CSTR ObjUuid, RPC_CSTR ProtSeq, RPC_CSTR NetworkAddr, RPC_CSTR Endpoint, RPC_CSTR Options, RPC_CSTR *StringBinding
RpcStringBindingComposeW;The RpcStringBindingCompose function creates a string binding handle.;RPC_WSTR ObjUuid, RPC_WSTR ProtSeq, RPC_WSTR NetworkAddr, RPC_WSTR Endpoint, RPC_WSTR Options, RPC_WSTR *StringBinding
RpcStringBindingParseA;The RpcStringBindingParse function returns the object UUID part and the address parts of a string binding as separate strings.;RPC_CSTR StringBinding, RPC_CSTR *ObjUuid, RPC_CSTR *Protseq, RPC_CSTR *NetworkAddr, RPC_CSTR *Endpoint, RPC_CSTR *NetworkOptions
RpcStringBindingParse;The RpcStringBindingParse function returns the object UUID part and the address parts of a string binding as separate strings.;RPC_CSTR StringBinding, RPC_CSTR *ObjUuid, RPC_CSTR *Protseq, RPC_CSTR *NetworkAddr, RPC_CSTR *Endpoint, RPC_CSTR *NetworkOptions
RpcStringBindingParseW;The RpcStringBindingParse function returns the object UUID part and the address parts of a string binding as separate strings.;RPC_WSTR StringBinding, RPC_WSTR *ObjUuid, RPC_WSTR *Protseq, RPC_WSTR *NetworkAddr, RPC_WSTR *Endpoint, RPC_WSTR *NetworkOptions
RpcStringFreeA;The RpcStringFree function frees a character string allocated by the RPC run-time library.;RPC_CSTR *String
RpcStringFree;The RpcStringFree function frees a character string allocated by the RPC run-time library.;RPC_CSTR *String
RpcStringFreeW;The RpcStringFree function frees a character string allocated by the RPC run-time library.;RPC_WSTR *String
RpcTestCancel;The RpcTestCancel function checks for a cancel indication.;
RpcUserFree;RpcUserFree may be altered or unavailable.;handle_t AsyncHandle, void *pBuffer
RsopAccessCheckByType;The RSoPAccessCheckByType function determines whether a security descriptor grants a specified set of access rights to the client identified by an RSOPTOKEN.;PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID pPrincipalSelfSid, PRSOPTOKEN pRsopToken, DWORD dwDesiredAccessMask, POBJECT_TYPE_LIST pObjectTypeList, DWORD ObjectTypeListLength, PGENERIC_MAPPING pGenericMapping, PPRIVILEGE_SET pPrivilegeSet, LPDWORD pdwPrivilegeSetLength, LPDWORD pdwGrantedAccessMask, LPBOOL pbAccessStatus
RsopFileAccessCheck;The RSoPFileAccessCheck function determines whether a file's security descriptor grants a specified set of file access rights to the client identified by an RSOPTOKEN.;LPWSTR pszFileName, PRSOPTOKEN pRsopToken, DWORD dwDesiredAccessMask, LPDWORD pdwGrantedAccessMask, LPBOOL pbAccessStatus
RsopResetPolicySettingStatus;The RSoPResetPolicySettingStatus function unlinks the RSOP_PolicySettingStatus instance from its RSOP_PolicySetting instance.;DWORD dwFlags, IWbemServices *pServices, IWbemClassObject *pSettingInstance
RsopSetPolicySettingStatus;The RSoPSetPolicySettingStatus function creates an instance of RSOP_PolicySettingStatus and an instance of RSOP_PolicySettingLink. The function links (associates) RSOP_PolicySettingStatus to its RSOP_PolicySetting instance.;DWORD dwFlags, IWbemServices *pServices, IWbemClassObject *pSettingInstance, DWORD nInfo, POLICYSETTINGSTATUSINFO *pStatus
RtlAnsiStringToUnicodeString;Converts the specified ANSI source string into a Unicode string.;PUNICODE_STRING DestinationString, PCANSI_STRING SourceString, BOOLEAN AllocateDestinationString
RtlCharToInteger;Converts a character string to an integer.;PCSZ String, ULONG Base, PULONG Value
RtlConvertSidToUnicodeString;Converts a security identifier (SID) to its Unicode character representation.;PUNICODE_STRING UnicodeString, PSID Sid, BOOLEAN AllocateDestinationString
RtlDecryptMemory;Decrypts memory contents previously encrypted by the RtlEncryptMemory function.;PVOID Memory, ULONG MemorySize, ULONG OptionFlags
RtlEncryptMemory;Encrypts memory contents.;PVOID Memory, ULONG MemorySize, ULONG OptionFlags
RtlEthernetAddressToStringA;Converts a binary Ethernet address to a string representation of the Ethernet MAC address.;const DL_EUI48 *Addr, PSTR S
RtlEthernetAddressToStringW;Converts a binary Ethernet address to a string representation of the Ethernet MAC address.;const DL_EUI48 *Addr, PWSTR S
RtlEthernetStringToAddressA;Converts a string representation of an Ethernet MAC address to a binary format of the Ethernet address.;PCSTR S, PCSTR *Terminator, DL_EUI48 *Addr
RtlEthernetStringToAddressW;Converts a string representation of an Ethernet MAC address to a binary format of the Ethernet address.;PCWSTR S, LPCWSTR *Terminator, DL_EUI48 *Addr
RtlFreeAnsiString;Frees the string buffer allocated by RtlUnicodeStringToAnsiString.;PANSI_STRING AnsiString
RtlFreeOemString;Frees the string buffer allocated by RtlUnicodeStringToOemString.;POEM_STRING OemString
RtlFreeUnicodeString;Frees the string buffer allocated by RtlAnsiStringToUnicodeString or by RtlUpcaseUnicodeString.;PUNICODE_STRING UnicodeString
RtlGenRandom;Generates a pseudo-random number.;PVOID RandomBuffer, ULONG RandomBufferLength
RtlInitString;Initializes a counted string.;PSTRING DestinationString, PCSZ SourceString
RtlInitUnicodeString;Initializes a counted Unicode string.;PUNICODE_STRING DestinationString, PCWSTR SourceString
RtlIpv4AddressToStringA;Converts an IPv4 address to a string in Internet standard dotted-decimal format.;const in_addr *Addr, PSTR S
RtlIpv4AddressToStringExW;Converts an IPv4 address and port number to a string in Internet standard format.;const in_addr *Address, USHORT Port, PWSTR AddressString, PULONG AddressStringLength
RtlIpv4AddressToStringW;Converts an IPv4 address to a string in Internet standard dotted-decimal format.;const in_addr *Addr, PWSTR S
RtlIpv4StringToAddressA;Converts a string representation of an IPv4 address to a binary IPv4 address.;PCSTR S, BOOLEAN Strict, PCSTR *Terminator, in_addr *Addr
RtlIpv4StringToAddressExW;Converts a string representation of an IPv4 address and port number to a binary IPv4 address and port.;PCWSTR AddressString, BOOLEAN Strict, in_addr *Address, PUSHORT Port
RtlIpv4StringToAddressW;Converts a string representation of an IPv4 address to a binary IPv4 address.;PCWSTR S, BOOLEAN Strict, LPCWSTR *Terminator, in_addr *Addr
RtlIpv6AddressToStringA;Converts an IPv6 address to a string in Internet standard format.;const in6_addr *Addr, PSTR S
RtlIpv6AddressToStringExW;Converts an IPv6 address, scope ID, and port number to a string.;const in6_addr *Address, ULONG ScopeId, USHORT Port, PWSTR AddressString, PULONG AddressStringLength
RtlIpv6AddressToStringW;Converts an IPv6 address to a string in Internet standard format.;const in6_addr *Addr, PWSTR S
RtlIpv6StringToAddressA;Converts a string representation of an IPv6 address to a binary IPv6 address.;PCSTR S, PCSTR *Terminator, in6_addr *Addr
RtlIpv6StringToAddressExW;Converts a string representation of an IPv6 address, scope ID, and port number to a binary IPv6 address, scope ID, and port.;PCWSTR AddressString, in6_addr *Address, PULONG ScopeId, PUSHORT Port
RtlIpv6StringToAddressW;Converts a string representation of an IPv6 address to a binary IPv6 address.;PCWSTR S, PCWSTR *Terminator, in6_addr *Addr
RtlIsNameLegalDOS8Dot3;Determines whether or not a specified name can be used to create a file on the FAT file system.;PUNICODE_STRING Name, POEM_STRING OemName, PBOOLEAN NameContainsSpaces
RtlLocalTimeToSystemTime;Converts the specified local time to system time.;PLARGE_INTEGER LocalTime, PLARGE_INTEGER SystemTime
RtlNtStatusToDosError;Converts the specified NTSTATUS code to its equivalent system error code.;NTSTATUS Status
RtlTimeToSecondsSince1970;Converts the specified 64-bit system time to the number of seconds since the beginning of January 1, 1970.;PLARGE_INTEGER Time, PULONG ElapsedSeconds
RtlUnicodeStringToAnsiString;Converts the specified Unicode source string into an ANSI string.;PANSI_STRING DestinationString, PCUNICODE_STRING SourceString, BOOLEAN AllocateDestinationString
RtlUnicodeStringToOemString;Converts the specified Unicode source string into an OEM string. The translation is done with respect to the OEM code page (OCP).;POEM_STRING DestinationString, PCUNICODE_STRING SourceString, BOOLEAN AllocateDestinationString
RtlUnicodeToMultiByteSize;Determines how many bytes are needed to represent a Unicode string as an ANSI string.;PULONG BytesInMultiByteString, PWCH UnicodeString, ULONG BytesInUnicodeString
RtlUniform;Generates a uniform random number using D.H. Lehmer's 1948 algorithm.;PULONG Seed
SaferCloseLevel;Closes a SAFER_LEVEL_HANDLE that was opened by using the SaferIdentifyLevel function or the SaferCreateLevel function.;SAFER_LEVEL_HANDLE hLevelHandle
SaferComputeTokenFromLevel;Restricts a token using restrictions specified by a SAFER_LEVEL_HANDLE.;SAFER_LEVEL_HANDLE LevelHandle, HANDLE InAccessToken, PHANDLE OutAccessToken, DWORD dwFlags, LPVOID lpReserved
SaferCreateLevel;Opens a SAFER_LEVEL_HANDLE.;DWORD dwScopeId, DWORD dwLevelId, DWORD OpenFlags, SAFER_LEVEL_HANDLE *pLevelHandle, LPVOID lpReserved
SaferGetLevelInformation;Retrieves information about a policy level.;SAFER_LEVEL_HANDLE LevelHandle, SAFER_OBJECT_INFO_CLASS dwInfoType, LPVOID lpQueryBuffer, DWORD dwInBufferSize, LPDWORD lpdwOutBufferSize
SaferGetPolicyInformation;Gets information about a policy.;DWORD dwScopeId, SAFER_POLICY_INFO_CLASS SaferPolicyInfoClass, DWORD InfoBufferSize, PVOID InfoBuffer, PDWORD InfoBufferRetSize, LPVOID lpReserved
SaferIdentifyLevel;Retrieves information about a level.;DWORD dwNumProperties, PSAFER_CODE_PROPERTIES pCodeProperties, SAFER_LEVEL_HANDLE *pLevelHandle, LPVOID lpReserved
SaferiIsExecutableFileType;Determines whether a specified file is an executable file.;LPCWSTR szFullPathname, BOOLEAN bFromShellExecute
SaferRecordEventLogEntry;Saves messages to an event log.;SAFER_LEVEL_HANDLE hLevel, LPCWSTR szTargetPath, LPVOID lpReserved
SaferSetLevelInformation;Sets the information about a policy level.;SAFER_LEVEL_HANDLE LevelHandle, SAFER_OBJECT_INFO_CLASS dwInfoType, LPVOID lpQueryBuffer, DWORD dwInBufferSize
SaferSetPolicyInformation;Sets the global policy controls.;DWORD dwScopeId, SAFER_POLICY_INFO_CLASS SaferPolicyInfoClass, DWORD InfoBufferSize, PVOID InfoBuffer, LPVOID lpReserved
SaslAcceptSecurityContext;Wraps a standard call to the Security Support Provider Interface AcceptSecurityContext (General) function and includes creation of SASL server cookies.;PCredHandle phCredential, PCtxtHandle phContext, PSecBufferDesc pInput, unsigned long fContextReq, unsigned long TargetDataRep, PCtxtHandle phNewContext, PSecBufferDesc pOutput, unsigned long *pfContextAttr, PTimeStamp ptsExpiry
SaslEnumerateProfilesA;Lists the packages that provide a SASL interface.;LPSTR *ProfileList, ULONG *ProfileCount
SaslEnumerateProfilesW;Lists the packages that provide a SASL interface.;LPWSTR *ProfileList, ULONG *ProfileCount
SaslGetContextOption;Retrieves the specified property of the specified SASL context.;PCtxtHandle ContextHandle, ULONG Option, PVOID Value, ULONG Size, PULONG Needed
SaslGetProfilePackageA;Returns the package information for the specified package.;LPSTR ProfileName, PSecPkgInfoA *PackageInfo
SaslGetProfilePackageW;Returns the package information for the specified package.;LPWSTR ProfileName, PSecPkgInfoW *PackageInfo
SaslIdentifyPackageA;Returns the negotiate prefix that matches the specified SASL negotiation buffer.;PSecBufferDesc pInput, PSecPkgInfoA *PackageInfo
SaslIdentifyPackageW;Returns the negotiate prefix that matches the specified SASL negotiation buffer.;PSecBufferDesc pInput, PSecPkgInfoW *PackageInfo
SaslInitializeSecurityContextA;Wraps a standard call to the Security Support Provider Interface InitializeSecurityContext (General) function and processes SASL server cookies from the server.;PCredHandle phCredential, PCtxtHandle phContext, LPSTR pszTargetName, unsigned long fContextReq, unsigned long Reserved1, unsigned long TargetDataRep, PSecBufferDesc pInput, unsigned long Reserved2, PCtxtHandle phNewContext, PSecBufferDesc pOutput, unsigned long *pfContextAttr, PTimeStamp ptsExpiry
SaslInitializeSecurityContextW;Wraps a standard call to the Security Support Provider Interface InitializeSecurityContext (General) function and processes SASL server cookies from the server.;PCredHandle phCredential, PCtxtHandle phContext, LPWSTR pszTargetName, unsigned long fContextReq, unsigned long Reserved1, unsigned long TargetDataRep, PSecBufferDesc pInput, unsigned long Reserved2, PCtxtHandle phNewContext, PSecBufferDesc pOutput, unsigned long *pfContextAttr, PTimeStamp ptsExpiry
SaslSetContextOption;Sets the value of the specified property for the specified SASL context.;PCtxtHandle ContextHandle, ULONG Option, PVOID Value, ULONG Size
SatisfyNtmsOperatorRequest;The SatisfyNtmsOperatorRequest function completes the specified RSM operator request.;HANDLE hSession, LPNTMS_GUID lpRequestId
SaveCurrentMonitorSettings;Saves the current monitor settings to the display's nonvolatile storage.;HANDLE hMonitor
SaveCurrentSettings;Saves the current monitor settings to the display's nonvolatile storage.;HANDLE hMonitor
SaveDC;The SaveDC function saves the current state of the specified device context (DC) by copying data describing selected objects and graphic modes (such as the bitmap, brush, palette, font, pen, region, drawing mode, and mapping mode) to a context stack.;HDC hdc
Save;The Save method causes the snap-in extension to return information about the data that needs to be saved. The caller is responsible for saving the data.;LPTSTR lpTemplateName, SCESVC_HANDLE *scesvcHandle, PVOID *ppvData, PBOOL pbOverwriteAll
Save;The Save method saves the specified registry policy settings to disk and updates the revision number of the GPO.;BOOL bMachine, BOOL bAdd, GUID *pGuidExtension, GUID *pGuid
ScaleViewportExtEx;The ScaleViewportExtEx function modifies the viewport for a device context using the ratios formed by the specified multiplicands and divisors.;HDC hdc, int xn, int dx, int yn, int yd, LPSIZE lpsz
ScaleWindowExtEx;The ScaleWindowExtEx function modifies the window for a device context using the ratios formed by the specified multiplicands and divisors.;HDC hdc, int xn, int xd, int yn, int yd, LPSIZE lpsz
SCardAccessStartedEvent;Returns an event handle when an event signals that the smart card resource manager is started.;
SCardAddReaderToGroupA;Adds a reader to a reader group.;SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szGroupName
SCardAddReaderToGroupW;Adds a reader to a reader group.;SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szGroupName
SCardAudit;Writes event messages to the Windows application log Microsoft-Windows-SmartCard-Audit/Authentication.;SCARDCONTEXT hContext, DWORD dwEvent
SCardBeginTransaction;Starts a transaction.;SCARDHANDLE hCard
SCardCancel;Terminates all outstanding actions within a specific resource manager context.;SCARDCONTEXT hContext
SCardConnectA;Establishes a connection (using a specific resource manager context) between the calling application and a smart card contained by a specific reader. If no card exists in the specified reader, an error is returned.;SCARDCONTEXT hContext, LPCSTR szReader, DWORD dwShareMode, DWORD dwPreferredProtocols, LPSCARDHANDLE phCard, LPDWORD pdwActiveProtocol
SCardConnectW;Establishes a connection (using a specific resource manager context) between the calling application and a smart card contained by a specific reader. If no card exists in the specified reader, an error is returned.;SCARDCONTEXT hContext, LPCWSTR szReader, DWORD dwShareMode, DWORD dwPreferredProtocols, LPSCARDHANDLE phCard, LPDWORD pdwActiveProtocol
SCardControl;Gives you direct control of the reader. You can call it any time after a successful call to SCardConnect and before a successful call to SCardDisconnect.;SCARDHANDLE hCard, DWORD dwControlCode, LPCVOID lpInBuffer, DWORD cbInBufferSize, LPVOID lpOutBuffer, DWORD cbOutBufferSize, LPDWORD lpBytesReturned
SCardDisconnect;Terminates a connection previously opened between the calling application and a smart card in the target reader.;SCARDHANDLE hCard, DWORD dwDisposition
SCardEndTransaction;Completes a previously declared transaction, allowing other applications to resume interactions with the card.;SCARDHANDLE hCard, DWORD dwDisposition
SCardEstablishContext;Establishes the resource manager context (the scope) within which database operations are performed.;DWORD dwScope, LPCVOID pvReserved1, LPCVOID pvReserved2, LPSCARDCONTEXT phContext
SCardForgetCardTypeA;Removes an introduced smart card from the smart card subsystem.;SCARDCONTEXT hContext, LPCSTR szCardName
SCardForgetCardTypeW;Removes an introduced smart card from the smart card subsystem.;SCARDCONTEXT hContext, LPCWSTR szCardName
SCardForgetReaderA;Removes a previously introduced reader from control by the smart card subsystem. It is removed from the smart card database, including from any reader group that it may have been added to.;SCARDCONTEXT hContext, LPCSTR szReaderName
SCardForgetReaderGroupA;Removes a previously introduced smart card reader group from the smart card subsystem. Although this function automatically clears all readers from the group, it does not affect the existence of the individual readers in the database.;SCARDCONTEXT hContext, LPCSTR szGroupName
SCardForgetReaderGroupW;Removes a previously introduced smart card reader group from the smart card subsystem. Although this function automatically clears all readers from the group, it does not affect the existence of the individual readers in the database.;SCARDCONTEXT hContext, LPCWSTR szGroupName
SCardForgetReaderW;Removes a previously introduced reader from control by the smart card subsystem. It is removed from the smart card database, including from any reader group that it may have been added to.;SCARDCONTEXT hContext, LPCWSTR szReaderName
SCardFreeMemory;Releases memory that has been returned from the resource manager using the SCARD_AUTOALLOCATE length designator.;SCARDCONTEXT hContext, LPCVOID pvMem
SCardGetAttrib;Retrieves the current reader attributes for the given handle. It does not affect the state of the reader, driver, or card.;SCARDHANDLE hCard, DWORD dwAttrId, LPBYTE pbAttr, LPDWORD pcbAttrLen
SCardGetCardTypeProviderNameA;Returns the name of the module (dynamic link library) that contains the provider for a given card name and provider type.;SCARDCONTEXT hContext, LPCSTR szCardName, DWORD dwProviderId, CHAR *szProvider, LPDWORD pcchProvider
SCardGetCardTypeProviderNameW;Returns the name of the module (dynamic link library) that contains the provider for a given card name and provider type.;SCARDCONTEXT hContext, LPCWSTR szCardName, DWORD dwProviderId, WCHAR *szProvider, LPDWORD pcchProvider
SCardGetDeviceTypeIdA;Gets the device type identifier of the card reader for the given reader name. This function does not affect the state of the reader.;SCARDCONTEXT hContext, LPCSTR szReaderName, LPDWORD pdwDeviceTypeId
SCardGetDeviceTypeIdW;Gets the device type identifier of the card reader for the given reader name. This function does not affect the state of the reader.;SCARDCONTEXT hContext, LPCWSTR szReaderName, LPDWORD pdwDeviceTypeId
SCardGetProviderIdA;Returns the identifier (GUID) of the primary service provider for a given card.;SCARDCONTEXT hContext, LPCSTR szCard, LPGUID pguidProviderId
SCardGetProviderIdW;Returns the identifier (GUID) of the primary service provider for a given card.;SCARDCONTEXT hContext, LPCWSTR szCard, LPGUID pguidProviderId
SCardGetReaderDeviceInstanceIdA;Gets the device instance identifier of the card reader for the given reader name. This function does not affect the state of the reader.;SCARDCONTEXT hContext, LPCSTR szReaderName, LPSTR szDeviceInstanceId, LPDWORD pcchDeviceInstanceId
SCardGetReaderDeviceInstanceIdW;Gets the device instance identifier of the card reader for the given reader name. This function does not affect the state of the reader.;SCARDCONTEXT hContext, LPCWSTR szReaderName, LPWSTR szDeviceInstanceId, LPDWORD pcchDeviceInstanceId
SCardGetReaderIconA;Gets an icon of the smart card reader for a given reader's name.;SCARDCONTEXT hContext, LPCSTR szReaderName, LPBYTE pbIcon, LPDWORD pcbIcon
SCardGetReaderIconW;Gets an icon of the smart card reader for a given reader's name.;SCARDCONTEXT hContext, LPCWSTR szReaderName, LPBYTE pbIcon, LPDWORD pcbIcon
SCardGetStatusChangeA;Blocks execution until the current availability of the cards in a specific set of readers changes.;SCARDCONTEXT hContext, DWORD dwTimeout, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders
SCardGetStatusChangeW;Blocks execution until the current availability of the cards in a specific set of readers changes.;SCARDCONTEXT hContext, DWORD dwTimeout, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders
SCardGetTransmitCount;Retrieves the number of transmit operations that have completed since the specified card reader was inserted.;SCARDHANDLE hCard, LPDWORD pcTransmitCount
SCardIntroduceCardTypeA;Introduces a smart card to the smart card subsystem (for the active user) by adding it to the smart card database.;SCARDCONTEXT hContext, LPCSTR szCardName, LPCGUID pguidPrimaryProvider, LPCGUID rgguidInterfaces, DWORD dwInterfaceCount, LPCBYTE pbAtr, LPCBYTE pbAtrMask, DWORD cbAtrLen
SCardIntroduceCardTypeW;Introduces a smart card to the smart card subsystem (for the active user) by adding it to the smart card database.;SCARDCONTEXT hContext, LPCWSTR szCardName, LPCGUID pguidPrimaryProvider, LPCGUID rgguidInterfaces, DWORD dwInterfaceCount, LPCBYTE pbAtr, LPCBYTE pbAtrMask, DWORD cbAtrLen
SCardIntroduceReaderA;Introduces a new name for an existing smart card reader.;SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szDeviceName
SCardIntroduceReaderGroupA;Introduces a reader group to the smart card subsystem. However, the reader group is not created until the group is specified when adding a reader to the smart card database.;SCARDCONTEXT hContext, LPCSTR szGroupName
SCardIntroduceReaderGroupW;Introduces a reader group to the smart card subsystem. However, the reader group is not created until the group is specified when adding a reader to the smart card database.;SCARDCONTEXT hContext, LPCWSTR szGroupName
SCardIntroduceReaderW;Introduces a new name for an existing smart card reader.;SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szDeviceName
SCardIsValidContext;Determines whether a smart card context handle is valid.;SCARDCONTEXT hContext
SCardListCardsA;Searches the smart card database and provides a list of named cards previously introduced to the system by the user.;SCARDCONTEXT hContext, LPCBYTE pbAtr, LPCGUID rgquidInterfaces, DWORD cguidInterfaceCount, CHAR *mszCards, LPDWORD pcchCards
SCardListCardsW;Searches the smart card database and provides a list of named cards previously introduced to the system by the user.;SCARDCONTEXT hContext, LPCBYTE pbAtr, LPCGUID rgquidInterfaces, DWORD cguidInterfaceCount, WCHAR *mszCards, LPDWORD pcchCards
SCardListInterfacesA;Provides a list of interfaces supplied by a given card.;SCARDCONTEXT hContext, LPCSTR szCard, LPGUID pguidInterfaces, LPDWORD pcguidInterfaces
SCardListInterfacesW;Provides a list of interfaces supplied by a given card.;SCARDCONTEXT hContext, LPCWSTR szCard, LPGUID pguidInterfaces, LPDWORD pcguidInterfaces
SCardListReaderGroupsA;Provides the list of reader groups that have previously been introduced to the system.;SCARDCONTEXT hContext, LPSTR mszGroups, LPDWORD pcchGroups
SCardListReaderGroupsW;Provides the list of reader groups that have previously been introduced to the system.;SCARDCONTEXT hContext, LPWSTR mszGroups, LPDWORD pcchGroups
SCardListReadersA;Provides the list of readers within a set of named reader groups, eliminating duplicates.;SCARDCONTEXT hContext, LPCSTR mszGroups, LPSTR mszReaders, LPDWORD pcchReaders
SCardListReadersWithDeviceInstanceIdA;Gets the list of readers that have provided a device instance identifier. This function does not affect the state of the reader.;SCARDCONTEXT hContext, LPCSTR szDeviceInstanceId, LPSTR mszReaders, LPDWORD pcchReaders
SCardListReadersWithDeviceInstanceIdW;Gets the list of readers that have provided a device instance identifier. This function does not affect the state of the reader.;SCARDCONTEXT hContext, LPCWSTR szDeviceInstanceId, LPWSTR mszReaders, LPDWORD pcchReaders
SCardListReadersW;Provides the list of readers within a set of named reader groups, eliminating duplicates.;SCARDCONTEXT hContext, LPCWSTR mszGroups, LPWSTR mszReaders, LPDWORD pcchReaders
SCardLocateCardsA;Searches the readers listed in the rgReaderStates parameter for a card with an ATR string that matches one of the card names specified in mszCards, returning immediately with the result.;SCARDCONTEXT hContext, LPCSTR mszCards, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders
SCardLocateCardsByATRA;Searches the readers listed in the rgReaderStates parameter for a card with a name that matches one of the card names contained in one of the SCARD_ATRMASK structures specified by the rgAtrMasks parameter.;SCARDCONTEXT hContext, LPSCARD_ATRMASK rgAtrMasks, DWORD cAtrs, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders
SCardLocateCardsByATRW;Searches the readers listed in the rgReaderStates parameter for a card with a name that matches one of the card names contained in one of the SCARD_ATRMASK structures specified by the rgAtrMasks parameter.;SCARDCONTEXT hContext, LPSCARD_ATRMASK rgAtrMasks, DWORD cAtrs, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders
SCardLocateCardsW;Searches the readers listed in the rgReaderStates parameter for a card with an ATR string that matches one of the card names specified in mszCards, returning immediately with the result.;SCARDCONTEXT hContext, LPCWSTR mszCards, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders
SCardReadCacheA;Retrieves the value portion of a name-value pair from the global cache maintained by the Smart Card Resource Manager.;SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPSTR LookupName, PBYTE Data, DWORD *DataLen
SCardReadCacheW;Retrieves the value portion of a name-value pair from the global cache maintained by the Smart Card Resource Manager.;SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPWSTR LookupName, PBYTE Data, DWORD *DataLen
SCardReconnect;Reestablishes an existing connection between the calling application and a smart card.;SCARDHANDLE hCard, DWORD dwShareMode, DWORD dwPreferredProtocols, DWORD dwInitialization, LPDWORD pdwActiveProtocol
SCardReleaseContext;Closes an established resource manager context, freeing any resources allocated under that context, including SCARDHANDLE objects and memory allocated using the SCARD_AUTOALLOCATE length designator.;SCARDCONTEXT hContext
SCardReleaseStartedEvent;Decrements the reference count for a handle acquired by a previous call to the SCardAccessStartedEvent function.;
SCardRemoveReaderFromGroupA;Removes a reader from an existing reader group. This function has no effect on the reader.;SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szGroupName
SCardRemoveReaderFromGroupW;Removes a reader from an existing reader group. This function has no effect on the reader.;SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szGroupName
SCardSetAttrib;Sets the given reader attribute for the given handle.;SCARDHANDLE hCard, DWORD dwAttrId, LPCBYTE pbAttr, DWORD cbAttrLen
SCardSetCardTypeProviderNameA;Specifies the name of the module (dynamic link library) containing the provider for a given card name and provider type.;SCARDCONTEXT hContext, LPCSTR szCardName, DWORD dwProviderId, LPCSTR szProvider
SCardSetCardTypeProviderNameW;Specifies the name of the module (dynamic link library) containing the provider for a given card name and provider type.;SCARDCONTEXT hContext, LPCWSTR szCardName, DWORD dwProviderId, LPCWSTR szProvider
SCardStatusA;Provides the current status of a smart card in a reader.;SCARDHANDLE hCard, LPSTR mszReaderNames, LPDWORD pcchReaderLen, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen
SCardStatusW;Provides the current status of a smart card in a reader.;SCARDHANDLE hCard, LPWSTR mszReaderNames, LPDWORD pcchReaderLen, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen
SCardTransmit;Sends a service request to the smart card and expects to receive data back from the card.;SCARDHANDLE hCard, LPCSCARD_IO_REQUEST pioSendPci, LPCBYTE pbSendBuffer, DWORD cbSendLength, LPSCARD_IO_REQUEST pioRecvPci, LPBYTE pbRecvBuffer, LPDWORD pcbRecvLength
SCardUIDlgSelectCardA;Displays the smart card Select Card dialog box.;LPOPENCARDNAMEA_EX Arg1
SCardUIDlgSelectCardW;Displays the smart card Select Card dialog box.;LPOPENCARDNAMEW_EX Arg1
SCardWriteCacheA;Writes a name-value pair from a smart card to the global cache maintained by the Smart Card Resource Manager.;SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPSTR LookupName, PBYTE Data, DWORD DataLen
SCardWriteCacheW;Writes a name-value pair from a smart card to the global cache maintained by the Smart Card Resource Manager.;SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPWSTR LookupName, PBYTE Data, DWORD DataLen
ScopeExists;Indicates whether the specified scope exists in this IAzApplication3 object.;BSTR bstrScopeName, VARIANT_BOOL *pbExist
ScreenToClient;The ScreenToClient function converts the screen coordinates of a specified point on the screen to client-area coordinates.;HWND hWnd, LPPOINT lpPoint
ScrollDC;The ScrollDC function scrolls a rectangle of bits horizontally and vertically.;HDC hDC, int dx, int dy, const RECT *lprcScroll, const RECT *lprcClip, HRGN hrgnUpdate, LPRECT lprcUpdate
ScrollWindowEx;The ScrollWindowEx function scrolls the contents of the specified window's client area.;HWND hWnd, int dx, int dy, const RECT *prcScroll, const RECT *prcClip, HRGN hrgnUpdate, LPRECT prcUpdate, UINT flags
ScrollWindow;The ScrollWindow function scrolls the contents of the specified window's client area.;HWND hWnd, int XAmount, int YAmount, const RECT *lpRect, const RECT *lpClipRect
SecurityDescriptorToBinarySD;Converts an IADsSecurityDescriptor object to the binary security descriptor format.;VARIANT vVarSecDes, PSECURITY_DESCRIPTOR *ppSecurityDescriptor, PDWORD pdwSDLength, LPCWSTR pszServerName, LPCWSTR userName, LPCWSTR passWord, DWORD dwFlags
SelectClipPath;The SelectClipPath function selects the current path as a clipping region for a device context, combining the new region with any existing clipping region using the specified mode.;HDC hdc, int mode
SelectClipRgn;The SelectClipRgn function selects a region as the current clipping region for the specified device context.;HDC hdc, HRGN hrgn
SelectObject;The SelectObject function selects an object into the specified device context (DC). The new object replaces the previous object of the same type.;HDC hdc, HGDIOBJ h
SelectPalette;The SelectPalette function selects the specified logical palette into a device context.;HDC hdc, HPALETTE hPal, BOOL bForceBkgd
select;The select function determines the status of one or more sockets, waiting if necessary, to perform synchronous I/O.;int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, const timeval *timeout
SendARP;The SendARP function sends an Address Resolution Protocol (ARP) request to obtain the physical address that corresponds to the specified destination IPv4 address.;IPAddr DestIP, IPAddr SrcIP, PVOID pMacAddr, PULONG PhyAddrLen
SENDASYNCPROC;An application-defined callback function used with the SendMessageCallback function.;HWND Arg1, UINT Arg2, ULONG_PTR Arg3, LRESULT Arg4 ) {...}
SendDlgItemMessageA;Sends a message to the specified control in a dialog box.;HWND hDlg, int nIDDlgItem, UINT Msg, WPARAM wParam, LPARAM lParam
SendDlgItemMessageW;Sends a message to the specified control in a dialog box.;HWND hDlg, int nIDDlgItem, UINT Msg, WPARAM wParam, LPARAM lParam
SendDriverMessage;Sends the specified message to the installable driver.;HDRVR hDriver, UINT message, LPARAM lParam1, LPARAM lParam2
SendInput;Synthesizes keystrokes, mouse motions, and button clicks.;UINT cInputs, LPINPUT pInputs, int cbSize
SendMessageA;Sends the specified message to a window or windows. The SendMessage function calls the window procedure for the specified window and does not return until the window procedure has processed the message.;HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam
SendMessageCallbackA;Sends the specified message to a window or windows.;HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, SENDASYNCPROC lpResultCallBack, ULONG_PTR dwData
SendMessageCallbackW;Sends the specified message to a window or windows.;HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, SENDASYNCPROC lpResultCallBack, ULONG_PTR dwData
SendMessage;Sends the specified message to a window or windows. The SendMessage function calls the window procedure for the specified window and does not return until the window procedure has processed the message.;HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam
SendMessageTimeoutA;Sends the specified message to one or more windows.;HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, UINT fuFlags, UINT uTimeout, PDWORD_PTR lpdwResult
SendMessageTimeoutW;Sends the specified message to one or more windows.;HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, UINT fuFlags, UINT uTimeout, PDWORD_PTR lpdwResult
SendMessageW;Sends the specified message to a window or windows. The SendMessage function calls the window procedure for the specified window and does not return until the window procedure has processed the message.;HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam
SendNotifyMessageA;Sends the specified message to a window or windows.;HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam
SendNotifyMessageW;Sends the specified message to a window or windows.;HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam
SendSAS;Simulates a secure attention sequence (SAS).;BOOL AsUser
send;Sends data on a connected socket.;SOCKET s, const char *buf, int len, int flags
sendto;The sendto function sends data to a specific destination.;SOCKET s, const char *buf, int len, int flags, const sockaddr *to, int tolen
SetAbortProc;The SetAbortProc function sets the application-defined abort function that allows a print job to be canceled during spooling.;HDC hdc, ABORTPROC proc
SetAccountInformation;Sets the user account information used by the IIS Network Device Enrollment Service (NDES) extension to perform enrollment on behalf of network devices.;const BSTR bstrUserName, const BSTR bstrPassword
SetAclInformation;Sets information about an access control list (ACL).;PACL pAcl, LPVOID pAclInformation, DWORD nAclInformationLength, ACL_INFORMATION_CLASS dwAclInformationClass
SetActiveWindow;Activates a window. The window must be attached to the calling thread's message queue.;HWND hWnd
SetApplicationPoolCredentials;Specifies user account information for the application pool in which the Certificate Enrollment Web Service (CES) runs.;const BSTR bstrUsername, const BSTR bstrPassword
SetArcDirection;The SetArcDirection sets the drawing direction to be used for arc and rectangle functions.;HDC hdc, int dir
SetBitmapBits;The SetBitmapBits function sets the bits of color data for a bitmap to the specified values.;HBITMAP hbm, DWORD cb, const VOID *pvBits
SetBitmapDimensionEx;The SetBitmapDimensionEx function assigns preferred dimensions to a bitmap. These dimensions can be used by applications; however, they are not used by the system.;HBITMAP hbm, int w, int h, LPSIZE lpsz
SetBkColor;The SetBkColor function sets the current background color to the specified color value, or to the nearest physical color if the device cannot represent the specified color value.;HDC hdc, COLORREF color
SetBkMode;The SetBkMode function sets the background mix mode of the specified device context. The background mix mode is used with text, hatched brushes, and pen styles that are not solid lines.;HDC hdc, int mode
SetBoundsRect;The SetBoundsRect function controls the accumulation of bounding rectangle information for the specified device context.;HDC hdc, const RECT *lprect, UINT flags
SetBrushOrgEx;The SetBrushOrgEx function sets the brush origin that GDI assigns to the next brush an application selects into the specified device context.;HDC hdc, int x, int y, LPPOINT lppt
SetCACMode;Specifies character Autocomplete mode for character or word recognition.You cannot turn off character Autocomplete after it is set.;HRECOCONTEXT hrc, int iMode
SetCADistinguishedName;Sets a certification authority (CA) common name and an optional distinguished name suffix.;const BSTR bstrCADN, VARIANT_BOOL bIgnoreUnicode, VARIANT_BOOL bOverwriteExistingKey, VARIANT_BOOL bOverwriteExistingCAInDS
SetCalendarInfoA;Sets an item of locale information for a calendar. For more information, see Date and Calendar.;LCID Locale, CALID Calendar, CALTYPE CalType, LPCSTR lpCalData
SetCalendarInfoW;Sets an item of locale information for a calendar. For more information, see Date and Calendar.;LCID Locale, CALID Calendar, CALTYPE CalType, LPCWSTR lpCalData
SetCAProperty;Sets a property value for the certification authority (CA).;const BSTR strConfig, LONG PropId, LONG PropIndex, LONG PropType, VARIANT *pvarPropertyValue
SetCapture;Sets the mouse capture to the specified window belonging to the current thread.;HWND hWnd
SetCaretBlinkTime;Sets the caret blink time to the specified number of milliseconds. The blink time is the elapsed time, in milliseconds, required to invert the caret's pixels.;UINT uMSeconds
SetCaretPos;Moves the caret to the specified coordinates. If the window that owns the caret was created with the CS_OWNDC class style, then the specified coordinates are subject to the mapping mode of the device context associated with that window.;int X, int Y
SetCASetupProperty;Sets a property value for a certification authority (CA) configuration.;CASetupProperty propertyId, VARIANT *pPropertyValue
SetCertificateExtension;Adds a new extension to the certificate.;const BSTR strExtensionName, LONG Type, LONG ExtFlags, const VARIANT *pvarValue
SetCertificateExtension;Adds a new extension to the certificate issued in response to a certificate request. This method was first defined by the ICertAdmin interface.;const BSTR strConfig, LONG RequestId, const BSTR strExtensionName, LONG Type, LONG Flags, const VARIANT *pvarValue
SetCertificateProperty;To set a property associated with a certificate.;const BSTR strPropertyName, LONG PropertyType, const VARIANT *pvarPropertyValue
SetClassLongA;Replaces the specified 32-bit (long) value at the specified offset into the extra class memory or the WNDCLASSEX structure for the class to which the specified window belongs.;HWND hWnd, int nIndex, LONG dwNewLong
SetClassLongPtrA;Replaces the specified value at the specified offset in the extra class memory or the WNDCLASSEX structure for the class to which the specified window belongs.;HWND hWnd, int nIndex, LONG_PTR dwNewLong
SetClassLongPtrW;Replaces the specified value at the specified offset in the extra class memory or the WNDCLASSEX structure for the class to which the specified window belongs.;HWND hWnd, int nIndex, LONG_PTR dwNewLong
SetClassLongW;Replaces the specified 32-bit (long) value at the specified offset into the extra class memory or the WNDCLASSEX structure for the class to which the specified window belongs.;HWND hWnd, int nIndex, LONG dwNewLong
SetClassWord;Replaces the 16-bit (WORD) value at the specified offset into the extra class memory for the window class to which the specified window belongs.;HWND hWnd, int nIndex, WORD wNewWord
SetClipboardData;Places data on the clipboard in a specified clipboard format.;UINT uFormat, HANDLE hMem
SetClipboardViewer;Adds the specified window to the chain of clipboard viewers. Clipboard viewer windows receive a WM_DRAWCLIPBOARD message whenever the content of the clipboard changes. This function is used for backward compatibility with earlier versions of Windows.;HWND hWndNewViewer
SetCoalescableTimer;Creates a timer with the specified time-out value and coalescing tolerance delay.;HWND hWnd, UINT_PTR nIDEvent, UINT uElapse, TIMERPROC lpTimerFunc, ULONG uToleranceDelay
SetColorAdjustment;The SetColorAdjustment function sets the color adjustment values for a device context (DC) using the specified values.;HDC hdc, const COLORADJUSTMENT *lpca
SetColorSpace;The SetColorSpace function defines the input color space for a given device context.;HDC hdc, HCOLORSPACE hcs
SetCommBreak;Suspends character transmission for a specified communications device and places the transmission line in a break state until the ClearCommBreak function is called.;HANDLE hFile
SetCommConfig;Sets the current configuration of a communications device.;HANDLE hCommDev, LPCOMMCONFIG lpCC, DWORD dwSize
SetCommMask;Specifies a set of events to be monitored for a communications device.;HANDLE hFile, DWORD dwEvtMask
SetCommState;Configures a communications device according to the specifications in a device-control block (a DCB structure). The function reinitializes all hardware and control settings, but it does not empty output or input queues.;HANDLE hFile, LPDCB lpDCB
SetCommTimeouts;Sets the time-out parameters for all read and write operations on a specified communications device.;HANDLE hFile, LPCOMMTIMEOUTS lpCommTimeouts
SetCompressorInformation;Sets information in a compressor for a particular compression algorithm.;COMPRESSOR_HANDLE CompressorHandle, COMPRESS_INFORMATION_CLASS CompressInformationClass, LPCVOID CompressInformation, SIZE_T CompressInformationSize
SetComputerNameA;Sets a new NetBIOS name for the local computer. The name is stored in the registry and the name change takes effect the next time the user restarts the computer.;LPCSTR lpComputerName
SetComputerNameExA;Sets a new NetBIOS or DNS name for the local computer.;COMPUTER_NAME_FORMAT NameType, LPCSTR lpBuffer
SetComputerNameExW;Sets a new NetBIOS or DNS name for the local computer.;COMPUTER_NAME_FORMAT NameType, LPCWSTR lpBuffer
SetComputerNameW;Sets a new NetBIOS name for the local computer. The name is stored in the registry and the name change takes effect the next time the user restarts the computer.;LPCWSTR lpComputerName
SetConfigEntry;Sets configuration information for a certification authority (CA).;const BSTR strConfig, const BSTR strNodePath, const BSTR strEntryName, VARIANT *pvarEntry
SetConfiguration;Updates a responder service with configuration changes.;const BSTR bstrServerName, VARIANT_BOOL bForce
SetContextAttributesA;Enables a transport application to set attributes of a security context for a security package. This function is supported only by the Schannel security package.;PCtxtHandle phContext, unsigned long ulAttribute, void *pBuffer, unsigned long cbBuffer
SetContextAttributesW;Enables a transport application to set attributes of a security context for a security package. This function is supported only by the Schannel security package.;PCtxtHandle phContext, unsigned long ulAttribute, void *pBuffer, unsigned long cbBuffer
SetContext;Causes the current instantiation of the interface to operate on the request referenced by Context.;LONG Context
SetContextPropertyValue;Adds a property to the recognizer context.If a property already exists, its value is modified.;HRECOCONTEXT hrc, GUID *pGuid, ULONG cbSize, BYTE *pProperty
SetContext;Specifies the request to be used as the context for subsequent calls to Certificate Services.;LONG Context
SetCredentialsAttributesA;Sets the attributes of a credential, such as the name associated with the credential.;PCredHandle phCredential, unsigned long ulAttribute, void *pBuffer, unsigned long cbBuffer
SetCredentialsAttributesW;Sets the attributes of a credential, such as the name associated with the credential.;PCredHandle phCredential, unsigned long ulAttribute, void *pBuffer, unsigned long cbBuffer
SetCredential;Sets the credential used to contact the certificate enrollment policy (CEP) server.;LONG hWndParent, X509EnrollmentAuthFlags flag, BSTR strCredential, BSTR strPassword
SetCredential;Sets the credential used to contact the Certificate Enrollment Web Service.;LONG hWnd, X509EnrollmentAuthFlags AuthType, BSTR strCredential, BSTR strPassword
SetCriticalSectionSpinCount;Sets the spin count for the specified critical section.;LPCRITICAL_SECTION lpCriticalSection, DWORD dwSpinCount
SetCurrentDirectory;Changes the current directory for the current process.;LPCTSTR lpPathName
SetCurrentThreadCompartmentId;Reserved for future use. Do not use this function.;NET_IF_COMPARTMENT_ID CompartmentId
SetCursorPos;Moves the cursor to the specified screen coordinates.;int X, int Y
SetCursor;Sets the cursor shape.;HCURSOR hCursor
SetDatabaseInformation;Sets the database related information for the certification authority (CA) role.;const BSTR bstrDBDirectory, const BSTR bstrLogDirectory, const BSTR bstrSharedFolder, VARIANT_BOOL bForceOverwrite
SetDCBrushColor;SetDCBrushColor function sets the current device context (DC) brush color to the specified color value. If the device cannot represent the specified color value, the color is set to the nearest physical color.;HDC hdc, COLORREF color
SetDCPenColor;SetDCPenColor function sets the current device context (DC) pen color to the specified color value. If the device cannot represent the specified color value, the color is set to the nearest physical color.;HDC hdc, COLORREF color
SetDecompressorInformation;Sets information in a decompressor for a particular compression algorithm.;DECOMPRESSOR_HANDLE DecompressorHandle, COMPRESS_INFORMATION_CLASS CompressInformationClass, LPCVOID CompressInformation, SIZE_T CompressInformationSize
SetDefaultCommConfigA;Sets the default configuration for a communications device.;LPCSTR lpszName, LPCOMMCONFIG lpCC, DWORD dwSize
SetDefaultCommConfigW;Sets the default configuration for a communications device.;LPCWSTR lpszName, LPCOMMCONFIG lpCC, DWORD dwSize
SetDefaultDllDirectories;Specifies a default set of directories to search when the calling process loads a DLL. This search path is used when LoadLibraryEx is called with no LOAD_LIBRARY_SEARCH flags.;DWORD DirectoryFlags
SetDefaultValues;Specifies a default hashing algorithm used to create a digest of the certificate request prior to signing.;
SetDeviceGammaRamp;The SetDeviceGammaRamp function sets the gamma ramp on direct color display boards having drivers that support downloadable gamma ramps in hardware.;HDC hdc, LPVOID lpRamp
SetDialogControlDpiChangeBehavior;Overrides the default per-monitor DPI scaling behavior of a child window in a dialog.;HWND hWnd, DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS mask, DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS values
SetDialogDpiChangeBehavior;Dialogs in Per-Monitor v2 contexts are automatically DPI scaled. This method lets you customize their DPI change behavior.;HWND hDlg, DIALOG_DPI_CHANGE_BEHAVIORS mask, DIALOG_DPI_CHANGE_BEHAVIORS values
SetDIBColorTable;The SetDIBColorTable function sets RGB (red, green, blue) color values in a range of entries in the color table of the DIB that is currently selected into a specified device context.;HDC hdc, UINT iStart, UINT cEntries, const RGBQUAD *prgbq
SetDIBits;The SetDIBits function sets the pixels in a compatible bitmap (DDB) using the color data found in the specified DIB.;HDC hdc, HBITMAP hbm, UINT start, UINT cLines, const VOID *lpBits, const BITMAPINFO *lpbmi, UINT ColorUse
SetDIBitsToDevice;The SetDIBitsToDevice function sets the pixels in the specified rectangle on the device that is associated with the destination device context using color data from a DIB, JPEG, or PNG image.;HDC hdc, int xDest, int yDest, DWORD w, DWORD h, int xSrc, int ySrc, UINT StartScan, UINT cLines, const VOID *lpvBits, const BITMAPINFO *lpbmi, UINT ColorUse
SetDisplayAutoRotationPreferences;Sets the screen auto-rotation preferences for the current process.;ORIENTATION_PREFERENCE orientation
SetDisplayConfig;The SetDisplayConfig function modifies the display topology, source, and target modes by exclusively enabling the specified paths in the current session.;UINT32 numPathArrayElements, DISPLAYCONFIG_PATH_INFO *pathArray, UINT32 numModeInfoArrayElements, DISPLAYCONFIG_MODE_INFO *modeInfoArray, UINT32 flags
SetDisplayName;The SetDisplayName method sets the display name for the GPO.;LPOLESTR pszName
SetDlgItemInt;Sets the text of a control in a dialog box to the string representation of a specified integer value.;HWND hDlg, int nIDDlgItem, UINT uValue, BOOL bSigned
SetDlgItemTextA;Sets the title or text of a control in a dialog box.;HWND hDlg, int nIDDlgItem, LPCSTR lpString
SetDlgItemTextW;Sets the title or text of a control in a dialog box.;HWND hDlg, int nIDDlgItem, LPCWSTR lpString
SetDllDirectoryA;Adds a directory to the search path used to locate DLLs for the application.;LPCSTR lpPathName
SetDllDirectoryW;Adds a directory to the search path used to locate DLLs for the application.;LPCWSTR lpPathName
SetDoubleClickTime;Sets the double-click time for the mouse.;UINT Arg1
SetDynamicTimeZoneInformation;Sets the current time zone and dynamic daylight saving time settings. These settings control translations from Coordinated Universal Time (UTC) to local time.;const DYNAMIC_TIME_ZONE_INFORMATION *lpTimeZoneInformation
SetEnabledUnicodeRanges;Enables one or more Unicode point ranges on the context.;HRECOCONTEXT hrc, ULONG cRanges, CHARACTER_RANGE *pcr
SetEndOfFile;Sets the physical file size for the specified file to the current position of the file pointer.;HANDLE hFile
SetEnhMetaFileBits;The SetEnhMetaFileBits function creates a memory-based enhanced-format metafile from the specified data.;UINT nSize, const BYTE *pb
SetEntriesInAclA;Creates a new access control list (ACL) by merging new access control or audit control information into an existing ACL structure.;ULONG cCountOfExplicitEntries, PEXPLICIT_ACCESS_A pListOfExplicitEntries, PACL OldAcl, PACL *NewAcl
SetEntriesInAclW;Creates a new access control list (ACL) by merging new access control or audit control information into an existing ACL structure.;ULONG cCountOfExplicitEntries, PEXPLICIT_ACCESS_W pListOfExplicitEntries, PACL OldAcl, PACL *NewAcl
SetEnvironmentVariable;Sets the contents of the specified environment variable for the current process.;LPCTSTR lpName, LPCTSTR lpValue
SetErrorMode;Controls whether the system will handle the specified types of serious errors or whether the process will handle them.;UINT uMode
SetEvent;Sets the specified event object to the signaled state.;HANDLE hEvent
SetEventWhenCallbackReturns;Specifies the event that the thread pool will set when the current callback completes.;PTP_CALLBACK_INSTANCE pci, HANDLE evt
SetFactoid;Specifies the factoid a recognizer uses to constrain its search for the result.You specify a factoid if an input field is of a known type, such as if the input field contains a date.;HRECOCONTEXT hrc, ULONG cwcFactoid, const WCHAR *pwcFactoid
SetFileApisToANSI;Causes the file I/O functions to use the ANSI character set code page for the current process.;
SetFileApisToOEM;Causes the file I/O functions for the process to use the OEM character set code page.;
SetFileAttributesA;Sets the attributes for a file or directory.;LPCSTR lpFileName, DWORD dwFileAttributes
SetFileAttributesTransactedA;Sets the attributes for a file or directory as a transacted operation.;LPCSTR lpFileName, DWORD dwFileAttributes, HANDLE hTransaction
SetFileAttributesTransactedW;Sets the attributes for a file or directory as a transacted operation.;LPCWSTR lpFileName, DWORD dwFileAttributes, HANDLE hTransaction
SetFileAttributesW;Sets the attributes for a file or directory.;LPCWSTR lpFileName, DWORD dwFileAttributes
SetFileBandwidthReservation;Requests that bandwidth for the specified file stream be reserved. The reservation is specified as a number of bytes in a period of milliseconds for I/O requests on the specified file handle.;HANDLE hFile, DWORD nPeriodMilliseconds, DWORD nBytesPerPeriod, BOOL bDiscardable, LPDWORD lpTransferSize, LPDWORD lpNumOutstandingRequests
SetFileCompletionNotificationModes;Sets the notification modes for a file handle, allowing you to specify how completion notifications work for the specified file.;HANDLE FileHandle, UCHAR Flags
SetFileInformationByHandle;Sets the file information for the specified file.;HANDLE hFile, FILE_INFO_BY_HANDLE_CLASS FileInformationClass, LPVOID lpFileInformation, DWORD dwBufferSize
SetFileIoOverlappedRange;Associates a virtual address range with the specified file handle.;HANDLE FileHandle, PUCHAR OverlappedRangeStart, ULONG Length
SetFilePointerEx;Moves the file pointer of the specified file.;HANDLE hFile, LARGE_INTEGER liDistanceToMove, PLARGE_INTEGER lpNewFilePointer, DWORD dwMoveMethod
SetFilePointer;Moves the file pointer of the specified file.;HANDLE hFile, LONG lDistanceToMove, PLONG lpDistanceToMoveHigh, DWORD dwMoveMethod
SetFileSecurityA;Sets the security of a file or directory object.;LPCSTR lpFileName, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor
SetFileShortNameA;Sets the short name for the specified file.;HANDLE hFile, LPCSTR lpShortName
SetFileShortNameW;Sets the short name for the specified file.;HANDLE hFile, LPCWSTR lpShortName
SetFileTime;Sets the date and time that the specified file or directory was created, last accessed, or last modified.;HANDLE hFile, const FILETIME *lpCreationTime, const FILETIME *lpLastAccessTime, const FILETIME *lpLastWriteTime
SetFileValidData;Sets the valid data length of the specified file. This function is useful in very limited scenarios. For more information, see the Remarks section.;HANDLE hFile, LONGLONG ValidDataLength
SetFirmwareEnvironmentVariableA;Sets the value of the specified firmware environment variable.;LPCSTR lpName, LPCSTR lpGuid, PVOID pValue, DWORD nSize
SetFirmwareEnvironmentVariableExA;Sets the value of the specified firmware environment variable as the attributes that indicate how this variable is stored and maintained.;LPCSTR lpName, LPCSTR lpGuid, PVOID pValue, DWORD nSize, DWORD dwAttributes
SetFirmwareEnvironmentVariableExW;Sets the value of the specified firmware environment variable and the attributes that indicate how this variable is stored and maintained.;LPCWSTR lpName, LPCWSTR lpGuid, PVOID pValue, DWORD nSize, DWORD dwAttributes
SetFirmwareEnvironmentVariableW;Sets the value of the specified firmware environment variable.;LPCWSTR lpName, LPCWSTR lpGuid, PVOID pValue, DWORD nSize
SetFlags;Specifies how the recognizer interprets the ink and determines the result string.Call this function before processing the ink for the first time. Therefore, call the SetFlags function before calling the Process function.;HRECOCONTEXT hrc, DWORD dwFlags
SetFocus;Sets the keyboard focus to the specified window. The window must be attached to the calling thread's message queue.;HWND hWnd
SetForegroundWindow;Brings the thread that created the specified window into the foreground and activates the window.;HWND hWnd
SetGestureConfig;Configures the messages that are sent from a window for Windows Touch gestures.;HWND hwnd, DWORD dwReserved, UINT cIDs, PGESTURECONFIG pGestureConfig, UINT cbSize
SetGraphicsMode;The SetGraphicsMode function sets the graphics mode for the specified device context.;HDC hdc, int iMode
SetGuide;Sets the recognition guide to use for boxed or lined input. You must call this function before you add strokes to the context.;HRECOCONTEXT hrc, const RECO_GUIDE *pGuide, ULONG iIndex
SetHandleCount;;UINT uNumber
SetHStoreCA;The SetHStoreCA method specifies the handle to use for the CA store. This method was first defined in the IEnroll2 interface.;HCERTSTORE hStore
SetHStoreMy;The SetHStoreMy method specifies the handle to use for the MY store. This method was first defined in the IEnroll2 interface.;HCERTSTORE hStore
SetHStoreRequest;The SetHStoreRequest method specifies the handle to use for the request store. This method was first defined in the IEnroll2 interface.;HCERTSTORE hStore
SetHStoreROOT;The SetHStoreROOT method specifies the handle to use for the Root store. This method was first defined in the IEnroll2 interface.;HCERTSTORE hStore
SetICMMode;The SetICMMode function causes Image Color Management to be enabled, disabled, or queried on a given device context (DC).;HDC hdc, int mode
SetICMProfileA;The SetICMProfile function sets a specified color profile as the output profile for a specified device context (DC).;HDC hdc, LPSTR lpFileName
SetICMProfileW;The SetICMProfile function sets a specified color profile as the output profile for a specified device context (DC).;HDC hdc, LPWSTR lpFileName
SetIfEntry;The SetIfEntry function sets the administrative status of an interface.;PMIB_IFROW pIfRow
SetIpForwardEntry2;Sets the properties of an IP route entry on the local computer.;const MIB_IPFORWARD_ROW2 *Route
SetIpForwardEntry;The SetIpForwardEntry function modifies an existing route in the local computer's IPv4 routing table.;PMIB_IPFORWARDROW pRoute
SetIpInterfaceEntry;Sets the properties of an IP interface on the local computer.;PMIB_IPINTERFACE_ROW Row
SetIpNetEntry2;Sets the physical address of an existing neighbor IP address entry on the local computer.;PMIB_IPNET_ROW2 Row
SetIpNetEntry;The SetIpNetEntry function modifies an existing ARP entry in the ARP table on the local computer.;PMIB_IPNETROW pArpEntry
SetIpStatisticsEx;Toggles IP forwarding on or off and sets the default time-to-live (TTL) value for the local computer.;PMIB_IPSTATS Statistics, ULONG Family
SetIpStatistics;The SetIpStatistics function toggles IP forwarding on or off and sets the default time-to-live (TTL) value for the local computer.;PMIB_IPSTATS pIpStats
SetIpTTL;The SetIpTTL function sets the default time-to-live (TTL) value for the local computer.;UINT nTTL
SetKernelObjectSecurity;Sets the security of a kernel object.;HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor
SetKeyboardState;Copies an array of keyboard key states into the calling thread's keyboard input-state table. This is the same table accessed by the GetKeyboardState and GetKeyState functions. Changes made to this table do not affect keyboard input to any other thread.;LPBYTE lpKeyState
SetLastErrorEx;Sets the last-error code.;DWORD dwErrCode, DWORD dwType
SetLastError;Sets the last-error code for the calling thread.;DWORD dwErrCode
SetLayeredWindowAttributes;Sets the opacity and transparency color key of a layered window.;HWND hwnd, COLORREF crKey, BYTE bAlpha, DWORD dwFlags
SetLayout;The SetLayout function changes the layout of a device context (DC).;HDC hdc, DWORD l
SetLocaleInfoA;Sets an item of information in the user override portion of the current locale. This function does not set the system defaults.;LCID Locale, LCTYPE LCType, LPCSTR lpLCData
SetLocaleInfoW;Sets an item of information in the user override portion of the current locale. This function does not set the system defaults.;LCID Locale, LCTYPE LCType, LPCWSTR lpLCData
SetLocalTime;Sets the current local time and date.;const SYSTEMTIME *lpSystemTime
SetMailslotInfo;Sets the time-out value used by the specified mailslot for a read operation.;HANDLE hMailslot, DWORD lReadTimeout
SetMapMode;The SetMapMode function sets the mapping mode of the specified device context. The mapping mode defines the unit of measure used to transform page-space units into device-space units, and also defines the orientation of the device's x and y axes.;HDC hdc, int iMode
SetMapperFlags;The SetMapperFlags function alters the algorithm the font mapper uses when it maps logical fonts to physical fonts.;HDC hdc, DWORD flags
SetMenu;Assigns a new menu to the specified window.;HWND hWnd, HMENU hMenu
SetMenuContextHelpId;Associates a Help context identifier with a menu.;HMENU , DWORD
SetMenuDefaultItem;Sets the default menu item for the specified menu.;HMENU hMenu, UINT uItem, UINT fByPos
SetMenuInfo;Sets information for a specified menu.;HMENU , LPCMENUINFO
SetMenuItemBitmaps;Associates the specified bitmap with a menu item. Whether the menu item is selected or clear, the system displays the appropriate bitmap next to the menu item.;HMENU hMenu, UINT uPosition, UINT uFlags, HBITMAP hBitmapUnchecked, HBITMAP hBitmapChecked
SetMenuItemInfoA;Changes information about a menu item.;HMENU hmenu, UINT item, BOOL fByPositon, LPCMENUITEMINFOA lpmii
SetMenuItemInfoW;Changes information about a menu item.;HMENU hmenu, UINT item, BOOL fByPositon, LPCMENUITEMINFOW lpmii
SetMessageExtraInfo;Sets the extra message information for the current thread.;LPARAM lParam
SetMetaFileBitsEx;The SetMetaFileBitsEx function creates a memory-based Windows-format metafile from the supplied data.;UINT cbBuffer, const BYTE *lpData
SetMetaRgn;The SetMetaRgn function intersects the current clipping region for the specified device context with the current metaregion and saves the combined region as the new metaregion for the specified device context.;HDC hdc
SetMiterLimit;The SetMiterLimit function sets the limit for the length of miter joins for the specified device context.;HDC hdc, FLOAT limit, PFLOAT old
SetMonitorBrightness;Sets a monitor's brightness value.;HANDLE hMonitor, DWORD dwNewBrightness
SetMonitorColorTemperature;Sets a monitor's color temperature.;HANDLE hMonitor, MC_COLOR_TEMPERATURE ctCurrentColorTemperature
SetMonitorContrast;Sets a monitor's contrast value.;HANDLE hMonitor, DWORD dwNewContrast
SetMonitorDisplayAreaPosition;Sets the horizontal or vertical position of a monitor's display area.;HANDLE hMonitor, MC_POSITION_TYPE ptPositionType, DWORD dwNewPosition
SetMonitorDisplayAreaSize;Sets the width or height of a monitor's display area.;HANDLE hMonitor, MC_SIZE_TYPE stSizeType, DWORD dwNewDisplayAreaWidthOrHeight
SetMonitorRedGreenOrBlueDrive;Sets a monitor's red, green, or blue drive value.;HANDLE hMonitor, MC_DRIVE_TYPE dtDriveType, DWORD dwNewDrive
SetMonitorRedGreenOrBlueGain;Sets a monitor's red, green, or blue gain value.;HANDLE hMonitor, MC_GAIN_TYPE gtGainType, DWORD dwNewGain
SetMSCEPSetupProperty;Sets a property value for a Network Device Enrollment Service (NDES) configuration.;MSCEPSetupProperty propertyId, VARIANT *pPropertyValue
SetNameCount;Sets a name count for the specified distribution point in a certificate revocation list (CRL) distribution information array.;LONG DistPointIndex, LONG NameCount
SetNamedPipeHandleState;Sets the read mode and the blocking mode of the specified named pipe. If the specified handle is to the client end of a named pipe and if the named pipe server process is on a remote computer, the function can also be used to control local buffering.;HANDLE hNamedPipe, LPDWORD lpMode, LPDWORD lpMaxCollectionCount, LPDWORD lpCollectDataTimeout
SetNamedSecurityInfoA;Sets specified security information in the security descriptor of a specified object.;LPSTR pObjectName, SE_OBJECT_TYPE ObjectType, SECURITY_INFORMATION SecurityInfo, PSID psidOwner, PSID psidGroup, PACL pDacl, PACL pSacl
SetNamedSecurityInfoW;Sets specified security information in the security descriptor of a specified object.;LPWSTR pObjectName, SE_OBJECT_TYPE ObjectType, SECURITY_INFORMATION SecurityInfo, PSID psidOwner, PSID psidGroup, PACL pDacl, PACL pSacl
SetNameEntry;Sets a name at a specified index of a distribution point in a certificate revocation list (CRL) distribution information array.;LONG DistPointIndex, LONG NameIndex, LONG NameChoice, const BSTR strName
SetNameEntry;Sets a name at a specified index of the alternate name array.;LONG NameIndex, LONG NameChoice, const BSTR strName
SetNetScheduleAccountInformation;The SetNetScheduleAccountInformation function sets the AT Service account name and password. The AT Service account name and password are used as the credentials for scheduled jobs created with NetScheduleJobAdd.;LPCWSTR pwszServerName, LPCWSTR pwszAccount, LPCWSTR pwszPassword
SetNetworkInformation;Reserved for future use. Do not use this function.;const NET_IF_NETWORK_GUID *NetworkGuid, NET_IF_COMPARTMENT_ID CompartmentId, const WCHAR *NetworkName
SetNtmsDeviceChangeDetection;The SetNtmsDeviceChangeDetection function sets one or more target devices for change detection.;HANDLE hSession, HANDLE DetectHandle, LPNTMS_GUID lpRequestId, DWORD dwType, DWORD dwCount
SetNtmsMediaComplete;The SetNtmsMediaComplete function marks a piece of logical media as complete.;HANDLE hSession, LPNTMS_GUID lpMediaId
SetNtmsObjectAttributeA;The SetNtmsObjectAttribute function creates an extended attribute (named private data) in the specified RSM object.;HANDLE hSession, LPNTMS_GUID lpObjectId, DWORD dwType, LPCSTR lpAttributeName, LPVOID lpAttributeData, DWORD dwAttributeSize
SetNtmsObjectAttributeW;The SetNtmsObjectAttribute function creates an extended attribute (named private data) in the specified RSM object.;HANDLE hSession, LPNTMS_GUID lpObjectId, DWORD dwType, LPCWSTR lpAttributeName, LPVOID lpAttributeData, DWORD AttributeSize
SetNtmsObjectInformationA;The SetNtmsObjectInformation function changes the information structure of the specified object.;HANDLE hSession, LPNTMS_GUID lpObjectId, LPNTMS_OBJECTINFORMATIONA lpInfo
SetNtmsObjectInformation;The SetNtmsObjectInformation function changes the information structure of the specified object.;HANDLE hSession, LPNTMS_GUID lpObjectId, LPNTMS_OBJECTINFORMATION lpInfo
SetNtmsObjectInformationW;The SetNtmsObjectInformation function changes the information structure of the specified object.;HANDLE hSession, LPNTMS_GUID lpObjectId, LPNTMS_OBJECTINFORMATIONW lpInfo
SetNtmsObjectSecurity;The SetNtmsObjectSecurity function writes the security descriptor for the specified RSM object.;HANDLE hSession, LPNTMS_GUID lpObjectId, DWORD dwType, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR lpSecurityDescriptor
SetNtmsRequestOrder;The SetNtmsRequestOrder function sets the order that the specified request will be processed in the library queue.;HANDLE hSession, LPNTMS_GUID lpRequestId, DWORD dwOrderNumber
SetNtmsUIOptionsA;The SetNtmsUIOptions function modifies the list of computer names to which the specified type of UI is being directed for the given object.;HANDLE hSession, const LPNTMS_GUID lpObjectId, DWORD dwType, DWORD dwOperation, LPCSTR lpszDestination
SetNtmsUIOptionsW;The SetNtmsUIOptions function modifies the list of computer names to which the specified type of UI is being directed for the given object.;HANDLE hSession, const LPNTMS_GUID lpObjectId, DWORD dwType, DWORD dwOperation, LPCWSTR lpszDestination
SetOptions;The SetOptions method sets the options for the GPO.;DWORD dwOptions, DWORD dwMask
SetPaletteEntries;The SetPaletteEntries function sets RGB (red, green, blue) color values and flags in a range of entries in a logical palette.;HPALETTE hpal, UINT iStart, UINT cEntries, const PALETTEENTRY *pPalEntries
SetParentCAInformation;Sets the parent certification authority (CA) information for a subordinate CA configuration.;const BSTR bstrCAConfiguration
SetParent;Changes the parent window of the specified child window.;HWND hWndChild, HWND hWndNewParent
setPendingRequestInfo;Sets properties for a pending request. This method was first defined in the ICEnroll4 interface.;LONG lRequestID, BSTR strCADNS, BSTR strCAName, BSTR strFriendlyName
setPendingRequestInfoWStr;Sets properties for a pending request.;LONG lRequestID, LPCWSTR pwszCADNS, LPCWSTR pwszCAName, LPCWSTR pwszFriendlyName
SetPerTcp6ConnectionEStats;Sets a value in the read/write information for an IPv6 TCP connection. This function is used to enable or disable extended statistics for an IPv6 TCP connection.;PMIB_TCP6ROW Row, TCP_ESTATS_TYPE EstatsType, PUCHAR Rw, ULONG RwVersion, ULONG RwSize, ULONG Offset
SetPerTcpConnectionEStats;Sets a value in the read/write information for an IPv4 TCP connection. This function is used to enable or disable extended statistics for an IPv4 TCP connection.;PMIB_TCPROW Row, TCP_ESTATS_TYPE EstatsType, PUCHAR Rw, ULONG RwVersion, ULONG RwSize, ULONG Offset
SetPhysicalCursorPos;Sets the position of the cursor in physical coordinates.;int X, int Y
SetPixelFormat;The SetPixelFormat function sets the pixel format of the specified device context to the format specified by the iPixelFormat index.;HDC hdc, int format, const PIXELFORMATDESCRIPTOR *ppfd
SetPixel;The SetPixel function sets the pixel at the specified coordinates to the specified color.;HDC hdc, int x, int y, COLORREF color
SetPixelV;The SetPixelV function sets the pixel at the specified coordinates to the closest approximation of the specified color. The point must be in the clipping region and the visible part of the device surface.;HDC hdc, int x, int y, COLORREF color
SetPolyFillMode;The SetPolyFillMode function sets the polygon fill mode for functions that fill polygons.;HDC hdc, int mode
SetPriorityClass;Sets the priority class for the specified process. This value together with the priority value of each thread of the process determines each thread's base priority level.;HANDLE hProcess, DWORD dwPriorityClass
SetPrivateKeyArchiveCertificate;The SetPrivateKeyArchiveCertificate method specifies the certificate used to archive the private key. This method was first defined in the IEnroll4 interface.;PCCERT_CONTEXT pPrivateKeyArchiveCert
SetPrivateObjectSecurityEx;Modifies the security descriptor of a private object maintained by the resource manager calling this function.;SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR ModificationDescriptor, PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor, ULONG AutoInheritFlags, PGENERIC_MAPPING GenericMapping, HANDLE Token
SetPrivateObjectSecurity;Modifies a private object's security descriptor.;SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR ModificationDescriptor, PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor, PGENERIC_MAPPING GenericMapping, HANDLE Token
SetProcessAffinityMask;Sets a processor affinity mask for the threads of the specified process.;HANDLE hProcess, DWORD_PTR dwProcessAffinityMask
SetProcessAffinityUpdateMode;Sets the affinity update mode of the specified process.;HANDLE hProcess, DWORD dwFlags
SetProcessDefaultLayout;Changes the default layout when windows are created with no parent or owner only for the currently running process.;DWORD dwDefaultLayout
SetProcessDEPPolicy;Changes data execution prevention (DEP) and DEP-ATL thunk emulation settings for a 32-bit process.;DWORD dwFlags
SetProcessDpiAwarenessContext;Sets the current process to a specified dots per inch (dpi) awareness context. The DPI awareness contexts are from the DPI_AWARENESS_CONTEXT value.;DPI_AWARENESS_CONTEXT value
SetProcessDpiAwareness;Sets the process-default DPI awareness level. This is equivalent to calling SetProcessDpiAwarenessContext with the corresponding DPI_AWARENESS_CONTEXT value.;PROCESS_DPI_AWARENESS value
SetProcessDPIAware;SetProcessDPIAware may be altered or unavailable. Instead, use SetProcessDPIAwareness.;
SetProcessDynamicEHContinuationTargets;Sets dynamic exception handling continuation targets for the specified process.;HANDLE Process, USHORT NumberOfTargets, PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET Targets
SetProcessDynamicEnforcedCetCompatibleRanges;Sets dynamic enforced CETCOMPAT ranges for the specified process.;HANDLE Process, USHORT NumberOfRanges, PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE Ranges
SetProcessInformation;Sets information for the specified process.;HANDLE hProcess, PROCESS_INFORMATION_CLASS ProcessInformationClass, LPVOID ProcessInformation, DWORD ProcessInformationSize
SetProcessMitigationPolicy;Sets a mitigation policy for the calling process. Mitigation policies enable a process to harden itself against various types of attacks.;PROCESS_MITIGATION_POLICY MitigationPolicy, PVOID lpBuffer, SIZE_T dwLength
SetProcessPreferredUILanguages;Sets the process preferred UI languages for the application process. For more information, see User Interface Language Management.;DWORD dwFlags, PCZZWSTR pwszLanguagesBuffer, PULONG pulNumLanguages
SetProcessPriorityBoost;Disables or enables the ability of the system to temporarily boost the priority of the threads of the specified process.;HANDLE hProcess, BOOL bDisablePriorityBoost
SetProcessReference;Provides a Component Object Model (COM) object that allows hosted Shell extensions and other components to prevent their host process from closing prematurely.;IUnknown *punk
SetProcessRestrictionExemption;Exempts the calling process from restrictions preventing desktop processes from interacting with the Windows Store app environment. This function is used by development and debugging tools.;BOOL fEnableExemption
SetProcessShutdownParameters;Sets shutdown parameters for the currently calling process. This function sets a shutdown order for a process relative to the other processes in the system.;DWORD dwLevel, DWORD dwFlags
SetProcessValidCallTargets;Provides Control Flow Guard (CFG) with a list of valid indirect call targets and specifies whether they should be marked valid or not.;HANDLE hProcess, PVOID VirtualAddress, SIZE_T RegionSize, ULONG NumberOfOffsets, PCFG_CALL_TARGET_INFO OffsetInformation
SetProcessWindowStation;Assigns the specified window station to the calling process.;HWINSTA hWinSta
SetProcessWorkingSetSizeEx;Sets the minimum and maximum working set sizes for the specified process.;HANDLE hProcess, SIZE_T dwMinimumWorkingSetSize, SIZE_T dwMaximumWorkingSetSize, DWORD Flags
SetProcessWorkingSetSize;Sets the minimum and maximum working set sizes for the specified process.;HANDLE hProcess, SIZE_T dwMinimumWorkingSetSize, SIZE_T dwMaximumWorkingSetSize
SetPropA;Adds a new entry or changes an existing entry in the property list of the specified window.;HWND hWnd, LPCSTR lpString, HANDLE hData
SetProperty;Allows a module to set a property value.;const BSTR strConfig, BSTR strStorageLocation, BSTR strPropertyName, LONG Flags, const VARIANT *pvarProperty
SetProperty;Sets the specified value to the AzAuthorizationStore object property with the specified property ID.;LONG lPropId, VARIANT varProp, VARIANT varReserved
SetProperty;Sets the specified value to the IAzApplicationGroup object property with the specified property ID.;LONG lPropId, VARIANT varProp, VARIANT varReserved
SetProperty;Sets the specified value to the IAzApplication object property with the specified property ID.;LONG lPropId, VARIANT varProp, VARIANT varReserved
SetProperty;Sets the specified value to the IAzOperation object property with the specified property ID.;LONG lPropId, VARIANT varProp, VARIANT varReserved
SetProperty;Sets the specified value to the IAzRole object property with the specified property ID.;LONG lPropId, VARIANT varProp, VARIANT varReserved
SetProperty;Sets the specified value to the IAzScope object property with the specified property ID.;LONG lPropId, VARIANT varProp, VARIANT varReserved
SetProperty;Sets the specified value to the IAzTask object property with the specified property ID.;LONG lPropId, VARIANT varProp, VARIANT varReserved
SetProperty;Specifies a CEPSetupProperty enumeration value for the Certificate Enrollment Policy (CEP) Web Service configuration.;CEPSetupProperty propertyId, VARIANT *pPropertyValue
SetProperty;Specifies a CESSetupProperty enumeration value for the Certificate Enrollment Web Service (CES) configuration.;CESSetupProperty propertyId, VARIANT *pPropertyValue
SetPropW;Adds a new entry or changes an existing entry in the property list of the specified window.;HWND hWnd, LPCWSTR lpString, HANDLE hData
SetProtectedPolicy;Sets a protected policy.;LPCGUID PolicyGuid, ULONG_PTR PolicyValue, PULONG_PTR OldPolicyValue
SetRectEmpty;The SetRectEmpty function creates an empty rectangle in which all coordinates are set to zero.;LPRECT lprc
SetRectRgn;The SetRectRgn function converts a region into a rectangular region with the specified coordinates.;HRGN hrgn, int left, int top, int right, int bottom
SetRect;The SetRect function sets the coordinates of the specified rectangle. This is equivalent to assigning the left, top, right, and bottom arguments to the appropriate members of the RECT structure.;LPRECT lprc, int xLeft, int yTop, int xRight, int yBottom
SetRequestAttributes;Sets attributes in the specified pending certificate request. This method was first defined in the ICertAdmin interface.;const BSTR strConfig, LONG RequestId, const BSTR strAttributes
SetRestrictedErrorInfo;Sets the restricted error information object for the current thread.;IRestrictedErrorInfo *pRestrictedErrorInfo
SetRestriction;Sets the sorting and qualifying restrictions on a column.;LONG ColumnIndex, LONG SeekOperator, LONG SortOrder, const VARIANT *pvarValue
SetResultColumnCount;Specifies the maximum number of columns for the result set of a customized view of the Certificate Services database.;LONG cResultColumn
SetResultColumn;Specifies a column for the result set of a customized view of the Certificate Services database.;LONG ColumnIndex
SetROP2;The SetROP2 function sets the current foreground mix mode.;HDC hdc, int rop2
SetScrollInfo;The SetScrollInfo function sets the parameters of a scroll bar, including the minimum and maximum scrolling positions, the page size, and the position of the scroll box (thumb). The function also redraws the scroll bar, if requested.;HWND hwnd, int nBar, LPCSCROLLINFO lpsi, BOOL redraw
SetScrollPos;The SetScrollPos function sets the position of the scroll box (thumb) in the specified scroll bar and, if requested, redraws the scroll bar to reflect the new position of the scroll box.;HWND hWnd, int nBar, int nPos, BOOL bRedraw
SetScrollRange;The SetScrollRange function sets the minimum and maximum scroll box positions for the specified scroll bar.;HWND hWnd, int nBar, int nMinPos, int nMaxPos, BOOL bRedraw
SetSearchPathMode;Sets the per-process mode that the SearchPath function uses when locating files.;DWORD Flags
SetSecurityAccessMask;Creates an access mask that represents the access permissions necessary to set the specified object security information.;SECURITY_INFORMATION SecurityInformation, LPDWORD DesiredAccess
SetSecurityDescriptorControl;Sets the control bits of a security descriptor. The function can set only the control bits that relate to automatic inheritance of ACEs.;PSECURITY_DESCRIPTOR pSecurityDescriptor, SECURITY_DESCRIPTOR_CONTROL ControlBitsOfInterest, SECURITY_DESCRIPTOR_CONTROL ControlBitsToSet
SetSecurityDescriptorDacl;Sets information in a discretionary access control list (DACL). If a DACL is already present in the security descriptor, the DACL is replaced.;PSECURITY_DESCRIPTOR pSecurityDescriptor, BOOL bDaclPresent, PACL pDacl, BOOL bDaclDefaulted
SetSecurityDescriptorGroup;Sets the primary group information of an absolute-format security descriptor, replacing any primary group information already present in the security descriptor.;PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID pGroup, BOOL bGroupDefaulted
SetSecurityDescriptorOwner;Sets the owner information of an absolute-format security descriptor. It replaces any owner information already present in the security descriptor.;PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID pOwner, BOOL bOwnerDefaulted
SetSecurityDescriptorRMControl;Sets the resource manager control bits in the SECURITY_DESCRIPTOR structure.;PSECURITY_DESCRIPTOR SecurityDescriptor, PUCHAR RMControl
SetSecurityDescriptorSacl;Sets information in a system access control list (SACL). If there is already a SACL present in the security descriptor, it is replaced.;PSECURITY_DESCRIPTOR pSecurityDescriptor, BOOL bSaclPresent, PACL pSacl, BOOL bSaclDefaulted
SetSecurityInfo;Sets specified security information in the security descriptor of a specified object. The caller identifies the object by a handle.;HANDLE handle, SE_OBJECT_TYPE ObjectType, SECURITY_INFORMATION SecurityInfo, PSID psidOwner, PSID psidGroup, PACL pDacl, PACL pSacl
SetSecurity;The SetSecurity method provides a security descriptor containing the security information the user wants to apply to the securable object. The access control editor calls this method when the user clicks Okay or Apply.;SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor
SetSecurity;Updates security descriptor information for an Online Certificate Status Protocol (OCSP) responder server.;const BSTR bstrServerName, const BSTR bstrVal
SetServiceA;The SetService function registers or removes from the registry a network service within one or more namespaces.;DWORD dwNameSpace, DWORD dwOperation, DWORD dwFlags, LPSERVICE_INFOA lpServiceInfo, LPSERVICE_ASYNC_INFO lpServiceAsyncInfo, LPDWORD lpdwStatusFlags
SetServiceObjectSecurity;Sets the security descriptor of a service object.;SC_HANDLE hService, SECURITY_INFORMATION dwSecurityInformation, PSECURITY_DESCRIPTOR lpSecurityDescriptor
SetServiceStatus;Updates the service control manager's status information for the calling service.;SERVICE_STATUS_HANDLE hServiceStatus, LPSERVICE_STATUS lpServiceStatus
SetServiceW;The SetService function registers or removes from the registry a network service within one or more namespaces.;DWORD dwNameSpace, DWORD dwOperation, DWORD dwFlags, LPSERVICE_INFOW lpServiceInfo, LPSERVICE_ASYNC_INFO lpServiceAsyncInfo, LPDWORD lpdwStatusFlags
SetSessionCompartmentId;Reserved for future use. Do not use this function.;ULONG SessionId, NET_IF_COMPARTMENT_ID CompartmentId
SetSharedFolder;Specifies the path to be used as the certification authority's (CA) shared folder.;const BSTR strSharedFolder
SetSignerCertificate;The SetSignerCertificate method specifies the signer's certificate. This method was first defined in the IEnroll4 interface.;PCCERT_CONTEXT pSignerCert
SetSocketMediaStreamingMode;Indicates whether the network is to be used for transferring streaming media that requires quality of service.;BOOL value
setsockopt;Sets a socket option.;SOCKET s, int level, int optname, const char *optval, int optlen
SetStretchBltMode;The SetStretchBltMode function sets the bitmap stretching mode in the specified device context.;HDC hdc, int mode
SetStringProperty;Specifies the certificate enrollment policy (CEP) server ID or the display name of the CEP server.;PolicyServerUrlPropertyID propertyId, BSTR pValue
SetSysColors;Sets the colors for the specified display elements.;int cElements, const INT *lpaElements, const COLORREF *lpaRgbValues
SetSystemCursor;Enables an application to customize the system cursors. It replaces the contents of the system cursor specified by the id parameter with the contents of the cursor specified by the hcur parameter and then destroys hcur.;HCURSOR hcur, DWORD id
SetSystemFileCacheSize;Limits the size of the working set for the file system cache.;SIZE_T MinimumFileCacheSize, SIZE_T MaximumFileCacheSize, DWORD Flags
SetSystemPaletteUse;The SetSystemPaletteUse function allows an application to specify whether the system palette contains 2 or 20 static colors.;HDC hdc, UINT use
SetSystemPowerState;Suspends the system by shutting power down. Depending on the ForceFlag parameter, the function either suspends operation immediately or requests permission from all applications and device drivers before doing so.;BOOL fSuspend, BOOL fForce
SetSystemTimeAdjustment;Enables or disables periodic time adjustments to the system's time-of-day clock. When enabled, such time adjustments can be used to synchronize the time of day with some other source of time information.;DWORD dwTimeAdjustment, BOOL bTimeAdjustmentDisabled
SetSystemTimeAdjustmentPrecise;Enables or disables periodic time adjustments to the system's time-of-day clock. When enabled, such time adjustments can be used to synchronize the time of day with some other source of time information.;DWORD64 dwTimeAdjustment, BOOL bTimeAdjustmentDisabled
SetSystemTime;Sets the current system time and date. The system time is expressed in Coordinated Universal Time (UTC).;const SYSTEMTIME *lpSystemTime
SetTable;Specifies which Certificate Services database table is used for subsequent calls to the methods of the ICertView2 interface.;LONG Table
SetTapeParameters;Specifies the block size of a tape or configures the tape device.;HANDLE hDevice, DWORD dwOperation, LPVOID lpTapeInformation
SetTapePosition;Sets the tape position on the specified device.;HANDLE hDevice, DWORD dwPositionMethod, DWORD dwPartition, DWORD dwOffsetLow, DWORD dwOffsetHigh, BOOL bImmediate
SetTcpEntry;The SetTcpEntry function sets the state of a TCP connection.;PMIB_TCPROW pTcpRow
SetTextAlign;The SetTextAlign function sets the text-alignment flags for the specified device context.;HDC hdc, UINT align
SetTextCharacterExtra;The SetTextCharacterExtra function sets the intercharacter spacing. Intercharacter spacing is added to each character, including break characters, when the system writes a line of text.;HDC hdc, int extra
SetTextColor;The SetTextColor function sets the text color for the specified device context to the specified color.;HDC hdc, COLORREF color
SetTextContext;Provides the text strings that come before and after the text contained in the recognizer context.You call this function before processing the ink for the first time. Therefore, call the SetTextContext function before calling the Process function.;HRECOCONTEXT hrc, ULONG cwcBefore, const WCHAR *pwcBefore, ULONG cwcAfter, const WCHAR *pwcAfter
SetTextJustification;The SetTextJustification function specifies the amount of space the system should add to the break characters in a string of text. The space is added when an application calls the TextOut or ExtTextOut functions.;HDC hdc, int extra, int count
SetThreadAffinityMask;Sets a processor affinity mask for the specified thread.;HANDLE hThread, DWORD_PTR dwThreadAffinityMask
SetThreadContext;Sets the context for the specified thread.;HANDLE hThread, const CONTEXT *lpContext
SetThreadDescription;Assigns a description to a thread.;HANDLE hThread, PCWSTR lpThreadDescription
SetThreadDesktop;Assigns the specified desktop to the calling thread. All subsequent operations on the desktop use the access rights granted to the desktop.;HDESK hDesktop
SetThreadDpiAwarenessContext;Set the DPI awareness for the current thread to the provided value.;DPI_AWARENESS_CONTEXT dpiContext
SetThreadDpiHostingBehavior;Sets the thread's DPI_HOSTING_BEHAVIOR. This behavior allows windows created in the thread to host child windows with a different DPI_AWARENESS_CONTEXT.;DPI_HOSTING_BEHAVIOR value
SetThreadErrorMode;Controls whether the system will handle the specified types of serious errors or whether the calling thread will handle them.;DWORD dwNewMode, LPDWORD lpOldMode
SetThreadExecutionState;Enables an application to inform the system that it is in use, thereby preventing the system from entering sleep or turning off the display while the application is running.;EXECUTION_STATE esFlags
SetThreadGroupAffinity;Sets the processor group affinity for the specified thread.;HANDLE hThread, const GROUP_AFFINITY *GroupAffinity, PGROUP_AFFINITY PreviousGroupAffinity
SetThreadIdealProcessorEx;Sets the ideal processor for the specified thread and optionally retrieves the previous ideal processor.;HANDLE hThread, PPROCESSOR_NUMBER lpIdealProcessor, PPROCESSOR_NUMBER lpPreviousIdealProcessor
SetThreadIdealProcessor;Sets a preferred processor for a thread. The system schedules threads on their preferred processors whenever possible.;HANDLE hThread, DWORD dwIdealProcessor
SetThreadInformation;Sets information for the specified thread.;HANDLE hThread, THREAD_INFORMATION_CLASS ThreadInformationClass, LPVOID ThreadInformation, DWORD ThreadInformationSize
SetThreadLocale;Sets the current locale of the calling thread.;LCID Locale
SetThreadpoolCallbackCleanupGroup;Associates the specified cleanup group with the specified callback environment.;PTP_CALLBACK_ENVIRON pcbe, PTP_CLEANUP_GROUP ptpcg, PTP_CLEANUP_GROUP_CANCEL_CALLBACK pfng
SetThreadpoolCallbackLibrary;Ensures that the specified DLL remains loaded as long as there are outstanding callbacks.;PTP_CALLBACK_ENVIRON pcbe, PVOID mod
SetThreadpoolCallbackPersistent;Specifies that the callback should run on a persistent thread.;PTP_CALLBACK_ENVIRON pcbe
SetThreadpoolCallbackPool;Sets the thread pool to be used when generating callbacks.;PTP_CALLBACK_ENVIRON pcbe, PTP_POOL ptpp
SetThreadpoolCallbackPriority;Specifies the priority of a callback function relative to other work items in the same thread pool.;PTP_CALLBACK_ENVIRON pcbe, TP_CALLBACK_PRIORITY Priority
SetThreadpoolCallbackRunsLong;Indicates that callbacks associated with this callback environment may not return quickly.;PTP_CALLBACK_ENVIRON pcbe
SetThreadpoolStackInformation;Sets the stack reserve and commit sizes for new threads in the specified thread pool. Stack reserve and commit sizes for existing threads are not changed.;PTP_POOL ptpp, PTP_POOL_STACK_INFORMATION ptpsi
SetThreadpoolThreadMaximum;Sets the maximum number of threads that the specified thread pool can allocate to process callbacks.;PTP_POOL ptpp, DWORD cthrdMost
SetThreadpoolThreadMinimum;Sets the minimum number of threads that the specified thread pool must make available to process callbacks.;PTP_POOL ptpp, DWORD cthrdMic
SetThreadpoolTimerEx;Sets the timer object�, replacing the previous timer, if any. A worker thread calls the timer object's callback after the specified timeout expires.;PTP_TIMER pti, PFILETIME pftDueTime, DWORD msPeriod, DWORD msWindowLength
SetThreadpoolTimer;Sets the timer object�, replacing the previous timer, if any. A worker thread calls the timer object's callback after the specified timeout expires.;PTP_TIMER pti, PFILETIME pftDueTime, DWORD msPeriod, DWORD msWindowLength
SetThreadpoolWaitEx;Sets the wait object�replacing the previous wait object, if any. A worker thread calls the wait object's callback function after the handle becomes signaled or after the specified timeout expires.;PTP_WAIT pwa, HANDLE h, PFILETIME pftTimeout, PVOID Reserved
SetThreadpoolWait;Sets the wait object�replacing the previous wait object, if any. A worker thread calls the wait object's callback function after the handle becomes signaled or after the specified timeout expires.;PTP_WAIT pwa, HANDLE h, PFILETIME pftTimeout
SetThreadPreferredUILanguages;Sets the thread preferred UI languages for the current thread. For more information, see User Interface Language Management.;DWORD dwFlags, PCZZWSTR pwszLanguagesBuffer, PULONG pulNumLanguages
SetThreadPriorityBoost;Disables or enables the ability of the system to temporarily boost the priority of a thread.;HANDLE hThread, BOOL bDisablePriorityBoost
SetThreadPriority;Sets the priority value for the specified thread. This value, together with the priority class of the thread's process, determines the thread's base priority level.;HANDLE hThread, int nPriority
SetThreadStackGuarantee;Sets the minimum size of the stack associated with the calling thread or fiber that will be available during any stack overflow exceptions.;PULONG StackSizeInBytes
SetThreadToken;Assigns an impersonation token to a thread. The function can also cause a thread to stop using an impersonation token.;PHANDLE Thread, HANDLE Token
SetThreadUILanguage;Sets the user interface language for the current thread.;LANGID LangId
SetTimer;Creates a timer with the specified time-out value.;HWND hWnd, UINT_PTR nIDEvent, UINT uElapse, TIMERPROC lpTimerFunc
SetTimeZoneInformation;Sets the current time zone settings. These settings control translations from Coordinated Universal Time (UTC) to local time.;const TIME_ZONE_INFORMATION *lpTimeZoneInformation
SetTokenInformation;Sets various types of information for a specified access token.;HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, LPVOID TokenInformation, DWORD TokenInformationLength
SetUmsThreadInformation;Sets application-specific context information for the specified user-mode scheduling (UMS) worker thread.;PUMS_CONTEXT UmsThread, UMS_THREAD_INFO_CLASS UmsThreadInfoClass, PVOID UmsThreadInformation, ULONG UmsThreadInformationLength
SetUnhandledExceptionFilter;Enables an application to supersede the top-level exception handler of each thread of a process.;LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter
SetUnicastIpAddressEntry;Sets the properties of an existing unicast IP address entry on the local computer.;const MIB_UNICASTIPADDRESS_ROW *Row
SetupAddInstallSectionToDiskSpaceListA;The SetupAddInstallSectionToDiskSpaceList function searches for CopyFile and DelFile lines in an Install section of an INF file. The function then adds the file operations specified in those sections to a disk-space list.;HDSKSPC DiskSpace, HINF InfHandle, HINF LayoutInfHandle, PCSTR SectionName, PVOID Reserved1, UINT Reserved2
SetupAddInstallSectionToDiskSpaceListW;The SetupAddInstallSectionToDiskSpaceList function searches for CopyFile and DelFile lines in an Install section of an INF file. The function then adds the file operations specified in those sections to a disk-space list.;HDSKSPC DiskSpace, HINF InfHandle, HINF LayoutInfHandle, PCWSTR SectionName, PVOID Reserved1, UINT Reserved2
SetupAddSectionToDiskSpaceListA;The SetupAddSectionToDiskSpaceList function adds to a disk-space list all the file delete or copy operations listed in a Copy Files or Delete Files section of an INF file.;HDSKSPC DiskSpace, HINF InfHandle, HINF ListInfHandle, PCSTR SectionName, UINT Operation, PVOID Reserved1, UINT Reserved2
SetupAddSectionToDiskSpaceListW;The SetupAddSectionToDiskSpaceList function adds to a disk-space list all the file delete or copy operations listed in a Copy Files or Delete Files section of an INF file.;HDSKSPC DiskSpace, HINF InfHandle, HINF ListInfHandle, PCWSTR SectionName, UINT Operation, PVOID Reserved1, UINT Reserved2
SetupAddToDiskSpaceListA;The SetupAddToDiskSpaceList function adds a single delete or copy operation to a disk-space list. To add all the file operations in a section of an INF file, use either SetupAddSectionToDiskSpaceList, or SetupAddInstallSectionToDiskSpaceList.;HDSKSPC DiskSpace, PCSTR TargetFilespec, LONGLONG FileSize, UINT Operation, PVOID Reserved1, UINT Reserved2
SetupAddToDiskSpaceListW;The SetupAddToDiskSpaceList function adds a single delete or copy operation to a disk-space list. To add all the file operations in a section of an INF file, use either SetupAddSectionToDiskSpaceList, or SetupAddInstallSectionToDiskSpaceList.;HDSKSPC DiskSpace, PCWSTR TargetFilespec, LONGLONG FileSize, UINT Operation, PVOID Reserved1, UINT Reserved2
SetupAddToSourceListA;The SetupAddToSourceList function appends a value to the list of installation sources for either the current user or the system. If the value already exists, it is removed first, so that duplicate entries are not created.;DWORD Flags, PCSTR Source
SetupAddToSourceListW;The SetupAddToSourceList function appends a value to the list of installation sources for either the current user or the system. If the value already exists, it is removed first, so that duplicate entries are not created.;DWORD Flags, PCWSTR Source
SetupAdjustDiskSpaceListA;The SetupAdjustDiskSpaceList function adjusts the amount of required space for a specified drive.;HDSKSPC DiskSpace, LPCSTR DriveRoot, LONGLONG Amount, PVOID Reserved1, UINT Reserved2
SetupAdjustDiskSpaceListW;The SetupAdjustDiskSpaceList function adjusts the amount of required space for a specified drive.;HDSKSPC DiskSpace, LPCWSTR DriveRoot, LONGLONG Amount, PVOID Reserved1, UINT Reserved2
SetupBackupErrorA;The SetupBackupError function generates a dialog box that informs the user of a backup error.;HWND hwndParent, PCSTR DialogTitle, PCSTR SourceFile, PCSTR TargetFile, UINT Win32ErrorCode, DWORD Style
SetupBackupErrorW;The SetupBackupError function generates a dialog box that informs the user of a backup error.;HWND hwndParent, PCWSTR DialogTitle, PCWSTR SourceFile, PCWSTR TargetFile, UINT Win32ErrorCode, DWORD Style
SetupCancelTemporarySourceList;The SetupCancelTemporarySourceList function cancels any temporary list and no-browse behavior and reestablishes standard list behavior.;
SetupCloseFileQueue;The SetupCloseFileQueue function destroys a setup file queue.;HSPFILEQ QueueHandle
SetupCloseInfFile;The SetupCloseInfFile function closes the INF file opened by a call to SetupOpenInfFile. This function closes any INF files appended to it by calling SetupOpenAppendInfFile.;HINF InfHandle
SetupCloseLog;The SetupCloseLog function closes the log files.;
SetupComm;Initializes the communications parameters for a specified communications device.;HANDLE hFile, DWORD dwInQueue, DWORD dwOutQueue
SetupCommitFileQueueA;The SetupCommitFileQueue function performs file operations queued on a setup file queue.;HWND Owner, HSPFILEQ QueueHandle, PSP_FILE_CALLBACK_A MsgHandler, PVOID Context
SetupCommitFileQueueW;The SetupCommitFileQueue function performs file operations queued on a setup file queue.;HWND Owner, HSPFILEQ QueueHandle, PSP_FILE_CALLBACK_W MsgHandler, PVOID Context
SetupConfigureWmiFromInfSectionA;The SetupConfigureWmiFromInfSection function configures the security of the WMI data that is exposed by an INF file when passed to the [DDInstall.WMI] section.;HINF InfHandle, PCSTR SectionName, DWORD Flags
SetupConfigureWmiFromInfSectionW;The SetupConfigureWmiFromInfSection function configures the security of the WMI data that is exposed by an INF file when passed to the [DDInstall.WMI] section.;HINF InfHandle, PCWSTR SectionName, DWORD Flags
SetupCopyErrorA;The SetupCopyError function generates a dialog box to notify a user of a copy file error.;HWND hwndParent, PCSTR DialogTitle, PCSTR DiskName, PCSTR PathToSource, PCSTR SourceFile, PCSTR TargetPathFile, UINT Win32ErrorCode, DWORD Style, PSTR PathBuffer, DWORD PathBufferSize, PDWORD PathRequiredSize
SetupCopyErrorW;The SetupCopyError function generates a dialog box to notify a user of a copy file error.;HWND hwndParent, PCWSTR DialogTitle, PCWSTR DiskName, PCWSTR PathToSource, PCWSTR SourceFile, PCWSTR TargetPathFile, UINT Win32ErrorCode, DWORD Style, PWSTR PathBuffer, DWORD PathBufferSize, PDWORD PathRequiredSize
SetupCopyOEMInfA;The SetupCopyOEMInf function copies a specified .inf file to the %windir%/Inf directory.;PCSTR SourceInfFileName, PCSTR OEMSourceMediaLocation, DWORD OEMSourceMediaType, DWORD CopyStyle, PSTR DestinationInfFileName, DWORD DestinationInfFileNameSize, PDWORD RequiredSize, PSTR *DestinationInfFileNameComponent
SetupCopyOEMInfW;The SetupCopyOEMInf function copies a specified .inf file to the %windir%/Inf directory.;PCWSTR SourceInfFileName, PCWSTR OEMSourceMediaLocation, DWORD OEMSourceMediaType, DWORD CopyStyle, PWSTR DestinationInfFileName, DWORD DestinationInfFileNameSize, PDWORD RequiredSize, PWSTR *DestinationInfFileNameComponent
SetupCreateDiskSpaceListA;The SetupCreateDiskSpaceList function creates a disk-space list.;PVOID Reserved1, DWORD Reserved2, UINT Flags
SetupCreateDiskSpaceListW;The SetupCreateDiskSpaceList function creates a disk-space list.;PVOID Reserved1, DWORD Reserved2, UINT Flags
SetupDecompressOrCopyFileA;The SetupDecompressOrCopyFile function copies a file, decompressing it if necessary.;PCSTR SourceFileName, PCSTR TargetFileName, PUINT CompressionType
SetupDecompressOrCopyFileW;The SetupDecompressOrCopyFile function copies a file, decompressing it if necessary.;PCWSTR SourceFileName, PCWSTR TargetFileName, PUINT CompressionType
SetupDefaultQueueCallbackA;The SetupDefaultQueueCallback function is the default queue callback routine included with the Setup API. You can use it to process notifications sent by the SetupCommitFileQueue function.;PVOID Context, UINT Notification, UINT_PTR Param1, UINT_PTR Param2
SetupDefaultQueueCallbackW;The SetupDefaultQueueCallback function is the default queue callback routine included with the Setup API. You can use it to process notifications sent by the SetupCommitFileQueue function.;PVOID Context, UINT Notification, UINT_PTR Param1, UINT_PTR Param2
SetupDeleteErrorA;The SetupDeleteError function generates a dialog box that informs the user of a delete error.;HWND hwndParent, PCSTR DialogTitle, PCSTR File, UINT Win32ErrorCode, DWORD Style
SetupDeleteErrorW;The SetupDeleteError function generates a dialog box that informs the user of a delete error.;HWND hwndParent, PCWSTR DialogTitle, PCWSTR File, UINT Win32ErrorCode, DWORD Style
SetupDestroyDiskSpaceList;The SetupDestroyDiskSpaceList function destroys a disk-space list and releases the resources allocated to it.;HDSKSPC DiskSpace
SetupDiAskForOEMDisk;The SetupDiAskForOEMDisk function displays a dialog that asks the user for the path of an OEM installation disk.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData
SetupDiBuildClassInfoListExA;The SetupDiBuildClassInfoListEx function returns a list of setup class GUIDs that includes every class installed on the local system or a remote system.;DWORD Flags, LPGUID ClassGuidList, DWORD ClassGuidListSize, PDWORD RequiredSize, PCSTR MachineName, PVOID Reserved
SetupDiBuildClassInfoListExW;The SetupDiBuildClassInfoListEx function returns a list of setup class GUIDs that includes every class installed on the local system or a remote system.;DWORD Flags, LPGUID ClassGuidList, DWORD ClassGuidListSize, PDWORD RequiredSize, PCWSTR MachineName, PVOID Reserved
SetupDiBuildClassInfoList;The SetupDiBuildClassInfoList function returns a list of setup class GUIDs that identify the classes that are installed on a local computer.;DWORD Flags, LPGUID ClassGuidList, DWORD ClassGuidListSize, PDWORD RequiredSize
SetupDiBuildDriverInfoList;The SetupDiBuildDriverInfoList function builds a list of drivers that is associated with a specific device or with the global class driver list for a device information set.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, DWORD DriverType
SetupDiCallClassInstaller;The SetupDiCallClassInstaller function calls the appropriate class installer, and any registered co-installers, with the specified installation request (DIF code).;DI_FUNCTION InstallFunction, HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData
SetupDiCancelDriverInfoSearch;The SetupDiCancelDriverInfoSearch function cancels a driver list search that is currently in progress in a different thread.;HDEVINFO DeviceInfoSet
SetupDiChangeState;The SetupDiChangeState function is the default handler for the DIF_PROPERTYCHANGE installation request.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData
SetupDiClassGuidsFromNameA;The SetupDiClassGuidsFromName function retrieves the GUID(s) associated with the specified class name. This list is built based on the classes currently installed on the system.;PCSTR ClassName, LPGUID ClassGuidList, DWORD ClassGuidListSize, PDWORD RequiredSize
SetupDiClassGuidsFromNameExA;The SetupDiClassGuidsFromNameEx function retrieves the GUIDs associated with the specified class name. This resulting list contains the classes currently installed on a local or remote computer.;PCSTR ClassName, LPGUID ClassGuidList, DWORD ClassGuidListSize, PDWORD RequiredSize, PCSTR MachineName, PVOID Reserved
SetupDiClassGuidsFromNameExW;The SetupDiClassGuidsFromNameEx function retrieves the GUIDs associated with the specified class name. This resulting list contains the classes currently installed on a local or remote computer.;PCWSTR ClassName, LPGUID ClassGuidList, DWORD ClassGuidListSize, PDWORD RequiredSize, PCWSTR MachineName, PVOID Reserved
SetupDiClassGuidsFromNameW;The SetupDiClassGuidsFromName function retrieves the GUID(s) associated with the specified class name. This list is built based on the classes currently installed on the system.;PCWSTR ClassName, LPGUID ClassGuidList, DWORD ClassGuidListSize, PDWORD RequiredSize
SetupDiClassNameFromGuidA;The SetupDiClassNameFromGuid function retrieves the class name associated with a class GUID.;const GUID *ClassGuid, PSTR ClassName, DWORD ClassNameSize, PDWORD RequiredSize
SetupDiClassNameFromGuidExA;The SetupDiClassNameFromGuidEx function retrieves the class name associated with a class GUID. The class can be installed on a local or remote computer.;const GUID *ClassGuid, PSTR ClassName, DWORD ClassNameSize, PDWORD RequiredSize, PCSTR MachineName, PVOID Reserved
SetupDiClassNameFromGuidExW;The SetupDiClassNameFromGuidEx function retrieves the class name associated with a class GUID. The class can be installed on a local or remote computer.;const GUID *ClassGuid, PWSTR ClassName, DWORD ClassNameSize, PDWORD RequiredSize, PCWSTR MachineName, PVOID Reserved
SetupDiClassNameFromGuidW;The SetupDiClassNameFromGuid function retrieves the class name associated with a class GUID.;const GUID *ClassGuid, PWSTR ClassName, DWORD ClassNameSize, PDWORD RequiredSize
SetupDiCreateDeviceInfoA;The SetupDiCreateDeviceInfo function creates a new device information element and adds it as a new member to the specified device information set.;HDEVINFO DeviceInfoSet, PCSTR DeviceName, const GUID *ClassGuid, PCSTR DeviceDescription, HWND hwndParent, DWORD CreationFlags, PSP_DEVINFO_DATA DeviceInfoData
SetupDiCreateDeviceInfoListExA;The SetupDiCreateDeviceInfoList function creates an empty device information set on a remote or a local computer and optionally associates the set with a device setup class .;const GUID *ClassGuid, HWND hwndParent, PCSTR MachineName, PVOID Reserved
SetupDiCreateDeviceInfoListExW;The SetupDiCreateDeviceInfoList function creates an empty device information set on a remote or a local computer and optionally associates the set with a device setup class .;const GUID *ClassGuid, HWND hwndParent, PCWSTR MachineName, PVOID Reserved
SetupDiCreateDeviceInfoList;The SetupDiCreateDeviceInfoList function creates an empty device information set and optionally associates the set with a device setup class and a top-level window.;const GUID *ClassGuid, HWND hwndParent
SetupDiCreateDeviceInfoW;The SetupDiCreateDeviceInfo function creates a new device information element and adds it as a new member to the specified device information set.;HDEVINFO DeviceInfoSet, PCWSTR DeviceName, const GUID *ClassGuid, PCWSTR DeviceDescription, HWND hwndParent, DWORD CreationFlags, PSP_DEVINFO_DATA DeviceInfoData
SetupDiCreateDeviceInterfaceA;The SetupDiCreateDeviceInterface function registers a device interface on a local system or a remote system.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, const GUID *InterfaceClassGuid, PCSTR ReferenceString, DWORD CreationFlags, PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData
SetupDiCreateDeviceInterfaceRegKeyA;The SetupDiCreateDeviceInterfaceRegKey function creates a registry key for storing information about a device interface and returns a handle to the key.;HDEVINFO DeviceInfoSet, PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData, DWORD Reserved, REGSAM samDesired, HINF InfHandle, PCSTR InfSectionName
SetupDiCreateDeviceInterfaceRegKeyW;The SetupDiCreateDeviceInterfaceRegKey function creates a registry key for storing information about a device interface and returns a handle to the key.;HDEVINFO DeviceInfoSet, PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData, DWORD Reserved, REGSAM samDesired, HINF InfHandle, PCWSTR InfSectionName
SetupDiCreateDeviceInterfaceW;The SetupDiCreateDeviceInterface function registers a device interface on a local system or a remote system.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, const GUID *InterfaceClassGuid, PCWSTR ReferenceString, DWORD CreationFlags, PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData
SetupDiCreateDevRegKeyA;The SetupDiCreateDevRegKey function creates a registry key for device-specific configuration information and returns a handle to the key.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, DWORD Scope, DWORD HwProfile, DWORD KeyType, HINF InfHandle, PCSTR InfSectionName
SetupDiCreateDevRegKeyW;The SetupDiCreateDevRegKey function creates a registry key for device-specific configuration information and returns a handle to the key.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, DWORD Scope, DWORD HwProfile, DWORD KeyType, HINF InfHandle, PCWSTR InfSectionName
SetupDiDeleteDeviceInfo;The SetupDiDeleteDeviceInfo function deletes a device information element from a device information set. This function does not delete the actual device.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData
SetupDiDeleteDeviceInterfaceData;The SetupDiDeleteDeviceInterfaceData function deletes a device interface from a device information set.;HDEVINFO DeviceInfoSet, PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData
SetupDiDeleteDeviceInterfaceRegKey;The SetupDiDeleteDeviceInterfaceRegKey function deletes the registry subkey that is used by applications and drivers to store interface-specific information.;HDEVINFO DeviceInfoSet, PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData, DWORD Reserved
SetupDiDeleteDevRegKey;The SetupDiDeleteDevRegKey function deletes specified user-accessible registry keys that are associated with a device information element.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, DWORD Scope, DWORD HwProfile, DWORD KeyType
SetupDiDestroyClassImageList;The SetupDiDestroyClassImageList function destroys a class image list that was built by a call to SetupDiGetClassImageList or SetupDiGetClassImageListEx.;PSP_CLASSIMAGELIST_DATA ClassImageListData
SetupDiDestroyDeviceInfoList;The SetupDiDestroyDeviceInfoList function deletes a device information set and frees all associated memory.;HDEVINFO DeviceInfoSet
SetupDiDestroyDriverInfoList;The SetupDiDestroyDriverInfoList function deletes a driver list.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, DWORD DriverType
SetupDiDrawMiniIcon;The SetupDiDrawMiniIcon function draws the specified mini-icon at the location requested.;HDC hdc, RECT rc, INT MiniIconIndex, DWORD Flags
SetupDiEnumDeviceInfo;The SetupDiEnumDeviceInfo function returns a SP_DEVINFO_DATA structure that specifies a device information element in a device information set.;HDEVINFO DeviceInfoSet, DWORD MemberIndex, PSP_DEVINFO_DATA DeviceInfoData
SetupDiEnumDeviceInterfaces;The SetupDiEnumDeviceInterfaces function enumerates the device interfaces that are contained in a device information set.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, const GUID *InterfaceClassGuid, DWORD MemberIndex, PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData
SetupDiEnumDriverInfoA;The SetupDiEnumDriverInfo function enumerates the members of a driver list.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, DWORD DriverType, DWORD MemberIndex, PSP_DRVINFO_DATA_A DriverInfoData
SetupDiEnumDriverInfoW;The SetupDiEnumDriverInfo function enumerates the members of a driver list.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, DWORD DriverType, DWORD MemberIndex, PSP_DRVINFO_DATA_W DriverInfoData
SetupDiGetActualModelsSectionA;The SetupDiGetActualModelsSection function retrieves the appropriate decorated INF Models section to use when installing a device from a device INF file.;PINFCONTEXT Context, PSP_ALTPLATFORM_INFO AlternatePlatformInfo, PSTR InfSectionWithExt, DWORD InfSectionWithExtSize, PDWORD RequiredSize, PVOID Reserved
SetupDiGetActualModelsSectionW;The SetupDiGetActualModelsSection function retrieves the appropriate decorated INF Models section to use when installing a device from a device INF file.;PINFCONTEXT Context, PSP_ALTPLATFORM_INFO AlternatePlatformInfo, PWSTR InfSectionWithExt, DWORD InfSectionWithExtSize, PDWORD RequiredSize, PVOID Reserved
SetupDiGetActualSectionToInstallA;The SetupDiGetActualSectionToInstall function retrieves the appropriate INF DDInstall section to use when installing a device from a device INF file on a local computer.;HINF InfHandle, PCSTR InfSectionName, PSTR InfSectionWithExt, DWORD InfSectionWithExtSize, PDWORD RequiredSize, PSTR *Extension
SetupDiGetActualSectionToInstallExA;The SetupDiGetActualSectionToInstallEx function retrieves the name of the INF DDInstall section that installs a device for a specified operating system and processor architecture.;HINF InfHandle, PCSTR InfSectionName, PSP_ALTPLATFORM_INFO AlternatePlatformInfo, PSTR InfSectionWithExt, DWORD InfSectionWithExtSize, PDWORD RequiredSize, PSTR *Extension, PVOID Reserved
SetupDiGetActualSectionToInstallExW;The SetupDiGetActualSectionToInstallEx function retrieves the name of the INF DDInstall section that installs a device for a specified operating system and processor architecture.;HINF InfHandle, PCWSTR InfSectionName, PSP_ALTPLATFORM_INFO AlternatePlatformInfo, PWSTR InfSectionWithExt, DWORD InfSectionWithExtSize, PDWORD RequiredSize, PWSTR *Extension, PVOID Reserved
SetupDiGetActualSectionToInstallW;The SetupDiGetActualSectionToInstall function retrieves the appropriate INF DDInstall section to use when installing a device from a device INF file on a local computer.;HINF InfHandle, PCWSTR InfSectionName, PWSTR InfSectionWithExt, DWORD InfSectionWithExtSize, PDWORD RequiredSize, PWSTR *Extension
SetupDiGetClassBitmapIndex;The SetupDiGetClassBitmapIndex function retrieves the index of the mini-icon supplied for the specified class.;const GUID *ClassGuid, PINT MiniIconIndex
SetupDiGetClassDescriptionA;The SetupDiGetClassDescription function retrieves the class description associated with the specified setup class GUID.;const GUID *ClassGuid, PSTR ClassDescription, DWORD ClassDescriptionSize, PDWORD RequiredSize
SetupDiGetClassDescriptionExA;The SetupDiGetClassDescriptionEx function retrieves the description of a setup class installed on a local or remote computer.;const GUID *ClassGuid, PSTR ClassDescription, DWORD ClassDescriptionSize, PDWORD RequiredSize, PCSTR MachineName, PVOID Reserved
SetupDiGetClassDescriptionExW;The SetupDiGetClassDescriptionEx function retrieves the description of a setup class installed on a local or remote computer.;const GUID *ClassGuid, PWSTR ClassDescription, DWORD ClassDescriptionSize, PDWORD RequiredSize, PCWSTR MachineName, PVOID Reserved
SetupDiGetClassDescriptionW;The SetupDiGetClassDescription function retrieves the class description associated with the specified setup class GUID.;const GUID *ClassGuid, PWSTR ClassDescription, DWORD ClassDescriptionSize, PDWORD RequiredSize
SetupDiGetClassDevPropertySheetsA;The SetupDiGetClassDevPropertySheets function retrieves handles to the property sheets of a device information element or of the device setup class of a device information set.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, LPPROPSHEETHEADERA PropertySheetHeader, DWORD PropertySheetHeaderPageListSize, PDWORD RequiredSize, DWORD PropertySheetType
SetupDiGetClassDevPropertySheetsW;The SetupDiGetClassDevPropertySheets function retrieves handles to the property sheets of a device information element or of the device setup class of a device information set.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, LPPROPSHEETHEADERW PropertySheetHeader, DWORD PropertySheetHeaderPageListSize, PDWORD RequiredSize, DWORD PropertySheetType
SetupDiGetClassDevsA;The SetupDiGetClassDevs function returns a handle to a device information set that contains requested device information elements for a local computer.;const GUID *ClassGuid, PCSTR Enumerator, HWND hwndParent, DWORD Flags
SetupDiGetClassDevsExA;The SetupDiGetClassDevsEx function returns a handle to a device information set that contains requested device information elements for a local or a remote computer.;const GUID *ClassGuid, PCSTR Enumerator, HWND hwndParent, DWORD Flags, HDEVINFO DeviceInfoSet, PCSTR MachineName, PVOID Reserved
SetupDiGetClassDevsExW;The SetupDiGetClassDevsEx function returns a handle to a device information set that contains requested device information elements for a local or a remote computer.;const GUID *ClassGuid, PCWSTR Enumerator, HWND hwndParent, DWORD Flags, HDEVINFO DeviceInfoSet, PCWSTR MachineName, PVOID Reserved
SetupDiGetClassDevsW;The SetupDiGetClassDevs function returns a handle to a device information set that contains requested device information elements for a local computer.;const GUID *ClassGuid, PCWSTR Enumerator, HWND hwndParent, DWORD Flags
SetupDiGetClassImageIndex;The SetupDiGetClassImageIndex function retrieves the index within the class image list of a specified class.;PSP_CLASSIMAGELIST_DATA ClassImageListData, const GUID *ClassGuid, PINT ImageIndex
SetupDiGetClassImageListExA;The SetupDiGetClassImageListEx function builds an image list of bitmaps for every class installed on a local or remote system.;PSP_CLASSIMAGELIST_DATA ClassImageListData, PCSTR MachineName, PVOID Reserved
SetupDiGetClassImageListExW;The SetupDiGetClassImageListEx function builds an image list of bitmaps for every class installed on a local or remote system.;PSP_CLASSIMAGELIST_DATA ClassImageListData, PCWSTR MachineName, PVOID Reserved
SetupDiGetClassImageList;The SetupDiGetClassImageList function builds an image list that contains bitmaps for every installed class and returns the list in a data structure.;PSP_CLASSIMAGELIST_DATA ClassImageListData
SetupDiGetClassInstallParamsA;The SetupDiGetClassInstallParams function retrieves class installation parameters for a device information set or a particular device information element.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, PSP_CLASSINSTALL_HEADER ClassInstallParams, DWORD ClassInstallParamsSize, PDWORD RequiredSize
SetupDiGetClassInstallParamsW;The SetupDiGetClassInstallParams function retrieves class installation parameters for a device information set or a particular device information element.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, PSP_CLASSINSTALL_HEADER ClassInstallParams, DWORD ClassInstallParamsSize, PDWORD RequiredSize
SetupDiGetClassPropertyExW;The SetupDiGetClassPropertyEx function retrieves a class property for a device setup class or a device interface class on a local or remote computer.;const GUID *ClassGuid, const DEVPROPKEY *PropertyKey, DEVPROPTYPE *PropertyType, PBYTE PropertyBuffer, DWORD PropertyBufferSize, PDWORD RequiredSize, DWORD Flags, PCWSTR MachineName, PVOID Reserved
SetupDiGetClassPropertyKeysExW;The SetupDiGetClassPropertyKeysEx function retrieves an array of the device property keys that represent the device properties that are set for a device setup class or a device interface class on a local or a remote computer.;const GUID *ClassGuid, DEVPROPKEY *PropertyKeyArray, DWORD PropertyKeyCount, PDWORD RequiredPropertyKeyCount, DWORD Flags, PCWSTR MachineName, PVOID Reserved
SetupDiGetClassPropertyKeys;The SetupDiGetClassPropertyKeys function retrieves an array of the device property keys that represent the device properties that are set for a device setup class or a device interface class.;const GUID *ClassGuid, DEVPROPKEY *PropertyKeyArray, DWORD PropertyKeyCount, PDWORD RequiredPropertyKeyCount, DWORD Flags
SetupDiGetClassPropertyW;The SetupDiGetClassProperty function retrieves a device property that is set for a device setup class or a device interface class.;const GUID *ClassGuid, const DEVPROPKEY *PropertyKey, DEVPROPTYPE *PropertyType, PBYTE PropertyBuffer, DWORD PropertyBufferSize, PDWORD RequiredSize, DWORD Flags
SetupDiGetClassRegistryPropertyA;The SetupDiGetClassRegistryProperty function retrieves a property for a specified device setup class from the registry.;const GUID *ClassGuid, DWORD Property, PDWORD PropertyRegDataType, PBYTE PropertyBuffer, DWORD PropertyBufferSize, PDWORD RequiredSize, PCSTR MachineName, PVOID Reserved
SetupDiGetClassRegistryPropertyW;The SetupDiGetClassRegistryProperty function retrieves a property for a specified device setup class from the registry.;const GUID *ClassGuid, DWORD Property, PDWORD PropertyRegDataType, PBYTE PropertyBuffer, DWORD PropertyBufferSize, PDWORD RequiredSize, PCWSTR MachineName, PVOID Reserved
SetupDiGetCustomDevicePropertyA;The SetupDiGetCustomDeviceProperty function retrieves a specified custom device property from the registry.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, PCSTR CustomPropertyName, DWORD Flags, PDWORD PropertyRegDataType, PBYTE PropertyBuffer, DWORD PropertyBufferSize, PDWORD RequiredSize
SetupDiGetCustomDevicePropertyW;The SetupDiGetCustomDeviceProperty function retrieves a specified custom device property from the registry.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, PCWSTR CustomPropertyName, DWORD Flags, PDWORD PropertyRegDataType, PBYTE PropertyBuffer, DWORD PropertyBufferSize, PDWORD RequiredSize
SetupDiGetDeviceInfoListClass;The SetupDiGetDeviceInfoListClass function retrieves the GUID for the device setup class associated with a device information set if the set has an associated class.;HDEVINFO DeviceInfoSet, LPGUID ClassGuid
SetupDiGetDeviceInfoListDetailA;The SetupDiGetDeviceInfoListDetail function retrieves information associated with a device information set including the class GUID, remote computer handle, and remote computer name.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_LIST_DETAIL_DATA_A DeviceInfoSetDetailData
SetupDiGetDeviceInfoListDetailW;The SetupDiGetDeviceInfoListDetail function retrieves information associated with a device information set including the class GUID, remote computer handle, and remote computer name.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_LIST_DETAIL_DATA_W DeviceInfoSetDetailData
SetupDiGetDeviceInstallParamsA;The SetupDiGetDeviceInstallParams function retrieves device installation parameters for a device information set or a particular device information element.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, PSP_DEVINSTALL_PARAMS_A DeviceInstallParams
SetupDiGetDeviceInstallParamsW;The SetupDiGetDeviceInstallParams function retrieves device installation parameters for a device information set or a particular device information element.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, PSP_DEVINSTALL_PARAMS_W DeviceInstallParams
SetupDiGetDeviceInstanceIdA;The SetupDiGetDeviceInstanceId function retrieves the device instance ID that is associated with a device information element.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, PSTR DeviceInstanceId, DWORD DeviceInstanceIdSize, PDWORD RequiredSize
SetupDiGetDeviceInstanceIdW;The SetupDiGetDeviceInstanceId function retrieves the device instance ID that is associated with a device information element.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, PWSTR DeviceInstanceId, DWORD DeviceInstanceIdSize, PDWORD RequiredSize
SetupDiGetDeviceInterfaceAlias;The SetupDiGetDeviceInterfaceAlias function returns an alias of a specified device interface.;HDEVINFO DeviceInfoSet, PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData, const GUID *AliasInterfaceClassGuid, PSP_DEVICE_INTERFACE_DATA AliasDeviceInterfaceData
SetupDiGetDeviceInterfaceDetailA;The SetupDiGetDeviceInterfaceDetail function returns details about a device interface.;HDEVINFO DeviceInfoSet, PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData, PSP_DEVICE_INTERFACE_DETAIL_DATA_A DeviceInterfaceDetailData, DWORD DeviceInterfaceDetailDataSize, PDWORD RequiredSize, PSP_DEVINFO_DATA DeviceInfoData
SetupDiGetDeviceInterfaceDetailW;The SetupDiGetDeviceInterfaceDetail function returns details about a device interface.;HDEVINFO DeviceInfoSet, PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData, PSP_DEVICE_INTERFACE_DETAIL_DATA_W DeviceInterfaceDetailData, DWORD DeviceInterfaceDetailDataSize, PDWORD RequiredSize, PSP_DEVINFO_DATA DeviceInfoData
SetupDiGetDeviceInterfacePropertyKeys;The SetupDiGetDeviceInterfacePropertyKeys function retrieves an array of device property keys that represent the device properties that are set for a device interface.;HDEVINFO DeviceInfoSet, PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData, DEVPROPKEY *PropertyKeyArray, DWORD PropertyKeyCount, PDWORD RequiredPropertyKeyCount, DWORD Flags
SetupDiGetDeviceInterfacePropertyW;The SetupDiGetDeviceInterfaceProperty function retrieves a device property that is set for a device interface.;HDEVINFO DeviceInfoSet, PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData, const DEVPROPKEY *PropertyKey, DEVPROPTYPE *PropertyType, PBYTE PropertyBuffer, DWORD PropertyBufferSize, PDWORD RequiredSize, DWORD Flags
SetupDiGetDevicePropertyKeys;The SetupDiGetDevicePropertyKeys function retrieves an array of the device property keys that represent the device properties that are set for a device instance.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, DEVPROPKEY *PropertyKeyArray, DWORD PropertyKeyCount, PDWORD RequiredPropertyKeyCount, DWORD Flags
SetupDiGetDevicePropertyW;The SetupDiGetDeviceProperty function retrieves a device instance property.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, const DEVPROPKEY *PropertyKey, DEVPROPTYPE *PropertyType, PBYTE PropertyBuffer, DWORD PropertyBufferSize, PDWORD RequiredSize, DWORD Flags
SetupDiGetDeviceRegistryPropertyA;The SetupDiGetDeviceRegistryProperty function retrieves a specified Plug and Play device property.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, DWORD Property, PDWORD PropertyRegDataType, PBYTE PropertyBuffer, DWORD PropertyBufferSize, PDWORD RequiredSize
SetupDiGetDeviceRegistryPropertyW;The SetupDiGetDeviceRegistryProperty function retrieves a specified Plug and Play device property.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, DWORD Property, PDWORD PropertyRegDataType, PBYTE PropertyBuffer, DWORD PropertyBufferSize, PDWORD RequiredSize
SetupDiGetDriverInfoDetailA;The SetupDiGetDriverInfoDetail function retrieves driver information detail for a device information set or a particular device information element in the device information set.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, PSP_DRVINFO_DATA_A DriverInfoData, PSP_DRVINFO_DETAIL_DATA_A DriverInfoDetailData, DWORD DriverInfoDetailDataSize, PDWORD RequiredSize
SetupDiGetDriverInfoDetailW;The SetupDiGetDriverInfoDetail function retrieves driver information detail for a device information set or a particular device information element in the device information set.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, PSP_DRVINFO_DATA_W DriverInfoData, PSP_DRVINFO_DETAIL_DATA_W DriverInfoDetailData, DWORD DriverInfoDetailDataSize, PDWORD RequiredSize
SetupDiGetDriverInstallParamsA;The SetupDiGetDriverInstallParams function retrieves driver installation parameters for a device information set or a particular device information element.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, PSP_DRVINFO_DATA_A DriverInfoData, PSP_DRVINSTALL_PARAMS DriverInstallParams
SetupDiGetDriverInstallParamsW;The SetupDiGetDriverInstallParams function retrieves driver installation parameters for a device information set or a particular device information element.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, PSP_DRVINFO_DATA_W DriverInfoData, PSP_DRVINSTALL_PARAMS DriverInstallParams
SetupDiGetHwProfileFriendlyNameA;The SetupDiGetHwProfileFriendlyName function retrieves the friendly name associated with a hardware profile ID.;DWORD HwProfile, PSTR FriendlyName, DWORD FriendlyNameSize, PDWORD RequiredSize
SetupDiGetHwProfileFriendlyNameExA;The SetupDiGetHwProfileFriendlyNameEx function retrieves the friendly name associated with a hardware profile ID on a local or remote computer.;DWORD HwProfile, PSTR FriendlyName, DWORD FriendlyNameSize, PDWORD RequiredSize, PCSTR MachineName, PVOID Reserved
SetupDiGetHwProfileFriendlyNameExW;The SetupDiGetHwProfileFriendlyNameEx function retrieves the friendly name associated with a hardware profile ID on a local or remote computer.;DWORD HwProfile, PWSTR FriendlyName, DWORD FriendlyNameSize, PDWORD RequiredSize, PCWSTR MachineName, PVOID Reserved
SetupDiGetHwProfileFriendlyNameW;The SetupDiGetHwProfileFriendlyName function retrieves the friendly name associated with a hardware profile ID.;DWORD HwProfile, PWSTR FriendlyName, DWORD FriendlyNameSize, PDWORD RequiredSize
SetupDiGetHwProfileListExA;The SetupDiGetHwProfileListEx function retrieves a list of all currently defined hardware profile IDs on a local or remote computer.;PDWORD HwProfileList, DWORD HwProfileListSize, PDWORD RequiredSize, PDWORD CurrentlyActiveIndex, PCSTR MachineName, PVOID Reserved
SetupDiGetHwProfileListExW;The SetupDiGetHwProfileListEx function retrieves a list of all currently defined hardware profile IDs on a local or remote computer.;PDWORD HwProfileList, DWORD HwProfileListSize, PDWORD RequiredSize, PDWORD CurrentlyActiveIndex, PCWSTR MachineName, PVOID Reserved
SetupDiGetHwProfileList;The SetupDiGetHwProfileList function retrieves a list of all currently defined hardware profile IDs.;PDWORD HwProfileList, DWORD HwProfileListSize, PDWORD RequiredSize, PDWORD CurrentlyActiveIndex
SetupDiGetINFClassA;The SetupDiGetINFClass function returns the class of a specified device INF file.;PCSTR InfName, LPGUID ClassGuid, PSTR ClassName, DWORD ClassNameSize, PDWORD RequiredSize
SetupDiGetINFClassW;The SetupDiGetINFClass function returns the class of a specified device INF file.;PCWSTR InfName, LPGUID ClassGuid, PWSTR ClassName, DWORD ClassNameSize, PDWORD RequiredSize
SetupDiGetSelectedDevice;The SetupDiGetSelectedDevice function retrieves the selected device information element in a device information set.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData
SetupDiGetSelectedDriverA;The SetupDiGetSelectedDriver function retrieves the selected driver for a device information set or a particular device information element.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, PSP_DRVINFO_DATA_A DriverInfoData
SetupDiGetSelectedDriverW;The SetupDiGetSelectedDriver function retrieves the selected driver for a device information set or a particular device information element.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, PSP_DRVINFO_DATA_W DriverInfoData
SetupDiInstallClassA;The SetupDiInstallClass function installs the ClassInstall32 section of the specified INF file.;HWND hwndParent, PCSTR InfFileName, DWORD Flags, HSPFILEQ FileQueue
SetupDiInstallClassExA;The SetupDiInstallClassEx function installs a class installer or an interface class.;HWND hwndParent, PCSTR InfFileName, DWORD Flags, HSPFILEQ FileQueue, const GUID *InterfaceClassGuid, PVOID Reserved1, PVOID Reserved2
SetupDiInstallClassExW;The SetupDiInstallClassEx function installs a class installer or an interface class.;HWND hwndParent, PCWSTR InfFileName, DWORD Flags, HSPFILEQ FileQueue, const GUID *InterfaceClassGuid, PVOID Reserved1, PVOID Reserved2
SetupDiInstallClassW;The SetupDiInstallClass function installs the ClassInstall32 section of the specified INF file.;HWND hwndParent, PCWSTR InfFileName, DWORD Flags, HSPFILEQ FileQueue
SetupDiInstallDeviceInterfaces;The SetupDiInstallDeviceInterfaces function is the default handler for the DIF_INSTALLINTERFACES installation request.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData
SetupDiInstallDevice;The SetupDiInstallDevice function is the default handler for the DIF_INSTALLDEVICE installation request.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData
SetupDiInstallDriverFiles;The SetupDiInstallDriverFiles function is the default handler for the DIF_INSTALLDEVICEFILES installation request.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData
SetupDiLoadClassIcon;The SetupDiLoadClassIcon function loads both the large and mini-icon for the specified class.;const GUID *ClassGuid, HICON *LargeIcon, PINT MiniIconIndex
SetupDiLoadDeviceIcon;The SetupDiLoadDeviceIcon function retrieves an icon for a specified device.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, UINT cxIcon, UINT cyIcon, DWORD Flags, HICON *hIcon
SetupDiOpenClassRegKeyExA;The SetupDiOpenClassRegKeyEx function opens the device setup class registry key, the device interface class registry key, or a specific class's subkey. This function opens the specified key on the local computer or on a remote computer.;const GUID *ClassGuid, REGSAM samDesired, DWORD Flags, PCSTR MachineName, PVOID Reserved
SetupDiOpenClassRegKeyExW;The SetupDiOpenClassRegKeyEx function opens the device setup class registry key, the device interface class registry key, or a specific class's subkey. This function opens the specified key on the local computer or on a remote computer.;const GUID *ClassGuid, REGSAM samDesired, DWORD Flags, PCWSTR MachineName, PVOID Reserved
SetupDiOpenClassRegKey;The SetupDiOpenClassRegKey function opens the setup class registry key or a specific class's subkey.;const GUID *ClassGuid, REGSAM samDesired
SetupDiOpenDeviceInfoA;The SetupDiOpenDeviceInfo function adds a device information element for a device instance to a device information set, if one does not already exist in the device information set, and retrieves information that identifies the device information element for the device instance in the device information set.;HDEVINFO DeviceInfoSet, PCSTR DeviceInstanceId, HWND hwndParent, DWORD OpenFlags, PSP_DEVINFO_DATA DeviceInfoData
SetupDiOpenDeviceInfoW;The SetupDiOpenDeviceInfo function adds a device information element for a device instance to a device information set, if one does not already exist in the device information set, and retrieves information that identifies the device information element for the device instance in the device information set.;HDEVINFO DeviceInfoSet, PCWSTR DeviceInstanceId, HWND hwndParent, DWORD OpenFlags, PSP_DEVINFO_DATA DeviceInfoData
SetupDiOpenDeviceInterfaceA;The SetupDiOpenDeviceInterface function retrieves information about a device interface and adds the interface to the specified device information set for a local system or a remote system.;HDEVINFO DeviceInfoSet, PCSTR DevicePath, DWORD OpenFlags, PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData
SetupDiOpenDeviceInterfaceRegKey;The SetupDiOpenDeviceInterfaceRegKey function opens the registry subkey that is used by applications and drivers to store information that is specific to a device interface.;HDEVINFO DeviceInfoSet, PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData, DWORD Reserved, REGSAM samDesired
SetupDiOpenDeviceInterfaceW;The SetupDiOpenDeviceInterface function retrieves information about a device interface and adds the interface to the specified device information set for a local system or a remote system.;HDEVINFO DeviceInfoSet, PCWSTR DevicePath, DWORD OpenFlags, PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData
SetupDiOpenDevRegKey;The SetupDiOpenDevRegKey function opens a registry key for device-specific configuration information.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, DWORD Scope, DWORD HwProfile, DWORD KeyType, REGSAM samDesired
SetupDiRegisterCoDeviceInstallers;The SetupDiRegisterCoDeviceInstallers function is the default handler for DIF_REGISTER_COINSTALLERS.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData
SetupDiRegisterDeviceInfo;The SetupDiRegisterDeviceInfo function is the default handler for the DIF_REGISTERDEVICE request.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, DWORD Flags, PSP_DETSIG_CMPPROC CompareProc, PVOID CompareContext, PSP_DEVINFO_DATA DupDeviceInfoData
SetupDiRemoveDeviceInterface;The SetupDiRemoveDeviceInterface function removes a registered device interface from the system.;HDEVINFO DeviceInfoSet, PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData
SetupDiRemoveDevice;The SetupDiRemoveDevice function is the default handler for the DIF_REMOVE installation request.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData
SetupDiRestartDevices;The SetupDiRestartDevices function restarts a specified device or, if necessary, restarts all devices that are operated by the same function and filter drivers that operate the specified device.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData
SetupDiSelectBestCompatDrv;The SetupDiSelectBestCompatDrv function is the default handler for the DIF_SELECTBESTCOMPATDRV installation request.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData
SetupDiSelectDevice;The SetupDiSelectDevice function is the default handler for the DIF_SELECTDEVICE request.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData
SetupDiSelectOEMDrv;The SetupDiSelectOEMDrv function selects a driver for a device information set or a particular device information element that uses an OEM path supplied by the user.;HWND hwndParent, HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData
SetupDiSetClassInstallParamsA;The SetupDiSetClassInstallParams function sets or clears class install parameters for a device information set or a particular device information element.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, PSP_CLASSINSTALL_HEADER ClassInstallParams, DWORD ClassInstallParamsSize
SetupDiSetClassInstallParamsW;The SetupDiSetClassInstallParams function sets or clears class install parameters for a device information set or a particular device information element.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, PSP_CLASSINSTALL_HEADER ClassInstallParams, DWORD ClassInstallParamsSize
SetupDiSetClassPropertyExW;The SetupDiSetClassPropertyEx function sets a device property for a device setup class or a device interface class on a local or remote computer.;const GUID *ClassGuid, const DEVPROPKEY *PropertyKey, DEVPROPTYPE PropertyType, const PBYTE PropertyBuffer, DWORD PropertyBufferSize, DWORD Flags, PCWSTR MachineName, PVOID Reserved
SetupDiSetClassPropertyW;The SetupDiSetClassProperty function sets a class property for a device setup class or a device interface class.;const GUID *ClassGuid, const DEVPROPKEY *PropertyKey, DEVPROPTYPE PropertyType, const PBYTE PropertyBuffer, DWORD PropertyBufferSize, DWORD Flags
SetupDiSetClassRegistryPropertyA;The SetupDiSetClassRegistryProperty function sets a specified device class property in the registry.;const GUID *ClassGuid, DWORD Property, const BYTE *PropertyBuffer, DWORD PropertyBufferSize, PCSTR MachineName, PVOID Reserved
SetupDiSetClassRegistryPropertyW;The SetupDiSetClassRegistryProperty function sets a specified device class property in the registry.;const GUID *ClassGuid, DWORD Property, const BYTE *PropertyBuffer, DWORD PropertyBufferSize, PCWSTR MachineName, PVOID Reserved
SetupDiSetDeviceInstallParamsA;The SetupDiSetDeviceInstallParams function sets device installation parameters for a device information set or a particular device information element.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, PSP_DEVINSTALL_PARAMS_A DeviceInstallParams
SetupDiSetDeviceInstallParamsW;The SetupDiSetDeviceInstallParams function sets device installation parameters for a device information set or a particular device information element.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, PSP_DEVINSTALL_PARAMS_W DeviceInstallParams
SetupDiSetDeviceInterfaceDefault;The SetupDiSetDeviceInterfaceDefault function sets a device interface as the default interface for a device interface class.;HDEVINFO DeviceInfoSet, PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData, DWORD Flags, PVOID Reserved
SetupDiSetDeviceInterfacePropertyW;The SetupDiSetDeviceInterfaceProperty function sets a device property of a device interface.;HDEVINFO DeviceInfoSet, PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData, const DEVPROPKEY *PropertyKey, DEVPROPTYPE PropertyType, const PBYTE PropertyBuffer, DWORD PropertyBufferSize, DWORD Flags
SetupDiSetDevicePropertyW;The SetupDiSetDeviceProperty function sets a device instance property.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, const DEVPROPKEY *PropertyKey, DEVPROPTYPE PropertyType, const PBYTE PropertyBuffer, DWORD PropertyBufferSize, DWORD Flags
SetupDiSetDeviceRegistryPropertyA;The SetupDiSetDeviceRegistryProperty function sets a Plug and Play device property for a device.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, DWORD Property, const BYTE *PropertyBuffer, DWORD PropertyBufferSize
SetupDiSetDeviceRegistryPropertyW;The SetupDiSetDeviceRegistryProperty function sets a Plug and Play device property for a device.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, DWORD Property, const BYTE *PropertyBuffer, DWORD PropertyBufferSize
SetupDiSetDriverInstallParamsA;The SetupDiSetDriverInstallParams function sets driver installation parameters for a driver information element.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, PSP_DRVINFO_DATA_A DriverInfoData, PSP_DRVINSTALL_PARAMS DriverInstallParams
SetupDiSetDriverInstallParamsW;The SetupDiSetDriverInstallParams function sets driver installation parameters for a driver information element.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, PSP_DRVINFO_DATA_W DriverInfoData, PSP_DRVINSTALL_PARAMS DriverInstallParams
SetupDiSetSelectedDevice;The SetupDiSetSelectedDevice function sets a device information element as the selected member of a device information set. This function is typically used by an installation wizard.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData
SetupDiSetSelectedDriverA;The SetupDiSetSelectedDriver function sets, or resets, the selected driver for a device information element or the selected class driver for a device information set.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, PSP_DRVINFO_DATA_A DriverInfoData
SetupDiSetSelectedDriverW;The SetupDiSetSelectedDriver function sets, or resets, the selected driver for a device information element or the selected class driver for a device information set.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, PSP_DRVINFO_DATA_W DriverInfoData
SetupDiUnremoveDevice;The SetupDiUnremoveDevice function is the default handler for the DIF_UNREMOVE installation request.;HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData
SetupDuplicateDiskSpaceListA;The SetupDuplicateDiskSpaceList function duplicates a disk-space list as a new independent disk-space list.;HDSKSPC DiskSpace, PVOID Reserved1, DWORD Reserved2, UINT Flags
SetupDuplicateDiskSpaceListW;The SetupDuplicateDiskSpaceList function duplicates a disk-space list as a new independent disk-space list.;HDSKSPC DiskSpace, PVOID Reserved1, DWORD Reserved2, UINT Flags
SetupEnumInfSectionsA;The SetupEnumInfSections function retrieves section names from an INF file.;HINF InfHandle, UINT Index, PSTR Buffer, UINT Size, UINT *SizeNeeded
SetupEnumInfSectionsW;The SetupEnumInfSections function retrieves section names from an INF file.;HINF InfHandle, UINT Index, PWSTR Buffer, UINT Size, UINT *SizeNeeded
SetupFindFirstLineA;The SetupFindFirstLine function locates a line in the specified section of an INF file. If the Key parameter is NULL, SetupFindFirstLine returns the first line of the section.;HINF InfHandle, PCSTR Section, PCSTR Key, PINFCONTEXT Context
SetupFindFirstLineW;The SetupFindFirstLine function locates a line in the specified section of an INF file. If the Key parameter is NULL, SetupFindFirstLine returns the first line of the section.;HINF InfHandle, PCWSTR Section, PCWSTR Key, PINFCONTEXT Context
SetupFindNextLine;The SetupFindNextLine returns the location of the next line in an INF file section relative to ContextIn.Line.;PINFCONTEXT ContextIn, PINFCONTEXT ContextOut
SetupFindNextMatchLineA;The SetupFindNextMatchLine function returns the location of the next line in an INF file relative to ContextIn.Line that matches a specified key.;PINFCONTEXT ContextIn, PCSTR Key, PINFCONTEXT ContextOut
SetupFindNextMatchLineW;The SetupFindNextMatchLine function returns the location of the next line in an INF file relative to ContextIn.Line that matches a specified key.;PINFCONTEXT ContextIn, PCWSTR Key, PINFCONTEXT ContextOut
SetupFreeSourceListA;The SetupFreeSourceList function frees the system resources allocated to a source list.;PCSTR **List, UINT Count
SetupFreeSourceListW;The SetupFreeSourceList function frees the system resources allocated to a source list.;PCWSTR **List, UINT Count
SetupGetBinaryField;The SetupGetBinaryField function retrieves binary data from a line in an INF file section, from the specified field to the end of the line.;PINFCONTEXT Context, DWORD FieldIndex, PBYTE ReturnBuffer, DWORD ReturnBufferSize, LPDWORD RequiredSize
SetupGetFieldCount;The SetupGetFieldCount function retrieves the number of fields in the specified line in an INF file.;PINFCONTEXT Context
SetupGetFileCompressionInfoA;The SetupGetFileCompressionInfo function examines a physical file to determine if it is compressed and gets its full path, size, and the size of the uncompressed target file.;PCSTR SourceFileName, PSTR *ActualSourceFileName, PDWORD SourceFileSize, PDWORD TargetFileSize, PUINT CompressionType
SetupGetFileCompressionInfoExA;The SetupGetFileCompressionInfoEx function examines a potentially compressed file and gets the type of compression, the file's full path (including file name), the compressed size, and the size of the uncompressed target file.;PCSTR SourceFileName, PSTR ActualSourceFileNameBuffer, DWORD ActualSourceFileNameBufferLen, PDWORD RequiredBufferLen, PDWORD SourceFileSize, PDWORD TargetFileSize, PUINT CompressionType
SetupGetFileCompressionInfoExW;The SetupGetFileCompressionInfoEx function examines a potentially compressed file and gets the type of compression, the file's full path (including file name), the compressed size, and the size of the uncompressed target file.;PCWSTR SourceFileName, PWSTR ActualSourceFileNameBuffer, DWORD ActualSourceFileNameBufferLen, PDWORD RequiredBufferLen, PDWORD SourceFileSize, PDWORD TargetFileSize, PUINT CompressionType
SetupGetFileCompressionInfoW;The SetupGetFileCompressionInfo function examines a physical file to determine if it is compressed and gets its full path, size, and the size of the uncompressed target file.;PCWSTR SourceFileName, PWSTR *ActualSourceFileName, PDWORD SourceFileSize, PDWORD TargetFileSize, PUINT CompressionType
SetupGetFileQueueCount;The SetupGetFileQueueCount function gets the count from a setup file queue.;HSPFILEQ FileQueue, UINT SubQueueFileOp, PUINT NumOperations
SetupGetFileQueueFlags;The SetupGetFileQueueFlags function gets the flags from a setup file queue.;HSPFILEQ FileQueue, PDWORD Flags
SetupGetInfDriverStoreLocationA;The SetupGetInfDriverStoreLocation function retrieves the fully qualified file name (directory path and file name) of an INF file in the driver store that corresponds to a specified INF file in the system INF file directory or a specified INF file in the driver store.;PCSTR FileName, PSP_ALTPLATFORM_INFO AlternatePlatformInfo, PCSTR LocaleName, PSTR ReturnBuffer, DWORD ReturnBufferSize, PDWORD RequiredSize
SetupGetInfDriverStoreLocationW;The SetupGetInfDriverStoreLocation function retrieves the fully qualified file name (directory path and file name) of an INF file in the driver store that corresponds to a specified INF file in the system INF file directory or a specified INF file in the driver store.;PCWSTR FileName, PSP_ALTPLATFORM_INFO AlternatePlatformInfo, PCWSTR LocaleName, PWSTR ReturnBuffer, DWORD ReturnBufferSize, PDWORD RequiredSize
SetupGetInfFileListA;The SetupGetInfFileList function returns a list of INF files located in a caller-specified directory to a call-supplied buffer.;PCSTR DirectoryPath, DWORD InfStyle, PSTR ReturnBuffer, DWORD ReturnBufferSize, PDWORD RequiredSize
SetupGetInfFileListW;The SetupGetInfFileList function returns a list of INF files located in a caller-specified directory to a call-supplied buffer.;PCWSTR DirectoryPath, DWORD InfStyle, PWSTR ReturnBuffer, DWORD ReturnBufferSize, PDWORD RequiredSize
SetupGetInfInformationA;The SetUpGetInfInformation function returns the SP_INF_INFORMATION structure for the specified INF file to a buffer.;LPCVOID InfSpec, DWORD SearchControl, PSP_INF_INFORMATION ReturnBuffer, DWORD ReturnBufferSize, PDWORD RequiredSize
SetupGetInfInformationW;The SetUpGetInfInformation function returns the SP_INF_INFORMATION structure for the specified INF file to a buffer.;LPCVOID InfSpec, DWORD SearchControl, PSP_INF_INFORMATION ReturnBuffer, DWORD ReturnBufferSize, PDWORD RequiredSize
SetupGetInfPublishedNameA;The SetupGetInfPublishedName function retrieves the fully qualified file name (directory path and file name) of an INF file in the system INF file directory that corresponds to a specified INF file in the driver store or a specified INF file in the system INF file directory.;PCSTR DriverStoreLocation, PSTR ReturnBuffer, DWORD ReturnBufferSize, PDWORD RequiredSize
SetupGetInfPublishedNameW;The SetupGetInfPublishedName function retrieves the fully qualified file name (directory path and file name) of an INF file in the system INF file directory that corresponds to a specified INF file in the driver store or a specified INF file in the system INF file directory.;PCWSTR DriverStoreLocation, PWSTR ReturnBuffer, DWORD ReturnBufferSize, PDWORD RequiredSize
SetupGetIntField;The SetupGetIntField function retrieves an integer value from the specified field of a line in an INF file.;PINFCONTEXT Context, DWORD FieldIndex, PINT IntegerValue
SetupGetLineByIndexA;The SetupGetLineByIndex function locates a line by its index value in the specified section in the INF file.;HINF InfHandle, PCSTR Section, DWORD Index, PINFCONTEXT Context
SetupGetLineByIndexW;The SetupGetLineByIndex function locates a line by its index value in the specified section in the INF file.;HINF InfHandle, PCWSTR Section, DWORD Index, PINFCONTEXT Context
SetupGetLineCountA;The SetupGetLineCount function returns the number of lines in a specified section of an INF file.;HINF InfHandle, PCSTR Section
SetupGetLineCountW;The SetupGetLineCount function returns the number of lines in a specified section of an INF file.;HINF InfHandle, PCWSTR Section
SetupGetLineTextA;The SetupGetLineText function returns the contents of a line in an INF file in a compact form.;PINFCONTEXT Context, HINF InfHandle, PCSTR Section, PCSTR Key, PSTR ReturnBuffer, DWORD ReturnBufferSize, PDWORD RequiredSize
SetupGetLineTextW;The SetupGetLineText function returns the contents of a line in an INF file in a compact form.;PINFCONTEXT Context, HINF InfHandle, PCWSTR Section, PCWSTR Key, PWSTR ReturnBuffer, DWORD ReturnBufferSize, PDWORD RequiredSize
SetupGetMultiSzFieldA;The SetupGetMultiSzField function retrieves multiple strings stored in a line of an INF file, from the specified field to the end of the line.;PINFCONTEXT Context, DWORD FieldIndex, PSTR ReturnBuffer, DWORD ReturnBufferSize, LPDWORD RequiredSize
SetupGetMultiSzFieldW;The SetupGetMultiSzField function retrieves multiple strings stored in a line of an INF file, from the specified field to the end of the line.;PINFCONTEXT Context, DWORD FieldIndex, PWSTR ReturnBuffer, DWORD ReturnBufferSize, LPDWORD RequiredSize
SetupGetNonInteractiveMode;The SetupGetNonInteractiveMode function returns the value of a SetupAPI non-interactive flag that indicates whether the caller's process can interact with a user through user interface components, such as dialog boxes.;
SetupGetSourceFileLocationA;The SetupGetSourceFileLocation function retrieves the location of a source file listed in an INF file.;HINF InfHandle, PINFCONTEXT InfContext, PCSTR FileName, PUINT SourceId, PSTR ReturnBuffer, DWORD ReturnBufferSize, PDWORD RequiredSize
SetupGetSourceFileLocationW;The SetupGetSourceFileLocation function retrieves the location of a source file listed in an INF file.;HINF InfHandle, PINFCONTEXT InfContext, PCWSTR FileName, PUINT SourceId, PWSTR ReturnBuffer, DWORD ReturnBufferSize, PDWORD RequiredSize
SetupGetSourceFileSizeA;The SetupGetSourceFileSize function reads the uncompressed size of a source file listed in an INF file.;HINF InfHandle, PINFCONTEXT InfContext, PCSTR FileName, PCSTR Section, PDWORD FileSize, UINT RoundingFactor
SetupGetSourceFileSizeW;The SetupGetSourceFileSize function reads the uncompressed size of a source file listed in an INF file.;HINF InfHandle, PINFCONTEXT InfContext, PCWSTR FileName, PCWSTR Section, PDWORD FileSize, UINT RoundingFactor
SetupGetSourceInfoA;The SetupGetSourceInfo function retrieves the path, tag file, or media description for a source listed in an INF file.;HINF InfHandle, UINT SourceId, UINT InfoDesired, PSTR ReturnBuffer, DWORD ReturnBufferSize, PDWORD RequiredSize
SetupGetSourceInfoW;The SetupGetSourceInfo function retrieves the path, tag file, or media description for a source listed in an INF file.;HINF InfHandle, UINT SourceId, UINT InfoDesired, PWSTR ReturnBuffer, DWORD ReturnBufferSize, PDWORD RequiredSize
SetupGetStringFieldA;The SetupGetStringField function retrieves a string from the specified field of a line in an INF file.;PINFCONTEXT Context, DWORD FieldIndex, PSTR ReturnBuffer, DWORD ReturnBufferSize, PDWORD RequiredSize
SetupGetStringFieldW;The SetupGetStringField function retrieves a string from the specified field of a line in an INF file.;PINFCONTEXT Context, DWORD FieldIndex, PWSTR ReturnBuffer, DWORD ReturnBufferSize, PDWORD RequiredSize
SetupGetTargetPathA;The SetupGetTargetPath function determines the target directory for a file list section.;HINF InfHandle, PINFCONTEXT InfContext, PCSTR Section, PSTR ReturnBuffer, DWORD ReturnBufferSize, PDWORD RequiredSize
SetupGetTargetPathW;The SetupGetTargetPath function determines the target directory for a file list section.;HINF InfHandle, PINFCONTEXT InfContext, PCWSTR Section, PWSTR ReturnBuffer, DWORD ReturnBufferSize, PDWORD RequiredSize
SetupGetThreadLogToken;The SetupGetThreadLogToken function retrieves the log token for the thread from which this function was called.;
SetupInitDefaultQueueCallbackEx;Initializes the context used by the default queue callback routine included with the Setup API in the same manner as SetupInitDefaultQueueCallback, except that an additional window is provided to the callback function to accept progress messages.;HWND OwnerWindow, HWND AlternateProgressWindow, UINT ProgressMessage, DWORD Reserved1, PVOID Reserved2
SetupInitDefaultQueueCallback;The SetupInitDefaultQueueCallback function initializes the context used by the default queue callback routine included with the Setup API.;HWND OwnerWindow
SetupInitializeFileLogA;The SetupInitializeFileLog function initializes a file to record installation operations and outcomes. This can be the system log, where the system tracks the files installed as part of Windows, or any other file.;PCSTR LogFileName, DWORD Flags
SetupInitializeFileLogW;The SetupInitializeFileLog function initializes a file to record installation operations and outcomes. This can be the system log, where the system tracks the files installed as part of Windows, or any other file.;PCWSTR LogFileName, DWORD Flags
SetupInstallFileA;The SetupInstallFile function installs a file as specified either by an INFCONTEXT returned by SetupFindXXXLine or explicitly by the file name and path.;HINF InfHandle, PINFCONTEXT InfContext, PCSTR SourceFile, PCSTR SourcePathRoot, PCSTR DestinationName, DWORD CopyStyle, PSP_FILE_CALLBACK_A CopyMsgHandler, PVOID Context
SetupInstallFileExA;The SetupInstallFileEx function installs a file as specified either by an INFCONTEXT returned by SetupFindXXXLine or explicitly by the filename and path information.;HINF InfHandle, PINFCONTEXT InfContext, PCSTR SourceFile, PCSTR SourcePathRoot, PCSTR DestinationName, DWORD CopyStyle, PSP_FILE_CALLBACK_A CopyMsgHandler, PVOID Context, PBOOL FileWasInUse
SetupInstallFileExW;The SetupInstallFileEx function installs a file as specified either by an INFCONTEXT returned by SetupFindXXXLine or explicitly by the filename and path information.;HINF InfHandle, PINFCONTEXT InfContext, PCWSTR SourceFile, PCWSTR SourcePathRoot, PCWSTR DestinationName, DWORD CopyStyle, PSP_FILE_CALLBACK_W CopyMsgHandler, PVOID Context, PBOOL FileWasInUse
SetupInstallFilesFromInfSectionA;The SetupInstallFilesFromInfSection function queues all the files for an installation that are specified in the Copy Files, Delete Files, and Rename Files sections that are listed by an Install section.;HINF InfHandle, HINF LayoutInfHandle, HSPFILEQ FileQueue, PCSTR SectionName, PCSTR SourceRootPath, UINT CopyFlags
SetupInstallFilesFromInfSectionW;The SetupInstallFilesFromInfSection function queues all the files for an installation that are specified in the Copy Files, Delete Files, and Rename Files sections that are listed by an Install section.;HINF InfHandle, HINF LayoutInfHandle, HSPFILEQ FileQueue, PCWSTR SectionName, PCWSTR SourceRootPath, UINT CopyFlags
SetupInstallFileW;The SetupInstallFile function installs a file as specified either by an INFCONTEXT returned by SetupFindXXXLine or explicitly by the file name and path.;HINF InfHandle, PINFCONTEXT InfContext, PCWSTR SourceFile, PCWSTR SourcePathRoot, PCWSTR DestinationName, DWORD CopyStyle, PSP_FILE_CALLBACK_W CopyMsgHandler, PVOID Context
SetupInstallFromInfSectionA;The SetupInstallFromInfSection function carries out all the directives in an INF file Install section.;HWND Owner, HINF InfHandle, PCSTR SectionName, UINT Flags, HKEY RelativeKeyRoot, PCSTR SourceRootPath, UINT CopyFlags, PSP_FILE_CALLBACK_A MsgHandler, PVOID Context, HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData
SetupInstallFromInfSectionW;The SetupInstallFromInfSection function carries out all the directives in an INF file Install section.;HWND Owner, HINF InfHandle, PCWSTR SectionName, UINT Flags, HKEY RelativeKeyRoot, PCWSTR SourceRootPath, UINT CopyFlags, PSP_FILE_CALLBACK_W MsgHandler, PVOID Context, HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData
SetupInstallServicesFromInfSectionA;The SetupInstallServicesFromInfSection function performs service installation and deletion operations that are specified in the Service Install sections listed in the Service section of an INF file.;HINF InfHandle, PCSTR SectionName, DWORD Flags
SetupInstallServicesFromInfSectionExA;The SetupInstallServicesFromInfSectionEx function performs service installation and deletion operations that are specified in the Service Install sections listed in the Service section of an INF file.;HINF InfHandle, PCSTR SectionName, DWORD Flags, HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, PVOID Reserved1, PVOID Reserved2
SetupInstallServicesFromInfSectionExW;The SetupInstallServicesFromInfSectionEx function performs service installation and deletion operations that are specified in the Service Install sections listed in the Service section of an INF file.;HINF InfHandle, PCWSTR SectionName, DWORD Flags, HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData, PVOID Reserved1, PVOID Reserved2
SetupInstallServicesFromInfSectionW;The SetupInstallServicesFromInfSection function performs service installation and deletion operations that are specified in the Service Install sections listed in the Service section of an INF file.;HINF InfHandle, PCWSTR SectionName, DWORD Flags
SetupIterateCabinetA;The SetupIterateCabinet function iterates through all the files in a cabinet and sends a notification to a callback function for each file found.;PCSTR CabinetFile, DWORD Reserved, PSP_FILE_CALLBACK_A MsgHandler, PVOID Context
SetupIterateCabinetW;The SetupIterateCabinet function iterates through all the files in a cabinet and sends a notification to a callback function for each file found.;PCWSTR CabinetFile, DWORD Reserved, PSP_FILE_CALLBACK_W MsgHandler, PVOID Context
SetupLogErrorA;The SetupLogError function writes an error message to a log file.;LPCSTR MessageString, LogSeverity Severity
SetupLogErrorW;The SetupLogError function writes an error message to a log file.;LPCWSTR MessageString, LogSeverity Severity
SetupLogFileA;The SetupLogFile function adds an entry to the log file.;HSPFILELOG FileLogHandle, PCSTR LogSectionName, PCSTR SourceFilename, PCSTR TargetFilename, DWORD Checksum, PCSTR DiskTagfile, PCSTR DiskDescription, PCSTR OtherInfo, DWORD Flags
SetupLogFileW;The SetupLogFile function adds an entry to the log file.;HSPFILELOG FileLogHandle, PCWSTR LogSectionName, PCWSTR SourceFilename, PCWSTR TargetFilename, DWORD Checksum, PCWSTR DiskTagfile, PCWSTR DiskDescription, PCWSTR OtherInfo, DWORD Flags
SetupOpenAppendInfFileA;The SetupOpenAppendInfFile function appends the information in an INF file to an INF file previously opened by SetupOpenInfFile.;PCSTR FileName, HINF InfHandle, PUINT ErrorLine
SetupOpenAppendInfFileW;The SetupOpenAppendInfFile function appends the information in an INF file to an INF file previously opened by SetupOpenInfFile.;PCWSTR FileName, HINF InfHandle, PUINT ErrorLine
SetupOpenFileQueue;The SetupOpenFileQueue function creates a setup file queue.;
SetupOpenInfFileA;The SetupOpenInfFile function opens an INF file and returns a handle to it.;PCSTR FileName, PCSTR InfClass, DWORD InfStyle, PUINT ErrorLine
SetupOpenInfFileW;The SetupOpenInfFile function opens an INF file and returns a handle to it.;PCWSTR FileName, PCWSTR InfClass, DWORD InfStyle, PUINT ErrorLine
SetupOpenLog;The SetupOpenLog function opens the log files.;BOOL Erase
SetupOpenMasterInf;The SetupOpenMasterInf function opens the master INF file that contains file and layout information for files shipped with Windows.;
SetupPromptForDiskA;The SetupPromptForDisk function displays a dialog box that prompts the user for a disk.;HWND hwndParent, PCSTR DialogTitle, PCSTR DiskName, PCSTR PathToSource, PCSTR FileSought, PCSTR TagFile, DWORD DiskPromptStyle, PSTR PathBuffer, DWORD PathBufferSize, PDWORD PathRequiredSize
SetupPromptForDiskW;The SetupPromptForDisk function displays a dialog box that prompts the user for a disk.;HWND hwndParent, PCWSTR DialogTitle, PCWSTR DiskName, PCWSTR PathToSource, PCWSTR FileSought, PCWSTR TagFile, DWORD DiskPromptStyle, PWSTR PathBuffer, DWORD PathBufferSize, PDWORD PathRequiredSize
SetupPromptReboot;The SetupPromptReboot function asks the user if he wants to reboot the system, optionally dependent on whether any files in a committed file queue were in use during a file operation.;HSPFILEQ FileQueue, HWND Owner, BOOL ScanOnly
SetupQueryDrivesInDiskSpaceListA;The SetupQueryDrivesInDiskSpaceList function fills a buffer with a list of the drives referenced by the file operations listed in the disk-space list.;HDSKSPC DiskSpace, PSTR ReturnBuffer, DWORD ReturnBufferSize, PDWORD RequiredSize
SetupQueryDrivesInDiskSpaceListW;The SetupQueryDrivesInDiskSpaceList function fills a buffer with a list of the drives referenced by the file operations listed in the disk-space list.;HDSKSPC DiskSpace, PWSTR ReturnBuffer, DWORD ReturnBufferSize, PDWORD RequiredSize
SetupQueryFileLogA;The SetupQueryFileLog function returns information from a setup file log.;HSPFILELOG FileLogHandle, PCSTR LogSectionName, PCSTR TargetFilename, SetupFileLogInfo DesiredInfo, PSTR DataOut, DWORD ReturnBufferSize, PDWORD RequiredSize
SetupQueryFileLogW;The SetupQueryFileLog function returns information from a setup file log.;HSPFILELOG FileLogHandle, PCWSTR LogSectionName, PCWSTR TargetFilename, SetupFileLogInfo DesiredInfo, PWSTR DataOut, DWORD ReturnBufferSize, PDWORD RequiredSize
SetupQueryInfFileInformationA;The SetupQueryInfFileInformation function returns an INF filename from an SP_INF_INFORMATION structure to a buffer.;PSP_INF_INFORMATION InfInformation, UINT InfIndex, PSTR ReturnBuffer, DWORD ReturnBufferSize, PDWORD RequiredSize
SetupQueryInfFileInformationW;The SetupQueryInfFileInformation function returns an INF filename from an SP_INF_INFORMATION structure to a buffer.;PSP_INF_INFORMATION InfInformation, UINT InfIndex, PWSTR ReturnBuffer, DWORD ReturnBufferSize, PDWORD RequiredSize
SetupQueryInfOriginalFileInformationA;The SetupQueryInfOriginalFileInformation function returns the original name of an OEM INF file.;PSP_INF_INFORMATION InfInformation, UINT InfIndex, PSP_ALTPLATFORM_INFO AlternatePlatformInfo, PSP_ORIGINAL_FILE_INFO_A OriginalFileInfo
SetupQueryInfOriginalFileInformationW;The SetupQueryInfOriginalFileInformation function returns the original name of an OEM INF file.;PSP_INF_INFORMATION InfInformation, UINT InfIndex, PSP_ALTPLATFORM_INFO AlternatePlatformInfo, PSP_ORIGINAL_FILE_INFO_W OriginalFileInfo
SetupQueryInfVersionInformationA;The SetupQueryInfVersionInformation function returns INF file version information from an SP_INF_INFORMATION structure to a buffer.;PSP_INF_INFORMATION InfInformation, UINT InfIndex, PCSTR Key, PSTR ReturnBuffer, DWORD ReturnBufferSize, PDWORD RequiredSize
SetupQueryInfVersionInformationW;The SetupQueryInfVersionInformation function returns INF file version information from an SP_INF_INFORMATION structure to a buffer.;PSP_INF_INFORMATION InfInformation, UINT InfIndex, PCWSTR Key, PWSTR ReturnBuffer, DWORD ReturnBufferSize, PDWORD RequiredSize
SetupQuerySourceListA;The SetupQuerySourceList function queries the current list of installation sources. The list is built from the system and user-specific lists, and potentially overridden by a temporary list (see SetupSetSourceList).;DWORD Flags, PCSTR **List, PUINT Count
SetupQuerySourceListW;The SetupQuerySourceList function queries the current list of installation sources. The list is built from the system and user-specific lists, and potentially overridden by a temporary list (see SetupSetSourceList).;DWORD Flags, PCWSTR **List, PUINT Count
SetupQuerySpaceRequiredOnDriveA;The SetupQuerySpaceRequiredOnDrive function examines a disk space list to determine the space that is required to perform all the file operations listed for a specific drive.;HDSKSPC DiskSpace, PCSTR DriveSpec, LONGLONG *SpaceRequired, PVOID Reserved1, UINT Reserved2
SetupQuerySpaceRequiredOnDriveW;The SetupQuerySpaceRequiredOnDrive function examines a disk space list to determine the space that is required to perform all the file operations listed for a specific drive.;HDSKSPC DiskSpace, PCWSTR DriveSpec, LONGLONG *SpaceRequired, PVOID Reserved1, UINT Reserved2
SetupQueueCopyA;The SetupQueueCopy function adds a single file copy operation to a setup file queue.;HSPFILEQ QueueHandle, PCSTR SourceRootPath, PCSTR SourcePath, PCSTR SourceFilename, PCSTR SourceDescription, PCSTR SourceTagfile, PCSTR TargetDirectory, PCSTR TargetFilename, DWORD CopyStyle
SetupQueueCopyIndirectA;The SetupQueueCopyIndirect function is an extended form of SetupQueueCopy passing additional parameters as a structure (SP_FILE_COPY_PARAMS). Other than this, the behavior is identical.;PSP_FILE_COPY_PARAMS_A CopyParams
SetupQueueCopyIndirectW;The SetupQueueCopyIndirect function is an extended form of SetupQueueCopy passing additional parameters as a structure (SP_FILE_COPY_PARAMS). Other than this, the behavior is identical.;PSP_FILE_COPY_PARAMS_W CopyParams
SetupQueueCopySectionA;The SetupQueueCopySection function places all the files in a section of an INF file in a setup queue for copying.;HSPFILEQ QueueHandle, PCSTR SourceRootPath, HINF InfHandle, HINF ListInfHandle, PCSTR Section, DWORD CopyStyle
SetupQueueCopySectionW;The SetupQueueCopySection function places all the files in a section of an INF file in a setup queue for copying.;HSPFILEQ QueueHandle, PCWSTR SourceRootPath, HINF InfHandle, HINF ListInfHandle, PCWSTR Section, DWORD CopyStyle
SetupQueueCopyW;The SetupQueueCopy function adds a single file copy operation to a setup file queue.;HSPFILEQ QueueHandle, PCWSTR SourceRootPath, PCWSTR SourcePath, PCWSTR SourceFilename, PCWSTR SourceDescription, PCWSTR SourceTagfile, PCWSTR TargetDirectory, PCWSTR TargetFilename, DWORD CopyStyle
SetupQueueDefaultCopyA;The SetupQueueDefaultCopy function adds a single file to a setup file queue for copying, using the default source media and destination as specified in an INF file.;HSPFILEQ QueueHandle, HINF InfHandle, PCSTR SourceRootPath, PCSTR SourceFilename, PCSTR TargetFilename, DWORD CopyStyle
SetupQueueDefaultCopyW;The SetupQueueDefaultCopy function adds a single file to a setup file queue for copying, using the default source media and destination as specified in an INF file.;HSPFILEQ QueueHandle, HINF InfHandle, PCWSTR SourceRootPath, PCWSTR SourceFilename, PCWSTR TargetFilename, DWORD CopyStyle
SetupQueueDeleteA;The SetupQueueDelete function places an individual file delete operation on a setup file queue.;HSPFILEQ QueueHandle, PCSTR PathPart1, PCSTR PathPart2
SetupQueueDeleteSectionA;The SetupQueueDeleteSection function queues all the files in a section of an INF file for deletion. The section must be in the correct Delete Files format and the INF file must contain a DestinationDirs section.;HSPFILEQ QueueHandle, HINF InfHandle, HINF ListInfHandle, PCSTR Section
SetupQueueDeleteSectionW;The SetupQueueDeleteSection function queues all the files in a section of an INF file for deletion. The section must be in the correct Delete Files format and the INF file must contain a DestinationDirs section.;HSPFILEQ QueueHandle, HINF InfHandle, HINF ListInfHandle, PCWSTR Section
SetupQueueDeleteW;The SetupQueueDelete function places an individual file delete operation on a setup file queue.;HSPFILEQ QueueHandle, PCWSTR PathPart1, PCWSTR PathPart2
SetupQueueRenameA;The SetupQueueRename function places an individual file rename operation on a setup file queue.;HSPFILEQ QueueHandle, PCSTR SourcePath, PCSTR SourceFilename, PCSTR TargetPath, PCSTR TargetFilename
SetupQueueRenameSectionA;The SetupQueueRenameSection function queues a section in an INF file for renaming. The section must be in the correct rename list section format and the INF file must contain a DestinationDirs section.;HSPFILEQ QueueHandle, HINF InfHandle, HINF ListInfHandle, PCSTR Section
SetupQueueRenameSectionW;The SetupQueueRenameSection function queues a section in an INF file for renaming. The section must be in the correct rename list section format and the INF file must contain a DestinationDirs section.;HSPFILEQ QueueHandle, HINF InfHandle, HINF ListInfHandle, PCWSTR Section
SetupQueueRenameW;The SetupQueueRename function places an individual file rename operation on a setup file queue.;HSPFILEQ QueueHandle, PCWSTR SourcePath, PCWSTR SourceFilename, PCWSTR TargetPath, PCWSTR TargetFilename
SetupRemoveFileLogEntryA;The SetupRemoveFileLogEntry function removes an entry or section from a file log.;HSPFILELOG FileLogHandle, PCSTR LogSectionName, PCSTR TargetFilename
SetupRemoveFileLogEntryW;The SetupRemoveFileLogEntry function removes an entry or section from a file log.;HSPFILELOG FileLogHandle, PCWSTR LogSectionName, PCWSTR TargetFilename
SetupRemoveFromDiskSpaceListA;The SetupRemoveFromDiskSpaceList function removes a file delete or copy operation from a disk-space list.;HDSKSPC DiskSpace, PCSTR TargetFilespec, UINT Operation, PVOID Reserved1, UINT Reserved2
SetupRemoveFromDiskSpaceListW;The SetupRemoveFromDiskSpaceList function removes a file delete or copy operation from a disk-space list.;HDSKSPC DiskSpace, PCWSTR TargetFilespec, UINT Operation, PVOID Reserved1, UINT Reserved2
SetupRemoveFromSourceListA;The SetupRemoveFromSourceList function removes a value from the list of installation sources for either the current user or the system. The system and user lists are merged at run time.;DWORD Flags, PCSTR Source
SetupRemoveFromSourceListW;The SetupRemoveFromSourceList function removes a value from the list of installation sources for either the current user or the system. The system and user lists are merged at run time.;DWORD Flags, PCWSTR Source
SetupRemoveInstallSectionFromDiskSpaceListA;The SetupRemoveInstallSectionFromDiskSpaceList function searches an Install section of an INF file for CopyFiles and DelFiles lines, and removes the file operations specified in those sections from a disk-space list.;HDSKSPC DiskSpace, HINF InfHandle, HINF LayoutInfHandle, PCSTR SectionName, PVOID Reserved1, UINT Reserved2
SetupRemoveInstallSectionFromDiskSpaceListW;The SetupRemoveInstallSectionFromDiskSpaceList function searches an Install section of an INF file for CopyFiles and DelFiles lines, and removes the file operations specified in those sections from a disk-space list.;HDSKSPC DiskSpace, HINF InfHandle, HINF LayoutInfHandle, PCWSTR SectionName, PVOID Reserved1, UINT Reserved2
SetupRemoveSectionFromDiskSpaceListA;The SetupRemoveSectionFromDiskSpaceList function removes the file delete or copy operations listed in a Copy Files section of an INF file from a disk-space list.;HDSKSPC DiskSpace, HINF InfHandle, HINF ListInfHandle, PCSTR SectionName, UINT Operation, PVOID Reserved1, UINT Reserved2
SetupRemoveSectionFromDiskSpaceListW;The SetupRemoveSectionFromDiskSpaceList function removes the file delete or copy operations listed in a Copy Files section of an INF file from a disk-space list.;HDSKSPC DiskSpace, HINF InfHandle, HINF ListInfHandle, PCWSTR SectionName, UINT Operation, PVOID Reserved1, UINT Reserved2
SetupRenameErrorA;The RenameError function generates a dialog box that informs the user of a file renaming error.;HWND hwndParent, PCSTR DialogTitle, PCSTR SourceFile, PCSTR TargetFile, UINT Win32ErrorCode, DWORD Style
SetupRenameErrorW;The RenameError function generates a dialog box that informs the user of a file renaming error.;HWND hwndParent, PCWSTR DialogTitle, PCWSTR SourceFile, PCWSTR TargetFile, UINT Win32ErrorCode, DWORD Style
SetupScanFileQueueA;The SetupScanFileQueue function scans a setup file queue, performing an operation on each node in its copy list. The operation is specified by a set of flags. This function can be called either before or after the queue has been committed.;HSPFILEQ FileQueue, DWORD Flags, HWND Window, PSP_FILE_CALLBACK_A CallbackRoutine, PVOID CallbackContext, PDWORD Result
SetupScanFileQueueW;The SetupScanFileQueue function scans a setup file queue, performing an operation on each node in its copy list. The operation is specified by a set of flags. This function can be called either before or after the queue has been committed.;HSPFILEQ FileQueue, DWORD Flags, HWND Window, PSP_FILE_CALLBACK_W CallbackRoutine, PVOID CallbackContext, PDWORD Result
SetupSetDirectoryIdA;The SetupSetDirectoryId function associates a directory identifier in an INF file with a specific directory.;HINF InfHandle, DWORD Id, PCSTR Directory
SetupSetDirectoryIdExA;The SetupSetDirectoryIdEx function associates a directory identifier in an INF file with a specific directory.;HINF InfHandle, DWORD Id, PCSTR Directory, DWORD Flags, DWORD Reserved1, PVOID Reserved2
SetupSetDirectoryIdExW;The SetupSetDirectoryIdEx function associates a directory identifier in an INF file with a specific directory.;HINF InfHandle, DWORD Id, PCWSTR Directory, DWORD Flags, DWORD Reserved1, PVOID Reserved2
SetupSetDirectoryIdW;The SetupSetDirectoryId function associates a directory identifier in an INF file with a specific directory.;HINF InfHandle, DWORD Id, PCWSTR Directory
SetupSetFileQueueAlternatePlatformA;The SetupSetFileQueueAlternatePlatform function associates the file queue with a target platform that is different from the platform running the function. This is done to enable for non-native signature verification.;HSPFILEQ QueueHandle, PSP_ALTPLATFORM_INFO AlternatePlatformInfo, PCSTR AlternateDefaultCatalogFile
SetupSetFileQueueAlternatePlatformW;The SetupSetFileQueueAlternatePlatform function associates the file queue with a target platform that is different from the platform running the function. This is done to enable for non-native signature verification.;HSPFILEQ QueueHandle, PSP_ALTPLATFORM_INFO AlternatePlatformInfo, PCWSTR AlternateDefaultCatalogFile
SetupSetFileQueueFlags;The SetupSetFileQueueFlags function sets the flags on a setup file queue.;HSPFILEQ FileQueue, DWORD FlagMask, DWORD Flags
SetupSetNonInteractiveMode;The SetupSetNonInteractiveMode function sets a non-interactive SetupAPI flag that determines whether SetupAPI can interact with a user in the caller's context.;BOOL NonInteractiveFlag
SetupSetPlatformPathOverrideA;The SetupSetPlatformPathOverride function is used to set a platform path override for a target machine when working with INFs from a different machine.;PCSTR Override
SetupSetPlatformPathOverrideW;The SetupSetPlatformPathOverride function is used to set a platform path override for a target machine when working with INFs from a different machine.;PCWSTR Override
SetupSetSourceListA;The SetupSetSourceList function allows the caller to set the list of installation sources for either the current user or the system (common to all users).;DWORD Flags, PCSTR *SourceList, UINT SourceCount
SetupSetSourceListW;The SetupSetSourceList function allows the caller to set the list of installation sources for either the current user or the system (common to all users).;DWORD Flags, PCWSTR *SourceList, UINT SourceCount
SetupSetThreadLogToken;The SetupSetThreadLogToken function sets the log context, as represented by a log token, for the thread from which this function was called.;SP_LOG_TOKEN LogToken
SetupTermDefaultQueueCallback;The SetupTermDefaultQueueCallback function is called after a queue has finished committing. It frees resources allocated by previous calls to SetupInitDefaultQueueCallback or SetupInitDefaultQueueCallbackEx.;PVOID Context
SetupTerminateFileLog;The SetupTerminateFileLog function releases resources associated with a file log.;HSPFILELOG FileLogHandle
SetupUninstallNewlyCopiedInfs;The SetupUninstallNewlyCopiedInfs function uninstalls INF files (.inf), precompiled INF files (.pnf), and catalog files (.cat) that are previously installed during the committal of the specified file queue.;HSPFILEQ FileQueue, DWORD Flags, PVOID Reserved
SetupUninstallOEMInfA;The SetupUninstallOEMInf function uninstalls a specified .inf file and any associated .pnf file.;PCSTR InfFileName, DWORD Flags, PVOID Reserved
SetupUninstallOEMInfW;The SetupUninstallOEMInf function uninstalls a specified .inf file and any associated .pnf file.;PCWSTR InfFileName, DWORD Flags, PVOID Reserved
SetupVerifyInfFileA;The SetupVerifyInfFile function verifies the digital signature of the specified INF file by using its corresponding catalog. The verification can be performed against an alternate platform.;PCSTR InfName, PSP_ALTPLATFORM_INFO AltPlatformInfo, PSP_INF_SIGNER_INFO_A InfSignerInfo
SetupVerifyInfFileW;The SetupVerifyInfFile function verifies the digital signature of the specified INF file by using its corresponding catalog. The verification can be performed against an alternate platform.;PCWSTR InfName, PSP_ALTPLATFORM_INFO AltPlatformInfo, PSP_INF_SIGNER_INFO_W InfSignerInfo
SetupWriteTextLogError;The SetupWriteTextLogError function writes information about a SetupAPI-specific error or a Win32 system error to a SetupAPI text log.;SP_LOG_TOKEN LogToken, DWORD Category, DWORD LogFlags, DWORD Error, PCSTR MessageStr, ...
SetupWriteTextLogInfLine;The SetupWriteTextLogInfLine function writes a log entry in a SetupAPI text log that contains the text of a specified INF file line.;SP_LOG_TOKEN LogToken, DWORD Flags, HINF InfHandle, PINFCONTEXT Context
SetupWriteTextLog;The SetupWriteTextLog function writes a log entry in a SetupAPI text log.;SP_LOG_TOKEN LogToken, DWORD Category, DWORD Flags, PCSTR MessageStr, ...
SetUrlCacheEntryGroupA;Adds entries to or removes entries from a cache group.;LPCSTR lpszUrlName, DWORD dwFlags, GROUPID GroupId, LPBYTE pbGroupAttributes, DWORD cbGroupAttributes, LPVOID lpReserved
SetUrlCacheEntryGroup;Adds entries to or removes entries from a cache group.;LPCSTR lpszUrlName, DWORD dwFlags, GROUPID GroupId, LPBYTE pbGroupAttributes, DWORD cbGroupAttributes, LPVOID lpReserved
SetUrlCacheEntryGroupW;Adds entries to or removes entries from a cache group.;LPCWSTR lpszUrlName, DWORD dwFlags, GROUPID GroupId, LPBYTE pbGroupAttributes, DWORD cbGroupAttributes, LPVOID lpReserved
SetUrlCacheEntryInfoA;Sets the specified members of the INTERNET_CACHE_ENTRY_INFO structure.;LPCSTR lpszUrlName, LPINTERNET_CACHE_ENTRY_INFOA lpCacheEntryInfo, DWORD dwFieldControl
SetUrlCacheEntryInfoW;Sets the specified members of the INTERNET_CACHE_ENTRY_INFO structure.;LPCWSTR lpszUrlName, LPINTERNET_CACHE_ENTRY_INFOW lpCacheEntryInfo, DWORD dwFieldControl
SetUrlCacheGroupAttributeA;Sets the attribute information of the specified cache group.;GROUPID gid, DWORD dwFlags, DWORD dwAttributes, LPINTERNET_CACHE_GROUP_INFOA lpGroupInfo, LPVOID lpReserved
SetUrlCacheGroupAttributeW;Sets the attribute information of the specified cache group.;GROUPID gid, DWORD dwFlags, DWORD dwAttributes, LPINTERNET_CACHE_GROUP_INFOW lpGroupInfo, LPVOID lpReserved
SetUserGeoID;Sets the geographical location identifier for the user. This identifier should have one of the values described in Table of Geographical Locations.;GEOID GeoId
SetUserGeoName;Sets the geographic location for the current user to the specified two-letter International Organization for Standardization (ISO) 3166-1 code or numeric United Nations (UN) Series M, Number 49 (M.49) code.;PWSTR geoName
SetUserObjectInformationA;Sets information about the specified window station or desktop object.;HANDLE hObj, int nIndex, PVOID pvInfo, DWORD nLength
SetUserObjectInformationW;Sets information about the specified window station or desktop object.;HANDLE hObj, int nIndex, PVOID pvInfo, DWORD nLength
SetUserObjectSecurity;Sets the security of a user object. This can be, for example, a window or a DDE conversation.;HANDLE hObj, PSECURITY_INFORMATION pSIRequested, PSECURITY_DESCRIPTOR pSID
SetValueOnCertificate;Associates a property value with an existing certificate.;VARIANT_BOOL MachineContext, EncodingType Encoding, BSTR strCertificate
SetValue;Sets a DATE value at the specified index of the DATE array.;LONG Index, DATE Value
SetValue;Sets a Long value at the specified index of the Long array.;LONG Index, LONG Value
SetValue;Sets a string value at the specified index of the string array.;LONG Index, const BSTR str
SetVCPFeature;Sets the value of a Virtual Control Panel (VCP) code for a monitor.;HANDLE hMonitor, BYTE bVCPCode, DWORD dwNewValue
SetViewportExtEx;Sets the horizontal and vertical extents of the viewport for a device context by using the specified values.;HDC hdc, int x, int y, LPSIZE lpsz
SetViewportOrgEx;The SetViewportOrgEx function specifies which device point maps to the window origin (0,0).;HDC hdc, int x, int y, LPPOINT lppt
SetVolumeLabelA;Sets the label of a file system volume.;LPCSTR lpRootPathName, LPCSTR lpVolumeName
SetVolumeLabelW;Sets the label of a file system volume.;LPCWSTR lpRootPathName, LPCWSTR lpVolumeName
SetVolumeMountPointA;Associates a volume with a drive letter or a directory on another volume.;LPCSTR lpszVolumeMountPoint, LPCSTR lpszVolumeName
SetVolumeMountPointW;Associates a volume with a drive letter or a directory on another volume.;LPCWSTR lpszVolumeMountPoint, LPCWSTR lpszVolumeName
SetWaitableTimer;Activates the specified waitable timer. When the due time arrives, the timer is signaled and the thread that set the timer calls the optional completion routine.;HANDLE hTimer, const LARGE_INTEGER *lpDueTime, LONG lPeriod, PTIMERAPCROUTINE pfnCompletionRoutine, LPVOID lpArgToCompletionRoutine, BOOL fResume
SetWaitableTimerEx;Activates the specified waitable timer and provides context information for the timer. When the due time arrives, the timer is signaled and the thread that set the timer calls the optional completion routine.;HANDLE hTimer, const LARGE_INTEGER *lpDueTime, LONG lPeriod, PTIMERAPCROUTINE pfnCompletionRoutine, LPVOID lpArgToCompletionRoutine, PREASON_CONTEXT WakeContext, ULONG TolerableDelay
SetWebCAInformation;Sets the certification authority (CA) information for the Certification Authority Web Enrollment role.;const BSTR bstrCAConfiguration
SetWindowContextHelpId;Associates a Help context identifier with the specified window.;HWND , DWORD
SetWindowDisplayAffinity;Stores the display affinity setting in kernel mode on the hWnd associated with the window.;HWND hWnd, DWORD dwAffinity
SetWindowExtEx;The SetWindowExtEx function sets the horizontal and vertical extents of the window for a device context by using the specified values.;HDC hdc, int x, int y, LPSIZE lpsz
SetWindowFeedbackSetting;Sets the feedback configuration for a window.;HWND hwnd, FEEDBACK_TYPE feedback, DWORD dwFlags, UINT32 size, const VOID *configuration
SetWindowLongA;Changes an attribute of the specified window. The function also sets the 32-bit (long) value at the specified offset into the extra window memory.;HWND hWnd, int nIndex, LONG dwNewLong
SetWindowLongPtrA;Changes an attribute of the specified window.;HWND hWnd, int nIndex, LONG_PTR dwNewLong
SetWindowLongPtrW;Changes an attribute of the specified window.;HWND hWnd, int nIndex, LONG_PTR dwNewLong
SetWindowLongW;Changes an attribute of the specified window. The function also sets the 32-bit (long) value at the specified offset into the extra window memory.;HWND hWnd, int nIndex, LONG dwNewLong
SetWindowOrgEx;The SetWindowOrgEx function specifies which window point maps to the viewport origin (0,0).;HDC hdc, int x, int y, LPPOINT lppt
SetWindowPlacement;Sets the show state and the restored, minimized, and maximized positions of the specified window.;HWND hWnd, const WINDOWPLACEMENT *lpwndpl
SetWindowPos;Changes the size, position, and Z order of a child, pop-up, or top-level window. These windows are ordered according to their appearance on the screen. The topmost window receives the highest rank and is the first window in the Z order.;HWND hWnd, HWND hWndInsertAfter, int X, int Y, int cx, int cy, UINT uFlags
SetWindowRgn;The SetWindowRgn function sets the window region of a window.;HWND hWnd, HRGN hRgn, BOOL bRedraw
SetWindowsHookExA;Installs an application-defined hook procedure into a hook chain.;int idHook, HOOKPROC lpfn, HINSTANCE hmod, DWORD dwThreadId
SetWindowsHookExW;Installs an application-defined hook procedure into a hook chain.;int idHook, HOOKPROC lpfn, HINSTANCE hmod, DWORD dwThreadId
SetWindowTextA;Changes the text of the specified window's title bar (if it has one). If the specified window is a control, the text of the control is changed. However, SetWindowText cannot change the text of a control in another application.;HWND hWnd, LPCSTR lpString
SetWindowTextW;Changes the text of the specified window's title bar (if it has one). If the specified window is a control, the text of the control is changed. However, SetWindowText cannot change the text of a control in another application.;HWND hWnd, LPCWSTR lpString
SetWinEventHook;Sets an event hook function for a range of events.;DWORD eventMin, DWORD eventMax, HMODULE hmodWinEventProc, WINEVENTPROC pfnWinEventProc, DWORD idProcess, DWORD idThread, DWORD dwFlags
SetWinMetaFileBits;The SetWinMetaFileBits function converts a metafile from the older Windows format to the new enhanced format and stores the new metafile in memory.;UINT nSize, const BYTE *lpMeta16Data, HDC hdcRef, const METAFILEPICT *lpMFP
SetWordList;Sets the word list for the current recognizer context to recognize.;HRECOCONTEXT hrc, HRECOWORDLIST hwl
SetWorldTransform;The SetWorldTransform function sets a two-dimensional linear transformation between world space and page space for the specified device context. This transformation can be used to scale, rotate, shear, or translate graphics output.;HDC hdc, const XFORM *lpxf
SetXStateFeaturesMask;Sets the mask of XState features set within a CONTEXT structure.;PCONTEXT Context, DWORD64 FeatureMask
SHAllocShared;SHAllocShared may be altered or unavailable.;const void *pvData, DWORD dwSize, DWORD dwProcessId
SHAnsiToAnsi;Copies an ANSI string.;PCSTR pszSrc, PSTR pszDst, int cchBuf
SHAnsiToUnicode;Converts a string from the ANSI code page to the Unicode code page.;PCSTR pszSrc, PWSTR pwszDst, int cwchBuf
SHAppBarMessage;Sends an appbar message to the system.;DWORD dwMessage, PAPPBARDATA pData
SHAutoComplete;Instructs system edit controls to use AutoComplete to help complete URLs or file system paths.;HWND hwndEdit, DWORD dwFlags
SHCopyKeyA;Recursively copies the subkeys and values of the source subkey to the destination key. SHCopyKey does not copy the security attributes of the keys.;HKEY hkeySrc, LPCSTR pszSrcSubKey, HKEY hkeyDest, DWORD fReserved
SHCopyKeyW;Recursively copies the subkeys and values of the source subkey to the destination key. SHCopyKey does not copy the security attributes of the keys.;HKEY hkeySrc, LPCWSTR pszSrcSubKey, HKEY hkeyDest, DWORD fReserved
SHCreateMemStream;Creates a memory stream using a similar process to CreateStreamOnHGlobal.;const BYTE *pInit, UINT cbInit
SHCreateProcessAsUserW;Creates a new user-mode process and its primary thread to run a specified executable file.;PSHCREATEPROCESSINFOW pscpi
SHCreateShellPalette;Creates a halftone palette for the specified device context.;HDC hdc
SHCreateStreamOnFileA;SHCreateStreamOnFile may be altered or unavailable. Instead, use SHCreateStreamOnFileEx.;LPCSTR pszFile, DWORD grfMode, IStream **ppstm
SHCreateStreamOnFileEx;Opens or creates a file and retrieves a stream to read or write to that file.;LPCWSTR pszFile, DWORD grfMode, DWORD dwAttributes, BOOL fCreate, IStream *pstmTemplate, IStream **ppstm
SHCreateStreamOnFileW;SHCreateStreamOnFile may be altered or unavailable. Instead, use SHCreateStreamOnFileEx.;LPCWSTR pszFile, DWORD grfMode, IStream **ppstm
SHCreateThread;Creates a thread.;LPTHREAD_START_ROUTINE pfnThreadProc, void *pData, SHCT_FLAGS flags, LPTHREAD_START_ROUTINE pfnCallback
SHCreateThreadRef;Creates a per-thread reference to a Component Object Model (COM) object.;LONG *pcRef, IUnknown **ppunk
SHCreateThreadWithHandle;Creates a new thread and retrieves its handle.;LPTHREAD_START_ROUTINE pfnThreadProc, void *pData, SHCT_FLAGS flags, LPTHREAD_START_ROUTINE pfnCallback, HANDLE *pHandle
SHDeleteEmptyKeyA;Deletes an empty key.;HKEY hkey, LPCSTR pszSubKey
SHDeleteEmptyKeyW;Deletes an empty key.;HKEY hkey, LPCWSTR pszSubKey
SHDeleteKeyA;Deletes a subkey and all its descendants. This function removes the key and all the key's values from the registry.;HKEY hkey, LPCSTR pszSubKey
SHDeleteKeyW;Deletes a subkey and all its descendants. This function removes the key and all the key's values from the registry.;HKEY hkey, LPCWSTR pszSubKey
SHDeleteValueA;Deletes a named value from the specified registry key.;HKEY hkey, LPCSTR pszSubKey, LPCSTR pszValue
SHDeleteValueW;Deletes a named value from the specified registry key.;HKEY hkey, LPCWSTR pszSubKey, LPCWSTR pszValue
ShellAboutA;Displays a ShellAbout dialog box.;HWND hWnd, LPCSTR szApp, LPCSTR szOtherStuff, HICON hIcon
ShellAboutW;Displays a ShellAbout dialog box.;HWND hWnd, LPCWSTR szApp, LPCWSTR szOtherStuff, HICON hIcon
ShellExecuteA;Performs an operation on a specified file.;HWND hwnd, LPCSTR lpOperation, LPCSTR lpFile, LPCSTR lpParameters, LPCSTR lpDirectory, INT nShowCmd
ShellExecuteExA;Performs an operation on a specified file.;SHELLEXECUTEINFOA *pExecInfo
ShellExecuteExW;Performs an operation on a specified file.;SHELLEXECUTEINFOW *pExecInfo
ShellExecuteW;Performs an operation on a specified file.;HWND hwnd, LPCWSTR lpOperation, LPCWSTR lpFile, LPCWSTR lpParameters, LPCWSTR lpDirectory, INT nShowCmd
ShellMessageBoxA;ShellMessageBox may be altered or unavailable.;HINSTANCE hAppInst, HWND hWnd, LPCSTR lpcText, LPCSTR lpcTitle, UINT fuStyle, ...
ShellMessageBoxW;ShellMessageBox may be altered or unavailable.;HINSTANCE hAppInst, HWND hWnd, LPCWSTR lpcText, LPCWSTR lpcTitle, UINT fuStyle, ...
Shell_NotifyIconA;Sends a message to the taskbar's status area.;DWORD dwMessage, PNOTIFYICONDATAA lpData
Shell_NotifyIconGetRect;Gets the screen coordinates of the bounding rectangle of a notification icon.;const NOTIFYICONIDENTIFIER *identifier, RECT *iconLocation
Shell_NotifyIconW;Sends a message to the taskbar's status area.;DWORD dwMessage, PNOTIFYICONDATAW lpData
SHEmptyRecycleBinA;Empties the Recycle Bin on the specified drive.;HWND hwnd, LPCSTR pszRootPath, DWORD dwFlags
SHEmptyRecycleBinW;Empties the Recycle Bin on the specified drive.;HWND hwnd, LPCWSTR pszRootPath, DWORD dwFlags
SHEnumerateUnreadMailAccountsA;Enumerates the user accounts that have unread email.;HKEY hKeyUser, DWORD dwIndex, LPSTR pszMailAddress, int cchMailAddress
SHEnumerateUnreadMailAccountsW;Enumerates the user accounts that have unread email.;HKEY hKeyUser, DWORD dwIndex, LPWSTR pszMailAddress, int cchMailAddress
SHEnumKeyExA;Enumerates the subkeys of the specified open registry key.;HKEY hkey, DWORD dwIndex, LPSTR pszName, LPDWORD pcchName
SHEnumKeyExW;Enumerates the subkeys of the specified open registry key.;HKEY hkey, DWORD dwIndex, LPWSTR pszName, LPDWORD pcchName
SHEnumValueA;Enumerates the values of the specified open registry key.;HKEY hkey, DWORD dwIndex, PSTR pszValueName, LPDWORD pcchValueName, LPDWORD pdwType, void *pvData, LPDWORD pcbData
SHEnumValueW;Enumerates the values of the specified open registry key.;HKEY hkey, DWORD dwIndex, PWSTR pszValueName, LPDWORD pcchValueName, LPDWORD pdwType, void *pvData, LPDWORD pcbData
SHEvaluateSystemCommandTemplate;Enforces strict validation of parameters used in a call to CreateProcess or ShellExecute.;PCWSTR pszCmdTemplate, PWSTR *ppszApplication, PWSTR *ppszCommandLine, PWSTR *ppszParameters
SHFileOperationA;Copies, moves, renames, or deletes a file system object. This function has been replaced in Windows Vista by IFileOperation.;LPSHFILEOPSTRUCTA lpFileOp
SHFileOperationW;Copies, moves, renames, or deletes a file system object. On Windows Vista and later releases, we recommend that you use IFileOperation instead of this function.;LPSHFILEOPSTRUCTW lpFileOp
SHFormatDateTimeA;SHFormatDateTime may be altered or unavailable.;const FILETIME *pft, DWORD *pdwFlags, LPSTR pszBuf, UINT cchBuf
SHFormatDateTimeW;SHFormatDateTime may be altered or unavailable.;const FILETIME *pft, DWORD *pdwFlags, LPWSTR pszBuf, UINT cchBuf
SHFreeNameMappings;Frees a file name mapping object that was retrieved by the SHFileOperation function.;HANDLE hNameMappings
SHFreeShared;SHFreeShared may be altered or unavailable.;HANDLE hData, DWORD dwProcessId
SHGetAssocKeys;Retrieves an array of class subkeys associated with an IQueryAssociations object.;IQueryAssociations *pqa, HKEY *rgKeys, DWORD cKeys
SHGetDiskFreeSpaceExA;Retrieves disk space information for a disk volume.;LPCSTR pszDirectoryName, ULARGE_INTEGER *pulFreeBytesAvailableToCaller, ULARGE_INTEGER *pulTotalNumberOfBytes, ULARGE_INTEGER *pulTotalNumberOfFreeBytes
SHGetDiskFreeSpaceExW;Retrieves disk space information for a disk volume.;LPCWSTR pszDirectoryName, ULARGE_INTEGER *pulFreeBytesAvailableToCaller, ULARGE_INTEGER *pulTotalNumberOfBytes, ULARGE_INTEGER *pulTotalNumberOfFreeBytes
SHGetDriveMedia;Returns the type of media that is in the given drive.;PCWSTR pszDrive, DWORD *pdwMediaContent
SHGetFileInfoA;Retrieves information about an object in the file system, such as a file, folder, directory, or drive root.;LPCSTR pszPath, DWORD dwFileAttributes, SHFILEINFOA *psfi, UINT cbFileInfo, UINT uFlags
SHGetFileInfoW;Retrieves information about an object in the file system, such as a file, folder, directory, or drive root.;LPCWSTR pszPath, DWORD dwFileAttributes, SHFILEINFOW *psfi, UINT cbFileInfo, UINT uFlags
SHGetImageList;Retrieves an image list.;int iImageList, REFIID riid, void **ppvObj
SHGetInverseCMAP;Retrieves the inverse color table mapping for the halftone palette.;BYTE *pbMap, ULONG cbMap
SHGetLocalizedName;Retrieves the localized name of a file in a Shell folder.;PCWSTR pszPath, PWSTR pszResModule, UINT cch, int *pidsRes
SHGetNewLinkInfoA;Creates a name for a new shortcut based on the shortcut's proposed target. This function does not create the shortcut, just the name.;LPCSTR pszLinkTo, LPCSTR pszDir, LPSTR pszName, BOOL *pfMustCopy, UINT uFlags
SHGetNewLinkInfoW;Creates a name for a new shortcut based on the shortcut's proposed target. This function does not create the shortcut, just the name.;LPCWSTR pszLinkTo, LPCWSTR pszDir, LPWSTR pszName, BOOL *pfMustCopy, UINT uFlags
SHGetPropertyStoreForWindow;Retrieves an object that represents a specific window's collection of properties, which allows those properties to be queried or set.;HWND hwnd, REFIID riid, void **ppv
SHGetStockIconInfo;Retrieves information about system-defined Shell icons.;SHSTOCKICONID siid, UINT uFlags, SHSTOCKICONINFO *psii
SHGetThreadRef;Retrieves the per-thread object reference set by SHSetThreadRef.;IUnknown **ppunk
SHGetUnreadMailCountW;Retrieves a specified user's unread message count for any or all email accounts.;HKEY hKeyUser, LPCWSTR pszMailAddress, DWORD *pdwCount, FILETIME *pFileTime, LPWSTR pszShellExecuteCommand, int cchShellExecuteCommand
SHGetValueA;Retrieves a registry value.;HKEY hkey, LPCSTR pszSubKey, LPCSTR pszValue, DWORD *pdwType, void *pvData, DWORD *pcbData
SHGetValueW;Retrieves a registry value.;HKEY hkey, LPCWSTR pszSubKey, LPCWSTR pszValue, DWORD *pdwType, void *pvData, DWORD *pcbData
SHGetViewStatePropertyBag;SHGetViewStatePropertyBag may be altered or unavailable.;PCIDLIST_ABSOLUTE pidl, PCWSTR pszBagName, DWORD dwFlags, REFIID riid, void **ppv
SHGlobalCounterDecrement;Decrements a global counter.;const SHGLOBALCOUNTER id
SHGlobalCounterGetValue;Gets the current value of a global counter.;const SHGLOBALCOUNTER id
SHGlobalCounterIncrement;Increments a global counter.;const SHGLOBALCOUNTER id
SHInvokePrinterCommandA;Executes a command on a printer object.;HWND hwnd, UINT uAction, LPCSTR lpBuf1, LPCSTR lpBuf2, BOOL fModal
SHInvokePrinterCommandW;Executes a command on a printer object.;HWND hwnd, UINT uAction, LPCWSTR lpBuf1, LPCWSTR lpBuf2, BOOL fModal
SHIsFileAvailableOffline;Determines whether a file or folder is available for offline use. This function also determines whether the file would be opened from the network, from the local Offline Files cache, or from both locations.;PCWSTR pwszPath, DWORD *pdwStatus
SHIsLowMemoryMachine;Not supported.;DWORD dwType
SHLoadIndirectString;Extracts a specified text resource when given that resource in the form of an indirect string (a string that begins with the '@' symbol).;PCWSTR pszSource, PWSTR pszOutBuf, UINT cchOutBuf, void **ppvReserved
SHLoadNonloadedIconOverlayIdentifiers;Signals the Shell that during the next operation requiring overlay information, it should load icon overlay identifiers that either failed creation or were not present for creation at startup. Identifiers that have already been loaded are not affected.;
SHLocalStrDupA;Makes a copy of a string in newly allocated memory.;PCSTR psz, PSTR *ppsz
SHLocalStrDupW;Makes a copy of a string in newly allocated memory.;PCWSTR psz, PWSTR *ppsz
SHLockShared;SHLockShared may be altered or unavailable.;HANDLE hData, DWORD dwProcessId
SHMessageBoxCheckA;SHMessageBoxCheck may be altered or unavailable.;HWND hwnd, LPCSTR pszText, LPCSTR pszCaption, UINT uType, int iDefault, LPCSTR pszRegVal
SHMessageBoxCheckW;SHMessageBoxCheck may be altered or unavailable.;HWND hwnd, LPCWSTR pszText, LPCWSTR pszCaption, UINT uType, int iDefault, LPCWSTR pszRegVal
SHOpenRegStream2A;Opens a registry value and supplies a stream that can be used to read from or write to the value. This function supersedes SHOpenRegStream.;HKEY hkey, LPCSTR pszSubkey, LPCSTR pszValue, DWORD grfMode
SHOpenRegStream2W;Opens a registry value and supplies a stream that can be used to read from or write to the value. This function supersedes SHOpenRegStream.;HKEY hkey, LPCWSTR pszSubkey, LPCWSTR pszValue, DWORD grfMode
SHOpenRegStreamA;Deprecated.;HKEY hkey, LPCSTR pszSubkey, LPCSTR pszValue, DWORD grfMode
SHOpenRegStreamW;Deprecated.;HKEY hkey, LPCWSTR pszSubkey, LPCWSTR pszValue, DWORD grfMode
ShowCaret;Makes the caret visible on the screen at the caret's current position. When the caret becomes visible, it begins flashing automatically.;HWND hWnd
ShowCursor;Displays or hides the cursor.;BOOL bShow
ShowOwnedPopups;Shows or hides all pop-up windows owned by the specified window.;HWND hWnd, BOOL fShow
ShowScrollBar;The ShowScrollBar function shows or hides the specified scroll bar.;HWND hWnd, int wBar, BOOL bShow
ShowWindowAsync;Sets the show state of a window without waiting for the operation to complete.;HWND hWnd, int nCmdShow
ShowWindow;Sets the specified window's show state.;HWND hWnd, int nCmdShow
SHQueryInfoKeyA;Retrieves information about a specified registry key.;HKEY hkey, LPDWORD pcSubKeys, LPDWORD pcchMaxSubKeyLen, LPDWORD pcValues, LPDWORD pcchMaxValueNameLen
SHQueryInfoKeyW;Retrieves information about a specified registry key.;HKEY hkey, LPDWORD pcSubKeys, LPDWORD pcchMaxSubKeyLen, LPDWORD pcValues, LPDWORD pcchMaxValueNameLen
SHQueryRecycleBinA;Retrieves the size of the Recycle Bin and the number of items in it, for a specified drive.;LPCSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo
SHQueryRecycleBinW;Retrieves the size of the Recycle Bin and the number of items in it, for a specified drive.;LPCWSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo
SHQueryUserNotificationState;Checks the state of the computer for the current user to determine whether sending a notification is appropriate.;QUERY_USER_NOTIFICATION_STATE *pquns
SHQueryValueExA;Opens a registry key and queries it for a specific value.;HKEY hkey, LPCSTR pszValue, DWORD *pdwReserved, DWORD *pdwType, void *pvData, DWORD *pcbData
SHQueryValueExW;Opens a registry key and queries it for a specific value.;HKEY hkey, LPCWSTR pszValue, DWORD *pdwReserved, DWORD *pdwType, void *pvData, DWORD *pcbData
SHRegCloseUSKey;Closes a handle to a user-specific registry subkey in a user-specific subtree (HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE).;HUSKEY hUSKey
SHRegCreateUSKeyA;Creates or opens a registry subkey in a user-specific subtree (HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE).;LPCSTR pszPath, REGSAM samDesired, HUSKEY hRelativeUSKey, PHUSKEY phNewUSKey, DWORD dwFlags
SHRegCreateUSKeyW;Creates or opens a registry subkey in a user-specific subtree (HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE).;LPCWSTR pwzPath, REGSAM samDesired, HUSKEY hRelativeUSKey, PHUSKEY phNewUSKey, DWORD dwFlags
SHRegDeleteEmptyUSKeyA;Deletes an empty registry subkey in a user-specific subtree (HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE).;HUSKEY hUSKey, LPCSTR pszSubKey, SHREGDEL_FLAGS delRegFlags
SHRegDeleteEmptyUSKeyW;Deletes an empty registry subkey in a user-specific subtree (HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE).;HUSKEY hUSKey, LPCWSTR pwzSubKey, SHREGDEL_FLAGS delRegFlags
SHRegDeleteUSValueA;Deletes a registry subkey value in a user-specific subtree (HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE).;HUSKEY hUSKey, LPCSTR pszValue, SHREGDEL_FLAGS delRegFlags
SHRegDeleteUSValueW;Deletes a registry subkey value in a user-specific subtree (HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE).;HUSKEY hUSKey, LPCWSTR pwzValue, SHREGDEL_FLAGS delRegFlags
SHRegDuplicateHKey;Duplicates a registry key's HKEY handle.;HKEY hkey
SHRegEnumUSKeyA;Enumerates the subkeys of a registry subkey in a user-specific subtree (HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE).;HUSKEY hUSKey, DWORD dwIndex, LPSTR pszName, LPDWORD pcchName, SHREGENUM_FLAGS enumRegFlags
SHRegEnumUSKeyW;Enumerates the subkeys of a registry subkey in a user-specific subtree (HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE).;HUSKEY hUSKey, DWORD dwIndex, LPWSTR pwzName, LPDWORD pcchName, SHREGENUM_FLAGS enumRegFlags
SHRegEnumUSValueA;Enumerates the values of the specified registry subkey in a user-specific subtree (HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE).;HUSKEY hUSkey, DWORD dwIndex, LPSTR pszValueName, LPDWORD pcchValueName, LPDWORD pdwType, void *pvData, LPDWORD pcbData, SHREGENUM_FLAGS enumRegFlags
SHRegEnumUSValueW;Enumerates the values of the specified registry subkey in a user-specific subtree (HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE).;HUSKEY hUSkey, DWORD dwIndex, LPWSTR pszValueName, LPDWORD pcchValueName, LPDWORD pdwType, void *pvData, LPDWORD pcbData, SHREGENUM_FLAGS enumRegFlags
SHRegGetBoolUSValueA;Retrieves a Boolean value from a registry subkey in a user-specific subtree (HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE).;LPCSTR pszSubKey, LPCSTR pszValue, BOOL fIgnoreHKCU, BOOL fDefault
SHRegGetBoolUSValueW;Retrieves a Boolean value from a registry subkey in a user-specific subtree (HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE).;LPCWSTR pszSubKey, LPCWSTR pszValue, BOOL fIgnoreHKCU, BOOL fDefault
SHRegGetBoolValueFromHKCUHKLM;Evaluates a registry key value and returns a boolean value that reflects whether the value exists and the expected state matches the actual state.;PCWSTR pszKey, PCWSTR pszValue, BOOL fDefault
SHRegGetIntW;Reads a numeric string value from the registry and converts it to an integer.;HKEY hk, PCWSTR pwzKey, int iDefault
SHRegGetPathA;Retrieves a file path from the registry, expanding environment variables as needed.;HKEY hKey, LPCSTR pcszSubKey, LPCSTR pcszValue, LPSTR pszPath, DWORD dwFlags
SHRegGetPathW;Retrieves a file path from the registry, expanding environment variables as needed.;HKEY hKey, LPCWSTR pcszSubKey, LPCWSTR pcszValue, LPWSTR pszPath, DWORD dwFlags
SHRegGetUSValueA;Retrieves a value from a registry subkey in a user-specific subtree (HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE).;LPCSTR pszSubKey, LPCSTR pszValue, DWORD *pdwType, void *pvData, DWORD *pcbData, BOOL fIgnoreHKCU, void *pvDefaultData, DWORD dwDefaultDataSize
SHRegGetUSValueW;Retrieves a value from a registry subkey in a user-specific subtree (HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE).;LPCWSTR pszSubKey, LPCWSTR pszValue, DWORD *pdwType, void *pvData, DWORD *pcbData, BOOL fIgnoreHKCU, void *pvDefaultData, DWORD dwDefaultDataSize
SHRegGetValueA;Retrieves a registry value.;HKEY hkey, LPCSTR pszSubKey, LPCSTR pszValue, SRRF srrfFlags, DWORD *pdwType, void *pvData, DWORD *pcbData
SHRegGetValueFromHKCUHKLM;Obtains specified information from the registry.;PCWSTR pwszKey, PCWSTR pwszValue, SRRF srrfFlags, DWORD *pdwType, void *pvData, DWORD *pcbData
SHRegGetValueW;Retrieves a registry value.;HKEY hkey, LPCWSTR pszSubKey, LPCWSTR pszValue, SRRF srrfFlags, DWORD *pdwType, void *pvData, DWORD *pcbData
SHRegOpenUSKeyA;Opens a registry subkey in a user-specific subtree (HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE).;LPCSTR pszPath, REGSAM samDesired, HUSKEY hRelativeUSKey, PHUSKEY phNewUSKey, BOOL fIgnoreHKCU
SHRegOpenUSKeyW;Opens a registry subkey in a user-specific subtree (HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE).;LPCWSTR pwzPath, REGSAM samDesired, HUSKEY hRelativeUSKey, PHUSKEY phNewUSKey, BOOL fIgnoreHKCU
SHRegQueryInfoUSKeyA;Retrieves information about a specified registry subkey in a user-specific subtree (HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE).;HUSKEY hUSKey, LPDWORD pcSubKeys, LPDWORD pcchMaxSubKeyLen, LPDWORD pcValues, LPDWORD pcchMaxValueNameLen, SHREGENUM_FLAGS enumRegFlags
SHRegQueryInfoUSKeyW;Retrieves information about a specified registry subkey in a user-specific subtree (HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE).;HUSKEY hUSKey, LPDWORD pcSubKeys, LPDWORD pcchMaxSubKeyLen, LPDWORD pcValues, LPDWORD pcchMaxValueNameLen, SHREGENUM_FLAGS enumRegFlags
SHRegQueryUSValueA;Retrieves the type and data for a specified name associated with an open registry subkey in a user-specific subtree (HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE).;HUSKEY hUSKey, LPCSTR pszValue, DWORD *pdwType, void *pvData, DWORD *pcbData, BOOL fIgnoreHKCU, void *pvDefaultData, DWORD dwDefaultDataSize
SHRegQueryUSValueW;Retrieves the type and data for a specified name associated with an open registry subkey in a user-specific subtree (HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE).;HUSKEY hUSKey, LPCWSTR pszValue, DWORD *pdwType, void *pvData, DWORD *pcbData, BOOL fIgnoreHKCU, void *pvDefaultData, DWORD dwDefaultDataSize
SHRegSetPathA;Takes a file path, replaces folder names with environment strings, and places the resulting string in the registry.;HKEY hKey, LPCSTR pcszSubKey, LPCSTR pcszValue, LPCSTR pcszPath, DWORD dwFlags
SHRegSetPathW;Takes a file path, replaces folder names with environment strings, and places the resulting string in the registry.;HKEY hKey, LPCWSTR pcszSubKey, LPCWSTR pcszValue, LPCWSTR pcszPath, DWORD dwFlags
SHRegSetUSValueA;Sets a registry subkey value in a user-specific subtree (HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE).;LPCSTR pszSubKey, LPCSTR pszValue, DWORD dwType, const void *pvData, DWORD cbData, DWORD dwFlags
SHRegSetUSValueW;Sets a registry subkey value in a user-specific subtree (HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE).;LPCWSTR pwzSubKey, LPCWSTR pwzValue, DWORD dwType, const void *pvData, DWORD cbData, DWORD dwFlags
SHRegSetValue;Not supported.;HKEY hkey, LPCWSTR pszSubKey, LPCWSTR pszValue, SRRF srrfFlags, DWORD dwType, LPCVOID pvData, DWORD cbData
SHRegWriteUSValueA;Writes a value to a registry subkey in a user-specific subtree (HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE).;HUSKEY hUSKey, LPCSTR pszValue, DWORD dwType, const void *pvData, DWORD cbData, DWORD dwFlags
SHRegWriteUSValueW;Writes a value to a registry subkey in a user-specific subtree (HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE).;HUSKEY hUSKey, LPCWSTR pwzValue, DWORD dwType, const void *pvData, DWORD cbData, DWORD dwFlags
SHReleaseThreadRef;Releases a thread reference before the thread procedure returns.;
SHRemoveLocalizedName;Removes the localized name of a file in a Shell folder.;PCWSTR pszPath
SHSendMessageBroadcastA;Sends a message to all top-level windows in the system.;UINT uMsg, WPARAM wParam, LPARAM lParam
SHSendMessageBroadcastW;Sends a message to all top-level windows in the system.;UINT uMsg, WPARAM wParam, LPARAM lParam
SHSetLocalizedName;Sets the localized name of a file in a Shell folder.;PCWSTR pszPath, PCWSTR pszResModule, int idsRes
SHSetThreadRef;Stores a per-thread reference to a Component Object Model (COM) object. This allows the caller to control the thread's lifetime so that it can ensure that Windows won't shut down the thread before the caller is ready.;IUnknown *punk
SHSetUnreadMailCountW;Stores the current user's unread message count for a specified email account in the registry.;LPCWSTR pszMailAddress, DWORD dwCount, LPCWSTR pszShellExecuteCommand
SHSetValueA;Sets the value of a registry key.;HKEY hkey, LPCSTR pszSubKey, LPCSTR pszValue, DWORD dwType, LPCVOID pvData, DWORD cbData
SHSetValueW;Sets the value of a registry key.;HKEY hkey, LPCWSTR pszSubKey, LPCWSTR pszValue, DWORD dwType, LPCVOID pvData, DWORD cbData
SHSkipJunction;Checks a bind context to see if it is safe to bind to a particular component object.;IBindCtx *pbc, const CLSID *pclsid
SHStrDupA;Makes a copy of a string in newly allocated memory.;LPCSTR psz, LPWSTR *ppwsz
SHStrDupW;Makes a copy of a string in newly allocated memory.;LPCWSTR psz, LPWSTR *ppwsz
SHStripMneumonicA;Removes the mnemonic marker from a string.;LPSTR pszMenu
SHStripMneumonicW;Removes the mnemonic marker from a string.;LPWSTR pszMenu
SHTestTokenMembership;Uses CheckTokenMembership to test whether the given token is a member of the local group with the specified RID.;HANDLE hToken, ULONG ulRID
SHUnicodeToAnsi;Converts a string from the Unicode code page to the ANSI code page.;PCWSTR pwszSrc, PSTR pszDst, int cchBuf
SHUnicodeToUnicode;Copies a Unicode string.;PCWSTR pwzSrc, PWSTR pwzDst, int cwchBuf
SHUnlockShared;SHUnlockShared may be altered or unavailable.;void *pvData
ShutdownBlockReasonCreate;Indicates that the system cannot be shut down and sets a reason string to be displayed to the user if system shutdown is initiated.;HWND hWnd, LPCWSTR pwszReason
ShutdownBlockReasonDestroy;Indicates that the system can be shut down and frees the reason string.;HWND hWnd
ShutdownBlockReasonQuery;Retrieves the reason string set by the ShutdownBlockReasonCreate function.;HWND hWnd, LPWSTR pwszBuff, DWORD *pcchBuff
ShutDown;Called by the server engine before the server is terminated.;
shutdown;The shutdown function disables sends or receives on a socket.;SOCKET s, int how
SignalObjectAndWait;Signals one object and waits on another object as a single operation.;HANDLE hObjectToSignal, HANDLE hObjectToWaitOn, DWORD dwMilliseconds, BOOL bAlertable
SizeofResource;Retrieves the size, in bytes, of the specified resource.;HMODULE hModule, HRSRC hResInfo
SkipPointerFrameMessages;Determines which pointer input frame generated the most recently retrieved message for the specified pointer and discards any queued (unretrieved) pointer input messages generated from the same pointer input frame.;UINT32 pointerId
Skip;Skips a specified number of attributes in the attribute-enumeration sequence.;LONG celt
Skip;Skips a specified number of columns in the column-enumeration sequence.;LONG celt
Skip;Skips a specified number of extensions in the extension-enumeration sequence.;LONG celt
Skip;Skips a specified number of rows in the row enumeration sequence.;LONG celt
SLAcquireGenuineTicket;Gets a XrML genuine ticket acquired from the Software Licensing Server (SLS).;VOID **ppTicketBlob, UINT *pcbTicketBlob, PCWSTR pwszTemplateId, PCWSTR pwszServerUrl, PCWSTR pwszClientToken
SLActivateProduct;Acquires a use license from the Software License Server (SLS).;HSLC hSLC, const SLID *pProductSkuId, UINT cbAppSpecificData, const PVOID pvAppSpecificData, const SL_ACTIVATION_INFO_HEADER *pActivationInfo, PCWSTR pwszProxyServer, WORD wProxyPort
SLClose;Closes the Software Licensing Client (SLC) context handle.;HSLC hSLC
SLConsumeRight;Let an application to exercise rights on a locally-stored licenses.;HSLC hSLC, const SLID *pAppId, const SLID *pProductSkuId, PCWSTR pwszRightName, PVOID pvReserved
SLDepositMigrationBlob;Deposits licensing information previously collected and gathered using the SLGatherMigrationBlob function.;HANDLE hFile
SLDepositOfflineConfirmationId;Deposits Installation ID (IID) and Confirmation ID (CID) for offline activation.;HSLC hSLC, const SLID *pProductSkuId, PCWSTR pwszInstallationId, PCWSTR pwszConfirmationId
SLDepositOfflineConfirmationIdEx;Deposits Installation ID (IID) and Confirmation ID (CID) for offline activation.;HSLC hSLC, const SLID *pProductSkuId, const SL_ACTIVATION_INFO_HEADER *pActivationInfo, PCWSTR pwszInstallationId, PCWSTR pwszConfirmationId
SleepConditionVariableCS;Sleeps on the specified condition variable and releases the specified critical section as an atomic operation.;PCONDITION_VARIABLE ConditionVariable, PCRITICAL_SECTION CriticalSection, DWORD dwMilliseconds
SleepConditionVariableSRW;Sleeps on the specified condition variable and releases the specified lock as an atomic operation.;PCONDITION_VARIABLE ConditionVariable, PSRWLOCK SRWLock, DWORD dwMilliseconds, ULONG Flags
SleepEx;Suspends the current thread until the specified condition is met.;DWORD dwMilliseconds, BOOL bAlertable
Sleep;Suspends the execution of the current thread until the time-out interval elapses.;DWORD dwMilliseconds
SLFireEvent;Sends a specified event to a registered listener.;HSLC hSLC, PCWSTR pwszEventId, const SLID *pApplicationId
SLGatherMigrationBlob;Gathers licensing information for the provided file handle. This licensing information can later be applied or deposited using the SLDepositMigrationBlob function.;BOOL bMigratableOnly, LPCWSTR pwszEncryptorUri, HANDLE hFile
SLGenerateOfflineInstallationIdEx;Generates Installation ID (IID).;HSLC hSLC, const SLID *pProductSkuId, const SL_ACTIVATION_INFO_HEADER *pActivationInfo, PWSTR *ppwszInstallationId
SLGenerateOfflineInstallationId;Generates the Installation ID (IID).;HSLC hSLC, const SLID *pProductSkuId, PWSTR *ppwszInstallationId
SLGetApplicationInformation;Gets information about the specified application.;HSLC hSLC, const SLID *pApplicationId, PCWSTR pwszValueName, SLDATATYPE *peDataType, UINT *pcbValue, PBYTE *ppbValue
SLGetApplicationPolicy;Queries a policy from the set stored with the SLPersistApplicationPolicies function and loaded using the SLLoadApplicationPolicies function.;HSLP hPolicyContext, PCWSTR pwszValueName, SLDATATYPE *peDataType, UINT *pcbValue, PBYTE *ppbValue
SLGetAuthenticationResult;Gets the authentication results.;HSLC hSLC, UINT *pcbValue, PBYTE *ppbValue
SLGetGenuineInformationEx;Specifies information about the genuine status of a Windows computer.;const SLID *pAppId, PCWSTR pwszValueName, SLDATATYPE *peDataType, UINT *pcbValue, BYTE **ppbValue
SLGetGenuineInformation;Gets information about the genuine state of a Windows computer.;const SLID *pQueryId, PCWSTR pwszValueName, SLDATATYPE *peDataType, UINT *pcbValue, BYTE **ppbValue
SLGetInstalledProductKeyIds;This function returns a list of product key IDs associated with the specified Product SKU ID.;HSLC hSLC, const SLID *pProductSkuId, UINT *pnProductKeyIds, SLID **ppProductKeyIds
SLGetLicenseFileId;Checks if the license BLOB has been installed already.;HSLC hSLC, UINT cbLicenseBlob, const BYTE *pbLicenseBlob, SLID *pLicenseFileId
SLGetLicenseInformation;Gets the specified license information.;HSLC hSLC, const SLID *pSLLicenseId, PCWSTR pwszValueName, SLDATATYPE *peDataType, UINT *pcbValue, PBYTE *ppbValue
SLGetLicense;Returns the license file BLOB.;HSLC hSLC, const SLID *pLicenseFileId, UINT *pcbLicenseFile, PBYTE *ppbLicenseFile
SLGetLicensingStatusInformation;Gets the licensing status of the specified application or SKU.;HSLC hSLC, const SLID *pAppID, const SLID *pProductSkuId, PCWSTR pwszRightName, UINT *pnStatusCount, SL_LICENSING_STATUS **ppLicensingStatus
SLGetPKeyId;Gets the registered product key ID associated with the product.;HSLC hSLC, PCWSTR pwszPKeyAlgorithm, PCWSTR pwszPKeyString, UINT cbPKeySpecificData, const BYTE *pbPKeySpecificData, SLID *pPKeyId
SLGetPKeyInformation;Gets the information of the specified product key.;HSLC hSLC, const SLID *pPKeyId, PCWSTR pwszValueName, SLDATATYPE *peDataType, UINT *pcbValue, PBYTE *ppbValue
SLGetPolicyInformationDWORD;Gets the policy information after right has been consumed successfully.;HSLC hSLC, PCWSTR pwszValueName, DWORD *pdwValue
SLGetPolicyInformation;Gets the policy information after right has been consumed successfully.;HSLC hSLC, PCWSTR pwszValueName, SLDATATYPE *peDataType, UINT *pcbValue, PBYTE *ppbValue
SLGetProductSkuInformation;Gets information about the specified product SKU.;HSLC hSLC, const SLID *pProductSkuId, PCWSTR pwszValueName, SLDATATYPE *peDataType, UINT *pcbValue, PBYTE *ppbValue
SLGetReferralInformation;Gets referral information for the specified product.;HSLC hSLC, SLREFERRALTYPE eReferralType, const SLID *pSkuOrAppId, PCWSTR pwszValueName, PWSTR *ppwszValue
SLGetServerStatus;Checks the server status according to the specified URL and RequestType.;PCWSTR pwszServerURL, PCWSTR pwszAcquisitionType, PCWSTR pwszProxyServer, WORD wProxyPort, HRESULT *phrStatus
SLGetServiceInformation;Gets global data information.;HSLC hSLC, PCWSTR pwszValueName, SLDATATYPE *peDataType, UINT *pcbValue, PBYTE *ppbValue
SLGetSLIDList;Gets a list of SLIDs according to the input query ID type and the ID value.;HSLC hSLC, SLIDTYPE eQueryIdType, const SLID *pQueryId, SLIDTYPE eReturnIdType, UINT *pnReturnIds, SLID **ppReturnIds
SLGetWindowsInformationDWORD;Retrieves the DWORD value portion of a name-value pair from the licensing policy of a software component.;PCWSTR pwszValueName, DWORD *pdwValue
SLGetWindowsInformation;Retrieves the value portion of a name-value pair from the licensing policy of a software component.;PCWSTR pwszValueName, SLDATATYPE *peDataType, UINT *pcbValue, PBYTE *ppbValue
SLInstallLicense;Stores the specified license and returns a license file ID.;HSLC hSLC, UINT cbLicenseBlob, const BYTE *pbLicenseBlob, SLID *pLicenseFileId
SLInstallProofOfPurchaseEx;Register the product key with SL.;HSLC hSLC, const SLID *pApplicationId, const SLID *pProductSkuId, PCWSTR pwszPKeyAlgorithm, PCWSTR pwszPKeyString, UINT cbPKeySpecificData, PBYTE pbPKeySpecificData, SLID *pPkeyId
SLInstallProofOfPurchase;Registers the product key with SL.;HSLC hSLC, PCWSTR pwszPKeyAlgorithm, PCWSTR pwszPKeyString, UINT cbPKeySpecificData, PBYTE pbPKeySpecificData, SLID *pPkeyId
SLIsGenuineLocal;Checks whether the specified application is a genuine Windows installation.;const SLID *pAppId, SL_GENUINE_STATE *pGenuineState, SL_NONGENUINE_UI_OPTIONS *pUIOptions
SLIsGenuineLocalEx;Checks whether the specified application installation is genuine.;const SLID *pAppId, const SLID *pSkuId, SL_GENUINE_STATE *pGenuineState
SLLoadApplicationPolicies;Loads the application policies set with the SLPersistApplicationPolicies function for use by the SLGetApplicationPolicy function.;const SLID *pApplicationId, const SLID *pProductSkuId, DWORD dwFlags, HSLP *phPolicyContext
SLOpen;Initializes the Software Licensing Client (SLC) and connects SLC to the Software Licensing Service (SLS).;HSLC *phSLC
SLPersistApplicationPolicies;Stores the current consumed policies to disk for fast policy access.;const SLID *pApplicationId, const SLID *pProductSkuId, DWORD dwFlags
SLPersistRTSPayloadOverride;Associates information with the specified product for both online and phone activation.;HSLC hSLC, const SLID *pApplicationId, const SLID *pProductSkuId, BYTE *pbData, DWORD cbData
SLQueryLicenseValueFromApp;Gets the value for the specified component policy.;PCWSTR valueName, ULONG *valueType, PVOID dataBuffer, ULONG dataSize, ULONG *resultDataSize
SLReArm;This function is rearm application activation.;HSLC hSLC, const SLID *pApplicationId, const SLID *pProductSkuId, DWORD dwFlags
SLRegisterEvent;Registers an event in the SL service.;HSLC hSLC, PCWSTR pwszEventId, const SLID *pApplicationId, HANDLE hEvent
SLSetAuthenticationData;Sets authentication data.;HSLC hSLC, UINT cbValue, const BYTE *pbValue
SLSetCurrentProductKey;Sets the current product key to the previously installed product key.;HSLC hSLC, const SLID *pProductSkuId, const SLID *pProductKeyId
SLSetGenuineInformation;Specifies information about the genuine status of a Windows computer.;const SLID *pQueryId, PCWSTR pwszValueName, SLDATATYPE eDataType, UINT cbValue, const BYTE *pbValue
SLUninstallLicense;Uninstalls the license specified by the license file ID and target user option.;HSLC hSLC, const SLID *pLicenseFileId
SLUninstallProofOfPurchase;Unregisters the product key information.;HSLC hSLC, const SLID *pPKeyId
SLUnloadApplicationPolicies;Releases the policy context handle returned by the SLLoadApplicationPolicies function.;HSLP hPolicyContext, DWORD dwFlags
SLUnregisterEvent;Unregisters a registered event in the SL service.;HSLC hSLC, PCWSTR pwszEventId, const SLID *pApplicationId, HANDLE hEvent
sndOpenSound;Opens the specified sound event.;LPCWSTR EventName, LPCWSTR AppName, INT32 Flags, PHANDLE FileHandle
SnmpMgrClose;The SnmpMgrClose function closes the communications sockets and data structures that are associated with the specified session. This function is an element of the SNMP Management API.;LPSNMP_MGR_SESSION session
SnmpMgrCtl;The SnmpMgrCtl function sets an operating parameter associated with an SNMP session. This function is an element of the SNMP Management API.;LPSNMP_MGR_SESSION session, DWORD dwCtlCode, LPVOID lpvInBuffer, DWORD cbInBuffer, LPVOID lpvOUTBuffer, DWORD cbOUTBuffer, LPDWORD lpcbBytesReturned
SnmpMgrGetTrapEx;The SnmpMgrGetTrapEx function returns outstanding trap data that the caller has not received if trap reception is enabled.;AsnObjectIdentifier *enterprise, AsnNetworkAddress *agentAddress, AsnNetworkAddress *sourceAddress, AsnInteger *genericTrap, AsnInteger *specificTrap, AsnOctetString *community, AsnTimeticks *timeStamp, RFC1157VarBindList *variableBindings
SnmpMgrGetTrap;The SnmpMgrGetTrap function returns outstanding trap data that the caller has not received if trap reception is enabled. This function is an element of the SNMP Management API.;AsnObjectIdentifier *enterprise, AsnNetworkAddress *IPAddress, AsnInteger *genericTrap, AsnInteger *specificTrap, AsnTimeticks *timeStamp, RFC1157VarBindList *variableBindings
SnmpMgrOidToStr;The SnmpMgrOidToStr function converts an internal object identifier structure to its string representation. This function is an element of the SNMP Management API.;AsnObjectIdentifier *oid, LPSTR *string
SnmpMgrOpen;The SnmpMgrOpen function initializes communications sockets and data structures, allowing communications with the specified SNMP agent. This function is an element of the SNMP Management API.;LPSTR lpAgentAddress, LPSTR lpAgentCommunity, INT nTimeOut, INT nRetries
SnmpMgrRequest;The SnmpMgrRequest function requests the specified operation be performed with the specified agent. This function is an element of the SNMP Management API.;LPSNMP_MGR_SESSION session, BYTE requestType, RFC1157VarBindList *variableBindings, AsnInteger *errorStatus, AsnInteger *errorIndex
SnmpMgrStrToOid;The SnmpMgrStrToOid function converts the string format of an object identifier to its internal object identifier structure. This function is an element of the SNMP Management API.;LPSTR string, AsnObjectIdentifier *oid
SnmpMgrTrapListen;The SnmpMgrTrapListen function registers the ability of an SNMP manager application to receive SNMP traps from the SNMP Trap Service. This function is an element of the SNMP Management API.;HANDLE *phTrapAvailable
socket;The socket function creates a socket that is bound to a specific transport service provider.;int af, int type, int protocol
SoundSentry;Triggers a visual signal to indicate that a sound is playing.;
SpAcceptCredentialsFn;Called by the Local Security Authority (LSA) to pass the security package any credentials stored for the authenticated security principal.;SECURITY_LOGON_TYPE LogonType, PUNICODE_STRING AccountName, PSECPKG_PRIMARY_CRED PrimaryCredentials, PSECPKG_SUPPLEMENTAL_CRED SupplementalCredentials ) {...}
SpAcceptLsaModeContextFn;Server dispatch function used to create a security context shared by a server and client.;LSA_SEC_HANDLE CredentialHandle, LSA_SEC_HANDLE ContextHandle, PSecBufferDesc InputBuffer, ULONG ContextRequirements, ULONG TargetDataRep, PLSA_SEC_HANDLE NewContextHandle, PSecBufferDesc OutputBuffer, PULONG ContextAttributes, PTimeStamp ExpirationTime, PBOOLEAN MappedContext, PSecBuffer ContextData ) {...}
SpAcquireCredentialsHandleFn;Called to obtain a handle to a principal's credentials.;PUNICODE_STRING PrincipalName, ULONG CredentialUseFlags, PLUID LogonId, PVOID AuthorizationData, PVOID GetKeyFunciton, PVOID GetKeyArgument, PLSA_SEC_HANDLE CredentialHandle, PTimeStamp ExpirationTime ) {...}
SpAddCredentialsFn;Used to add credentials for a security principal.;LSA_SEC_HANDLE CredentialHandle, PUNICODE_STRING PrincipalName, PUNICODE_STRING Package, ULONG CredentialUseFlags, PVOID AuthorizationData, PVOID GetKeyFunciton, PVOID GetKeyArgument, PTimeStamp ExpirationTime ) {...}
SpApplyControlTokenFn;Applies a control token to a security context. This function is not currently called by the Local Security Authority (LSA).;LSA_SEC_HANDLE ContextHandle, PSecBufferDesc ControlToken ) {...}
SpCompleteAuthTokenFn;Completes an authentication token.;LSA_SEC_HANDLE ContextHandle, PSecBufferDesc InputBuffer ) {...}
SpDeleteCredentialsFn;Deletes credentials from a security package's list of primary or supplemental credentials.;LSA_SEC_HANDLE CredentialHandle, PSecBuffer Key ) {...}
SpExchangeMetaDataFn;Sends metadata to a security support provider.;LSA_SEC_HANDLE CredentialHandle, PUNICODE_STRING TargetName, ULONG ContextRequirements, ULONG MetaDataLength, PUCHAR MetaData, PLSA_SEC_HANDLE ContextHandle ) {...}
SpExportSecurityContextFn;Exports a security context to another process.;LSA_SEC_HANDLE phContext, ULONG fFlags, PSecBuffer pPackedContext, PHANDLE pToken ) {...}
SpFormatCredentialsFn;Formats credentials to be stored in a user object.;PSecBuffer Credentials, PSecBuffer FormattedCredentials ) {...}
SpFreeCredentialsHandleFn;Frees credentials acquired by calling the SpAcquireCredentialsHandle function.;LSA_SEC_HANDLE CredentialHandle ) {...}
SpGetContextTokenFn;Obtains the token to impersonate.;LSA_SEC_HANDLE ContextHandle, PHANDLE ImpersonationToken ) {...}
SpGetCredentialsFn;Retrieves the primary and supplemental credentials from the user object.;LSA_SEC_HANDLE CredentialHandle, PSecBuffer Credentials ) {...}
SpGetCredUIContextFn;Retrieves context information from a credential provider.;LSA_SEC_HANDLE ContextHandle, GUID *CredType, PULONG FlatCredUIContextLength, PUCHAR *FlatCredUIContext ) {...}
SpGetExtendedInformationFn;Provides extended information about a security package.;SECPKG_EXTENDED_INFORMATION_CLASS Class, PSECPKG_EXTENDED_INFORMATION *ppInformation ) {...}
SpGetInfoFn;Provides general information about the security package, such as its name and capabilities.;PSecPkgInfo PackageInfo ) {...}
SpGetUserInfoFn;Retrieves information about a logon session.;PLUID LogonId, ULONG Flags, PSecurityUserData *UserData ) {...}
SpImportSecurityContextFn;Imports a security context from another process.;PSecBuffer pPackedContext, HANDLE Token, PLSA_SEC_HANDLE phContext ) {...}
SpInitializeFn;Is called once by the Local Security Authority (LSA) to provide a security package with general security information and a dispatch table of support functions.;ULONG_PTR PackageId, PSECPKG_PARAMETERS Parameters, PLSA_SECPKG_FUNCTION_TABLE FunctionTable ) {...}
SpInitLsaModeContextFn;The client dispatch function used to establish a security context between a server and client.;LSA_SEC_HANDLE CredentialHandle, LSA_SEC_HANDLE ContextHandle, PUNICODE_STRING TargetName, ULONG ContextRequirements, ULONG TargetDataRep, PSecBufferDesc InputBuffers, PLSA_SEC_HANDLE NewContextHandle, PSecBufferDesc OutputBuffers, PULONG ContextAttributes, PTimeStamp ExpirationTime, PBOOLEAN MappedContext, PSecBuffer ContextData ) {...}
SpInitUserModeContextFn;Creates a user-mode security context from a packed Local Security Authority (LSA)-mode context.;LSA_SEC_HANDLE ContextHandle, PSecBuffer PackedContext ) {...}
SpInstanceInitFn;Initializes user-mode security packages in an SSP/AP.;ULONG Version, PSECPKG_DLL_FUNCTIONS FunctionTable, PVOID *UserFunctions ) {...}
SpLsaModeInitializeFn;Provides the LSA with pointers to the functions implemented by each security package in the SSP/AP DLL.;ULONG LsaVersion, PULONG PackageVersion, PSECPKG_FUNCTION_TABLE *ppTables, PULONG pcTables ) {...}
SpMarshallSupplementalCredsFn;Converts supplemental credentials from a public format into a format suitable for local procedure calls.;ULONG CredentialSize, PUCHAR Credentials, PULONG MarshalledCredSize, PVOID *MarshalledCreds ) {...}
SpQueryContextAttributesFn;Retrieves the attributes of a security context.;LSA_SEC_HANDLE ContextHandle, ULONG ContextAttribute, PVOID Buffer ) {...}
SpQueryCredentialsAttributesFn;Retrieves the attributes for a credential.;LSA_SEC_HANDLE CredentialHandle, ULONG CredentialAttribute, PVOID Buffer ) {...}
SpQueryMetaDataFn;Gets metadata from a security support provider (SSP) when it is initiating a security context.;LSA_SEC_HANDLE CredentialHandle, PUNICODE_STRING TargetName, ULONG ContextRequirements, PULONG MetaDataLength, PUCHAR *MetaData, PLSA_SEC_HANDLE ContextHandle ) {...}
SpSaveCredentialsFn;Saves a supplemental credential to the user object.;LSA_SEC_HANDLE CredentialHandle, PSecBuffer Credentials ) {...}
SpSealMessageFn;Encrypts a message exchanged between a client and server.;LSA_SEC_HANDLE ContextHandle, ULONG QualityOfProtection, PSecBufferDesc MessageBuffers, ULONG MessageSequenceNumber ) {...}
SpSetExtendedInformationFn;Sets extended information about the security package.;SECPKG_EXTENDED_INFORMATION_CLASS Class, PSECPKG_EXTENDED_INFORMATION Info ) {...}
SpUnsealMessageFn;Decrypts a message that was previously encrypted with the SpSealMessage function.;LSA_SEC_HANDLE ContextHandle, PSecBufferDesc MessageBuffers, ULONG MessageSequenceNumber, PULONG QualityOfProtection ) {...}
SpUpdateCredentialsFn;Updates the credentials associated with the specified context.;LSA_SEC_HANDLE ContextHandle, GUID *CredType, ULONG FlatCredUIContextLength, PUCHAR FlatCredUIContext ) {...}
SpUserModeInitializeFn;Called when a security support provider/authentication package (SSP/AP) DLL is loaded into the process space of a client/server application. This function provides the SECPKG_USER_FUNCTION_TABLE tables for each security package in the SSP/AP DLL.;ULONG LsaVersion, PULONG PackageVersion, PSECPKG_USER_FUNCTION_TABLE *ppTables, PULONG pcTables ) {...}
SpValidateTargetInfoFn;Validates that the specified SECPKG_TARGETINFO structure represents a valid target.;PLSA_CLIENT_REQUEST ClientRequest, PVOID ProtocolSubmitBuffer, PVOID ClientBufferBase, ULONG SubmitBufferLength, PSECPKG_TARGETINFO TargetInfo ) {...}
SRRemoveRestorePoint;Deletes the specified restore point.;DWORD dwRPNum
SRSetRestorePointA;Specifies the beginning and the ending of a set of changes so that System Restore can create a restore point.;PRESTOREPOINTINFOA pRestorePtSpec, PSTATEMGRSTATUS pSMgrStatus
SRSetRestorePointW;Specifies the beginning and the ending of a set of changes so that System Restore can create a restore point.;PRESTOREPOINTINFOW pRestorePtSpec, PSTATEMGRSTATUS pSMgrStatus
SslCrackCertificate;Returns an X509Certificate structure with the information contained in the specified certificate BLOB.;PUCHAR pbCertificate, DWORD cbCertificate, DWORD dwFlags, PX509Certificate *ppCertificate
SslEmptyCacheA;Removes the specified string from the Schannel cache.;LPSTR pszTargetName, DWORD dwFlags
SslEmptyCacheW;Removes the specified string from the Schannel cache.;LPWSTR pszTargetName, DWORD dwFlags
SslFreeCertificate;Frees a certificate that was allocated by a previous call to the SslCrackCertificate function.;PX509Certificate pCertificate
SslGetServerIdentity;Gets the identity of the server.;PBYTE ClientHello, DWORD ClientHelloSize, PBYTE *ServerIdentity, PDWORD ServerIdentitySize, DWORD Flags
SspiAcceptSecurityContextAsync;Lets the server component of a transport application asynchronously establish a security context between the server and a remote client.;SspiAsyncContext *AsyncContext, PCredHandle phCredential, PCtxtHandle phContext, PSecBufferDesc pInput, unsigned long fContextReq, unsigned long TargetDataRep, PCtxtHandle phNewContext, PSecBufferDesc pOutput, unsigned long *pfContextAttr, PTimeStamp ptsExpiry
SspiAcquireCredentialsHandleAsyncA;Asynchronously acquires a handle to preexisting credentials of a security principal.;SspiAsyncContext *AsyncContext, LPSTR pszPrincipal, LPSTR pszPackage, unsigned long fCredentialUse, void *pvLogonId, void *pAuthData, SEC_GET_KEY_FN pGetKeyFn, void *pvGetKeyArgument, PCredHandle phCredential, PTimeStamp ptsExpiry
SspiAcquireCredentialsHandleAsyncW;Asynchronously acquires a handle to preexisting credentials of a security principal.;SspiAsyncContext *AsyncContext, PSECURITY_STRING pszPrincipal, PSECURITY_STRING pszPackage, unsigned long fCredentialUse, void *pvLogonId, void *pAuthData, SEC_GET_KEY_FN pGetKeyFn, void *pvGetKeyArgument, PCredHandle phCredential, PTimeStamp ptsExpiry
SspiAsyncContextRequiresNotify;Determines whether a given async context requires notification on completion of the call.;SspiAsyncContext *AsyncContext
SspiAsyncNotifyCallback;Callback used for notifying completion of an async SSPI call.;SspiAsyncContext *Handle, PVOID CallbackData ) {...}
SspiCompareAuthIdentities;Compares the two specified credentials.;PSEC_WINNT_AUTH_IDENTITY_OPAQUE AuthIdentity1, PSEC_WINNT_AUTH_IDENTITY_OPAQUE AuthIdentity2, PBOOLEAN SameSuppliedUser, PBOOLEAN SameSuppliedIdentity
SspiCopyAuthIdentity;Creates a copy of the specified opaque credential structure.;PSEC_WINNT_AUTH_IDENTITY_OPAQUE AuthData, PSEC_WINNT_AUTH_IDENTITY_OPAQUE *AuthDataCopy
SspiCreateAsyncContext;Creates an instance of SspiAsyncContext which is used to track the async call.;
SspiDecryptAuthIdentity;Decrypts the specified encrypted credential.;PSEC_WINNT_AUTH_IDENTITY_OPAQUE EncryptedAuthData
SspiDecryptAuthIdentityEx;Decrypts a SEC_WINNT_AUTH_IDENTITY_OPAQUE structure.;ULONG Options, PSEC_WINNT_AUTH_IDENTITY_OPAQUE EncryptedAuthData
SspiDeleteSecurityContextAsync;Deletes the local data structures associated with the specified security context initiated by a previous call to the SspiInitializeSecurityContextAsync function or the SspiAcceptSecurityContextAsync function.;SspiAsyncContext *AsyncContext, PCtxtHandle phContext
SspiEncodeAuthIdentityAsStrings;Encodes the specified authentication identity as three strings.;PSEC_WINNT_AUTH_IDENTITY_OPAQUE pAuthIdentity, PCWSTR *ppszUserName, PCWSTR *ppszDomainName, PCWSTR *ppszPackedCredentialsString
SspiEncodeStringsAsAuthIdentity;Encodes a set of three credential strings as an authentication identity structure.;PCWSTR pszUserName, PCWSTR pszDomainName, PCWSTR pszPackedCredentialsString, PSEC_WINNT_AUTH_IDENTITY_OPAQUE *ppAuthIdentity
SspiEncryptAuthIdentity;Encrypts the specified identity structure.;PSEC_WINNT_AUTH_IDENTITY_OPAQUE AuthData
SspiEncryptAuthIdentityEx;Encrypts a SEC_WINNT_AUTH_IDENTITY_OPAQUE structure.;ULONG Options, PSEC_WINNT_AUTH_IDENTITY_OPAQUE AuthData
SspiExcludePackage;Creates a new identity structure that is a copy of the specified identity structure modified to exclude the specified security support provider (SSP).;PSEC_WINNT_AUTH_IDENTITY_OPAQUE AuthIdentity, PCWSTR pszPackageName, PSEC_WINNT_AUTH_IDENTITY_OPAQUE *ppNewAuthIdentity
SspiFreeAsyncContext;Frees up a context created in the call to the SspiCreateAsyncContext function.;SspiAsyncContext *Handle
SspiFreeAuthIdentity;Frees the memory allocated for the specified identity structure.;PSEC_WINNT_AUTH_IDENTITY_OPAQUE AuthData
SspiFreeCredentialsHandleAsync;Frees up a credential handle.;SspiAsyncContext *AsyncContext, PCredHandle phCredential
SspiGetAsyncCallStatus;Gets the current status of an async call associated with the provided context.;SspiAsyncContext *Handle
SspiGetCredUIContext;Retrieves context information from a credential provider.;HANDLE ContextHandle, GUID *CredType, LUID *LogonId, PSEC_WINNT_CREDUI_CONTEXT_VECTOR *CredUIContexts, HANDLE *TokenHandle
SspiGetTargetHostName;Gets the host name associated with the specified target.;PCWSTR pszTargetName, PWSTR *pszHostName
SspiInitializeSecurityContextAsyncA;Initializes an async security context.;SspiAsyncContext *AsyncContext, PCredHandle phCredential, PCtxtHandle phContext, LPSTR pszTargetName, unsigned long fContextReq, unsigned long Reserved1, unsigned long TargetDataRep, PSecBufferDesc pInput, unsigned long Reserved2, PCtxtHandle phNewContext, PSecBufferDesc pOutput, unsigned long *pfContextAttr, PTimeStamp ptsExpiry
SspiInitializeSecurityContextAsyncW;Initializes an async security context.;SspiAsyncContext *AsyncContext, PCredHandle phCredential, PCtxtHandle phContext, PSECURITY_STRING pszTargetName, unsigned long fContextReq, unsigned long Reserved1, unsigned long TargetDataRep, PSecBufferDesc pInput, unsigned long Reserved2, PCtxtHandle phNewContext, PSecBufferDesc pOutput, unsigned long *pfContextAttr, PTimeStamp ptsExpiry
SspiIsAuthIdentityEncrypted;Indicates whether the specified identity structure is encrypted.;PSEC_WINNT_AUTH_IDENTITY_OPAQUE EncryptedAuthData
SspiIsPromptingNeeded;Indicates whether an error returned after a call to either the InitializeSecurityContext or the AcceptSecurityContext function requires an additional call to the SspiPromptForCredentials function.;unsigned long ErrorOrNtStatus
SspiLocalFree;Frees the memory associated with the specified buffer.;PVOID DataBuffer
SspiMarshalAuthIdentity;Serializes the specified identity structure into a byte array.;PSEC_WINNT_AUTH_IDENTITY_OPAQUE AuthIdentity, unsigned long *AuthIdentityLength, char **AuthIdentityByteArray
SspiPrepareForCredRead;Generates a target name and credential type from the specified identity structure.;PSEC_WINNT_AUTH_IDENTITY_OPAQUE AuthIdentity, PCWSTR pszTargetName, PULONG pCredmanCredentialType, PCWSTR *ppszCredmanTargetName
SspiPrepareForCredWrite;Generates values from an identity structure that can be passed as the values of parameters in a call to the CredWrite function.;PSEC_WINNT_AUTH_IDENTITY_OPAQUE AuthIdentity, PCWSTR pszTargetName, PULONG pCredmanCredentialType, PCWSTR *ppszCredmanTargetName, PCWSTR *ppszCredmanUserName, PUCHAR *ppCredentialBlob, PULONG pCredentialBlobSize
SspiPromptForCredentialsA;Allows a Security Support Provider Interface (SSPI) application to prompt a user to enter credentials.;PCSTR pszTargetName, PCREDUI_INFOA pUiInfo, unsigned long dwAuthError, PCSTR pszPackage, PSEC_WINNT_AUTH_IDENTITY_OPAQUE pInputAuthIdentity, PSEC_WINNT_AUTH_IDENTITY_OPAQUE *ppAuthIdentity, int *pfSave, unsigned long dwFlags
SspiPromptForCredentialsW;Allows a Security Support Provider Interface (SSPI) application to prompt a user to enter credentials.;PCWSTR pszTargetName, PCREDUI_INFOW pUiInfo, unsigned long dwAuthError, PCWSTR pszPackage, PSEC_WINNT_AUTH_IDENTITY_OPAQUE pInputAuthIdentity, PSEC_WINNT_AUTH_IDENTITY_OPAQUE *ppAuthIdentity, int *pfSave, unsigned long dwFlags
SspiReinitAsyncContext;Marks an async context for reuse.;SspiAsyncContext *Handle
SspiSetAsyncNotifyCallback;Registers a callback that is notified on async call completion.;SspiAsyncContext *Context, SspiAsyncNotifyCallback Callback, void *CallbackData
SspiUnmarshalAuthIdentity;Deserializes the specified array of byte values into an identity structure.;unsigned long AuthIdentityLength, char *AuthIdentityByteArray, PSEC_WINNT_AUTH_IDENTITY_OPAQUE *ppAuthIdentity
SspiUnmarshalCredUIContext;Deserializes credential information obtained by a credential provider during a previous call to the ICredentialProvider::SetSerialization method.;PUCHAR MarshaledCredUIContext, ULONG MarshaledCredUIContextLength, PSEC_WINNT_CREDUI_CONTEXT *CredUIContext
SspiUpdateCredentials;Updates the credentials associated with the specified context.;HANDLE ContextHandle, GUID *CredType, ULONG FlatCredUIContextLength, PUCHAR FlatCredUIContext
SspiValidateAuthIdentity;Indicates whether the specified identity structure is valid.;PSEC_WINNT_AUTH_IDENTITY_OPAQUE AuthData
SspiZeroAuthIdentity;Fills the block of memory associated with the specified identity structure with zeros.;PSEC_WINNT_AUTH_IDENTITY_OPAQUE AuthData
StartDocA;The StartDoc function starts a print job.;HDC hdc, const DOCINFOA *lpdi
StartDocW;The StartDoc function starts a print job.;HDC hdc, const DOCINFOW *lpdi
StartPage;The StartPage function prepares the printer driver to accept data.;HDC hdc
StartServiceA;Starts a service.;SC_HANDLE hService, DWORD dwNumServiceArgs, LPCSTR *lpServiceArgVectors
StartServiceCtrlDispatcherA;Connects the main thread of a service process to the service control manager, which causes the thread to be the service control dispatcher thread for the calling process.;const SERVICE_TABLE_ENTRYA *lpServiceStartTable
StartServiceCtrlDispatcherW;Connects the main thread of a service process to the service control manager, which causes the thread to be the service control dispatcher thread for the calling process.;const SERVICE_TABLE_ENTRYW *lpServiceStartTable
StartServiceW;Starts a service.;SC_HANDLE hService, DWORD dwNumServiceArgs, LPCWSTR *lpServiceArgVectors
StartThreadpoolIo;Notifies the thread pool that I/O operations may possibly begin for the specified I/O completion object. A worker thread calls the I/O completion object's callback function after the operation completes on the file handle bound to this object.;PTP_IO pio
StgCreateDocfile;Creates a new compound file storage object using the COM-provided compound file implementation for the IStorage interface.;const WCHAR *pwcsName, DWORD grfMode, DWORD reserved, IStorage **ppstgOpen
StgCreateDocfileOnILockBytes;Creates and opens a new compound file storage object on top of a byte-array object provided by the caller.;ILockBytes *plkbyt, DWORD grfMode, DWORD reserved, IStorage **ppstgOpen
StgCreatePropSetStg;Creates a property set storage object from a specified storage object.;IStorage *pStorage, DWORD dwReserved, IPropertySetStorage **ppPropSetStg
StgCreatePropStg;Creates and opens a property set in a specified storage or stream object.;IUnknown *pUnk, REFFMTID fmtid, const CLSID *pclsid, DWORD grfFlags, DWORD dwReserved, IPropertyStorage **ppPropStg
StgCreateStorageEx;Creates a new storage object using a provided implementation for the IStorage or IPropertySetStorage interfaces.;const WCHAR *pwcsName, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs, STGOPTIONS *pStgOptions, PSECURITY_DESCRIPTOR pSecurityDescriptor, REFIID riid, void **ppObjectOpen
StgIsStorageFile;The StgIsStorageFile function indicates whether a particular disk file contains a storage object.;const WCHAR *pwcsName
StgIsStorageILockBytes;The StgIsStorageILockBytes function indicates whether the specified byte array contains a storage object.;ILockBytes *plkbyt
StgOpenPropStg;Opens a specified property set in a specified storage or stream object.;IUnknown *pUnk, REFFMTID fmtid, DWORD grfFlags, DWORD dwReserved, IPropertyStorage **ppPropStg
StgOpenStorageEx;Opens an existing root storage object in the file system. Use this function to open Compound Files and regular files.;const WCHAR *pwcsName, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs, STGOPTIONS *pStgOptions, PSECURITY_DESCRIPTOR pSecurityDescriptor, REFIID riid, void **ppObjectOpen
StgOpenStorageOnILockBytes;The StgOpenStorageOnILockBytes function opens an existing storage object that does not reside in a disk file, but instead has an underlying byte array provided by the caller.;ILockBytes *plkbyt, IStorage *pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage **ppstgOpen
StgOpenStorage;Opens an existing root storage object in the file system.;const WCHAR *pwcsName, IStorage *pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage **ppstgOpen
StgPropertyLengthAsVariant;The StgPropertyLengthAsVariant function examines a SERIALIZEDPROPERTYVALUE and returns the amount of memory that this property would occupy as a PROPVARIANT.;const SERIALIZEDPROPERTYVALUE *pProp, ULONG cbProp, USHORT CodePage, BYTE bReserved
StgSetTimes;The StgSetTimes function sets the creation, access, and modification times of the indicated file, if supported by the underlying file system.;const WCHAR *lpszName, const FILETIME *pctime, const FILETIME *patime, const FILETIME *pmtime
StopWatchFlush;StopWatchFlush may be altered or unavailable.;
StopWatchMode;StopWatchMode may be altered or unavailable.;
StrCatBuffA;Copies and appends characters from one string to the end of another.;PSTR pszDest, PCSTR pszSrc, int cchDestBuffSize
StrCatBuffW;Copies and appends characters from one string to the end of another.;PWSTR pszDest, PCWSTR pszSrc, int cchDestBuffSize
StrCatChainW;Concatenates two Unicode strings. Used when repeated concatenations to the same buffer are required.;PWSTR pszDst, DWORD cchDst, DWORD ichAt, PCWSTR pszSrc
StrCatW;Appends one string to another.;PWSTR psz1, PCWSTR psz2
StrChrA;Searches a string for the first occurrence of a character that matches the specified character. The comparison is case-sensitive.;PCSTR pszStart, WORD wMatch
StrChrIA;Searches a string for the first occurrence of a character that matches the specified character. The comparison is not case-sensitive.;PCSTR pszStart, WORD wMatch
StrChrIW;Searches a string for the first occurrence of a character that matches the specified character. The comparison is not case-sensitive.;PCWSTR pszStart, WCHAR wMatch
StrChrNIW;Searches a string for the first occurrence of a specified character. The comparison is not case-sensitive.;PCWSTR pszStart, WCHAR wMatch, UINT cchMax
StrChrNW;Searches a string for the first occurrence of a specified character. The comparison is case-sensitive.;PCWSTR pszStart, WCHAR wMatch, UINT cchMax
StrChrW;Searches a string for the first occurrence of a character that matches the specified character. The comparison is case-sensitive.;PCWSTR pszStart, WCHAR wMatch
StrCmpCA;Compares strings using C run-time (ASCII) collation rules. The comparison is case-sensitive.;LPCSTR pszStr1, LPCSTR pszStr2
StrCmpCW;Compares strings using C run-time (ASCII) collation rules. The comparison is case-sensitive.;LPCWSTR pszStr1, LPCWSTR pszStr2
StrCmpICA;Compares two strings using C run-time (ASCII) collation rules. The comparison is not case-sensitive.;LPCSTR pszStr1, LPCSTR pszStr2
StrCmpICW;Compares two strings using C run-time (ASCII) collation rules. The comparison is not case-sensitive.;LPCWSTR pszStr1, LPCWSTR pszStr2
StrCmpIW;Compares two strings to determine if they are the same. The comparison is not case-sensitive.;PCWSTR psz1, PCWSTR psz2
StrCmpLogicalW;Compares two Unicode strings. Digits in the strings are considered as numerical content rather than text. This test is not case-sensitive.;PCWSTR psz1, PCWSTR psz2
StrCmpNA;Compares a specified number of characters from the beginning of two strings to determine if they are the same. The comparison is case-sensitive. The StrNCmp macro differs from this function in name only.;PCSTR psz1, PCSTR psz2, int nChar
StrCmpNCA;Compares a specified number of characters from the beginning of two strings using C run-time (ASCII) collation rules. The comparison is case-sensitive.;LPCSTR pszStr1, LPCSTR pszStr2, int nChar
StrCmpNCW;Compares a specified number of characters from the beginning of two strings using C run-time (ASCII) collation rules. The comparison is case-sensitive.;LPCWSTR pszStr1, LPCWSTR pszStr2, int nChar
StrCmpNIA;Compares a specified number of characters from the beginning of two strings to determine if they are the same. The comparison is not case-sensitive. The StrNCmpI macro differs from this function in name only.;PCSTR psz1, PCSTR psz2, int nChar
StrCmpNICA;Compares a specified number of characters from the beginning of two strings using C run-time (ASCII) collation rules. The comparison is not case-sensitive.;LPCSTR pszStr1, LPCSTR pszStr2, int nChar
StrCmpNICW;Compares a specified number of characters from the beginning of two strings using C run-time (ASCII) collation rules. The comparison is not case-sensitive.;LPCWSTR pszStr1, LPCWSTR pszStr2, int nChar
StrCmpNIW;Compares a specified number of characters from the beginning of two strings to determine if they are the same. The comparison is not case-sensitive. The StrNCmpI macro differs from this function in name only.;PCWSTR psz1, PCWSTR psz2, int nChar
StrCmpNW;Compares a specified number of characters from the beginning of two strings to determine if they are the same. The comparison is case-sensitive. The StrNCmp macro differs from this function in name only.;PCWSTR psz1, PCWSTR psz2, int nChar
StrCmpW;Compares two strings to determine if they are the same. The comparison is case-sensitive.;PCWSTR psz1, PCWSTR psz2
StrCpyNW;Copies a specified number of characters from the beginning of one string to another.Note  Do not use this function or the StrNCpy macro.;PWSTR pszDst, PCWSTR pszSrc, int cchMax
StrCpyW;Copies one string to another.;PWSTR psz1, PCWSTR psz2
StrCSpnA;Searches a string for the first occurrence of any of a group of characters. The search method is case-sensitive, and the terminating NULL character is included within the search pattern match.;PCSTR pszStr, PCSTR pszSet
StrCSpnIA;Searches a string for the first occurrence of any of a group of characters. The search method is not case-sensitive, and the terminating NULL character is included within the search pattern match.;PCSTR pszStr, PCSTR pszSet
StrCSpnIW;Searches a string for the first occurrence of any of a group of characters. The search method is not case-sensitive, and the terminating NULL character is included within the search pattern match.;PCWSTR pszStr, PCWSTR pszSet
StrCSpnW;Searches a string for the first occurrence of any of a group of characters. The search method is case-sensitive, and the terminating NULL character is included within the search pattern match.;PCWSTR pszStr, PCWSTR pszSet
StrDupA;Duplicates a string.;PCSTR pszSrch
StrDupW;Duplicates a string.;PCWSTR pszSrch
StretchBlt;The StretchBlt function copies a bitmap from a source rectangle into a destination rectangle, stretching or compressing the bitmap to fit the dimensions of the destination rectangle, if necessary.;HDC hdcDest, int xDest, int yDest, int wDest, int hDest, HDC hdcSrc, int xSrc, int ySrc, int wSrc, int hSrc, DWORD rop
StretchDIBits;The StretchDIBits function copies the color data for a rectangle of pixels in a DIB, JPEG, or PNG image to the specified destination rectangle.;HDC hdc, int xDest, int yDest, int DestWidth, int DestHeight, int xSrc, int ySrc, int SrcWidth, int SrcHeight, const VOID *lpBits, const BITMAPINFO *lpbmi, UINT iUsage, DWORD rop
StrFormatByteSize64A;Converts a numeric value into a string that represents the number expressed as a size value in bytes, kilobytes, megabytes, or gigabytes, depending on the size.;LONGLONG qdw, PSTR pszBuf, UINT cchBuf
StrFormatByteSizeA;Converts a numeric value into a string that represents the number expressed as a size value in bytes, kilobytes, megabytes, or gigabytes, depending on the size. Differs from StrFormatByteSizeW in one parameter type.;DWORD dw, PSTR pszBuf, UINT cchBuf
StrFormatByteSizeEx;Converts a numeric value into a string that represents the number in bytes, kilobytes, megabytes, or gigabytes, depending on the size.;ULONGLONG ull, SFBS_FLAGS flags, PWSTR pszBuf, UINT cchBuf
StrFormatByteSizeW;Converts a numeric value into a string that represents the number expressed as a size value in bytes, kilobytes, megabytes, or gigabytes, depending on the size. Differs from StrFormatByteSizeA in one parameter type.;LONGLONG qdw, PWSTR pszBuf, UINT cchBuf
StrFormatKBSizeA;Converts a numeric value into a string that represents the number expressed as a size value in kilobytes.;LONGLONG qdw, PSTR pszBuf, UINT cchBuf
StrFormatKBSizeW;Converts a numeric value into a string that represents the number expressed as a size value in kilobytes.;LONGLONG qdw, PWSTR pszBuf, UINT cchBuf
StrFromTimeIntervalA;Converts a time interval, specified in milliseconds, to a string.;PSTR pszOut, UINT cchMax, DWORD dwTimeMS, int digits
StrFromTimeIntervalW;Converts a time interval, specified in milliseconds, to a string.;PWSTR pszOut, UINT cchMax, DWORD dwTimeMS, int digits
StringFromCLSID;Converts a CLSID into a string of printable characters. Different CLSIDs always convert to different strings.;REFCLSID rclsid, LPOLESTR *lplpsz
StringFromGUID2;Converts a globally unique identifier (GUID) into a string of printable characters.;REFGUID rguid, LPOLESTR lpsz, int cchMax
StringFromIID;Converts an interface identifier into a string of printable characters.;REFIID rclsid, LPOLESTR *lplpsz
stringToBinaryBlob;Converts an encoded string to a binary data BLOB.;LONG Flags, LPCWSTR pwszString, PCRYPT_DATA_BLOB pblobBinary, LONG *pdwSkip, LONG *pdwFlags
stringToBinary;Converts an encoded string to a binary data BLOB. This method was first defined in the ICEnroll4 interface.;LONG Flags, BSTR strEncoded, BSTR *pstrBinary
StringToString;Modifies the type of Unicode encoding applied to a string.;BSTR strEncodedIn, EncodingType EncodingIn, EncodingType Encoding, BSTR *pstrEncoded
StringToVariantByteArray;Creates a byte array from a Unicode encoded string.;BSTR strEncoded, EncodingType Encoding, VARIANT *pvarByteArray
StrIsIntlEqualA;Compares a specified number of characters from the beginning of two strings to determine if they are equal.;BOOL fCaseSens, PCSTR pszString1, PCSTR pszString2, int nChar
StrIsIntlEqualW;Compares a specified number of characters from the beginning of two strings to determine if they are equal.;BOOL fCaseSens, PCWSTR pszString1, PCWSTR pszString2, int nChar
StrNCatA;Appends a specified number of characters from the beginning of one string to the end of another.;PSTR psz1, PCSTR psz2, int cchMax
StrNCatW;Appends a specified number of characters from the beginning of one string to the end of another.;PWSTR psz1, PCWSTR psz2, int cchMax
StrokeAndFillPath;The StrokeAndFillPath function closes any open figures in a path, strokes the outline of the path by using the current pen, and fills its interior by using the current brush.;HDC hdc
StrokePath;The StrokePath function renders the specified path by using the current pen.;HDC hdc
StrPBrkA;Searches a string for the first occurrence of a character contained in a specified buffer. This search does not include the terminating null character.;PCSTR psz, PCSTR pszSet
StrPBrkW;Searches a string for the first occurrence of a character contained in a specified buffer. This search does not include the terminating null character.;PCWSTR psz, PCWSTR pszSet
StrRChrA;Searches a string for the last occurrence of a specified character. The comparison is case-sensitive.;PCSTR pszStart, PCSTR pszEnd, WORD wMatch
StrRChrIA;Searches a string for the last occurrence of a specified character. The comparison is not case-sensitive.;PCSTR pszStart, PCSTR pszEnd, WORD wMatch
StrRChrIW;Searches a string for the last occurrence of a specified character. The comparison is not case-sensitive.;PCWSTR pszStart, PCWSTR pszEnd, WCHAR wMatch
StrRChrW;Searches a string for the last occurrence of a specified character. The comparison is case-sensitive.;PCWSTR pszStart, PCWSTR pszEnd, WCHAR wMatch
StrRetToBSTR;Accepts a STRRET structure returned by IShellFolder::GetDisplayNameOf that contains or points to a string, and returns that string as a BSTR.;STRRET *pstr, PCUITEMID_CHILD pidl, BSTR *pbstr
StrRetToBufA;Converts an STRRET structure returned by IShellFolder::GetDisplayNameOf to a string, and places the result in a buffer.;STRRET *pstr, PCUITEMID_CHILD pidl, LPSTR pszBuf, UINT cchBuf
StrRetToBufW;Converts an STRRET structure returned by IShellFolder::GetDisplayNameOf to a string, and places the result in a buffer.;STRRET *pstr, PCUITEMID_CHILD pidl, LPWSTR pszBuf, UINT cchBuf
StrRetToStrA;Takes an STRRET structure returned by IShellFolder::GetDisplayNameOf and returns a pointer to an allocated string containing the display name.;STRRET *pstr, PCUITEMID_CHILD pidl, LPSTR *ppsz
StrRetToStrW;Takes an STRRET structure returned by IShellFolder::GetDisplayNameOf and returns a pointer to an allocated string containing the display name.;STRRET *pstr, PCUITEMID_CHILD pidl, LPWSTR *ppsz
StrRStrIA;Searches for the last occurrence of a specified substring within a string. The comparison is not case-sensitive.;PCSTR pszSource, PCSTR pszLast, PCSTR pszSrch
StrRStrIW;Searches for the last occurrence of a specified substring within a string. The comparison is not case-sensitive.;PCWSTR pszSource, PCWSTR pszLast, PCWSTR pszSrch
StrSpnA;Obtains the length of a substring within a string that consists entirely of characters contained in a specified buffer.;PCSTR psz, PCSTR pszSet
StrSpnW;Obtains the length of a substring within a string that consists entirely of characters contained in a specified buffer.;PCWSTR psz, PCWSTR pszSet
StrStrA;Finds the first occurrence of a substring within a string. The comparison is case-sensitive.;PCSTR pszFirst, PCSTR pszSrch
StrStrIA;Finds the first occurrence of a substring within a string. The comparison is not case-sensitive.;PCSTR pszFirst, PCSTR pszSrch
StrStrIW;Finds the first occurrence of a substring within a string. The comparison is not case-sensitive.;PCWSTR pszFirst, PCWSTR pszSrch
StrStrNIW;Finds the first occurrence of a substring within a string. The comparison is case-insensitive.;PCWSTR pszFirst, PCWSTR pszSrch, UINT cchMax
StrStrNW;Finds the first occurrence of a substring within a string. The comparison is case-sensitive.;PCWSTR pszFirst, PCWSTR pszSrch, UINT cchMax
StrStrW;Finds the first occurrence of a substring within a string. The comparison is case-sensitive.;PCWSTR pszFirst, PCWSTR pszSrch
StrToInt64ExA;Converts a string representing a decimal or hexadecimal value to a 64-bit integer.;PCSTR pszString, STIF_FLAGS dwFlags, LONGLONG *pllRet
StrToInt64ExW;Converts a string representing a decimal or hexadecimal value to a 64-bit integer.;PCWSTR pszString, STIF_FLAGS dwFlags, LONGLONG *pllRet
StrToIntA;Converts a string that represents a decimal value to an integer. The StrToLong macro is identical to this function.;PCSTR pszSrc
StrToIntExA;Converts a string representing a decimal or hexadecimal number to an integer.;PCSTR pszString, STIF_FLAGS dwFlags, int *piRet
StrToIntExW;Converts a string representing a decimal or hexadecimal number to an integer.;PCWSTR pszString, STIF_FLAGS dwFlags, int *piRet
StrToIntW;Converts a string that represents a decimal value to an integer. The StrToLong macro is identical to this function.;PCWSTR pszSrc
StrTrimA;Removes specified leading and trailing characters from a string.;PSTR psz, PCSTR pszTrimChars
StrTrimW;Removes specified leading and trailing characters from a string.;PWSTR psz, PCWSTR pszTrimChars
SubmitNtmsOperatorRequestA;The SubmitNtmsOperatorRequest function submits an RSM operator request.;HANDLE hSession, DWORD dwRequest, LPCSTR lpMessage, LPNTMS_GUID lpArg1Id, LPNTMS_GUID lpArg2Id, LPNTMS_GUID lpRequestId
SubmitNtmsOperatorRequestW;The SubmitNtmsOperatorRequest function submits an RSM operator request.;HANDLE hSession, DWORD dwRequest, LPCWSTR lpMessage, LPNTMS_GUID lpArg1Id, LPNTMS_GUID lpArg2Id, LPNTMS_GUID lpRequestId
Submit;Persists changes made to the AzAuthorizationStore object.;LONG lFlags, VARIANT varReserved
Submit;Persists changes made to the IAzApplicationGroup object.;LONG lFlags, VARIANT varReserved
Submit;Persists changes made to the IAzApplication object.;LONG lFlags, VARIANT varReserved
Submit;Persists changes made to the IAzOperation object.;LONG lFlags, VARIANT varReserved
Submit;Persists changes made to the IAzRole object.;LONG lFlags, VARIANT varReserved
Submit;Persists changes made to the IAzScope object.;LONG lFlags, VARIANT varReserved
Submit;Persists changes made to the IAzTask object.;LONG lFlags, VARIANT varReserved
Submit;Submits a request to the Certificate Services server.;LONG Flags, const BSTR strRequest, const BSTR strAttributes, const BSTR strConfig, LONG *pDisposition
SubmitThreadpoolWork;Posts a work object to the thread pool. A worker thread calls the work object's callback function.;PTP_WORK pwk
SubscribeFeatureStateChangeNotification;This function is intended for infrastructure use only.;FEATURE_STATE_CHANGE_SUBSCRIPTION *subscription, PFEATURE_STATE_CHANGE_CALLBACK callback, void *context
SubtractRect;The SubtractRect function determines the coordinates of a rectangle formed by subtracting one rectangle from another.;LPRECT lprcDst, const RECT *lprcSrc1, const RECT *lprcSrc2
SuspendThread;Suspends the specified thread.;HANDLE hThread
SwapBuffers;The SwapBuffers function exchanges the front and back buffers if the current pixel format for the window referenced by the specified device context includes a back buffer.;HDC Arg1
SwapMouseButton;Reverses or restores the meaning of the left and right mouse buttons.;BOOL fSwap
SwapNtmsMedia;The SwapNtmsMedia function swaps the sides associated with the two specified LMIDs. The specified LMIDs must be in the same media pool.;HANDLE hSession, LPNTMS_GUID lpMediaId1, LPNTMS_GUID lpMediaId2
SwitchDesktop;Makes the specified desktop visible and activates it. This enables the desktop to receive input from the user.;HDESK hDesktop
SwitchToFiber;Schedules a fiber. The function must be called on a fiber.;LPVOID lpFiber
SwitchToThisWindow;Switches focus to the specified window and brings it to the foreground.;HWND hwnd, BOOL fUnknown
SwitchToThread;Causes the calling thread to yield execution to another thread that is ready to run on the current processor. The operating system selects the next thread to be executed.;
SystemParametersInfoA;Retrieves or sets the value of one of the system-wide parameters.;UINT uiAction, UINT uiParam, PVOID pvParam, UINT fWinIni
SystemParametersInfoForDpi;Retrieves the value of one of the system-wide parameters, taking into account the provided DPI value.;UINT uiAction, UINT uiParam, PVOID pvParam, UINT fWinIni, UINT dpi
SystemParametersInfoW;Retrieves or sets the value of one of the system-wide parameters.;UINT uiAction, UINT uiParam, PVOID pvParam, UINT fWinIni
SystemTimeToFileTime;Converts a system time to file time format. System time is based on Coordinated Universal Time (UTC).;const SYSTEMTIME *lpSystemTime, LPFILETIME lpFileTime
SystemTimeToTzSpecificLocalTime;Converts a time in Coordinated Universal Time (UTC) to a specified time zone's corresponding local time.;const TIME_ZONE_INFORMATION *lpTimeZoneInformation, const SYSTEMTIME *lpUniversalTime, LPSYSTEMTIME lpLocalTime
SystemTimeToTzSpecificLocalTimeEx;Converts a time in Coordinated Universal Time (UTC) with dynamic daylight saving time settings to a specified time zone's corresponding local time.;const DYNAMIC_TIME_ZONE_INFORMATION *lpTimeZoneInformation, const SYSTEMTIME *lpUniversalTime, LPSYSTEMTIME lpLocalTime
TabbedTextOutA;The TabbedTextOut function writes a character string at a specified location, expanding tabs to the values specified in an array of tab-stop positions. Text is written in the currently selected font, background color, and text color.;HDC hdc, int x, int y, LPCSTR lpString, int chCount, int nTabPositions, const INT *lpnTabStopPositions, int nTabOrigin
TabbedTextOutW;The TabbedTextOut function writes a character string at a specified location, expanding tabs to the values specified in an array of tab-stop positions. Text is written in the currently selected font, background color, and text color.;HDC hdc, int x, int y, LPCWSTR lpString, int chCount, int nTabPositions, const INT *lpnTabStopPositions, int nTabOrigin
TAPIERROR_FORMATMESSAGE;The TAPIERROR_FORMATMESSAGE macro generates an identifier for standard TAPI error codes that can be used in the FormatMessage function.;__ErrCode__
tapiGetLocationInfoA;The tapiGetLocationInfo function returns the country or region code and city (area) code that the user has set in the current location parameters in the Telephony Control Panel.;LPSTR lpszCountryCode, LPSTR lpszCityCode
tapiGetLocationInfo;The tapiGetLocationInfo function returns the country or region code and city (area) code that the user has set in the current location parameters in the Telephony Control Panel.;LPSTR lpszCountryCode, LPSTR lpszCityCode
tapiGetLocationInfoW;The tapiGetLocationInfo function returns the country or region code and city (area) code that the user has set in the current location parameters in the Telephony Control Panel.;LPWSTR lpszCountryCodeW, LPWSTR lpszCityCodeW
tapiRequestDrop;Closes a call request made by a previous call to tapiRequestMediaCall.;HWND hwnd, WPARAM wRequestID
tapiRequestMakeCallA;The tapiRequestMakeCall function requests the establishment of a voice call. A call-manager application is responsible for establishing the call on behalf of the requesting application, which is then controlled by the user's call-manager application.;LPCSTR lpszDestAddress, LPCSTR lpszAppName, LPCSTR lpszCalledParty, LPCSTR lpszComment
tapiRequestMakeCall;The tapiRequestMakeCall function requests the establishment of a voice call. A call-manager application is responsible for establishing the call on behalf of the requesting application, which is then controlled by the user's call-manager application.;LPCSTR lpszDestAddress, LPCSTR lpszAppName, LPCSTR lpszCalledParty, LPCSTR lpszComment
tapiRequestMakeCallW;The tapiRequestMakeCall function requests the establishment of a voice call. A call-manager application is responsible for establishing the call on behalf of the requesting application, which is then controlled by the user's call-manager application.;LPCWSTR lpszDestAddress, LPCWSTR lpszAppName, LPCWSTR lpszCalledParty, LPCWSTR lpszComment
TerminateEnclave;Ends the execution of the threads that are running within an enclave.;LPVOID lpAddress, BOOL fWait
TerminateProcess;Terminates the specified process and all of its threads.;HANDLE hProcess, UINT uExitCode
TerminateThread;Terminates a thread.;HANDLE hThread, DWORD dwExitCode
TextOutA;The TextOut function writes a character string at the specified location, using the currently selected font, background color, and text color.;HDC hdc, int x, int y, LPCSTR lpString, int c
TextOutW;The TextOut function writes a character string at the specified location, using the currently selected font, background color, and text color.;HDC hdc, int x, int y, LPCWSTR lpString, int c
TileWindows;Tiles the specified child windows of the specified parent window.;HWND hwndParent, UINT wHow, const RECT *lpRect, UINT cKids, const HWND *lpKids
timeBeginPeriod;The timeBeginPeriod function requests a minimum resolution for periodic timers.;UINT uPeriod
timeEndPeriod;The timeEndPeriod function clears a previously set minimum timer resolution.;UINT uPeriod
timeGetDevCaps;The timeGetDevCaps function queries the timer device to determine its resolution.;LPTIMECAPS ptc, UINT cbtc
timeGetSystemTime;The timeGetSystemTime function retrieves the system time, in milliseconds.;LPMMTIME pmmt, UINT cbmmt
timeGetTime;The timeGetTime function retrieves the system time, in milliseconds. The system time is the time elapsed since Windows was started.;
TIMERPROC;An application-defined callback function that processes WM_TIMER messages. The TIMERPROC type defines a pointer to this callback function. TimerProc is a placeholder for the application-defined function name.;HWND Arg1, UINT Arg2, UINT_PTR Arg3, DWORD Arg4 ) {...}
TlsAlloc;Allocates a thread local storage (TLS) index. Any thread of the process can subsequently use this index to store and retrieve values that are local to the thread, because each thread receives its own slot for the index.;
TlsFree;Releases a thread local storage (TLS) index, making it available for reuse.;DWORD dwTlsIndex
TlsGetValue;Retrieves the value in the calling thread's thread local storage (TLS) slot for the specified TLS index. Each thread of a process has its own slot for each TLS index.;DWORD dwTlsIndex
TlsSetValue;Stores a value in the calling thread's thread local storage (TLS) slot for the specified TLS index. Each thread of a process has its own slot for each TLS index.;DWORD dwTlsIndex, LPVOID lpTlsValue
ToAsciiEx;Translates the specified virtual-key code and keyboard state to the corresponding character or characters. The function translates the code using the input language and physical keyboard layout identified by the input locale identifier.;UINT uVirtKey, UINT uScanCode, const BYTE *lpKeyState, LPWORD lpChar, UINT uFlags, HKL dwhkl
ToAscii;Translates the specified virtual-key code and keyboard state to the corresponding character or characters.;UINT uVirtKey, UINT uScanCode, const BYTE *lpKeyState, LPWORD lpChar, UINT uFlags
TokenBindingDeleteAllBindings;Deletes all token binding keys that are associated with the calling user or app container.;
TokenBindingDeleteBinding;Deletes the token binding key that is associated with the specified target string.;PCWSTR targetURL
TokenBindingGenerateBinding;Constructs one token binding that contains the exported public key and signature by using the specified key type for the token binding, a target identifier string for creating and retrieving the token binding key, and the unique data.;TOKENBINDING_KEY_PARAMETERS_TYPE keyType, PCWSTR targetURL, TOKENBINDING_TYPE bindingType, const void *tlsEKM, DWORD tlsEKMSize, TOKENBINDING_EXTENSION_FORMAT extensionFormat, const void *extensionData, void **tokenBinding, DWORD *tokenBindingSize, TOKENBINDING_RESULT_DATA **resultData
TokenBindingGenerateID;Constructs the token binding identifier by extracting the signature algorithm from the key type and copying the exported public key.;TOKENBINDING_KEY_PARAMETERS_TYPE keyType, const void *publicKey, DWORD publicKeySize, TOKENBINDING_RESULT_DATA **resultData
TokenBindingGenerateMessage;Assembles the list of token bindings and generates the final message for the client device to the server.;const void * [] tokenBindings, const DWORD [] tokenBindingsSize, DWORD tokenBindingsCount, void **tokenBindingMessage, DWORD *tokenBindingMessageSize
TokenBindingGetKeyTypesClient;Retrieves a list of the key types that the client device supports.;TOKENBINDING_KEY_TYPES **keyTypes
TokenBindingGetKeyTypesServer;Retrieves a list of the key types that the server supports.;TOKENBINDING_KEY_TYPES **keyTypes
TokenBindingVerifyMessage;Validates the token binding message and verifies the token bindings that the message contains.;const void *tokenBindingMessage, DWORD tokenBindingMessageSize, TOKENBINDING_KEY_PARAMETERS_TYPE keyType, const void *tlsEKM, DWORD tlsEKMSize, TOKENBINDING_RESULT_LIST **resultList
TOUCH_COORD_TO_PIXEL;Converts touch coordinates to pixels.;l
ToUnicodeEx;Translates the specified virtual-key code and keyboard state to the corresponding Unicode character or characters.;UINT wVirtKey, UINT wScanCode, const BYTE *lpKeyState, LPWSTR pwszBuff, int cchBuff, UINT wFlags, HKL dwhkl
ToUnicode;Translates the specified virtual-key code and keyboard state to the corresponding Unicode character or characters.;UINT wVirtKey, UINT wScanCode, const BYTE *lpKeyState, LPWSTR pwszBuff, int cchBuff, UINT wFlags
TrackMouseEvent;Posts messages when the mouse pointer leaves a window or hovers over a window for a specified amount of time.;LPTRACKMOUSEEVENT lpEventTrack
TrackPopupMenu;Displays a shortcut menu at the specified location and tracks the selection of items on the menu. The shortcut menu can appear anywhere on the screen.;HMENU hMenu, UINT uFlags, int x, int y, int nReserved, HWND hWnd, const RECT *prcRect
TrackPopupMenuEx;Displays a shortcut menu at the specified location and tracks the selection of items on the shortcut menu. The shortcut menu can appear anywhere on the screen.;HMENU hMenu, UINT uFlags, int x, int y, HWND hwnd, LPTPMPARAMS lptpm
TransactNamedPipe;Combines the functions that write a message to and read a message from the specified named pipe into a single network operation.;HANDLE hNamedPipe, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesRead, LPOVERLAPPED lpOverlapped
TranslateAcceleratorA;Processes accelerator keys for menu commands.;HWND hWnd, HACCEL hAccTable, LPMSG lpMsg
TranslateAcceleratorW;Processes accelerator keys for menu commands.;HWND hWnd, HACCEL hAccTable, LPMSG lpMsg
TranslateCharsetInfo;Translates character set information and sets all members of a destination structure to appropriate values.;DWORD *lpSrc, LPCHARSETINFO lpCs, DWORD dwFlags
TranslateMDISysAccel;Processes accelerator keystrokes for window menu commands of the multiple-document interface (MDI) child windows associated with the specified MDI client window.;HWND hWndClient, LPMSG lpMsg
TranslateMessage;Translates virtual-key messages into character messages. The character messages are posted to the calling thread's message queue, to be read the next time the thread calls the GetMessage or PeekMessage function.;const MSG *lpMsg
TransmitCommChar;Transmits a specified character ahead of any pending data in the output buffer of the specified communications device.;HANDLE hFile, char cChar
TransmitFile;Transmits file data over a connected socket handle.;SOCKET hSocket, HANDLE hFile, DWORD nNumberOfBytesToWrite, DWORD nNumberOfBytesPerSend, LPOVERLAPPED lpOverlapped, LPTRANSMIT_FILE_BUFFERS lpTransmitBuffers, DWORD dwReserved
TransparentBlt;The TransparentBlt function performs a bit-block transfer of the color data corresponding to a rectangle of pixels from the specified source device context into a destination device context.;HDC hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, HDC hdcSrc, int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, UINT crTransparent
TreeResetNamedSecurityInfoA;Resets specified security information in the security descriptor of a specified tree of objects.;LPSTR pObjectName, SE_OBJECT_TYPE ObjectType, SECURITY_INFORMATION SecurityInfo, PSID pOwner, PSID pGroup, PACL pDacl, PACL pSacl, BOOL KeepExplicit, FN_PROGRESS fnProgress, PROG_INVOKE_SETTING ProgressInvokeSetting, PVOID Args
TreeResetNamedSecurityInfoW;Resets specified security information in the security descriptor of a specified tree of objects.;LPWSTR pObjectName, SE_OBJECT_TYPE ObjectType, SECURITY_INFORMATION SecurityInfo, PSID pOwner, PSID pGroup, PACL pDacl, PACL pSacl, BOOL KeepExplicit, FN_PROGRESS fnProgress, PROG_INVOKE_SETTING ProgressInvokeSetting, PVOID Args
TreeSetNamedSecurityInfoA;Sets specified security information in the security descriptor of a specified tree of objects.;LPSTR pObjectName, SE_OBJECT_TYPE ObjectType, SECURITY_INFORMATION SecurityInfo, PSID pOwner, PSID pGroup, PACL pDacl, PACL pSacl, DWORD dwAction, FN_PROGRESS fnProgress, PROG_INVOKE_SETTING ProgressInvokeSetting, PVOID Args
TreeSetNamedSecurityInfoW;Sets specified security information in the security descriptor of a specified tree of objects.;LPWSTR pObjectName, SE_OBJECT_TYPE ObjectType, SECURITY_INFORMATION SecurityInfo, PSID pOwner, PSID pGroup, PACL pDacl, PACL pSacl, DWORD dwAction, FN_PROGRESS fnProgress, PROG_INVOKE_SETTING ProgressInvokeSetting, PVOID Args
TryAcquireSRWLockExclusive;Attempts to acquire a slim reader/writer (SRW) lock in exclusive mode. If the call is successful, the calling thread takes ownership of the lock.;PSRWLOCK SRWLock
TryAcquireSRWLockShared;Attempts to acquire a slim reader/writer (SRW) lock in shared mode. If the call is successful, the calling thread takes ownership of the lock.;PSRWLOCK SRWLock
TryEnterCriticalSection;Attempts to enter a critical section without blocking. If the call is successful, the calling thread takes ownership of the critical section.;LPCRITICAL_SECTION lpCriticalSection
TrySubmitThreadpoolCallback;Requests that a thread pool worker thread call the specified callback function.;PTP_SIMPLE_CALLBACK pfns, PVOID pv, PTP_CALLBACK_ENVIRON pcbe
TTCharToUnicode;Converts an array of 8-bit character code values to 16-bit Unicode values.;HDC hDC, UCHAR *pucCharCodes, ULONG ulCharCodeSize, USHORT *pusShortCodes, ULONG ulShortCodeSize, ULONG ulFlags
TTDeleteEmbeddedFont;Releases memory used by an embedded font, hFontReference.;HANDLE hFontReference, ULONG ulFlags, ULONG *pulStatus
TTEmbedFont;Creates a font structure containing the subsetted wide-character (16-bit) font. The current font of the device context (hDC) provides the font information.;HDC hDC, ULONG ulFlags, ULONG ulCharSet, ULONG *pulPrivStatus, ULONG *pulStatus, WRITEEMBEDPROC lpfnWriteToStream, LPVOID lpvWriteStream, USHORT *pusCharCodeSet, USHORT usCharCodeCount, USHORT usLanguage, TTEMBEDINFO *pTTEmbedInfo
TTEmbedFontEx;Creates a font structure containing the subsetted UCS-4 character (32-bit) font. The current font of the device context (hDC) provides the font information.;HDC hDC, ULONG ulFlags, ULONG ulCharSet, ULONG *pulPrivStatus, ULONG *pulStatus, WRITEEMBEDPROC lpfnWriteToStream, LPVOID lpvWriteStream, ULONG *pulCharCodeSet, USHORT usCharCodeCount, USHORT usLanguage, TTEMBEDINFO *pTTEmbedInfo
TTEmbedFontFromFileA;Creates a font structure containing the subsetted wide-character (16-bit) font. An external file provides the font information.;HDC hDC, LPCSTR szFontFileName, USHORT usTTCIndex, ULONG ulFlags, ULONG ulCharSet, ULONG *pulPrivStatus, ULONG *pulStatus, WRITEEMBEDPROC lpfnWriteToStream, LPVOID lpvWriteStream, USHORT *pusCharCodeSet, USHORT usCharCodeCount, USHORT usLanguage, TTEMBEDINFO *pTTEmbedInfo
TTEnableEmbeddingForFacename;Adds or removes facenames from the typeface exclusion list.;LPCSTR lpszFacename, BOOL bEnable
TTGetEmbeddedFontInfo;Retrieves information about an embedded font, such as embedding permissions. TTGetEmbeddedFontInfo performs the same task as TTLoadEmbeddedFont but does not allocate internal data structures for the embedded font.;ULONG ulFlags, ULONG *pulPrivStatus, ULONG ulPrivs, ULONG *pulStatus, READEMBEDPROC lpfnReadFromStream, LPVOID lpvReadStream, TTLOADINFO *pTTLoadInfo
TTGetEmbeddingType;Obtains the embedding privileges of a font.;HDC hDC, ULONG *pulEmbedType
TTGetNewFontName;Obtains the family name for the font loaded through TTLoadEmbeddedFont.;HANDLE *phFontReference, LPWSTR wzWinFamilyName, LONG cchMaxWinName, LPSTR szMacFamilyName, LONG cchMaxMacName
TTIsEmbeddingEnabled;Determines whether the typeface exclusion list contains a specified font.;HDC hDC, BOOL *pbEnabled
TTIsEmbeddingEnabledForFacename;Determines whether embedding is enabled for a specified font.;LPCSTR lpszFacename, BOOL *pbEnabled
TTLoadEmbeddedFont;Reads an embedded font from the document stream and installs it. Also allows a client to further restrict embedding privileges of the font.;HANDLE *phFontReference, ULONG ulFlags, ULONG *pulPrivStatus, ULONG ulPrivs, ULONG *pulStatus, READEMBEDPROC lpfnReadFromStream, LPVOID lpvReadStream, LPWSTR szWinFamilyName, LPSTR szMacFamilyName, TTLOADINFO *pTTLoadInfo
TTRunValidationTestsEx;Validates part or all glyph data of a UCS-4 character (32-bit) font, in the size range specified.;HDC hDC, TTVALIDATIONTESTSPARAMSEX *pTestParam
TTRunValidationTests;Validates part or all glyph data of a wide-character (16-bit) font, in the size range specified.;HDC hDC, TTVALIDATIONTESTSPARAMS *pTestParam
TzSpecificLocalTimeToSystemTime;Converts a local time to a time in Coordinated Universal Time (UTC).;const TIME_ZONE_INFORMATION *lpTimeZoneInformation, const SYSTEMTIME *lpLocalTime, LPSYSTEMTIME lpUniversalTime
TzSpecificLocalTimeToSystemTimeEx;Converts a local time to a time with dynamic daylight saving time settings to Coordinated Universal Time (UTC).;const DYNAMIC_TIME_ZONE_INFORMATION *lpTimeZoneInformation, const SYSTEMTIME *lpLocalTime, LPSYSTEMTIME lpUniversalTime
UmsThreadYield;Yields control to the user-mode scheduling (UMS) scheduler thread on which the calling UMS worker thread is running.;PVOID SchedulerParam
UnAdvise;Deletes a connection created by calling the Advise method.;const DWORD dwCookie
UnenableRouter;The UnenableRouter function decrements the reference count that tracks the number of requests to enable IPv4 forwarding. When this reference count reaches zero, UnenableRouter turns off IPv4 forwarding on the local computer.;OVERLAPPED *pOverlapped, LPDWORD lpdwEnableCount
UnhandledExceptionFilter;An application-defined function that passes unhandled exceptions to the debugger, if the process is being debugged.;_EXCEPTION_POINTERS *ExceptionInfo
UnhookWindowsHookEx;Removes a hook procedure installed in a hook chain by the SetWindowsHookEx function.;HHOOK hhk
UnhookWinEvent;Removes an event hook function created by a previous call to SetWinEventHook.;HWINEVENTHOOK hWinEventHook
Uninitialize;Uninitializes the NDES policy module.;
UninstallApplication;The UninstallApplication function uninstalls a group policy application that handles setup and installation using Windows Installer .msi files.;LPWSTR ProductCode, DWORD dwStatus
UnInstall;Removes the Certificate Enrollment Policy (CEP) Web Service.;VARIANT *pAuthKeyBasedRenewal
UnInstall;Removes the Certificate Enrollment Web Service (CES).;VARIANT *pCAConfig, VARIANT *pAuthentication
UnionRect;The UnionRect function creates the union of two rectangles. The union is the smallest rectangle that contains both source rectangles.;LPRECT lprcDst, const RECT *lprcSrc1, const RECT *lprcSrc2
UnloadKeyboardLayout;Unloads an input locale identifier (formerly called a keyboard layout).;HKL hkl
UnlockFileEx;Unlocks a region in the specified file. This function can operate either synchronously or asynchronously.;HANDLE hFile, DWORD dwReserved, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh, LPOVERLAPPED lpOverlapped
UnlockFile;Unlocks a region in an open file.;HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh
UnlockServiceDatabase;Unlocks a service control manager database by releasing the specified lock.;SC_LOCK ScLock
UnlockUrlCacheEntryFileA;Unlocks the cache entry that was locked while the file was retrieved for use from the cache.;LPCSTR lpszUrlName, DWORD dwReserved
UnlockUrlCacheEntryFile;Unlocks the cache entry that was locked while the file was retrieved for use from the cache.;LPCSTR lpszUrlName, DWORD dwReserved
UnlockUrlCacheEntryFileW;Unlocks the cache entry that was locked while the file was retrieved for use from the cache.;LPCWSTR lpszUrlName, DWORD dwReserved
UnlockUrlCacheEntryStream;Closes the stream that has been retrieved using the RetrieveUrlCacheEntryStream function.;HANDLE hUrlCacheStream, DWORD Reserved
UnmapViewOfFile2;Unmaps a previously mapped view of a file or a pagefile-backed section.;HANDLE Process, PVOID BaseAddress, ULONG UnmapFlags
UnmapViewOfFileEx;This is an extended version of UnmapViewOfFile that takes an additional flags parameter.;PVOID BaseAddress, ULONG UnmapFlags
UnmapViewOfFile;Unmaps a mapped view of a file from the calling process's address space.;LPCVOID lpBaseAddress
UnrealizeObject;The UnrealizeObject function resets the origin of a brush or resets a logical palette.;HGDIOBJ h
UnregisterApplicationRecoveryCallback;Removes the active instance of an application from the recovery list.;
UnregisterApplicationRestart;Removes the active instance of an application from the restart list.;
UnregisterAppStateChangeNotification;Cancels a change notification registered through RegisterAppStateChangeNotification.;PAPPSTATE_REGISTRATION Registration
UnregisterBadMemoryNotification;Closes the specified bad memory notification handle.;PVOID RegistrationHandle
UnregisterClassA;Unregisters a window class, freeing the memory required for the class.;LPCSTR lpClassName, HINSTANCE hInstance
UnregisterClassW;Unregisters a window class, freeing the memory required for the class.;LPCWSTR lpClassName, HINSTANCE hInstance
UnregisterDeviceNotification;Closes the specified device notification handle.;HDEVNOTIFY Handle
UnregisterGPNotification;The UnregisterGPNotification function unregisters the specified policy-notification handle from receiving policy change notifications.;HANDLE hEvent
UnregisterHotKey;Frees a hot key previously registered by the calling thread.;HWND hWnd, int id
UnregisterPointerInputTarget;Allows the caller to unregister a target window to which all pointer input of the specified type is redirected.;HWND hwnd, POINTER_INPUT_TYPE pointerType
UnregisterPointerInputTargetEx;UnregisterPointerInputTargetEx may be altered or unavailable. Instead, use UnregisterPointerInputTarget.;HWND hwnd, POINTER_INPUT_TYPE pointerType
UnregisterPowerSettingNotification;Unregisters the power setting notification.;HPOWERNOTIFY Handle
UnregisterScaleChangeEvent;Unregisters for the scale change event registered through RegisterScaleChangeEvent. This function replaces RevokeScaleChangeNotifications.;DWORD_PTR dwCookie
UnregisterSuspendResumeNotification;Cancels a registration to receive notification when the system is suspended or resumed. Similar to PowerUnregisterSuspendResumeNotification but operates in user mode.;HPOWERNOTIFY Handle
UnregisterTouchWindow;Registers a window as no longer being touch-capable.;HWND hwnd
UnregisterWait;Cancels a registered wait operation issued by the RegisterWaitForSingleObject function.;HANDLE WaitHandle
UnsubscribeFeatureStateChangeNotification;This function is intended for infrastructure use only.;FEATURE_STATE_CHANGE_SUBSCRIPTION subscription
UpdateCache;Updates the cache of objects and object attributes to match the underlying policy store.;VARIANT varReserved
UpdateColors;The UpdateColors function updates the client area of the specified device context by remapping the current colors in the client area to the currently realized logical palette.;HDC hdc
UpdateICMRegKeyA;The UpdateICMRegKey function manages color profiles and Color Management Modules in the system.;DWORD reserved, LPSTR lpszCMID, LPSTR lpszFileName, UINT command
UpdateICMRegKeyW;The UpdateICMRegKey function manages color profiles and Color Management Modules in the system.;DWORD reserved, LPWSTR lpszCMID, LPWSTR lpszFileName, UINT command
UpdateLayeredWindow;Updates the position, size, shape, content, and translucency of a layered window.;HWND hWnd, HDC hdcDst, POINT *pptDst, SIZE *psize, HDC hdcSrc, POINT *pptSrc, COLORREF crKey, BLENDFUNCTION *pblend, DWORD dwFlags
UpdateNtmsOmidInfo;The UpdateNtmsOmidInfo function updates the RSM database with label information immediately after writing to the newly allocated medium.;HANDLE hSession, LPNTMS_GUID lpMediaId, DWORD labelType, DWORD numberOfBytes, LPVOID lpBuffer
UpdateProcThreadAttribute;Updates the specified attribute in a list of attributes for process and thread creation.;LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList, DWORD dwFlags, DWORD_PTR Attribute, PVOID lpValue, SIZE_T cbSize, PVOID lpPreviousValue, PSIZE_T lpReturnSize
UpdateRegistry;Registers a certificate enrollment policy (CEP) server.;X509CertificateEnrollmentContext context
UpdateResourceA;Adds, deletes, or replaces a resource in a portable executable (PE) file.;HANDLE hUpdate, LPCSTR lpType, LPCSTR lpName, WORD wLanguage, LPVOID lpData, DWORD cb
UpdateResourceW;Adds, deletes, or replaces a resource in a portable executable (PE) file.;HANDLE hUpdate, LPCWSTR lpType, LPCWSTR lpName, WORD wLanguage, LPVOID lpData, DWORD cb
UpdateWindow;The UpdateWindow function updates the client area of the specified window by sending a WM_PAINT message to the window if the window's update region is not empty.;HWND hWnd
UpgradeStoresFunctionalLevel;Upgrades this authorization store from version 1 to version 2.;LONG lFunctionalLevel
UrlApplySchemeA;Determines a scheme for a specified URL string, and returns a string with an appropriate prefix.;PCSTR pszIn, PSTR pszOut, DWORD *pcchOut, DWORD dwFlags
UrlApplySchemeW;Determines a scheme for a specified URL string, and returns a string with an appropriate prefix.;PCWSTR pszIn, PWSTR pszOut, DWORD *pcchOut, DWORD dwFlags
UrlCanonicalizeA;Converts a URL string into canonical form.;PCSTR pszUrl, PSTR pszCanonicalized, DWORD *pcchCanonicalized, DWORD dwFlags
UrlCanonicalizeW;Converts a URL string into canonical form.;PCWSTR pszUrl, PWSTR pszCanonicalized, DWORD *pcchCanonicalized, DWORD dwFlags
UrlCombineA;When provided with a relative URL and its base, returns a URL in canonical form.;PCSTR pszBase, PCSTR pszRelative, PSTR pszCombined, DWORD *pcchCombined, DWORD dwFlags
UrlCombineW;When provided with a relative URL and its base, returns a URL in canonical form.;PCWSTR pszBase, PCWSTR pszRelative, PWSTR pszCombined, DWORD *pcchCombined, DWORD dwFlags
UrlCompareA;Makes a case-sensitive comparison of two URL strings.;PCSTR psz1, PCSTR psz2, BOOL fIgnoreSlash
UrlCompareW;Makes a case-sensitive comparison of two URL strings.;PCWSTR psz1, PCWSTR psz2, BOOL fIgnoreSlash
UrlCreateFromPathA;Converts a Microsoft MS-DOS path to a canonicalized URL.;PCSTR pszPath, PSTR pszUrl, DWORD *pcchUrl, DWORD dwFlags
UrlCreateFromPathW;Converts a Microsoft MS-DOS path to a canonicalized URL.;PCWSTR pszPath, PWSTR pszUrl, DWORD *pcchUrl, DWORD dwFlags
UrlEscapeA;Converts characters or surrogate pairs in a URL that might be altered during transport across the Internet (&quot;unsafe&quot; characters) into their corresponding escape sequences.;PCSTR pszUrl, PSTR pszEscaped, DWORD *pcchEscaped, DWORD dwFlags
UrlEscapeSpaces;A macro that converts space characters into their corresponding escape sequence.;pszUrl, pszEscaped, pcchEscaped
UrlEscapeW;Converts characters or surrogate pairs in a URL that might be altered during transport across the Internet (&quot;unsafe&quot; characters) into their corresponding escape sequences.;PCWSTR pszUrl, PWSTR pszEscaped, DWORD *pcchEscaped, DWORD dwFlags
UrlFixupW;UrlFixupW may be altered or unavailable.;PCWSTR pcszUrl, PWSTR pszTranslatedUrl, DWORD cchMax
UrlGetLocationA;Retrieves the location from a URL.;PCSTR pszURL
UrlGetLocationW;Retrieves the location from a URL.;PCWSTR pszURL
UrlGetPartA;Accepts a URL string and returns a specified part of that URL.;PCSTR pszIn, PSTR pszOut, DWORD *pcchOut, DWORD dwPart, DWORD dwFlags
UrlGetPartW;Accepts a URL string and returns a specified part of that URL.;PCWSTR pszIn, PWSTR pszOut, DWORD *pcchOut, DWORD dwPart, DWORD dwFlags
UrlHashA;Hashes a URL string.;PCSTR pszUrl, BYTE *pbHash, DWORD cbHash
UrlHashW;Hashes a URL string.;PCWSTR pszUrl, BYTE *pbHash, DWORD cbHash
UrlIsA;Tests whether a URL is a specified type.;PCSTR pszUrl, URLIS UrlIs
UrlIsFileUrlA;Tests a URL to determine if it is a file URL.;pszURL
UrlIsFileUrlW;Tests a URL to determine if it is a file URL.;pszURL
UrlIsNoHistoryA;Returns whether a URL is a URL that browsers typically do not include in navigation history.;PCSTR pszURL
UrlIsNoHistoryW;Returns whether a URL is a URL that browsers typically do not include in navigation history.;PCWSTR pszURL
UrlIsOpaqueA;Returns whether a URL is opaque.;PCSTR pszURL
UrlIsOpaqueW;Returns whether a URL is opaque.;PCWSTR pszURL
UrlIsW;Tests whether a URL is a specified type.;PCWSTR pszUrl, URLIS UrlIs
UrlUnescapeA;Converts escape sequences back into ordinary characters.;PSTR pszUrl, PSTR pszUnescaped, DWORD *pcchUnescaped, DWORD dwFlags
UrlUnescapeInPlace;Converts escape sequences back into ordinary characters and overwrites the original string.;pszUrl, dwFlags
UrlUnescapeW;Converts escape sequences back into ordinary characters.;PWSTR pszUrl, PWSTR pszUnescaped, DWORD *pcchUnescaped, DWORD dwFlags
UserHandleGrantAccess;Grants or denies access to a handle to a User object to a job that has a user-interface restriction.;HANDLE hUserHandle, HANDLE hJob, BOOL bGrant
UuidCompare;An application calls the UuidCompare function to compare two UUIDs and determine their order. The returned value gives the order.;UUID *Uuid1, UUID *Uuid2, RPC_STATUS *Status
UuidCreateNil;The UuidCreateNil function creates a nil-valued UUID.;UUID *NilUuid
UuidCreateSequential;The UuidCreateSequential function creates a new UUID.;UUID *Uuid
UuidCreate;The UuidCreate function creates a new UUID.;UUID *Uuid
UuidEqual;An application calls the UuidEqual function to compare two UUIDs and determine whether they are equal.;UUID *Uuid1, UUID *Uuid2, RPC_STATUS *Status
UuidFromStringA;The UuidFromString function converts a string to a UUID.;RPC_CSTR StringUuid, UUID *Uuid
UuidFromString;The UuidFromString function converts a string to a UUID.;RPC_CSTR StringUuid, UUID *Uuid
UuidFromStringW;The UuidFromString function converts a string to a UUID.;RPC_WSTR StringUuid, UUID *Uuid
UuidHash;An application calls the UuidHash function to generate a hash value for a specified UUID.;UUID *Uuid, RPC_STATUS *Status
UuidIsNil;An application calls the UuidIsNil function to determine whether the specified UUID is a nil-valued UUID.;UUID *Uuid, RPC_STATUS *Status
UuidToStringA;The UuidToString function converts a UUID to a string.;const UUID *Uuid, RPC_CSTR *StringUuid
UuidToString;The UuidToString function converts a UUID to a string.;const UUID *Uuid, RPC_CSTR *StringUuid
UuidToStringW;The UuidToString function converts a UUID to a string.;const UUID *Uuid, RPC_WSTR *StringUuid
ValidateRect;The ValidateRect function validates the client area within a rectangle by removing the rectangle from the update region of the specified window.;HWND hWnd, const RECT *lpRect
ValidateRgn;The ValidateRgn function validates the client area within a region by removing the region from the current update region of the specified window.;HWND hWnd, HRGN hRgn
Validate;Validates the current policy information.;
VariantByteArrayToString;Creates a Unicode encoded string from a byte array.;VARIANT *pvarByteArray, EncodingType Encoding, BSTR *pstrEncoded
VerFindFileA;Determines where to install a file based on whether it locates another version of the file in the system. The values VerFindFile returns in the specified buffers are used in a subsequent call to the VerInstallFile function.;DWORD uFlags, LPCSTR szFileName, LPCSTR szWinDir, LPCSTR szAppDir, LPSTR szCurDir, PUINT puCurDirLen, LPSTR szDestDir, PUINT puDestDirLen
VerFindFileW;Determines where to install a file based on whether it locates another version of the file in the system. The values VerFindFile returns in the specified buffers are used in a subsequent call to the VerInstallFile function.;DWORD uFlags, LPCWSTR szFileName, LPCWSTR szWinDir, LPCWSTR szAppDir, LPWSTR szCurDir, PUINT puCurDirLen, LPWSTR szDestDir, PUINT puDestDirLen
VerifierEnumerateResource;Enumerates operating system resources for use by debugging and support tools.;HANDLE Process, ULONG Flags, ULONG ResourceType, AVRF_RESOURCE_ENUMERATE_CALLBACK ResourceCallback, PVOID EnumerationContext
VerifierIsPerUserSettingsEnabled;Determines whether Application Verifier can use per-user settings.;
VerifyRequest;Notifies the policy module that a new request has entered the system.;const BSTR strConfig, LONG Context, LONG bNewRequest, LONG Flags, LONG *pDisposition
VerifyRequest;Verifies the NDES certificate request for submission to the CA.;CERTTRANSBLOB *pctbRequest, CERTTRANSBLOB *pctbSigningCertEncoded, PCWSTR pwszTemplate, PCWSTR pwszTransactionId, BOOL *pfVerified
VerifyScripts;Compares two enumerated lists of scripts.;DWORD dwFlags, LPCWSTR lpLocaleScripts, int cchLocaleScripts, LPCWSTR lpTestScripts, int cchTestScripts
VerifySignature;Verifies that a message signed by using the MakeSignature function was received in the correct sequence and has not been modified.;PCtxtHandle phContext, PSecBufferDesc pMessage, unsigned long MessageSeqNo, unsigned long *pfQOP
Verify;Verifies that a private key exists and can be used by the client but does not open the key.;X509PrivateKeyVerify VerifyType
VerifyVersionInfoA;Compares a set of operating system version requirements to the corresponding values for the currently running version of the system.;LPOSVERSIONINFOEXA lpVersionInformation, DWORD dwTypeMask, DWORDLONG dwlConditionMask
VerifyVersionInfoW;Compares a set of operating system version requirements to the corresponding values for the currently running version of the system.;LPOSVERSIONINFOEXW lpVersionInformation, DWORD dwTypeMask, DWORDLONG dwlConditionMask
VerInstallFileA;Installs the specified file based on information returned from the VerFindFile function. VerInstallFile decompresses the file, if necessary, assigns a unique filename, and checks for errors, such as outdated files.;DWORD uFlags, LPCSTR szSrcFileName, LPCSTR szDestFileName, LPCSTR szSrcDir, LPCSTR szDestDir, LPCSTR szCurDir, LPSTR szTmpFile, PUINT puTmpFileLen
VerInstallFileW;Installs the specified file based on information returned from the VerFindFile function. VerInstallFile decompresses the file, if necessary, assigns a unique filename, and checks for errors, such as outdated files.;DWORD uFlags, LPCWSTR szSrcFileName, LPCWSTR szDestFileName, LPCWSTR szSrcDir, LPCWSTR szDestDir, LPCWSTR szCurDir, LPWSTR szTmpFile, PUINT puTmpFileLen
VerLanguageNameA;Retrieves a description string for the language associated with a specified binary Microsoft language identifier.;DWORD wLang, LPSTR szLang, DWORD cchLang
VerLanguageNameW;Retrieves a description string for the language associated with a specified binary Microsoft language identifier.;DWORD wLang, LPWSTR szLang, DWORD cchLang
VerQueryValueA;Retrieves specified version information from the specified version-information resource.;LPCVOID pBlock, LPCSTR lpSubBlock, LPVOID *lplpBuffer, PUINT puLen
VerQueryValueW;Retrieves specified version information from the specified version-information resource.;LPCVOID pBlock, LPCWSTR lpSubBlock, LPVOID *lplpBuffer, PUINT puLen
VirtualAlloc2FromApp;Reserves, commits, or changes the state of a region of pages in the virtual address space of the calling process.;HANDLE Process, PVOID BaseAddress, SIZE_T Size, ULONG AllocationType, ULONG PageProtection, MEM_EXTENDED_PARAMETER *ExtendedParameters, ULONG ParameterCount
VirtualAlloc2;Reserves, commits, or changes the state of a region of memory within the virtual address space of a specified process. The function initializes the memory it allocates to zero.;HANDLE Process, PVOID BaseAddress, SIZE_T Size, ULONG AllocationType, ULONG PageProtection, MEM_EXTENDED_PARAMETER *ExtendedParameters, ULONG ParameterCount
VirtualAllocExNuma;Reserves, commits, or changes the state of a region of memory within the virtual address space of the specified process, and specifies the NUMA node for the physical memory.;HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect, DWORD nndPreferred
VirtualAllocEx;Reserves, commits, or changes the state of a region of memory within the virtual address space of a specified process. The function initializes the memory it allocates to zero.;HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect
VirtualAllocFromApp;Reserves, commits, or changes the state of a region of pages in the virtual address space of the calling process.;PVOID BaseAddress, SIZE_T Size, ULONG AllocationType, ULONG Protection
VirtualAlloc;Reserves, commits, or changes the state of a region of pages in the virtual address space of the calling process.;LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect
VirtualFreeEx;Releases, decommits, or releases and decommits a region of memory within the virtual address space of a specified process.;HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType
VirtualFree;Releases, decommits, or releases and decommits a region of pages within the virtual address space of the calling process.;LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType
VirtualLock;Locks the specified region of the process's virtual address space into physical memory, ensuring that subsequent access to the region will not incur a page fault.;LPVOID lpAddress, SIZE_T dwSize
VirtualProtect;Changes the protection on a region of committed pages in the virtual address space of the calling process.;LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect
VirtualProtectEx;Changes the protection on a region of committed pages in the virtual address space of a specified process.;HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect
VirtualProtectFromApp;Changes the protection on a region of committed pages in the virtual address space of the calling process.;PVOID Address, SIZE_T Size, ULONG NewProtection, PULONG OldProtection
VirtualQueryEx;Retrieves information about a range of pages within the virtual address space of a specified process.;HANDLE hProcess, LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength
VirtualQuery;Retrieves information about a range of pages in the virtual address space of the calling process.;LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength
VirtualUnlock;Unlocks a specified range of pages in the virtual address space of a process, enabling the system to swap the pages out to the paging file if necessary.;LPVOID lpAddress, SIZE_T dwSize
VkKeyScanA;Translates a character to the corresponding virtual-key code and shift state for the current keyboard.;CHAR ch
VkKeyScanExA;Translates a character to the corresponding virtual-key code and shift state. The function translates the character using the input language and physical keyboard layout identified by the input locale identifier.;CHAR ch, HKL dwhkl
VkKeyScanExW;Translates a character to the corresponding virtual-key code and shift state. The function translates the character using the input language and physical keyboard layout identified by the input locale identifier.;WCHAR ch, HKL dwhkl
VkKeyScanW;Translates a character to the corresponding virtual-key code and shift state for the current keyboard.;WCHAR ch
WaitCommEvent;Waits for an event to occur for a specified communications device. The set of events that are monitored by this function is contained in the event mask associated with the device handle.;HANDLE hFile, LPDWORD lpEvtMask, LPOVERLAPPED lpOverlapped
WaitForDebugEventEx;Waits for a debugging event to occur in a process being debugged.;LPDEBUG_EVENT lpDebugEvent, DWORD dwMilliseconds
WaitForDebugEvent;Waits for a debugging event to occur in a process being debugged.;LPDEBUG_EVENT lpDebugEvent, DWORD dwMilliseconds
WaitForInputIdle;Waits until the specified process has finished processing its initial input and is waiting for user input with no input pending, or until the time-out interval has elapsed.;HANDLE hProcess, DWORD dwMilliseconds
WaitForMultipleObjectsEx;Waits until one or all of the specified objects are in the signaled state, an I/O completion routine or asynchronous procedure call (APC) is queued to the thread, or the time-out interval elapses.;DWORD nCount, const HANDLE *lpHandles, BOOL bWaitAll, DWORD dwMilliseconds, BOOL bAlertable
WaitForMultipleObjects;Waits until one or all of the specified objects are in the signaled state or the time-out interval elapses.;DWORD nCount, const HANDLE *lpHandles, BOOL bWaitAll, DWORD dwMilliseconds
WaitForNtmsNotification;The WaitForNtmsNotification function waits for the next object change notification.;HANDLE hNotification, LPNTMS_NOTIFICATIONINFORMATION lpNotificationInformation, DWORD dwTimeout
WaitForNtmsOperatorRequest;The WaitForNtmsOperatorRequest function waits for the specified RSM operator request.;HANDLE hSession, LPNTMS_GUID lpRequestId, DWORD dwTimeout
WaitForSingleObjectEx;Waits until the specified object is in the signaled state, an I/O completion routine or asynchronous procedure call (APC) is queued to the thread, or the time-out interval elapses.;HANDLE hHandle, DWORD dwMilliseconds, BOOL bAlertable
WaitForSingleObject;Waits until the specified object is in the signaled state or the time-out interval elapses.;HANDLE hHandle, DWORD dwMilliseconds
WaitForThreadpoolIoCallbacks;Waits for outstanding I/O completion callbacks to complete and optionally cancels pending callbacks that have not yet started to execute.;PTP_IO pio, BOOL fCancelPendingCallbacks
WaitForThreadpoolTimerCallbacks;Waits for outstanding timer callbacks to complete and optionally cancels pending callbacks that have not yet started to execute.;PTP_TIMER pti, BOOL fCancelPendingCallbacks
WaitForThreadpoolWaitCallbacks;Waits for outstanding wait callbacks to complete and optionally cancels pending callbacks that have not yet started to execute.;PTP_WAIT pwa, BOOL fCancelPendingCallbacks
WaitForThreadpoolWorkCallbacks;Waits for outstanding work callbacks to complete and optionally cancels pending callbacks that have not yet started to execute.;PTP_WORK pwk, BOOL fCancelPendingCallbacks
WaitMessage;Yields control to other threads when a thread has no other messages in its message queue. The WaitMessage function suspends the thread and does not return until a new message is placed in the thread's message queue.;
WaitNamedPipeA;Waits until either a time-out interval elapses or an instance of the specified named pipe is available for connection (that is, the pipe's server process has a pending ConnectNamedPipe operation on the pipe).;LPCSTR lpNamedPipeName, DWORD nTimeOut
WaitOnAddress;Waits for the value at the specified address to change.;volatile VOID *Address, PVOID CompareAddress, SIZE_T AddressSize, DWORD dwMilliseconds
WakeAllConditionVariable;Wake all threads waiting on the specified condition variable.;PCONDITION_VARIABLE ConditionVariable
WakeByAddressAll;Wakes all threads that are waiting for the value of an address to change.;PVOID Address
WakeByAddressSingle;Wakes one thread that is waiting for the value of an address to change.;PVOID Address
WakeConditionVariable;Wake a single thread waiting on the specified condition variable.;PCONDITION_VARIABLE ConditionVariable
waveInAddBuffer;The waveInAddBuffer function sends an input buffer to the given waveform-audio input device. When the buffer is filled, the application is notified.;HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh
waveInClose;The waveInClose function closes the given waveform-audio input device.;HWAVEIN hwi
waveInGetDevCaps;The waveInGetDevCaps function retrieves the capabilities of a given waveform-audio input device.;UINT uDeviceID, LPWAVEINCAPS pwic, UINT cbwic
waveInGetErrorText;The waveInGetErrorText function retrieves a textual description of the error identified by the given error number.;MMRESULT mmrError, LPSTR pszText, UINT cchText
waveInGetID;The waveInGetID function gets the device identifier for the given waveform-audio input device.;HWAVEIN hwi, LPUINT puDeviceID
waveInGetNumDevs;The waveInGetNumDevs function returns the number of waveform-audio input devices present in the system.;
waveInGetPosition;waveInGetPosition is no longer supported for use as of Windows Vista.;HWAVEIN hwi, LPMMTIME pmmt, UINT cbmmt
waveInMessage;The waveInMessage function sends messages to the waveform-audio input device drivers.;HWAVEIN hwi, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2
waveInOpen;The waveInOpen function opens the given waveform-audio input device for recording.;LPHWAVEIN phwi, UINT uDeviceID, LPCWAVEFORMATEX pwfx, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen
waveInPrepareHeader;The waveInPrepareHeader function prepares a buffer for waveform-audio input.;HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh
waveInReset;The waveInReset function stops input on the given waveform-audio input device and resets the current position to zero. All pending buffers are marked as done and returned to the application.;HWAVEIN hwi
waveInStart;The waveInStart function starts input on the given waveform-audio input device.;HWAVEIN hwi
waveInStop;The waveInStop function stops waveform-audio input.;HWAVEIN hwi
waveInUnprepareHeader;The waveInUnprepareHeader function cleans up the preparation performed by the waveInPrepareHeader function.;HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh
waveOutBreakLoop;The waveOutBreakLoop function breaks a loop on the given waveform-audio output device and allows playback to continue with the next block in the driver list.;HWAVEOUT hwo
waveOutClose;The waveOutClose function closes the given waveform-audio output device.;HWAVEOUT hwo
waveOutGetDevCaps;The waveOutGetDevCaps function retrieves the capabilities of a given waveform-audio output device.;UINT uDeviceID, LPWAVEOUTCAPS pwoc, UINT cbwoc
waveOutGetErrorText;The waveOutGetErrorText function retrieves a textual description of the error identified by the given error number.;MMRESULT mmrError, LPSTR pszText, UINT cchText
waveOutGetID;The waveOutGetID function retrieves the device identifier for the given waveform-audio output device.;HWAVEOUT hwo, LPUINT puDeviceID
waveOutGetNumDevs;The waveOutGetNumDevs function retrieves the number of waveform-audio output devices present in the system.;
waveOutGetPitch;The waveOutGetPitch function retrieves the current pitch setting for the specified waveform-audio output device.;HWAVEOUT hwo, LPDWORD pdwPitch
waveOutGetPlaybackRate;The waveOutGetPlaybackRate function retrieves the current playback rate for the specified waveform-audio output device.;HWAVEOUT hwo, LPDWORD pdwRate
waveOutGetPosition;The waveOutGetPosition function retrieves the current playback position of the given waveform-audio output device.;HWAVEOUT hwo, LPMMTIME pmmt, UINT cbmmt
waveOutGetVolume;The waveOutGetVolume function retrieves the current volume level of the specified waveform-audio output device.;HWAVEOUT hwo, LPDWORD pdwVolume
waveOutMessage;The waveOutMessage function sends messages to the waveform-audio output device drivers.;HWAVEOUT hwo, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2
waveOutOpen;The waveOutOpen function opens the given waveform-audio output device for playback.;LPHWAVEOUT phwo, UINT uDeviceID, LPCWAVEFORMATEX pwfx, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen
waveOutPause;The waveOutPause function pauses playback on the given waveform-audio output device. The current position is saved. Use the waveOutRestart function to resume playback from the current position.;HWAVEOUT hwo
waveOutPrepareHeader;The waveOutPrepareHeader function prepares a waveform-audio data block for playback.;HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh
waveOutReset;The waveOutReset function stops playback on the given waveform-audio output device and resets the current position to zero. All pending playback buffers are marked as done (WHDR_DONE) and returned to the application.;HWAVEOUT hwo
waveOutRestart;The waveOutRestart function resumes playback on a paused waveform-audio output device.;HWAVEOUT hwo
waveOutSetPitch;The waveOutSetPitch function sets the pitch for the specified waveform-audio output device.;HWAVEOUT hwo, DWORD dwPitch
waveOutSetPlaybackRate;The waveOutSetPlaybackRate function sets the playback rate for the specified waveform-audio output device.;HWAVEOUT hwo, DWORD dwRate
waveOutSetVolume;The waveOutSetVolume function sets the volume level of the specified waveform-audio output device.;HWAVEOUT hwo, DWORD dwVolume
waveOutUnprepareHeader;The waveOutUnprepareHeader function cleans up the preparation performed by the waveOutPrepareHeader function. This function must be called after the device driver is finished with a data block. You must call this function before freeing the buffer.;HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh
waveOutWrite;The waveOutWrite function sends a data block to the given waveform-audio output device.;HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh
WcmFreeMemory;Is used to release memory resources allocated by the WCM functions.;__deallocate
WcmGetProfileList;Retrieves a list of profiles in preferred order.;PVOID pReserved, WCM_PROFILE_INFO_LIST **ppProfileList
WcmQueryProperty;Retrieves the value of a specified WCM property.;const GUID *pInterface, LPCWSTR strProfileName, WCM_PROPERTY Property, PVOID pReserved, PDWORD pdwDataSize, PBYTE *ppData
WcmSetProfileList;Reorders a profile list or a subset of a profile list.;WCM_PROFILE_INFO_LIST *pProfileList, DWORD dwPosition, BOOL fIgnoreUnknownProfiles, PVOID pReserved
WcmSetProperty;Sets the value of a WCM property.;const GUID *pInterface, LPCWSTR strProfileName, WCM_PROPERTY Property, PVOID pReserved, DWORD dwDataSize, const BYTE *pbData
WebSocketAbortHandle;Aborts a WebSocket session handle created by WebSocketCreateClientHandle or WebSocketCreateServerHandle.;WEB_SOCKET_HANDLE hWebSocket
WebSocketBeginClientHandshake;Begins the client-side handshake.;WEB_SOCKET_HANDLE hWebSocket, PCSTR *pszSubprotocols, ULONG ulSubprotocolCount, PCSTR *pszExtensions, ULONG ulExtensionCount, const PWEB_SOCKET_HTTP_HEADER pInitialHeaders, ULONG ulInitialHeaderCount, PWEB_SOCKET_HTTP_HEADER *pAdditionalHeaders, ULONG *pulAdditionalHeaderCount
WebSocketBeginServerHandshake;Begins the server-side handshake.;WEB_SOCKET_HANDLE hWebSocket, PCSTR pszSubprotocolSelected, PCSTR *pszExtensionSelected, ULONG ulExtensionSelectedCount, const PWEB_SOCKET_HTTP_HEADER pRequestHeaders, ULONG ulRequestHeaderCount, PWEB_SOCKET_HTTP_HEADER *pResponseHeaders, ULONG *pulResponseHeaderCount
WebSocketCompleteAction;Completes an action started by WebSocketGetAction.;WEB_SOCKET_HANDLE hWebSocket, PVOID pvActionContext, ULONG ulBytesTransferred
WebSocketCreateClientHandle;Creates a client-side WebSocket session handle.;const PWEB_SOCKET_PROPERTY pProperties, ULONG ulPropertyCount, WEB_SOCKET_HANDLE *phWebSocket
WebSocketCreateServerHandle;Creates a server-side WebSocket session handle.;const PWEB_SOCKET_PROPERTY pProperties, ULONG ulPropertyCount, WEB_SOCKET_HANDLE *phWebSocket
WebSocketDeleteHandle;Deletes a WebSocket session handle created by WebSocketCreateClientHandle or WebSocketCreateServerHandle.;WEB_SOCKET_HANDLE hWebSocket
WebSocketEndClientHandshake;Completes the client-side handshake.;WEB_SOCKET_HANDLE hWebSocket, const PWEB_SOCKET_HTTP_HEADER pResponseHeaders, ULONG ulReponseHeaderCount, ULONG *pulSelectedExtensions, ULONG *pulSelectedExtensionCount, ULONG *pulSelectedSubprotocol
WebSocketEndServerHandshake;Completes the server-side handshake.;WEB_SOCKET_HANDLE hWebSocket
WebSocketGetAction;Returns an action from a call to WebSocketSend, WebSocketReceive or WebSocketCompleteAction.;WEB_SOCKET_HANDLE hWebSocket, WEB_SOCKET_ACTION_QUEUE eActionQueue, WEB_SOCKET_BUFFER *pDataBuffers, ULONG *pulDataBufferCount, WEB_SOCKET_ACTION *pAction, WEB_SOCKET_BUFFER_TYPE *pBufferType, PVOID *pvApplicationContext, PVOID *pvActionContext
WebSocketGetGlobalProperty;Gets a single WebSocket property.;WEB_SOCKET_PROPERTY_TYPE eType, PVOID pvValue, ULONG *ulSize
WebSocketReceive;Adds a receive operation to the protocol component operation queue.;WEB_SOCKET_HANDLE hWebSocket, WEB_SOCKET_BUFFER *pBuffer, PVOID pvContext
WebSocketSend;Adds a send operation to the protocol component operation queue.;WEB_SOCKET_HANDLE hWebSocket, WEB_SOCKET_BUFFER_TYPE BufferType, WEB_SOCKET_BUFFER *pBuffer, PVOID Context
WFDCancelOpenSession;Indicates that the application wants to cancel a pending WFDStartOpenSession function that has not completed.;HANDLE hSessionHandle
WFDCloseHandle;Closes a handle to the Wi-Fi Direct service.;HANDLE hClientHandle
WFDCloseSession;Closes a session after a previously successful call to the WFDStartOpenSession function.;HANDLE hSessionHandle
WFDOpenHandle;Opens a handle to the Wi-Fi Direct service and negotiates a version of the Wi-FI Direct API to use.;DWORD dwClientVersion, PDWORD pdwNegotiatedVersion, PHANDLE phClientHandle
WFDOpenLegacySession;Retrieves and applies a stored profile for a Wi-Fi Direct legacy device.;HANDLE hClientHandle, PDOT11_MAC_ADDRESS pLegacyMacAddress, HANDLE *phSessionHandle, GUID *pGuidSessionInterface
WFDStartOpenSession;Starts an on-demand connection to a specific Wi-Fi Direct device, which has been previously paired through the Windows Pairing experience.;HANDLE hClientHandle, PDOT11_MAC_ADDRESS pDeviceAddress, PVOID pvContext, WFD_OPEN_SESSION_COMPLETE_CALLBACK pfnCallback, PHANDLE phSessionHandle
WFDUpdateDeviceVisibility;Updates device visibility for the Wi-Fi Direct device address for a given installed Wi-Fi Direct device node.;PDOT11_MAC_ADDRESS pDeviceAddress
wglCopyContext;The wglCopyContext function copies selected groups of rendering states from one OpenGL rendering context to another.;HGLRC , HGLRC , UINT
wglCreateContext;The wglCreateContext function creates a new OpenGL rendering context, which is suitable for drawing on the device referenced by hdc. The rendering context has the same pixel format as the device context.;HDC Arg1
wglCreateLayerContext;The wglCreateLayerContext function creates a new OpenGL rendering context for drawing to a specified layer plane on a device context.;HDC , int
wglDeleteContext;The wglDeleteContext function deletes a specified OpenGL rendering context.;HGLRC Arg1
wglDescribeLayerPlane;The wglDescribeLayerPlane function obtains information about the layer planes of a given pixel format.;HDC , int , int , UINT , LPLAYERPLANEDESCRIPTOR
wglGetCurrentContext;The wglGetCurrentContext function obtains a handle to the current OpenGL rendering context of the calling thread.;
wglGetCurrentDC;The wglGetCurrentDC function obtains a handle to the device context that is associated with the current OpenGL rendering context of the calling thread.;
wglGetLayerPaletteEntries;Retrieves the palette entries from a given color-index layer plane for a specified device context.;HDC , int , int , int , COLORREF *
wglGetProcAddress;The wglGetProcAddress function returns the address of an OpenGL extension function for use with the current OpenGL rendering context.;LPCSTR Arg1
wglMakeCurrent;The wglMakeCurrent function makes a specified OpenGL rendering context the calling thread's current rendering context.;HDC , HGLRC
wglRealizeLayerPalette;The wglRealizeLayerPalette function maps palette entries from a given color-index layer plane into the physical palette or initializes the palette of an RGBA layer plane.;HDC , int , BOOL
wglSetLayerPaletteEntries;Sets the palette entries in a given color-index layer plane for a specified device context.;HDC , int , int , int , const COLORREF *
wglShareLists;The wglShareLists function enables multiple OpenGL rendering contexts to share a single display-list space.;HGLRC , HGLRC
wglSwapLayerBuffers;The wglSwapLayerBuffers function swaps the front and back buffers in the overlay, underlay, and main planes of the window referenced by a specified device context.;HDC , UINT
wglUseFontBitmapsA;The wglUseFontBitmaps function creates a set of bitmap display lists for use in the current OpenGL rendering context.;HDC , DWORD , DWORD , DWORD
wglUseFontBitmapsW;The wglUseFontBitmaps function creates a set of bitmap display lists for use in the current OpenGL rendering context.;HDC , DWORD , DWORD , DWORD
wglUseFontOutlinesA;The wglUseFontOutlines function creates a set of display lists, one for each glyph of the currently selected outline font of a device context, for use with the current rendering context.;HDC , DWORD , DWORD , DWORD , FLOAT , FLOAT , int , LPGLYPHMETRICSFLOAT
wglUseFontOutlinesW;The wglUseFontOutlines function creates a set of display lists, one for each glyph of the currently selected outline font of a device context, for use with the current rendering context.;HDC , DWORD , DWORD , DWORD , FLOAT , FLOAT , int , LPGLYPHMETRICSFLOAT
WhichPlatform;WhichPlatform may be altered or unavailable.;
WidenPath;The WidenPath function redefines the current path as the area that would be painted if the path were stroked using the pen currently selected into the given device context.;HDC hdc
WindowFromDC;The WindowFromDC function returns a handle to the window associated with the specified display device context (DC). Output functions that use the specified device context draw into this window.;HDC hDC
WindowFromPhysicalPoint;Retrieves a handle to the window that contains the specified physical point.;POINT Point
WindowFromPoint;Retrieves a handle to the window that contains the specified point.;POINT Point
WindowsCompareStringOrdinal;Compares two specified HSTRING objects and returns an integer that indicates their relative position in a sort order.;HSTRING string1, HSTRING string2, INT32 *result
WindowsConcatString;Concatenates two specified strings.;HSTRING string1, HSTRING string2, HSTRING *newString
WindowsCreateString;Creates a new HSTRING based on the specified source string.;PCNZWCH sourceString, UINT32 length, HSTRING *string
WindowsCreateStringReference;Creates a new string reference based on the specified string.;PCWSTR sourceString, UINT32 length, HSTRING_HEADER *hstringHeader, HSTRING *string
WindowsDeleteStringBuffer;Discards a preallocated string buffer if it was not promoted to an HSTRING.;HSTRING_BUFFER bufferHandle
WindowsDeleteString;Decrements the reference count of a string buffer.;HSTRING string
WindowsDuplicateString;Creates a copy of the specified string.;HSTRING string, HSTRING *newString
WindowsGetStringLen;Gets the length, in Unicode characters, of the specified string.;HSTRING string
WindowsGetStringRawBuffer;Retrieves the backing buffer for the specified string.;HSTRING string, UINT32 *length
WindowsInspectString2;Provides a way to for debuggers to display the value of an Windows Runtime�HSTRING in another address space, remotely, or from a dump.;UINT64 targetHString, USHORT machine, PINSPECT_HSTRING_CALLBACK2 callback, void *context, UINT32 *length, UINT64 *targetStringAddress
WindowsInspectString;Provides a way to for debuggers to display the value of an Windows Runtime�HSTRING in another address space, remotely, or from a dump.;UINT_PTR targetHString, USHORT machine, PINSPECT_HSTRING_CALLBACK callback, void *context, UINT32 *length, UINT_PTR *targetStringAddress
WindowsIsStringEmpty;Indicates whether the specified string is the empty string.;HSTRING string
WindowsPreallocateStringBuffer;Allocates a mutable character buffer for use in HSTRING creation.;UINT32 length, WCHAR **charBuffer, HSTRING_BUFFER *bufferHandle
WindowsPromoteStringBuffer;Creates an HSTRING from the specified HSTRING_BUFFER.;HSTRING_BUFFER bufferHandle, HSTRING *string
WindowsReplaceString;Replaces all occurrences of a set of characters in the specified string with another set of characters to create a new string.;HSTRING string, HSTRING stringReplaced, HSTRING stringReplaceWith, HSTRING *newString
WindowsStringHasEmbeddedNull;Indicates whether the specified string has embedded null characters.;HSTRING string, BOOL *hasEmbedNull
WindowsSubstring;Retrieves a substring from the specified string. The substring starts at the specified character position.;HSTRING string, UINT32 startIndex, HSTRING *newString
WindowsSubstringWithSpecifiedLength;Retrieves a substring from the specified string. The substring starts at a specified character position and has a specified length.;HSTRING string, UINT32 startIndex, UINT32 length, HSTRING *newString
WindowsTrimStringEnd;Removes all trailing occurrences of a specified set of characters from the source string.;HSTRING string, HSTRING trimString, HSTRING *newString
WindowsTrimStringStart;Removes all leading occurrences of a specified set of characters from the source string.;HSTRING string, HSTRING trimString, HSTRING *newString
WinExec;Runs the specified application.;LPCSTR lpCmdLine, UINT uCmdShow
WinHelpA;Launches Windows Help (Winhelp.exe) and passes additional data that indicates the nature of the help requested by the application.;HWND hWndMain, LPCSTR lpszHelp, UINT uCommand, ULONG_PTR dwData
WinHelpW;Launches Windows Help (Winhelp.exe) and passes additional data that indicates the nature of the help requested by the application.;HWND hWndMain, LPCWSTR lpszHelp, UINT uCommand, ULONG_PTR dwData
WinHttpAddRequestHeaders;Adds one or more HTTP request headers to the HTTP request handle.;HINTERNET hRequest, LPCWSTR lpszHeaders, DWORD dwHeadersLength, DWORD dwModifiers
WinHttpCheckPlatform;The WinHttpCheckPlatform function determines whether the current platform is supported by this version of Microsoft Windows HTTP Services (WinHTTP).;
WinHttpCloseHandle;The WinHttpCloseHandle function closes a single ;HINTERNET hInternet
WinHttpConnect;The WinHttpConnect function specifies the initial target server of an HTTP request and returns an HINTERNET connection handle to an HTTP session for that initial target.;HINTERNET hSession, LPCWSTR pswzServerName, INTERNET_PORT nServerPort, DWORD dwReserved
WinHttpCrackUrl;The WinHttpCrackUrl function separates a URL into its component parts such as host name and path.;LPCWSTR pwszUrl, DWORD dwUrlLength, DWORD dwFlags, LPURL_COMPONENTS lpUrlComponents
WinHttpCreateProxyResolver;Creates a handle for use by WinHttpGetProxyForUrlEx.;HINTERNET hSession, HINTERNET *phResolver
WinHttpCreateUrl;Creates a URL from component parts such as the host name and path.;LPURL_COMPONENTS lpUrlComponents, DWORD dwFlags, LPWSTR pwszUrl, LPDWORD pdwUrlLength
WinHttpDetectAutoProxyConfigUrl;Finds the URL for the Proxy Auto-Configuration (PAC) file.;DWORD dwAutoDetectFlags, LPWSTR *ppwstrAutoConfigUrl
WinHttpFreeProxyResult;The WinHttpFreeProxyResult function frees the data retrieved from a previous call to WinHttpGetProxyResult.;WINHTTP_PROXY_RESULT *pProxyResult
WinHttpGetDefaultProxyConfiguration;Retrieves the default WinHTTP proxy configuration from the registry.;WINHTTP_PROXY_INFO *pProxyInfo
WinHttpGetIEProxyConfigForCurrentUser;Retrieves the Internet Explorer proxy configuration for the current user.;WINHTTP_CURRENT_USER_IE_PROXY_CONFIG *pProxyConfig
WinHttpGetProxyForUrlEx;Retrieves the proxy data for the specified URL.;HINTERNET hResolver, PCWSTR pcwszUrl, WINHTTP_AUTOPROXY_OPTIONS *pAutoProxyOptions, DWORD_PTR pContext
WinHttpGetProxyForUrl;Retrieves the proxy data for the specified URL.;HINTERNET hSession, LPCWSTR lpcwszUrl, WINHTTP_AUTOPROXY_OPTIONS *pAutoProxyOptions, WINHTTP_PROXY_INFO *pProxyInfo
WinHttpGetProxyResult;The WinHttpGetProxyResult function retrieves the results of a call to WinHttpGetProxyForUrlEx.;HINTERNET hResolver, WINHTTP_PROXY_RESULT *pProxyResult
WinHttpOpen;Initializes, for an application, the use of WinHTTP functions and returns a WinHTTP-session handle.;LPCWSTR pszAgentW, DWORD dwAccessType, LPCWSTR pszProxyW, LPCWSTR pszProxyBypassW, DWORD dwFlags
WinHttpOpenRequest;The WinHttpOpenRequest function creates an HTTP request handle.;HINTERNET hConnect, LPCWSTR pwszVerb, LPCWSTR pwszObjectName, LPCWSTR pwszVersion, LPCWSTR pwszReferrer, LPCWSTR *ppwszAcceptTypes, DWORD dwFlags
WinHttpQueryAuthSchemes;The WinHttpQueryAuthSchemes function returns the authorization schemes that are supported by the server.;HINTERNET hRequest, LPDWORD lpdwSupportedSchemes, LPDWORD lpdwFirstScheme, LPDWORD pdwAuthTarget
WinHttpQueryDataAvailable;Returns the amount of data, in bytes, available to be read with WinHttpReadData.;HINTERNET hRequest, LPDWORD lpdwNumberOfBytesAvailable
WinHttpQueryHeaders;The WinHttpQueryHeaders function retrieves header information associated with an HTTP request.;HINTERNET hRequest, DWORD dwInfoLevel, LPCWSTR pwszName, LPVOID lpBuffer, LPDWORD lpdwBufferLength, LPDWORD lpdwIndex
WinHttpQueryOption;The WinHttpQueryOption function queries an Internet option on the specified handle.;HINTERNET hInternet, DWORD dwOption, LPVOID lpBuffer, LPDWORD lpdwBufferLength
WinHttpReadData;The WinHttpReadData function reads data from a handle opened by the WinHttpOpenRequest function.;HINTERNET hRequest, LPVOID lpBuffer, DWORD dwNumberOfBytesToRead, LPDWORD lpdwNumberOfBytesRead
WinHttpReceiveResponse;The WinHttpReceiveResponse function waits to receive the response to an HTTP request initiated by WinHttpSendRequest.;HINTERNET hRequest, LPVOID lpReserved
WinHttpResetAutoProxy;Resets the auto-proxy.;HINTERNET hSession, DWORD dwFlags
WinHttpSendRequest;Sends the specified request to the HTTP server.;HINTERNET hRequest, LPCWSTR lpszHeaders, DWORD dwHeadersLength, LPVOID lpOptional, DWORD dwOptionalLength, DWORD dwTotalLength, DWORD_PTR dwContext
WinHttpSetCredentials;The WinHttpSetCredentials function passes the required authorization credentials to the server.;HINTERNET hRequest, DWORD AuthTargets, DWORD AuthScheme, LPCWSTR pwszUserName, LPCWSTR pwszPassword, LPVOID pAuthParams
WinHttpSetDefaultProxyConfiguration;Sets the default WinHTTP proxy configuration in the registry.;WINHTTP_PROXY_INFO *pProxyInfo
WinHttpSetOption;The WinHttpSetOption function sets an Internet option.;HINTERNET hInternet, DWORD dwOption, LPVOID lpBuffer, DWORD dwBufferLength
WinHttpSetStatusCallback;The WinHttpSetStatusCallback function sets up a callback function that WinHTTP can call as progress is made during an operation.;HINTERNET hInternet, WINHTTP_STATUS_CALLBACK lpfnInternetCallback, DWORD dwNotificationFlags, DWORD_PTR dwReserved
WinHttpSetTimeouts;Sets time-outs involved with HTTP transactions.;HINTERNET hInternet, int nResolveTimeout, int nConnectTimeout, int nSendTimeout, int nReceiveTimeout
WinHttpTimeFromSystemTime;Formats a date and time according to the HTTP version 1.0 specification.;const SYSTEMTIME *pst, LPWSTR pwszTime
WinHttpTimeToSystemTime;The WinHttpTimeToSystemTime function takes an HTTP time/date string and converts it to a SYSTEMTIME structure.;LPCWSTR pwszTime, SYSTEMTIME *pst
WinHttpWebSocketClose;Closes a WebSocket connection.;HINTERNET hWebSocket, USHORT usStatus, PVOID pvReason, DWORD dwReasonLength
WinHttpWebSocketCompleteUpgrade;Completes a WebSocket handshake started by WinHttpSendRequest.;HINTERNET hRequest, DWORD_PTR pContext
WinHttpWebSocketQueryCloseStatus;Retrieves the close status sent by a server.;HINTERNET hWebSocket, USHORT *pusStatus, PVOID pvReason, DWORD dwReasonLength, DWORD *pdwReasonLengthConsumed
WinHttpWebSocketReceive;Receives data from a WebSocket connection.;HINTERNET hWebSocket, PVOID pvBuffer, DWORD dwBufferLength, DWORD *pdwBytesRead, WINHTTP_WEB_SOCKET_BUFFER_TYPE *peBufferType
WinHttpWebSocketSend;Sends data over a WebSocket connection.;HINTERNET hWebSocket, WINHTTP_WEB_SOCKET_BUFFER_TYPE eBufferType, PVOID pvBuffer, DWORD dwBufferLength
WinHttpWebSocketShutdown;Sends a close frame to a WebSocket server to close the send channel, but leaves the receive channel open.;HINTERNET hWebSocket, USHORT usStatus, PVOID pvReason, DWORD dwReasonLength
WinHttpWriteData;The WinHttpWriteData function writes request data to an HTTP server.;HINTERNET hRequest, LPCVOID lpBuffer, DWORD dwNumberOfBytesToWrite, LPDWORD lpdwNumberOfBytesWritten
WinMain;The user-provided entry point for a graphical Windows-based application.;HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd
WINNLSEnableIME;Temporarily enables or disables an Input Method Editor (IME) and, at the same time, turns on or off the display of all windows owned by the IME.;HWND , BOOL
WintrustAddActionID;Adds a trust provider action to the user's system.;GUID *pgActionID, DWORD fdwFlags, CRYPT_REGISTER_ACTIONID *psProvInfo
WintrustAddDefaultForUsage;Specifies the default usage identifier and callback information for a provider.;const char *pszUsageOID, CRYPT_PROVIDER_REGDEFUSAGE *psDefUsage
WintrustGetDefaultForUsage;Retrieves the default usage identifier and callback information.;DWORD dwAction, const char *pszUsageOID, CRYPT_PROVIDER_DEFUSAGE *psUsage
WintrustGetRegPolicyFlags;Retrieves policy flags for a policy provider.;DWORD *pdwPolicyFlags
WintrustLoadFunctionPointers;Loads function entry points for a specified action GUID. This function has no associated import library.;GUID *pgActionID, CRYPT_PROVIDER_FUNCTIONS *pPfns
WintrustRemoveActionID;Removes an action added by the WintrustAddActionID function. This function has no associated import library.;GUID *pgActionID
WintrustSetDefaultIncludePEPageHashes;Sets the default setting that determines whether page hashes are included when creating subject interface package (SIP) indirect data for PE files.;BOOL fIncludePEPageHashes
WintrustSetRegPolicyFlags;Sets policy flags for a policy provider.;DWORD dwPolicyFlags
WinUsb_AbortPipe;The WinUsb_AbortPipe function aborts all of the pending transfers for a pipe. This is a synchronous operation.;WINUSB_INTERFACE_HANDLE InterfaceHandle, UCHAR PipeID
WinUsb_ControlTransfer;The WinUsb_ControlTransfer function transmits control data over a default control endpoint.;WINUSB_INTERFACE_HANDLE InterfaceHandle, WINUSB_SETUP_PACKET SetupPacket, PUCHAR Buffer, ULONG BufferLength, PULONG LengthTransferred, LPOVERLAPPED Overlapped
WinUsb_FlushPipe;The WinUsb_FlushPipe function discards any data that is cached in a pipe. This is a synchronous operation.;WINUSB_INTERFACE_HANDLE InterfaceHandle, UCHAR PipeID
WinUsb_Free;The WinUsb_Free function releases all of the resources that WinUsb_Initialize allocated. This is a synchronous operation.;WINUSB_INTERFACE_HANDLE InterfaceHandle
WinUsb_GetAdjustedFrameNumber;The WinUsb_GetAdjustedFrameNumber function computes what the current USB frame number should be based on the frame number value and timestamp.;PULONG CurrentFrameNumber, LARGE_INTEGER TimeStamp
WinUsb_GetAssociatedInterface;The WinUsb_GetAssociatedInterface function retrieves a handle for an associated interface. This is a synchronous operation.;WINUSB_INTERFACE_HANDLE InterfaceHandle, UCHAR AssociatedInterfaceIndex, PWINUSB_INTERFACE_HANDLE AssociatedInterfaceHandle
WinUsb_GetCurrentAlternateSetting;The WinUsb_GetCurrentAlternateSetting function gets the current alternate interface setting for an interface. This is a synchronous operation.;WINUSB_INTERFACE_HANDLE InterfaceHandle, PUCHAR SettingNumber
WinUsb_GetCurrentFrameNumberAndQpc;The WinUsb_GetCurrentFrameNumberAndQpc function retrieves the system query performance counter (QPC) value synchronized with the frame and microframe.;WINUSB_INTERFACE_HANDLE InterfaceHandle, PUSB_FRAME_NUMBER_AND_QPC_FOR_TIME_SYNC_INFORMATION FrameQpcInfo
WinUsb_GetCurrentFrameNumber;The WinUsb_GetCurrentFrameNumber function gets the current frame number for the bus.;WINUSB_INTERFACE_HANDLE InterfaceHandle, PULONG CurrentFrameNumber, LARGE_INTEGER *TimeStamp
WinUsb_GetDescriptor;The WinUsb_GetDescriptor function returns the requested descriptor. This is a synchronous operation.;WINUSB_INTERFACE_HANDLE InterfaceHandle, UCHAR DescriptorType, UCHAR Index, USHORT LanguageID, PUCHAR Buffer, ULONG BufferLength, PULONG LengthTransferred
WinUsb_GetOverlappedResult;The WinUsb_GetOverlappedResult function retrieves the results of an overlapped operation on the specified file.;WINUSB_INTERFACE_HANDLE InterfaceHandle, LPOVERLAPPED lpOverlapped, LPDWORD lpNumberOfBytesTransferred, BOOL bWait
WinUsb_GetPipePolicy;The WinUsb_GetPipePolicy function retrieves the policy for a specific pipe associated with an endpoint on the device. This is a synchronous operation.;WINUSB_INTERFACE_HANDLE InterfaceHandle, UCHAR PipeID, ULONG PolicyType, PULONG ValueLength, PVOID Value
WinUsb_GetPowerPolicy;The WinUsb_GetPowerPolicy function retrieves the power policy for a device. This is a synchronous operation.;WINUSB_INTERFACE_HANDLE InterfaceHandle, ULONG PolicyType, PULONG ValueLength, PVOID Value
WinUsb_Initialize;The WinUsb_Initialize function creates a WinUSB handle for the device specified by a file handle.;HANDLE DeviceHandle, PWINUSB_INTERFACE_HANDLE InterfaceHandle
WinUsb_QueryDeviceInformation;The WinUsb_QueryDeviceInformation function gets information about the physical device that is associated with a WinUSB interface handle.;WINUSB_INTERFACE_HANDLE InterfaceHandle, ULONG InformationType, PULONG BufferLength, PVOID Buffer
WinUsb_QueryInterfaceSettings;The WinUsb_QueryInterfaceSettings function retrieves the interface descriptor for the specified alternate interface settings for a particular interface handle.;WINUSB_INTERFACE_HANDLE InterfaceHandle, UCHAR AlternateInterfaceNumber, PUSB_INTERFACE_DESCRIPTOR UsbAltInterfaceDescriptor
WinUsb_QueryPipeEx;The WinUsb_QueryPipeEx function retrieves extended information about the specified endpoint and the associated pipe for an interface.;WINUSB_INTERFACE_HANDLE InterfaceHandle, UCHAR AlternateSettingNumber, UCHAR PipeIndex, PWINUSB_PIPE_INFORMATION_EX PipeInformationEx
WinUsb_QueryPipe;The WinUsb_QueryPipe function retrieves information about the specified endpoint and the associated pipe for an interface.;WINUSB_INTERFACE_HANDLE InterfaceHandle, UCHAR AlternateInterfaceNumber, UCHAR PipeIndex, PWINUSB_PIPE_INFORMATION PipeInformation
WinUsb_ReadIsochPipeAsap;The WinUsb_ReadIsochPipeAsap function submits a request that reads data from an isochronous OUT endpoint.;WINUSB_ISOCH_BUFFER_HANDLE BufferHandle, ULONG Offset, ULONG Length, BOOL ContinueStream, ULONG NumberOfPackets, PUSBD_ISO_PACKET_DESCRIPTOR IsoPacketDescriptors, LPOVERLAPPED Overlapped
WinUsb_ReadIsochPipe;The WinUsb_ReadIsochPipe function reads data from an isochronous OUT endpoint.;WINUSB_ISOCH_BUFFER_HANDLE BufferHandle, ULONG Offset, ULONG Length, PULONG FrameNumber, ULONG NumberOfPackets, PUSBD_ISO_PACKET_DESCRIPTOR IsoPacketDescriptors, LPOVERLAPPED Overlapped
WinUsb_ReadPipe;The WinUsb_ReadPipe function reads data from the specified pipe.;WINUSB_INTERFACE_HANDLE InterfaceHandle, UCHAR PipeID, PUCHAR Buffer, ULONG BufferLength, PULONG LengthTransferred, LPOVERLAPPED Overlapped
WinUsb_RegisterIsochBuffer;The WinUsb_RegisterIsochBuffer function registers a buffer to be used for isochronous transfers.;WINUSB_INTERFACE_HANDLE InterfaceHandle, UCHAR PipeID, PUCHAR Buffer, ULONG BufferLength, PWINUSB_ISOCH_BUFFER_HANDLE IsochBufferHandle
WinUsb_ResetPipe;The WinUsb_ResetPipe function resets the data toggle and clears the stall condition on a pipe.;WINUSB_INTERFACE_HANDLE InterfaceHandle, UCHAR PipeID
WinUsb_SetCurrentAlternateSetting;The WinUsb_SetCurrentAlternateSetting function sets the alternate setting of an interface.;WINUSB_INTERFACE_HANDLE InterfaceHandle, UCHAR SettingNumber
WinUsb_SetPipePolicy;The WinUsb_SetPipePolicy function sets the policy for a specific pipe associated with an endpoint on the device. This is a synchronous operation.;WINUSB_INTERFACE_HANDLE InterfaceHandle, UCHAR PipeID, ULONG PolicyType, ULONG ValueLength, PVOID Value
WinUsb_SetPowerPolicy;The WinUsb_SetPowerPolicy function sets the power policy for a device.;WINUSB_INTERFACE_HANDLE InterfaceHandle, ULONG PolicyType, ULONG ValueLength, PVOID Value
WinUsb_StartTrackingForTimeSync;The WinUsb_StartTrackingForTimeSync function starts the time synchronization feature in the USB driver stack that gets the associated system QPC time for USB bus frames and microframes.;WINUSB_INTERFACE_HANDLE InterfaceHandle, PUSB_START_TRACKING_FOR_TIME_SYNC_INFORMATION StartTrackingInfo
WinUsb_StopTrackingForTimeSync;The WinUsb_StopTrackingForTimeSync function tops the time synchronization feature in the USB driver stack that gets the associated system QPC time for USB bus frames and microframes.;WINUSB_INTERFACE_HANDLE InterfaceHandle, PUSB_STOP_TRACKING_FOR_TIME_SYNC_INFORMATION StopTrackingInfo
WinUsb_UnregisterIsochBuffer;The WinUsb_UnregisterIsochBuffer function releases all of the resources that WinUsb_RegisterIsochBuffer allocated for isochronous transfers. This is a synchronous operation.;WINUSB_ISOCH_BUFFER_HANDLE IsochBufferHandle
WinUsb_WriteIsochPipeAsap;The WinUsb_WriteIsochPipeAsap submits a request for writing the contents of a buffer to an isochronous OUT endpoint.;WINUSB_ISOCH_BUFFER_HANDLE BufferHandle, ULONG Offset, ULONG Length, BOOL ContinueStream, LPOVERLAPPED Overlapped
WinUsb_WriteIsochPipe;The WinUsb_WriteIsochPipe function writes the contents of a caller-supplied buffer to an isochronous OUT endpoint, starting on a specified frame number.;WINUSB_ISOCH_BUFFER_HANDLE BufferHandle, ULONG Offset, ULONG Length, PULONG FrameNumber, LPOVERLAPPED Overlapped
WinUsb_WritePipe;The WinUsb_WritePipe function writes data to a pipe.;WINUSB_INTERFACE_HANDLE InterfaceHandle, UCHAR PipeID, PUCHAR Buffer, ULONG BufferLength, PULONG LengthTransferred, LPOVERLAPPED Overlapped
WinVerifyTrustEx;Performs a trust verification action on a specified object and takes a pointer to a WINTRUST_DATA structure.;HWND hwnd, GUID *pgActionID, WINTRUST_DATA *pWinTrustData
WinVerifyTrust;Performs a trust verification action on a specified object.;HWND hwnd, GUID *pgActionID, LPVOID pWVTData
WlanAllocateMemory;Allocates memory.;DWORD dwMemorySize
WlanCloseHandle;Closes a connection to the server.;HANDLE hClientHandle, PVOID pReserved
WlanConnect;Attempts to connect to a specific network.;HANDLE hClientHandle, const GUID *pInterfaceGuid, const PWLAN_CONNECTION_PARAMETERS pConnectionParameters, PVOID pReserved
WlanDeleteProfile;Deletes a wireless profile for a wireless interface on the local computer.;HANDLE hClientHandle, const GUID *pInterfaceGuid, LPCWSTR strProfileName, PVOID pReserved
WlanDeviceServiceCommand;Allows an OEM or IHV component to communicate with a device service on a particular wireless LAN interface.;HANDLE hClientHandle, const GUID *pInterfaceGuid, LPGUID pDeviceServiceGuid, DWORD dwOpCode, DWORD dwInBufferSize, PVOID pInBuffer, DWORD dwOutBufferSize, PVOID pOutBuffer, PDWORD pdwBytesReturned
WlanDisconnect;Disconnects an interface from its current network.;HANDLE hClientHandle, const GUID *pInterfaceGuid, PVOID pReserved
WlanEnumInterfaces;Enumerates all of the wireless LAN interfaces currently enabled on the local computer.;HANDLE hClientHandle, PVOID pReserved, PWLAN_INTERFACE_INFO_LIST *ppInterfaceList
WlanExtractPsdIEDataList;Extracts the proximity service discovery (PSD) information element (IE) data list from raw IE data included in a beacon.;HANDLE hClientHandle, DWORD dwIeDataSize, const PBYTE pRawIeData, LPCWSTR strFormat, PVOID pReserved, PWLAN_RAW_DATA_LIST *ppPsdIEDataList
WlanFreeMemory;Frees memory.;PVOID pMemory
WlanGetAvailableNetworkList;Retrieves the list of available networks on a wireless LAN interface.;HANDLE hClientHandle, const GUID *pInterfaceGuid, DWORD dwFlags, PVOID pReserved, PWLAN_AVAILABLE_NETWORK_LIST *ppAvailableNetworkList
WlanGetFilterList;Retrieves a group policy or user permission list.;HANDLE hClientHandle, WLAN_FILTER_LIST_TYPE wlanFilterListType, PVOID pReserved, PDOT11_NETWORK_LIST *ppNetworkList
WlanGetInterfaceCapability;Retrieves the capabilities of an interface.;HANDLE hClientHandle, const GUID *pInterfaceGuid, PVOID pReserved, PWLAN_INTERFACE_CAPABILITY *ppCapability
WlanGetNetworkBssList;Retrieves a list of the basic service set (BSS) entries of the wireless network or networks on a given wireless LAN interface.;HANDLE hClientHandle, const GUID *pInterfaceGuid, const PDOT11_SSID pDot11Ssid, DOT11_BSS_TYPE dot11BssType, BOOL bSecurityEnabled, PVOID pReserved, PWLAN_BSS_LIST *ppWlanBssList
WlanGetProfileCustomUserData;Gets the custom user data associated with a wireless profile.;HANDLE hClientHandle, const GUID *pInterfaceGuid, LPCWSTR strProfileName, PVOID pReserved, DWORD *pdwDataSize, PBYTE *ppData
WlanGetProfileList;Retrieves the list of profiles.;HANDLE hClientHandle, const GUID *pInterfaceGuid, PVOID pReserved, PWLAN_PROFILE_INFO_LIST *ppProfileList
WlanGetProfile;Retrieves all information about a specified wireless profile.;HANDLE hClientHandle, const GUID *pInterfaceGuid, LPCWSTR strProfileName, PVOID pReserved, LPWSTR *pstrProfileXml, DWORD *pdwFlags, DWORD *pdwGrantedAccess
WlanGetSecuritySettings;Gets the security settings associated with a configurable object.;HANDLE hClientHandle, WLAN_SECURABLE_OBJECT SecurableObject, PWLAN_OPCODE_VALUE_TYPE pValueType, LPWSTR *pstrCurrentSDDL, PDWORD pdwGrantedAccess
WlanGetSupportedDeviceServices;Retrieves a list of the supported device services on a given wireless LAN interface.;HANDLE hClientHandle, const GUID *pInterfaceGuid, PWLAN_DEVICE_SERVICE_GUID_LIST *ppDevSvcGuidList
WlanHostedNetworkForceStart;Transitions the wireless Hosted Network to the wlan_hosted_network_active state without associating the request with the application's calling handle.;HANDLE hClientHandle, PWLAN_HOSTED_NETWORK_REASON pFailReason, PVOID pvReserved
WlanHostedNetworkForceStop;Transitions the wireless Hosted Network to the wlan_hosted_network_idle without associating the request with the application's calling handle.;HANDLE hClientHandle, PWLAN_HOSTED_NETWORK_REASON pFailReason, PVOID pvReserved
WlanHostedNetworkInitSettings;Configures and persists to storage the network connection settings (SSID and maximum number of peers, for example) on the wireless Hosted Network if these settings are not already configured.;HANDLE hClientHandle, PWLAN_HOSTED_NETWORK_REASON pFailReason, PVOID pvReserved
WlanHostedNetworkQueryProperty;Queries the current static properties of the wireless Hosted Network.;HANDLE hClientHandle, WLAN_HOSTED_NETWORK_OPCODE OpCode, PDWORD pdwDataSize, PVOID *ppvData, PWLAN_OPCODE_VALUE_TYPE pWlanOpcodeValueType, PVOID pvReserved
WlanHostedNetworkQuerySecondaryKey;Queries the secondary security key that is configured to be used by the wireless Hosted Network.;HANDLE hClientHandle, PDWORD pdwKeyLength, PUCHAR *ppucKeyData, PBOOL pbIsPassPhrase, PBOOL pbPersistent, PWLAN_HOSTED_NETWORK_REASON pFailReason, PVOID pvReserved
WlanHostedNetworkQueryStatus;Queries the current status of the wireless Hosted Network.;HANDLE hClientHandle, PWLAN_HOSTED_NETWORK_STATUS *ppWlanHostedNetworkStatus, PVOID pvReserved
WlanHostedNetworkRefreshSecuritySettings;Refreshes the configurable and auto-generated parts of the wireless Hosted Network security settings.;HANDLE hClientHandle, PWLAN_HOSTED_NETWORK_REASON pFailReason, PVOID pvReserved
WlanHostedNetworkSetProperty;Sets static properties of the wireless Hosted Network.;HANDLE hClientHandle, WLAN_HOSTED_NETWORK_OPCODE OpCode, DWORD dwDataSize, PVOID pvData, PWLAN_HOSTED_NETWORK_REASON pFailReason, PVOID pvReserved
WlanHostedNetworkSetSecondaryKey;Configures the secondary security key that will be used by the wireless Hosted Network.;HANDLE hClientHandle, DWORD dwKeyLength, PUCHAR pucKeyData, BOOL bIsPassPhrase, BOOL bPersistent, PWLAN_HOSTED_NETWORK_REASON pFailReason, PVOID pvReserved
WlanHostedNetworkStartUsing;Starts the wireless Hosted Network.;HANDLE hClientHandle, PWLAN_HOSTED_NETWORK_REASON pFailReason, PVOID pvReserved
WlanHostedNetworkStopUsing;Stops the wireless Hosted Network.;HANDLE hClientHandle, PWLAN_HOSTED_NETWORK_REASON pFailReason, PVOID pvReserved
WlanIhvControl;Provides a mechanism for independent hardware vendor (IHV) control of WLAN drivers or services.;HANDLE hClientHandle, const GUID *pInterfaceGuid, WLAN_IHV_CONTROL_TYPE Type, DWORD dwInBufferSize, PVOID pInBuffer, DWORD dwOutBufferSize, PVOID pOutBuffer, PDWORD pdwBytesReturned
WlanOpenHandle;Opens a connection to the server.;DWORD dwClientVersion, PVOID pReserved, PDWORD pdwNegotiatedVersion, PHANDLE phClientHandle
WlanQueryAutoConfigParameter;Queries for the parameters of the auto configuration service.;HANDLE hClientHandle, WLAN_AUTOCONF_OPCODE OpCode, PVOID pReserved, PDWORD pdwDataSize, PVOID *ppData, PWLAN_OPCODE_VALUE_TYPE pWlanOpcodeValueType
WlanQueryInterface;The WlanQueryInterface function queries various parameters of a specified interface.;HANDLE hClientHandle, const GUID *pInterfaceGuid, WLAN_INTF_OPCODE OpCode, PVOID pReserved, PDWORD pdwDataSize, PVOID *ppData, PWLAN_OPCODE_VALUE_TYPE pWlanOpcodeValueType
WlanReasonCodeToString;Retrieves a string that describes a specified reason code.;DWORD dwReasonCode, DWORD dwBufferSize, PWCHAR pStringBuffer, PVOID pReserved
WlanRegisterDeviceServiceNotification;Allows user mode clients with admin privileges, or User-Mode Driver Framework (UMDF) drivers, to register for unsolicited notifications corresponding to device services that they're interested in.;HANDLE hClientHandle, const PWLAN_DEVICE_SERVICE_GUID_LIST pDevSvcGuidList
WlanRegisterNotification;Is used to register and unregister notifications on all wireless interfaces.;HANDLE hClientHandle, DWORD dwNotifSource, BOOL bIgnoreDuplicate, WLAN_NOTIFICATION_CALLBACK funcCallback, PVOID pCallbackContext, PVOID pReserved, PDWORD pdwPrevNotifSource
WlanRegisterVirtualStationNotification;Is used to register and unregister notifications on a virtual station.;HANDLE hClientHandle, BOOL bRegister, PVOID pReserved
WlanRenameProfile;Renames the specified profile.;HANDLE hClientHandle, const GUID *pInterfaceGuid, LPCWSTR strOldProfileName, LPCWSTR strNewProfileName, PVOID pReserved
WlanSaveTemporaryProfile;Saves a temporary profile to the profile store.;HANDLE hClientHandle, const GUID *pInterfaceGuid, LPCWSTR strProfileName, LPCWSTR strAllUserProfileSecurity, DWORD dwFlags, BOOL bOverWrite, PVOID pReserved
WlanScan;Requests a scan for available networks on the indicated interface.;HANDLE hClientHandle, const GUID *pInterfaceGuid, const PDOT11_SSID pDot11Ssid, const PWLAN_RAW_DATA pIeData, PVOID pReserved
WlanSetAutoConfigParameter;Sets parameters for the automatic configuration service.;HANDLE hClientHandle, WLAN_AUTOCONF_OPCODE OpCode, DWORD dwDataSize, const PVOID pData, PVOID pReserved
WlanSetFilterList;Sets the permit/deny list.;HANDLE hClientHandle, WLAN_FILTER_LIST_TYPE wlanFilterListType, const PDOT11_NETWORK_LIST pNetworkList, PVOID pReserved
WlanSetInterface;Sets user-configurable parameters.;HANDLE hClientHandle, const GUID *pInterfaceGuid, WLAN_INTF_OPCODE OpCode, DWORD dwDataSize, const PVOID pData, PVOID pReserved
WlanSetProfileCustomUserData;Sets the custom user data associated with a profile.;HANDLE hClientHandle, const GUID *pInterfaceGuid, LPCWSTR strProfileName, DWORD dwDataSize, const PBYTE pData, PVOID pReserved
WlanSetProfileEapUserData;Sets the Extensible Authentication Protocol (EAP) user credentials as specified by raw EAP data.;HANDLE hClientHandle, const GUID *pInterfaceGuid, LPCWSTR strProfileName, EAP_METHOD_TYPE eapType, DWORD dwFlags, DWORD dwEapUserDataSize, const LPBYTE pbEapUserData, PVOID pReserved
WlanSetProfileEapXmlUserData;Sets the Extensible Authentication Protocol (EAP) user credentials as specified by an XML string.;HANDLE hClientHandle, const GUID *pInterfaceGuid, LPCWSTR strProfileName, DWORD dwFlags, LPCWSTR strEapXmlUserData, PVOID pReserved
WlanSetProfileList;Sets the preference order of profiles.;HANDLE hClientHandle, const GUID *pInterfaceGuid, DWORD dwItems, LPCWSTR *strProfileNames, PVOID pReserved
WlanSetProfilePosition;Sets the position of a single, specified profile in the preference list.;HANDLE hClientHandle, const GUID *pInterfaceGuid, LPCWSTR strProfileName, DWORD dwPosition, PVOID pReserved
WlanSetProfile;Sets the content of a specific profile.;HANDLE hClientHandle, const GUID *pInterfaceGuid, DWORD dwFlags, LPCWSTR strProfileXml, LPCWSTR strAllUserProfileSecurity, BOOL bOverwrite, PVOID pReserved, DWORD *pdwReasonCode
WlanSetPsdIEDataList;Sets the proximity service discovery (PSD) information element (IE) data list.;HANDLE hClientHandle, LPCWSTR strFormat, const PWLAN_RAW_DATA_LIST pPsdIEDataList, PVOID pReserved
WlanSetSecuritySettings;Sets the security settings for a configurable object.;HANDLE hClientHandle, WLAN_SECURABLE_OBJECT SecurableObject, LPCWSTR strModifiedSDDL
WlanUIEditProfile;Displays the wireless profile user interface (UI).;DWORD dwClientVersion, LPCWSTR wstrProfileName, GUID *pInterfaceGuid, HWND hWnd, WL_DISPLAY_PAGES wlStartPage, PVOID pReserved, PWLAN_REASON_CODE pWlanReasonCode
WlxActivateUserShell;Activates the user shell program.;PVOID pWlxContext, PWSTR pszDesktopName, PWSTR pszMprLogonScript, PVOID pEnvironment
WlxDisconnectNotify;Winlogon calls this function when a Terminal Services network session is disconnected.;PVOID pWlxContext
WlxDisplayLockedNotice;Allows the GINA to display information about the lock, such as who locked the workstation and when it was locked.;PVOID pWlxContext
WlxDisplaySASNotice;Winlogon calls this function when no user is logged on.;PVOID pWlxContext
WlxDisplayStatusMessage;Winlogon calls this function when the GINA DLL should display a message.;PVOID pWlxContext, HDESK hDesktop, DWORD dwOptions, PWSTR pTitle, PWSTR pMessage
WlxGetConsoleSwitchCredentials;Winlogon calls this function to read the currently logged on user's credentials to transparently transfer them to a target session.;PVOID pWlxContext, PVOID pCredInfo
WlxGetStatusMessage;Winlogon calls this function to get the status message being displayed by the GINA DLL.;PVOID pWlxContext, DWORD *pdwOptions, PWSTR pMessage, DWORD dwBufferSize
WlxInitialize;Winlogon calls this function once for each window station present on the computer. Currently, the operating system supports one window station per workstation.;LPWSTR lpWinsta, HANDLE hWlx, PVOID pvReserved, PVOID pWinlogonFunctions, PVOID *pWlxContext
WlxIsLockOk;Winlogon calls this function before attempting to lock the workstation.;PVOID pWlxContext
WlxIsLogoffOk;Winlogon calls this function when the user initiates a logoff operation.;PVOID pWlxContext
WlxLoggedOnSAS;Winlogon calls this function when it receives a secure attention sequence (SAS) event while the user is logged on and the workstation is not locked.;PVOID pWlxContext, DWORD dwSasType, PVOID pReserved
WlxLoggedOutSAS;Winlogon calls this function when it receives a secure attention sequence (SAS) event while no user is logged on.;PVOID pWlxContext, DWORD dwSasType, PLUID pAuthenticationId, PSID pLogonSid, PDWORD pdwOptions, PHANDLE phToken, PWLX_MPR_NOTIFY_INFO pNprNotifyInfo, PVOID *pProfile
WlxLogoff;Winlogon calls this function to notify the GINA of a logoff operation on this workstation, allowing the GINA to perform any logoff operations that may be required.;PVOID pWlxContext
WlxNegotiate;The WlxNegotiate function must be implemented by a replacement GINA DLL. This is the first call made by Winlogon to the GINA DLL. WlxNegotiate allows the GINA to verify that it supports the installed version of Winlogon.;DWORD dwWinlogonVersion, PDWORD pdwDllVersion
WlxNetworkProviderLoad;Winlogon calls this function to collect valid authentication and identification information.;PVOID pWlxContext, PWLX_MPR_NOTIFY_INFO pNprNotifyInfo
WlxReconnectNotify;Winlogon calls this function when a Terminal Services network session is reconnected.;PVOID pWlxContext
WlxRemoveStatusMessage;Winlogon calls this function to tell the GINA DLL to stop displaying the status message.;PVOID pWlxContext
WlxScreenSaverNotify;Winlogon calls this function immediately before a screen saver is activated, allowing the GINA to interact with the screen saver program.;PVOID pWlxContext, BOOL *pSecure
WlxShutdown;Winlogon calls this function just before shutting down, allowing the GINA to perform any shutdown tasks, such as ejecting a smart card from a reader.;PVOID pWlxContext, DWORD ShutdownType
WlxStartApplication;Winlogon calls this function when the system needs an application to be started in the context of the user.;PVOID pWlxContext, PWSTR pszDesktopName, PVOID pEnvironment, PWSTR pszCmdLine
WlxWkstaLockedSAS;Winlogon calls this function when it receives a secure attention sequence (SAS) and the workstation is locked.;PVOID pWlxContext, DWORD dwSasType
WNetAddConnection2A;The WNetAddConnection2 function makes a connection to a network resource and can redirect a local device to the network resource.;LPNETRESOURCEA lpNetResource, LPCSTR lpPassword, LPCSTR lpUserName, DWORD dwFlags
WNetAddConnection2W;The WNetAddConnection2 function makes a connection to a network resource and can redirect a local device to the network resource.;LPNETRESOURCEW lpNetResource, LPCWSTR lpPassword, LPCWSTR lpUserName, DWORD dwFlags
WNetAddConnection3A;The WNetAddConnection3 function makes a connection to a network resource. The function can redirect a local device to the network resource.;HWND hwndOwner, LPNETRESOURCEA lpNetResource, LPCSTR lpPassword, LPCSTR lpUserName, DWORD dwFlags
WNetAddConnection3W;The WNetAddConnection3 function makes a connection to a network resource. The function can redirect a local device to the network resource.;HWND hwndOwner, LPNETRESOURCEW lpNetResource, LPCWSTR lpPassword, LPCWSTR lpUserName, DWORD dwFlags
WNetAddConnectionA;The WNetAddConnection function enables the calling application to connect a local device to a network resource. A successful connection is persistent, meaning that the system automatically restores the connection during subsequent logon operations.;LPCSTR lpRemoteName, LPCSTR lpPassword, LPCSTR lpLocalName
WNetAddConnectionW;The WNetAddConnection function enables the calling application to connect a local device to a network resource. A successful connection is persistent, meaning that the system automatically restores the connection during subsequent logon operations.;LPCWSTR lpRemoteName, LPCWSTR lpPassword, LPCWSTR lpLocalName
WNetCancelConnection2A;The WNetCancelConnection2 function cancels an existing network connection. You can also call the function to remove remembered network connections that are not currently connected.;LPCSTR lpName, DWORD dwFlags, BOOL fForce
WNetCancelConnection2W;The WNetCancelConnection2 function cancels an existing network connection. You can also call the function to remove remembered network connections that are not currently connected.;LPCWSTR lpName, DWORD dwFlags, BOOL fForce
WNetCancelConnectionA;The WNetCancelConnection function cancels an existing network connection.;LPCSTR lpName, BOOL fForce
WNetCancelConnectionW;The WNetCancelConnection function cancels an existing network connection.;LPCWSTR lpName, BOOL fForce
WNetCloseEnum;The WNetCloseEnum function ends a network resource enumeration started by a call to the WNetOpenEnum function.;HANDLE hEnum
WNetConnectionDialog1A;The WNetConnectionDialog1 function brings up a general browsing dialog for connecting to network resources. The function requires a CONNECTDLGSTRUCT to establish the dialog box parameters.;LPCONNECTDLGSTRUCTA lpConnDlgStruct
WNetConnectionDialog1W;The WNetConnectionDialog1 function brings up a general browsing dialog for connecting to network resources. The function requires a CONNECTDLGSTRUCT to establish the dialog box parameters.;LPCONNECTDLGSTRUCTW lpConnDlgStruct
WNetConnectionDialog;The WNetConnectionDialog function starts a general browsing dialog box for connecting to network resources. The function requires a handle to the owner window for the dialog box.;HWND hwnd, DWORD dwType
WNetDisconnectDialog1A;The WNetDisconnectDialog1 function attempts to disconnect a network resource.;LPDISCDLGSTRUCTA lpConnDlgStruct
WNetDisconnectDialog1W;The WNetDisconnectDialog1 function attempts to disconnect a network resource.;LPDISCDLGSTRUCTW lpConnDlgStruct
WNetDisconnectDialog;The WNetDisconnectDialog function starts a general browsing dialog box for disconnecting from network resources. The function requires a handle to the owner window for the dialog box.;HWND hwnd, DWORD dwType
WNetEnumResourceA;The WNetEnumResource function continues an enumeration of network resources that was started by a call to the WNetOpenEnum function.;HANDLE hEnum, LPDWORD lpcCount, LPVOID lpBuffer, LPDWORD lpBufferSize
WNetEnumResourceW;The WNetEnumResource function continues an enumeration of network resources that was started by a call to the WNetOpenEnum function.;HANDLE hEnum, LPDWORD lpcCount, LPVOID lpBuffer, LPDWORD lpBufferSize
WNetGetConnectionA;The WNetGetConnection function retrieves the name of the network resource associated with a local device.;LPCSTR lpLocalName, LPSTR lpRemoteName, LPDWORD lpnLength
WNetGetConnectionW;The WNetGetConnection function retrieves the name of the network resource associated with a local device.;LPCWSTR lpLocalName, LPWSTR lpRemoteName, LPDWORD lpnLength
WNetGetLastErrorA;The WNetGetLastError function retrieves the most recent extended error code set by a WNet function. The network provider reported this error code; it will not generally be one of the errors included in the SDK header file WinError.h.;LPDWORD lpError, LPSTR lpErrorBuf, DWORD nErrorBufSize, LPSTR lpNameBuf, DWORD nNameBufSize
WNetGetLastErrorW;The WNetGetLastError function retrieves the most recent extended error code set by a WNet function. The network provider reported this error code; it will not generally be one of the errors included in the SDK header file WinError.h.;LPDWORD lpError, LPWSTR lpErrorBuf, DWORD nErrorBufSize, LPWSTR lpNameBuf, DWORD nNameBufSize
WNetGetNetworkInformationA;The WNetGetNetworkInformation function returns extended information about a specific network provider whose name was returned by a previous network enumeration.;LPCSTR lpProvider, LPNETINFOSTRUCT lpNetInfoStruct
WNetGetNetworkInformationW;The WNetGetNetworkInformation function returns extended information about a specific network provider whose name was returned by a previous network enumeration.;LPCWSTR lpProvider, LPNETINFOSTRUCT lpNetInfoStruct
WNetGetProviderNameA;The WNetGetProviderName function obtains the provider name for a specific type of network.;DWORD dwNetType, LPSTR lpProviderName, LPDWORD lpBufferSize
WNetGetProviderNameW;The WNetGetProviderName function obtains the provider name for a specific type of network.;DWORD dwNetType, LPWSTR lpProviderName, LPDWORD lpBufferSize
WNetGetResourceInformationA;When provided with a remote path to a network resource, the WNetGetResourceInformation function identifies the network provider that owns the resource and obtains information about the type of the resource.;LPNETRESOURCEA lpNetResource, LPVOID lpBuffer, LPDWORD lpcbBuffer, LPSTR *lplpSystem
WNetGetResourceInformationW;When provided with a remote path to a network resource, the WNetGetResourceInformation function identifies the network provider that owns the resource and obtains information about the type of the resource.;LPNETRESOURCEW lpNetResource, LPVOID lpBuffer, LPDWORD lpcbBuffer, LPWSTR *lplpSystem
WNetGetResourceParentA;The WNetGetResourceParent function returns the parent of a network resource in the network browse hierarchy. Browsing begins at the location of the specified network resource.;LPNETRESOURCEA lpNetResource, LPVOID lpBuffer, LPDWORD lpcbBuffer
WNetGetResourceParentW;The WNetGetResourceParent function returns the parent of a network resource in the network browse hierarchy. Browsing begins at the location of the specified network resource.;LPNETRESOURCEW lpNetResource, LPVOID lpBuffer, LPDWORD lpcbBuffer
WNetGetUniversalNameA;The WNetGetUniversalName function takes a drive-based path for a network resource and returns an information structure that contains a more universal form of the name.;LPCSTR lpLocalPath, DWORD dwInfoLevel, LPVOID lpBuffer, LPDWORD lpBufferSize
WNetGetUniversalNameW;The WNetGetUniversalName function takes a drive-based path for a network resource and returns an information structure that contains a more universal form of the name.;LPCWSTR lpLocalPath, DWORD dwInfoLevel, LPVOID lpBuffer, LPDWORD lpBufferSize
WNetGetUserA;The WNetGetUser function retrieves the current default user name, or the user name used to establish a network connection.;LPCSTR lpName, LPSTR lpUserName, LPDWORD lpnLength
WNetGetUserW;The WNetGetUser function retrieves the current default user name, or the user name used to establish a network connection.;LPCWSTR lpName, LPWSTR lpUserName, LPDWORD lpnLength
WNetOpenEnumA;The WNetOpenEnum function starts an enumeration of network resources or existing connections. You can continue the enumeration by calling the WNetEnumResource function.;DWORD dwScope, DWORD dwType, DWORD dwUsage, LPNETRESOURCEA lpNetResource, LPHANDLE lphEnum
WNetOpenEnumW;The WNetOpenEnum function starts an enumeration of network resources or existing connections. You can continue the enumeration by calling the WNetEnumResource function.;DWORD dwScope, DWORD dwType, DWORD dwUsage, LPNETRESOURCEW lpNetResource, LPHANDLE lphEnum
WNetRestoreConnectionW;The WNetRestoreConnectionW function restores the connection to a network resource. The function prompts the user, if necessary, for a name and password.;HWND hWnd, LPCWSTR lpDevice
WNetSetLastErrorA;Sets extended error information. Network providers should call this function instead of SetLastError.;DWORD err, LPSTR lpError, LPSTR lpProviders
WNetUseConnectionA;The WNetUseConnection function makes a connection to a network resource. The function can redirect a local device to a network resource.;HWND hwndOwner, LPNETRESOURCEA lpNetResource, LPCSTR lpPassword, LPCSTR lpUserId, DWORD dwFlags, LPSTR lpAccessName, LPDWORD lpBufferSize, LPDWORD lpResult
WNetUseConnectionW;The WNetUseConnection function makes a connection to a network resource. The function can redirect a local device to a network resource.;HWND hwndOwner, LPNETRESOURCEW lpNetResource, LPCWSTR lpPassword, LPCWSTR lpUserId, DWORD dwFlags, LPWSTR lpAccessName, LPDWORD lpBufferSize, LPDWORD lpResult
wnsprintfA;Takes a variable-length argument list and returns the values of the arguments as a printf-style formatted string.;PSTR pszDest, int cchDest, PCSTR pszFmt, ...
wnsprintfW;Takes a variable-length argument list and returns the values of the arguments as a printf-style formatted string.;PWSTR pszDest, int cchDest, PCWSTR pszFmt, ...
WnvOpen;Provides a handle to the Windows Network Virtualization (WNV) driver object to be used to request and receive WNV notifications.;
WnvRequestNotification;Requests notification from the Windows Network Virtualization (WNV) driver whenever a certain type of event occurs.;HANDLE WnvHandle, PWNV_NOTIFICATION_PARAM NotificationParam, LPOVERLAPPED Overlapped, PULONG BytesTransferred
WofEnumEntries;Enumerates all the data sources from a specified provider for a specified volume.;PCWSTR VolumeName, ULONG Provider, WofEnumEntryProc EnumProc, PVOID UserData
WofFileEnumFiles;Enumerates all of the files which are compressed with a specified compression algorithm on a specified volume.;PCWSTR VolumeName, ULONG Algorithm, WofEnumFilesProc EnumProc, PVOID UserData
WofGetDriverVersion;Used to query the version of the driver used to support a particular provider.;HANDLE FileOrVolumeHandle, ULONG Provider, PULONG WofVersion
WofIsExternalFile;Used to determine if a file is being backed by a physical file or is backed by a system data provider, and optionally indicates which provider or additional data about the file.;LPCWSTR FilePath, PBOOL IsExternalFile, PULONG Provider, PVOID ExternalFileInfo, PULONG BufferLength
WofSetFileDataLocation;Used to change a file from being backed by a physical file to one backed by a system data provider.;HANDLE FileHandle, ULONG Provider, PVOID ExternalFileInfo, ULONG Length
WofShouldCompressBinaries;Indicates whether compression should be used on a particular volume, and if so, which compression algorithm should be used.;LPCWSTR Volume, PULONG Algorithm
WofWimAddEntry;Adds a single WIM data source to a volume such that files can be created on the volume which are stored within the WIM.;PCWSTR VolumeName, PCWSTR WimPath, DWORD WimType, DWORD WimIndex, PLARGE_INTEGER DataSourceId
WofWimEnumFiles;Enumerates all of the files which are being backed by a specified WIM data source on a specified volume.;PCWSTR VolumeName, LARGE_INTEGER DataSourceId, WofEnumFilesProc EnumProc, PVOID UserData
WofWimRemoveEntry;Removes a single WIM data source from backing files on a volume.;PCWSTR VolumeName, LARGE_INTEGER DataSourceId
WofWimSuspendEntry;Temporarily removes a WIM data source from backing files on a volume until the volume is remounted or the data source is updated with WofWimUpdateEntry.;PCWSTR VolumeName, LARGE_INTEGER DataSourceId
WofWimUpdateEntry;Updates a WIM entry to point to a different WIM file location.;PCWSTR VolumeName, LARGE_INTEGER DataSourceId, PCWSTR NewWimPath
Wow64DisableWow64FsRedirection;Disables file system redirection for the calling thread. File system redirection is enabled by default.;PVOID *OldValue
Wow64EnableWow64FsRedirection;Enables or disables file system redirection for the calling thread.;BOOLEAN Wow64FsEnableRedirection
Wow64GetThreadSelectorEntry;Retrieves a descriptor table entry for the specified selector and WOW64 thread.;HANDLE hThread, DWORD dwSelector, PWOW64_LDT_ENTRY lpSelectorEntry
Wow64RevertWow64FsRedirection;Restores file system redirection for the calling thread.;PVOID OlValue
Wow64SuspendThread;Suspends the specified WOW64 thread.;HANDLE hThread
WriteClassStg;The WriteClassStg function stores the specified class identifier (CLSID) in a storage object.;LPSTORAGE pStg, REFCLSID rclsid
WriteClassStm;The WriteClassStm function stores the specified CLSID in the stream.;LPSTREAM pStm, REFCLSID rclsid
WriteEncryptedFileRaw;Restores (import) encrypted files.;PFE_IMPORT_FUNC pfImportCallback, PVOID pvCallbackContext, PVOID pvContext
WriteFileEx;Writes data to the specified file or input/output (I/O) device. It reports its completion status asynchronously, calling the specified completion routine when writing is completed or canceled and the calling thread is in an alertable wait state.;HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPOVERLAPPED lpOverlapped, LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
WriteFileGather;Retrieves data from an array of buffers and writes the data to a file.;HANDLE hFile, FILE_SEGMENT_ELEMENT [] aSegmentArray, DWORD nNumberOfBytesToWrite, LPDWORD lpReserved, LPOVERLAPPED lpOverlapped
WriteFile;Writes data to the specified file or input/output (I/O) device.;HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped
WritePrivateProfileSectionA;Replaces the keys and values for the specified section in an initialization file.;LPCSTR lpAppName, LPCSTR lpString, LPCSTR lpFileName
WritePrivateProfileSectionW;Replaces the keys and values for the specified section in an initialization file.;LPCWSTR lpAppName, LPCWSTR lpString, LPCWSTR lpFileName
WritePrivateProfileStringA;Copies a string into the specified section of an initialization file.;LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpString, LPCSTR lpFileName
WritePrivateProfileStringW;Copies a string into the specified section of an initialization file.;LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpString, LPCWSTR lpFileName
WritePrivateProfileStructA;Copies data into a key in the specified section of an initialization file. As it copies the data, the function calculates a checksum and appends it to the end of the data.;LPCSTR lpszSection, LPCSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCSTR szFile
WritePrivateProfileStructW;Copies data into a key in the specified section of an initialization file. As it copies the data, the function calculates a checksum and appends it to the end of the data.;LPCWSTR lpszSection, LPCWSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCWSTR szFile
WriteProcessMemory;Writes data to an area of memory in a specified process. The entire area to be written to must be accessible or the operation fails.;HANDLE hProcess, LPVOID lpBaseAddress, LPCVOID lpBuffer, SIZE_T nSize, SIZE_T *lpNumberOfBytesWritten
WriteProfileSectionA;Replaces the contents of the specified section in the Win.ini file with specified keys and values.;LPCSTR lpAppName, LPCSTR lpString
WriteProfileSectionW;Replaces the contents of the specified section in the Win.ini file with specified keys and values.;LPCWSTR lpAppName, LPCWSTR lpString
WriteProfileStringA;Copies a string into the specified section of the Win.ini file.;LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpString
WriteProfileStringW;Copies a string into the specified section of the Win.ini file.;LPCWSTR lpAppName, LPCWSTR lpKeyName, LPCWSTR lpString
WriteTapemark;Writes a specified number of filemarks, setmarks, short filemarks, or long filemarks to a tape device.;HANDLE hDevice, DWORD dwTapemarkType, DWORD dwTapemarkCount, BOOL bImmediate
WSAAccept;The WSAAccept function conditionally accepts a connection based on the return value of a condition function, provides quality of service flow specifications, and allows the transfer of connection data.;SOCKET s, sockaddr *addr, LPINT addrlen, LPCONDITIONPROC lpfnCondition, DWORD_PTR dwCallbackData
WSAAddressToStringA;Converts all components of a sockaddr structure into a human-readable string representation of the address.;LPSOCKADDR lpsaAddress, DWORD dwAddressLength, LPWSAPROTOCOL_INFOA lpProtocolInfo, LPSTR lpszAddressString, LPDWORD lpdwAddressStringLength
WSAAddressToStringW;Converts all components of a sockaddr structure into a human-readable string representation of the address.;LPSOCKADDR lpsaAddress, DWORD dwAddressLength, LPWSAPROTOCOL_INFOW lpProtocolInfo, LPWSTR lpszAddressString, LPDWORD lpdwAddressStringLength
WSAAsyncGetHostByAddr;The WSAAsyncGetHostByAddr function asynchronously retrieves host information that corresponds to an address.Note  The WSAAsyncGetHostByAddr function is not designed to provide parallel resolution of several addresses.;HWND hWnd, u_int wMsg, const char *addr, int len, int type, char *buf, int buflen
WSAAsyncGetHostByName;The WSAAsyncGetHostByName function asynchronously retrieves host information that corresponds to a host name.Note  The WSAAsyncGetHostByName function is not designed to provide parallel resolution of several names.;HWND hWnd, u_int wMsg, const char *name, char *buf, int buflen
WSAAsyncGetProtoByName;The WSAAsyncGetProtoByName function asynchronously retrieves protocol information that corresponds to a protocol name.;HWND hWnd, u_int wMsg, const char *name, char *buf, int buflen
WSAAsyncGetProtoByNumber;The WSAAsyncGetProtoByNumber function asynchronously retrieves protocol information that corresponds to a protocol number.;HWND hWnd, u_int wMsg, int number, char *buf, int buflen
WSAAsyncGetServByName;The WSAAsyncGetServByName function asynchronously retrieves service information that corresponds to a service name and port.;HWND hWnd, u_int wMsg, const char *name, const char *proto, char *buf, int buflen
WSAAsyncGetServByPort;The WSAAsyncGetServByPort function asynchronously retrieves service information that corresponds to a port and protocol.;HWND hWnd, u_int wMsg, int port, const char *proto, char *buf, int buflen
WSAAsyncSelect;Requests Windows message-based notification of network events for a socket.;SOCKET s, HWND hWnd, u_int wMsg, long lEvent
WSACancelAsyncRequest;The WSACancelAsyncRequest function cancels an incomplete asynchronous operation.;HANDLE hAsyncTaskHandle
WSACancelBlockingCall;The WSACancelBlockingCall function has been removed in compliance with the Windows Sockets 2 specification, revision 2.2.0.;
WSACleanup;The WSACleanup function terminates use of the WS2_32.dll.;
WSACloseEvent;The WSACloseEvent function closes an open event object handle.;WSAEVENT hEvent
WSAConnectByList;Establishes a connection to one out of a collection of possible endpoints represented by a set of destination addresses (host names and ports).;SOCKET s, PSOCKET_ADDRESS_LIST SocketAddress, LPDWORD LocalAddressLength, LPSOCKADDR LocalAddress, LPDWORD RemoteAddressLength, LPSOCKADDR RemoteAddress, const timeval *timeout, LPWSAOVERLAPPED Reserved
WSAConnectByNameA;Establishes a connection to a specified host and port.;SOCKET s, LPCSTR nodename, LPCSTR servicename, LPDWORD LocalAddressLength, LPSOCKADDR LocalAddress, LPDWORD RemoteAddressLength, LPSOCKADDR RemoteAddress, const timeval *timeout, LPWSAOVERLAPPED Reserved
WSAConnectByNameW;Establishes a connection to a specified host and port.;SOCKET s, LPWSTR nodename, LPWSTR servicename, LPDWORD LocalAddressLength, LPSOCKADDR LocalAddress, LPDWORD RemoteAddressLength, LPSOCKADDR RemoteAddress, const timeval *timeout, LPWSAOVERLAPPED Reserved
WSAConnect;The WSAConnect function establishes a connection to another socket application, exchanges connect data, and specifies required quality of service based on the specified FLOWSPEC structure.;SOCKET s, const sockaddr *name, int namelen, LPWSABUF lpCallerData, LPWSABUF lpCalleeData, LPQOS lpSQOS, LPQOS lpGQOS
WSACreateEvent;The WSACreateEvent function creates a new event object.;
WSADuplicateSocketA;The WSADuplicateSocket function returns a WSAPROTOCOL_INFO structure that can be used to create a new socket descriptor for a shared socket. The WSADuplicateSocket function cannot be used on a QOS-enabled socket.;SOCKET s, DWORD dwProcessId, LPWSAPROTOCOL_INFOA lpProtocolInfo
WSADuplicateSocketW;The WSADuplicateSocket function returns a WSAPROTOCOL_INFO structure that can be used to create a new socket descriptor for a shared socket. The WSADuplicateSocket function cannot be used on a QOS-enabled socket.;SOCKET s, DWORD dwProcessId, LPWSAPROTOCOL_INFOW lpProtocolInfo
WSAEnumNameSpaceProvidersA;The WSAEnumNameSpaceProviders function retrieves information on available namespace providers.;LPDWORD lpdwBufferLength, LPWSANAMESPACE_INFOA lpnspBuffer
WSAEnumNameSpaceProvidersExA;Retrieves information on available namespace providers.;LPDWORD lpdwBufferLength, LPWSANAMESPACE_INFOEXA lpnspBuffer
WSAEnumNameSpaceProvidersExW;Retrieves information on available namespace providers.;LPDWORD lpdwBufferLength, LPWSANAMESPACE_INFOEXW lpnspBuffer
WSAEnumNameSpaceProvidersW;The WSAEnumNameSpaceProviders function retrieves information on available namespace providers.;LPDWORD lpdwBufferLength, LPWSANAMESPACE_INFOW lpnspBuffer
WSAEnumNetworkEvents;The WSAEnumNetworkEvents function discovers occurrences of network events for the indicated socket, clear internal network event records, and reset event objects (optional).;SOCKET s, WSAEVENT hEventObject, LPWSANETWORKEVENTS lpNetworkEvents
WSAEnumProtocolsA;The WSAEnumProtocols function retrieves information about available transport protocols.;LPINT lpiProtocols, LPWSAPROTOCOL_INFOA lpProtocolBuffer, LPDWORD lpdwBufferLength
WSAEnumProtocolsW;The WSAEnumProtocols function retrieves information about available transport protocols.;LPINT lpiProtocols, LPWSAPROTOCOL_INFOW lpProtocolBuffer, LPDWORD lpdwBufferLength
WSAEventSelect;The WSAEventSelect function specifies an event object to be associated with the specified set of FD_XXX network events.;SOCKET s, WSAEVENT hEventObject, long lNetworkEvents
__WSAFDIsSet;The __WSAFDIsSet function specifies whether a socket is included in a set of socket descriptors.;SOCKET fd, fd_set *
__WSAFDIsSet;The __WSAFDIsSet function specifies whether a socket is included in a set of socket descriptors.;SOCKET , fd_set *
WSAGetLastError;Returns the error status for the last Windows Sockets operation that failed.;
WSAGetOverlappedResult;The WSAGetOverlappedResult function retrieves the results of an overlapped operation on the specified socket.;SOCKET s, LPWSAOVERLAPPED lpOverlapped, LPDWORD lpcbTransfer, BOOL fWait, LPDWORD lpdwFlags
WSAGetQOSByName;The WSAGetQOSByName function initializes a QOS structure based on a named template, or it supplies a buffer to retrieve an enumeration of the available template names.;SOCKET s, LPWSABUF lpQOSName, LPQOS lpQOS
WSAGetServiceClassInfoA;The WSAGetServiceClassInfo function retrieves the class information (schema) pertaining to a specified service class from a specified namespace provider.;LPGUID lpProviderId, LPGUID lpServiceClassId, LPDWORD lpdwBufSize, LPWSASERVICECLASSINFOA lpServiceClassInfo
WSAGetServiceClassInfoW;The WSAGetServiceClassInfo function retrieves the class information (schema) pertaining to a specified service class from a specified namespace provider.;LPGUID lpProviderId, LPGUID lpServiceClassId, LPDWORD lpdwBufSize, LPWSASERVICECLASSINFOW lpServiceClassInfo
WSAGetServiceClassNameByClassIdA;The WSAGetServiceClassNameByClassId function retrieves the name of the service associated with the specified type. This name is the generic service name, like FTP or SNA, and not the name of a specific instance of that service.;LPGUID lpServiceClassId, LPSTR lpszServiceClassName, LPDWORD lpdwBufferLength
WSAGetServiceClassNameByClassIdW;The WSAGetServiceClassNameByClassId function retrieves the name of the service associated with the specified type. This name is the generic service name, like FTP or SNA, and not the name of a specific instance of that service.;LPGUID lpServiceClassId, LPWSTR lpszServiceClassName, LPDWORD lpdwBufferLength
WSAHtonl;The WSAHtonl function converts a u_long from host byte order to network byte order.;SOCKET s, u_long hostlong, u_long *lpnetlong
WSAHtons;The WSAHtons function converts a u_short from host byte order to network byte order.;SOCKET s, u_short hostshort, u_short *lpnetshort
WSAInstallServiceClassA;The WSAInstallServiceClass function registers a service class schema within a namespace.;LPWSASERVICECLASSINFOA lpServiceClassInfo
WSAInstallServiceClassW;The WSAInstallServiceClass function registers a service class schema within a namespace.;LPWSASERVICECLASSINFOW lpServiceClassInfo
WSAIoctl;The WSAIoctl function controls the mode of a socket.;SOCKET s, DWORD dwIoControlCode, LPVOID lpvInBuffer, DWORD cbInBuffer, LPVOID lpvOutBuffer, DWORD cbOutBuffer, LPDWORD lpcbBytesReturned, LPWSAOVERLAPPED lpOverlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
WSAIsBlocking;This function has been removed in compliance with the Windows Sockets 2 specification, revision 2.2.0.;
WSAJoinLeaf;The WSAJoinLeaf function joins a leaf node into a multipoint session, exchanges connect data, and specifies needed quality of service based on the specified FLOWSPEC structures.;SOCKET s, const sockaddr *name, int namelen, LPWSABUF lpCallerData, LPWSABUF lpCalleeData, LPQOS lpSQOS, LPQOS lpGQOS, DWORD dwFlags
WSALookupServiceBeginA;The WSALookupServiceBegin function initiates a client query that is constrained by the information contained within a WSAQUERYSET structure.;LPWSAQUERYSETA lpqsRestrictions, DWORD dwControlFlags, LPHANDLE lphLookup
WSALookupServiceBeginW;The WSALookupServiceBegin function initiates a client query that is constrained by the information contained within a WSAQUERYSET structure.;LPWSAQUERYSETW lpqsRestrictions, DWORD dwControlFlags, LPHANDLE lphLookup
WSALookupServiceEnd;The WSALookupServiceEnd function is called to free the handle after previous calls to WSALookupServiceBegin and WSALookupServiceNext.;HANDLE hLookup
WSALookupServiceNextA;The WSALookupServiceNext function is called after obtaining a handle from a previous call to WSALookupServiceBegin in order to retrieve the requested service information.;HANDLE hLookup, DWORD dwControlFlags, LPDWORD lpdwBufferLength, LPWSAQUERYSETA lpqsResults
WSALookupServiceNextW;The WSALookupServiceNext function is called after obtaining a handle from a previous call to WSALookupServiceBegin in order to retrieve the requested service information.;HANDLE hLookup, DWORD dwControlFlags, LPDWORD lpdwBufferLength, LPWSAQUERYSETW lpqsResults
WSANSPIoctl;Enables developers to make I/O control calls to a registered namespace.;HANDLE hLookup, DWORD dwControlCode, LPVOID lpvInBuffer, DWORD cbInBuffer, LPVOID lpvOutBuffer, DWORD cbOutBuffer, LPDWORD lpcbBytesReturned, LPWSACOMPLETION lpCompletion
WSANtohl;The WSANtohl function converts a u_long from network byte order to host byte order.;SOCKET s, u_long netlong, u_long *lphostlong
WSANtohs;The WSANtohs function converts a u_short from network byte order to host byte order.;SOCKET s, u_short netshort, u_short *lphostshort
WSAPoll;The WSAPoll function determines status of one or more sockets.;LPWSAPOLLFD fdArray, ULONG fds, INT timeout
WSAProviderConfigChange;The WSAProviderConfigChange function notifies the application when the provider configuration is changed.;LPHANDLE lpNotificationHandle, LPWSAOVERLAPPED lpOverlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
WSARecvDisconnect;The WSARecvDisconnect function terminates reception on a socket, and retrieves the disconnect data if the socket is connection oriented.;SOCKET s, LPWSABUF lpInboundDisconnectData
WSARecvEx;Receives data from a connected socket or a bound connectionless socket.;SOCKET s, char *buf, int len, int *flags
WSARecvFrom;Receives a datagram and stores the source address.;SOCKET s, LPWSABUF lpBuffers, DWORD dwBufferCount, LPDWORD lpNumberOfBytesRecvd, LPDWORD lpFlags, sockaddr *lpFrom, LPINT lpFromlen, LPWSAOVERLAPPED lpOverlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
WSARecv;Receives data from a connected socket or a bound connectionless socket.;SOCKET s, LPWSABUF lpBuffers, DWORD dwBufferCount, LPDWORD lpNumberOfBytesRecvd, LPDWORD lpFlags, LPWSAOVERLAPPED lpOverlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
WSARemoveServiceClass;The WSARemoveServiceClass function permanently removes the service class schema from the registry.;LPGUID lpServiceClassId
WSAResetEvent;The WSAResetEvent function resets the state of the specified event object to nonsignaled.;WSAEVENT hEvent
WSASendDisconnect;The WSASendDisconnect function initiates termination of the connection for the socket and sends disconnect data.;SOCKET s, LPWSABUF lpOutboundDisconnectData
WSASendMsg;Sends data and optional control information from connected and unconnected sockets. Note  This function is a Microsoft-specific extension to the Windows Sockets specification. .;SOCKET Handle, LPWSAMSG lpMsg, DWORD dwFlags, LPDWORD lpNumberOfBytesSent, LPWSAOVERLAPPED lpOverlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
WSASend;Sends data on a connected socket.;SOCKET s, LPWSABUF lpBuffers, DWORD dwBufferCount, LPDWORD lpNumberOfBytesSent, DWORD dwFlags, LPWSAOVERLAPPED lpOverlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
WSASendTo;Sends data to a specific destination, using overlapped I/O where applicable.;SOCKET s, LPWSABUF lpBuffers, DWORD dwBufferCount, LPDWORD lpNumberOfBytesSent, DWORD dwFlags, const sockaddr *lpTo, int iTolen, LPWSAOVERLAPPED lpOverlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
WSASetBlockingHook;This function has been removed in compliance with the Windows Sockets 2 specification, revision 2.2.0.;FARPROC lpBlockFunc
WSASetEvent;The WSASetEvent function sets the state of the specified event object to signaled.;WSAEVENT hEvent
WSASetLastError;The WSASetLastError function sets the error code that can be retrieved through the WSAGetLastError function.;int iError
WSASetServiceA;The WSASetService function registers or removes from the registry a service instance within one or more namespaces.;LPWSAQUERYSETA lpqsRegInfo, WSAESETSERVICEOP essoperation, DWORD dwControlFlags
WSASetServiceW;The WSASetService function registers or removes from the registry a service instance within one or more namespaces.;LPWSAQUERYSETW lpqsRegInfo, WSAESETSERVICEOP essoperation, DWORD dwControlFlags
WSASocketA;The WSASocket function creates a socket that is bound to a specific transport-service provider.;int af, int type, int protocol, LPWSAPROTOCOL_INFOA lpProtocolInfo, GROUP g, DWORD dwFlags
WSASocketW;The WSASocket function creates a socket that is bound to a specific transport-service provider.;int af, int type, int protocol, LPWSAPROTOCOL_INFOW lpProtocolInfo, GROUP g, DWORD dwFlags
WSAStartup;Initiates use of the Winsock DLL by a process.;WORD wVersionRequested, LPWSADATA lpWSAData
WSAStartup;Initiates use of the Winsock DLL by a process.;WORD wVersionRequired, LPWSADATA lpWSAData
WSAStringToAddressA;The WSAStringToAddress function converts a network address in its standard text presentation form into its numeric binary form in a sockaddr structure, suitable for passing to Windows Sockets routines that take such a structure.;LPSTR AddressString, INT AddressFamily, LPWSAPROTOCOL_INFOA lpProtocolInfo, LPSOCKADDR lpAddress, LPINT lpAddressLength
WSAStringToAddressW;The WSAStringToAddress function converts a network address in its standard text presentation form into its numeric binary form in a sockaddr structure, suitable for passing to Windows Sockets routines that take such a structure.;LPWSTR AddressString, INT AddressFamily, LPWSAPROTOCOL_INFOW lpProtocolInfo, LPSOCKADDR lpAddress, LPINT lpAddressLength
WSAUnhookBlockingHook;This function has been removed in compliance with the Windows Sockets 2 specification, revision 2.2.0.;
WSAWaitForMultipleEvents;Returns when one or all of the specified event objects are in the signaled state, when the time-out interval expires, or when an I/O completion routine has executed.;DWORD cEvents, const WSAEVENT *lphEvents, BOOL fWaitAll, DWORD dwTimeout, BOOL fAlertable
WscGetSecurityProviderHealth;Gets the aggregate health state of the security provider categories represented by the specified WSC_SECURITY_PROVIDER enumeration values.;DWORD Providers, PWSC_SECURITY_PROVIDER_HEALTH pHealth
WscRegisterForChanges;Registers a callback function to be run when Windows Security Center (WSC) detects a change that could affect the health of one of the security providers.;LPVOID Reserved, PHANDLE phCallbackRegistration, LPTHREAD_START_ROUTINE lpCallbackAddress, PVOID pContext
WscUnRegisterChanges;Cancels a callback registration that was made by a call to the WscRegisterForChanges function.;HANDLE hRegistrationHandle
WSDCreateHttpAddress;Creates an IWSDHttpAddress object.;IWSDHttpAddress **ppAddress
WSDCreateHttpMessageParameters;Creates an IWSDHttpMessageParameters object.;IWSDHttpMessageParameters **ppTxParams
WSDCreateUdpAddress;Creates an IWSDUdpAddress object.;IWSDUdpAddress **ppAddress
WSDCreateUdpMessageParameters;Retrieves a pointer to the IWSDUdpMessageParameters interface.;IWSDUdpMessageParameters **ppTxParams
WSManCloseCommand;Deletes a command and frees the resources that are associated with it.;WSMAN_COMMAND_HANDLE commandHandle, DWORD flags, WSMAN_SHELL_ASYNC *async
WSManCloseOperation;Cancels or closes an asynchronous operation.;WSMAN_OPERATION_HANDLE operationHandle, DWORD flags
WSManCloseSession;Closes a session object.;WSMAN_SESSION_HANDLE session, DWORD flags
WSManCloseShell;Deletes a shell object and frees the resources associated with the shell.;WSMAN_SHELL_HANDLE shellHandle, DWORD flags, WSMAN_SHELL_ASYNC *async
WSManConnectShellCommand;Connects to an existing command running in a shell.;WSMAN_SHELL_HANDLE shell, DWORD flags, PCWSTR commandID, WSMAN_OPTION_SET *options, WSMAN_DATA *connectXml, WSMAN_SHELL_ASYNC *async, WSMAN_COMMAND_HANDLE *command
WSManConnectShell;Connects to an existing server session.;WSMAN_SESSION_HANDLE session, DWORD flags, PCWSTR resourceUri, PCWSTR shellID, WSMAN_OPTION_SET *options, WSMAN_DATA *connectXml, WSMAN_SHELL_ASYNC *async, WSMAN_SHELL_HANDLE *shell
WSManCreateSession;Creates a session object.;WSMAN_API_HANDLE apiHandle, PCWSTR connection, DWORD flags, WSMAN_AUTHENTICATION_CREDENTIALS *serverAuthenticationCredentials, WSMAN_PROXY_INFO *proxyInfo, WSMAN_SESSION_HANDLE *session
WSManCreateShell;Creates a shell object.;WSMAN_SESSION_HANDLE session, DWORD flags, PCWSTR resourceUri, WSMAN_SHELL_STARTUP_INFO *startupInfo, WSMAN_OPTION_SET *options, WSMAN_DATA *createXml, WSMAN_SHELL_ASYNC *async, WSMAN_SHELL_HANDLE *shell
WSManCreateShellEx;Creates a shell object by using the same functionality as the WSManCreateShell function, with the addition of a client-specified shell ID.;WSMAN_SESSION_HANDLE session, DWORD flags, PCWSTR resourceUri, PCWSTR shellId, WSMAN_SHELL_STARTUP_INFO *startupInfo, WSMAN_OPTION_SET *options, WSMAN_DATA *createXml, WSMAN_SHELL_ASYNC *async, WSMAN_SHELL_HANDLE *shell
WSManDeinitialize;Deinitializes the Windows Remote Management client stack.;WSMAN_API_HANDLE apiHandle, DWORD flags
WSManDisconnectShell;Disconnects the network connection of an active shell and its associated commands.;WSMAN_SHELL_HANDLE shell, DWORD flags, WSMAN_SHELL_DISCONNECT_INFO *disconnectInfo, WSMAN_SHELL_ASYNC *async
WSManGetErrorMessage;Retrieves the error messages associated with a particular error and language codes.;WSMAN_API_HANDLE apiHandle, DWORD flags, PCWSTR languageCode, DWORD errorCode, DWORD messageLength, PWSTR message, DWORD *messageLengthUsed
WSManGetSessionOptionAsDword;Gets the value of a session option.;WSMAN_SESSION_HANDLE session, WSManSessionOption option, DWORD *value
WSManGetSessionOptionAsString;Gets the value of a session option.;WSMAN_SESSION_HANDLE session, WSManSessionOption option, DWORD stringLength, PWSTR string, DWORD *stringLengthUsed
WSManInitialize;Initializes the Windows Remote Management Client API.;DWORD flags, WSMAN_API_HANDLE *apiHandle
WSManPluginAuthzOperationComplete;Reports either a successful or failed authorization for a user operation.;WSMAN_SENDER_DETAILS *senderDetails, DWORD flags, PVOID userAuthorizationContext, DWORD errorCode, PCWSTR extendedErrorInformation
WSManPluginAuthzQueryQuotaComplete;Called from the WSManPluginAuthzQueryQuota plug-in entry point and must be called whether or not the plug-in can carry out the request.;WSMAN_SENDER_DETAILS *senderDetails, DWORD flags, WSMAN_AUTHZ_QUOTA *quota, DWORD errorCode, PCWSTR extendedErrorInformation
WSManPluginAuthzUserComplete;Reports either a successful or failed user connection authorization.;WSMAN_SENDER_DETAILS *senderDetails, DWORD flags, PVOID userAuthorizationContext, HANDLE impersonationToken, BOOL userIsAdministrator, DWORD errorCode, PCWSTR extendedErrorInformation
WSManPluginFreeRequestDetails;Releases memory that is allocated for the WSMAN_PLUGIN_REQUEST structure, which is passed into operation plug-in entry points.;WSMAN_PLUGIN_REQUEST *requestDetails
WSManPluginGetOperationParameters;Gets operational information for items such as time-outs and data restrictions that are associated with the operation.;WSMAN_PLUGIN_REQUEST *requestDetails, DWORD flags, WSMAN_DATA *data
WSManPluginOperationComplete;Reports the completion of an operation by all operation entry points except for the WSManPluginStartup and WSManPluginShutdown methods.;WSMAN_PLUGIN_REQUEST *requestDetails, DWORD flags, DWORD errorCode, PCWSTR extendedInformation
WSManPluginReceiveResult;Reports results for the WSMAN_PLUGIN_RECEIVE plug-in call and is used by most shell plug-ins that return results.;WSMAN_PLUGIN_REQUEST *requestDetails, DWORD flags, PCWSTR stream, WSMAN_DATA *streamResult, PCWSTR commandState, DWORD exitCode
WSManPluginReportContext;Reports shell and command context back to the Windows Remote Management (WinRM) infrastructure so that further operations can be performed against the shell and/or command.;WSMAN_PLUGIN_REQUEST *requestDetails, DWORD flags, PVOID context
WSManReceiveShellOutput;Retrieves output from a running command or from the shell.;WSMAN_SHELL_HANDLE shell, WSMAN_COMMAND_HANDLE command, DWORD flags, WSMAN_STREAM_ID_SET *desiredStreamSet, WSMAN_SHELL_ASYNC *async, WSMAN_OPERATION_HANDLE *receiveOperation
WSManReconnectShellCommand;Reconnects a previously disconnected command.;WSMAN_COMMAND_HANDLE commandHandle, DWORD flags, WSMAN_SHELL_ASYNC *async
WSManReconnectShell;Reconnects a previously disconnected shell session. To reconnect the shell session's associated commands, use WSManReconnectShellCommand.;WSMAN_SHELL_HANDLE shell, DWORD flags, WSMAN_SHELL_ASYNC *async
WSManRunShellCommandEx;Provides the same functionality as the WSManRunShellCommand function, with the addition of a command ID option.;WSMAN_SHELL_HANDLE shell, DWORD flags, PCWSTR commandId, PCWSTR commandLine, WSMAN_COMMAND_ARG_SET *args, WSMAN_OPTION_SET *options, WSMAN_SHELL_ASYNC *async, WSMAN_COMMAND_HANDLE *command
WSManRunShellCommand;Starts the execution of a command within an existing shell and does not wait for the completion of the command.;WSMAN_SHELL_HANDLE shell, DWORD flags, PCWSTR commandLine, WSMAN_COMMAND_ARG_SET *args, WSMAN_OPTION_SET *options, WSMAN_SHELL_ASYNC *async, WSMAN_COMMAND_HANDLE *command
WSManSendShellInput;Ipes the input stream to a running command or to the shell.;WSMAN_SHELL_HANDLE shell, WSMAN_COMMAND_HANDLE command, DWORD flags, PCWSTR streamId, WSMAN_DATA *streamData, BOOL endOfStream, WSMAN_SHELL_ASYNC *async, WSMAN_OPERATION_HANDLE *sendOperation
WSManSetSessionOption;Sets an extended set of options for the session.;WSMAN_SESSION_HANDLE session, WSManSessionOption option, WSMAN_DATA *data
WSManSignalShell;Sends a control code to an existing command or to the shell itself.;WSMAN_SHELL_HANDLE shell, WSMAN_COMMAND_HANDLE command, DWORD flags, PCWSTR code, WSMAN_SHELL_ASYNC *async, WSMAN_OPERATION_HANDLE *signalOperation
wsprintfA;Writes formatted data to the specified buffer.;LPSTR , LPCSTR , ...
wsprintfW;Writes formatted data to the specified buffer.;LPWSTR , LPCWSTR , ...
WTHelperCertCheckValidSignature;Checks whether a signature is valid.;CRYPT_PROVIDER_DATA *pProvData
WTHelperCertIsSelfSigned;Checks whether a certificate is self-signed.;DWORD dwEncoding, CERT_INFO *pCert
WTHelperGetProvCertFromChain;Retrieves a trust provider certificate from the certificate chain.;CRYPT_PROVIDER_SGNR *pSgnr, DWORD idxCert
WTHelperGetProvPrivateDataFromChain;Receives a CRYPT_PROVIDER_PRIVDATA structure from the chain by using the provider ID.;CRYPT_PROVIDER_DATA *pProvData, GUID *pgProviderID
WTHelperGetProvSignerFromChain;Retrieves a signer or countersigner by index from the chain.;CRYPT_PROVIDER_DATA *pProvData, DWORD idxSigner, BOOL fCounterSigner, DWORD idxCounterSigner
WTHelperProvDataFromStateData;Retrieves trust provider information from a specified handle.;HANDLE hStateData
WTSGetActiveConsoleSessionId;Retrieves the session identifier of the console session.;
wvnsprintfA;Takes a list of arguments and returns the values of the arguments as a printf-style formatted string.;PSTR pszDest, int cchDest, PCSTR pszFmt, va_list arglist
wvnsprintfW;Takes a list of arguments and returns the values of the arguments as a printf-style formatted string.;PWSTR pszDest, int cchDest, PCWSTR pszFmt, va_list arglist
wvsprintfA;Writes formatted data to the specified buffer using a pointer to a list of arguments.;LPSTR , LPCSTR , va_list arglist
wvsprintfW;Writes formatted data to the specified buffer using a pointer to a list of arguments.;LPWSTR , LPCWSTR , va_list arglist
__set_app_type;Sets the current application type.;int at
ZombifyActCtx;The ZombifyActCtx function deactivates the specified activation context, but does not deallocate it.;HANDLE hActCtx
__p__fmode;Points to the _fmode global variable, which specifies the default file translation mode for file I/O operations.;
__p__commode;Points to the _commode global variable, which specifies the default file commit mode for file I/O operations.;
_controlfp;Gets and sets the floating-point control word.;int new, int mask.;
GetStartupInfoA;Retrieves the contents of the STARTUPINFO structure that was specified when the calling process was created.;LPSTARTUPINFOW lpStartupInfo
GetStdHandle;Retrieves a handle to the specified standard device (standard input, standard output, or standard error).;DWORD nStdHandle
InetPtonW;The InetPton function converts an IPv4 or IPv6 Internet network address in its standard text presentation form into its numeric binary form.;INT Familly, PCWSTR pszAddrString, PVOID pAddrBuf
DeviceIoControl;Sends a control code directly to a specified device driver;HANDLE hDevice,DWORD dwIoControlCode,LPVOID lpInBuffer,DWORD nInBufferSize,LPVOID lpOutBuffer,DWORD nOutBufferSize,LPDWORD lpBytesReturned,LPOVERLAPPED lpOverlapped
OleInitialize;Initializes the COM library on the current apartment;LPVOID pvReserved
SysAllocString;Allocates a new string and copies the passed string into it.;OLECHAR *psz
calloc;Allocates an array in memory with elements initialized to 0.;size_t number,size_t size
MultiByteToWideChar;Maps a character string to a UTF-16 (wide character) string.;INT CodePage,IDWORD dwFlags,LPCCH lpMultiByteStr,int cbMultiByte,LPWSTR lpWideCharStr,int cchWideChar
malloc;Allocates memory blocks.;size_t size
OpenMutexA;Opens an existing named mutex object.;DWORD dwDesiredAccess, BOOL bInheritHandle, LPCWSTR lpName
URLDownloadToCacheFileA;Downloads data to the Internet cache and returns the file name of the cache location for retrieving the bits.;LPUNKNOWN lpUnkcaller,LPCSTR szURL,LPTSTR szFileName,DWORD cchFileName,DWORD dwReserved,IBindStatusCallback pBSC
URLDownloadToFileA;Downloads bits from the Internet and saves them to a file.;LPUNKNOWN pCaller,LPCTSTR szURL,LPCTSTR szFileName,DWORD dwReserved,LPBINDSTATUSCALLBACK lpfnCB
printf;Prints formatted output to the standard output stream.;char format
strncat;Appends the first num characters of source to destination, plus a terminating null-character.;ptr dst, ptr src, size_t size
Process32First;Retrieves information about the first process encountered in a system snapshot.;HANDLE hSnapshot, LPPROCESSENTRY32 lppe
CreateToolhelp32Snapshot;Takes a snapshot of the specified processes, as well as the heaps, modules, and threads used by these processes.;DWORD dwFlags,DWORD th32ProcessID
memset;Sets a buffer to a specified character.;void dest,int c,size_t count
FindResourceW;Determines the location of a resource with the specified type and name in the specified module.;HMODULE hModule, LPCSTR lpName, LPCSTR lpType
